<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="send" noun="EmittedDtesToReceivers" authenticate="anonymous-all">
        <actions>
            <entity-find entity-name="mantle.party.PartyRole" list="internalPartyList">
                <econdition field-name="roleTypeId" value="OrgInternal"/>
            </entity-find>
            <set field="internalPartyIdList" from="internalPartyList.partyId"/>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="ftdList">
                <econdition field-name="issuerPartyId" operator="in" from="internalPartyIdList"/>
                <econdition field-name="statusId" value="Ftd-Issued"/>
                <econdition field-name="sentAuthStatusId" value="Ftd-SentAuth"/>
                <econdition field-name="sentRecStatusId" value="Ftd-NotSentRec"/>
            </entity-find>
            <iterate list="ftdList" entry="dte">
                <service-call name="mchile.DTECommServices.send#DteToReceiver" in-map="[fiscalTaxDocumentId:dte.fiscalTaxDocumentId]" out-map="context" transaction="force-new"/>
            </iterate>
        </actions>
    </service>

    <service verb="send" noun="DteToReceiver">
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <log message="Sending email for fiscalTaxDocumentId: ${fiscalTaxDocumentId}"/>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" for-update="true"/>
            <if condition="!dte"><return error="true" message="Could not find FiscalTaxDocument with id ${fiscalTaxDocumentId}"/></if>
            <entity-find entity-name="mchile.dte.FiscalTaxDocumentContent" list="contentList">
                <econdition field-name="fiscalTaxDocumentId"/>
                <econdition field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
            </entity-find>
            <if condition="contentList.size() != 1"><return error="true" message="Found ${contentList.size()} XML content for fiscalTaxDocumentId ${fiscalTaxDocumentId}, expected 1"/></if>
            <set field="content" from="ec.resource.getLocationReference(contentList.first.contentLocation)"/>
            <service-call name="mchile.DTECommServices.generaEnvio#Documentos" in-map="[rutReceptor:dte.receiverPartyIdValue, organizationPartyId:dte.issuerPartyId, documentIdList:[dte.fiscalTaxDocumentId]]" out-map="envio"/>
            <set field="envioContent" from="ec.resource.getLocationReference(envio.xmlContentLocation)"/>
            <set field="xmlAttachment" from="[attachmentLocation:envioContent.location, fileName:envioContent.fileName, contentType:envioContent.contentType]"/>
            <service-call name="mchile.sii.SIIServices.get#XmlReceptionEmail" in-map="[partyId:dte.receiverPartyId, partyIdValue:dte.receiverPartyIdValue, dtePartyId:dte.issuerPartyId]" out-map="context"/>
            <service-call name="mchile.DTEServices.get#DteInfo" in-map="context" out-map="bodyParameters"/>
            <entity-find-one entity-name="moqui.basic.email.EmailTemplate" value-field="emailTemplate" auto-field-map="[emailTemplateId:'MchDteSendXmlReceiver']"/>
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[toAddresses:xmlReceptionEmailAddress, bccAddresses:'jhp@moit.cl', emailTemplateId:'MchDteSendXmlReceiver',
                    attachments:[xmlAttachment], bodyParameters:bodyParameters+[fiscalTaxDocumentId:fiscalTaxDocumentId, subject:emailTemplate.subject]]"
                    out-map="context"/>
            <if condition="emailMessageId">
                <set field="dte.sentRecStatusId" value="Ftd-SentRec"/>
                <service-call name="create#mchile.dte.FiscalTaxDocumentEmailMessage" in-map="[fiscalTaxDocumentId:dte.fiscalTaxDocumentId, emailMessageId:emailMessageId]"/>
            </if>
            <entity-update value-field="dte"/>
        </actions>
    </service>

    <service verb="process" noun="IncomingDteMessage">
        <implements service="org.moqui.EmailServices.process#EmailEca"/>
        <actions>
            <script>
                import cl.moit.dte.MoquiDTEUtils
                import org.moqui.context.ExecutionContext
            </script>
            <set field="messageId" from="headers.get('message-id')"/>
            <log level="warn" message="Processing email ${messageId}"/>
            <iterate list="bodyPartList" entry="bodyPart">
                <if condition="(bodyPart.contentType.contains('text/plain') || bodyPart.contentType.contains('text/html')) &amp;&amp; bodyPart.filename == null"><then>
                    <if condition="body == null"><then>
                        <set field="body" from="bodyPart.contentText"/>
                    </then><else-if condition="bodyPart.contentType.contains('text/plain')">
                        <if condition="bodyText == null"><then>
                            <set field="bodyText" from="bodyPart.contentText"/>
                        </then><else>
                            <log level="warn" message="More than one bodyPart with type text/plain for mail ${messageId}"/>
                        </else></if>
                    </else-if><else>
                        <log level="warn" message="More than one bodyPart with type text/html for mail ${messageId}"/>
                    </else></if>
                </then><else-if condition="(bodyPart.contentType.contains('text/plain') || bodyPart.contentType.contains('text/html')) &amp;&amp; bodyPart.filename != null">
                    <log level="warn" message="Ignoring bodyPart of type ${bodyPart.contentType} and filename ${filename} for mail ${messageId}"/>
                </else-if><else-if condition="(bodyPart.disposition == 'attachment' || bodyPart.disposition == null) &amp;&amp; bodyPart.filename.endsWith('.xml')">
                    <if condition="bodyPart.contentBytes == null &amp;&amp; bodyPart.contentText == null">
                        <log level="error" message="No contentBytes nor contentText for message ${messageId}"/>
                        <continue/>
                    </if>
                    <script><![CDATA[
                        org.moqui.context.ExecutionContext ec = context.ec
                        contentBytes = bodyPart.contentBytes ?: bodyPart.contentText.getBytes('ISO-8859-1')
                        org.w3c.dom.Document doc = null
                        try {
                            doc = MoquiDTEUtils.parseDocument(contentBytes)
                        } catch (Exception e) {
                            ec.logger.error("Parsing document ${bodyPart.filename} of message ${messageId}: ${e.toString()}")
                            continue
                        }
                        firstTag = doc.getDocumentElement().getNodeName()
                        ec.logger.warn("firstTag: ${firstTag}")
                        generalSignedXPath = null
                        internalSignedXPath = null
                        generalDateXPath = null
                        if (firstTag == 'EnvioDTE') {
                            ec.service.sync().requireNewTransaction(true).name("mchile.DTECommServices.load#EnvioDte").parameters([xml:contentBytes, xmlFilename:bodyPart.filename, attemptProductMatch:'true']).call()
                            ec.message.clearErrors()
                        } else if (firstTag == 'RESULTADO_ENVIO') {
                        } else if (firstTag == 'EnvioRecibos') {
                            // Recibos: aceptacion de los servicios y/o mercaderia para efecto de merito ejecutivo
                            generalSignedXPath = "/sii:EnvioRecibos/sii:SetRecibos"
                            generalDateXPath = "./sii:Caratula/sii:TmstFirmaEnv/text()"
                        } else if (firstTag == 'RespuestaDTE') {
                            // RecepciÃ³n de los DTE
                            generalSignedXPath = "/sii:RespuestaDTE/sii:Resultado"
                            generalDateXPath = "./sii:Caratula/sii:TmstFirmaResp/text()"
                        } else {
                            ec.logger.error("Unrecognized content with filename ${bodyPart.filename} for email ${messageId}, firstTag: ${firstTag}")
                        }
                        if (generalSignedXPath)
                            if (!MoquiDTEUtils.verifySignature(doc, generalSignedXPath, generalDateXPath))
                                ec.message.addError("No se verifica firma en ${generalSignedXPath}")
                        if (internalSignedXPath)
                            if (!MoquiDTEUtils.verifySignature(doc, internalSignedXPath, internalSignedXPath))
                                ec.message.addError("No se verifica firma en ${internalSignedXPath}")
                        ]]></script>
                    <!--
                    <log message="processing bodyPart, firstTag: ${firstTag}"/>
                    <log message="           contentType: ${bodyPart.contentType}"/>
                    <log message="           filename: ${bodyPart.filename}"/>
                    <log message="           disposition: ${bodyPart.disposition}"/>
                    -->
                    <!--
                    ToDo: determine fiscalTaxDocumentIdList and messageTypeEnumId when processing attachments
                    -->
                </else-if><else>
                    <log level="error" message="Ignoring bodyPart of type ${bodyPart.contentType} and filename ${bodyPart.filename}, disposition ${bodyPart.disposition} for mail ${messageId}"/>
                </else></if>
            </iterate>

            <!-- Save Message -->
            <if condition="messageId">
                <entity-find entity-name="moqui.basic.email.EmailMessage" list="emailMessageList">
                    <econdition field-name="emailServerId" ignore-if-empty="true"/>
                    <econdition field-name="messageId"/>
                </entity-find>
                <if condition="emailMessageList"><then>
                    <set field="emailMessageId" from="emailMessageList.first.emailMessageId"/>
                    <log message="Found duplicate message with Message-ID [${messageId}] from server [${emailServerId}]"/>
                </then><else>
                    <service-call name="create#moqui.basic.email.EmailMessage" out-map="context"
                                  in-map="[sentDate:fields.sentDate, receivedDate:fields.receivedDate, statusId:statusId,
                    subject:fields.subject, body:body, bodyText:bodyText,
                    fromAddress:fields.from, toAddresses:fields.toList?.toString(),
                    ccAddresses:fields.ccList?.toString(), bccAddresses:fields.bccList?.toString(),
                    messageId:messageId, emailServerId:emailServerId]"/>
                </else></if>
            </if>

            <iterate list="fiscalTaxDocumentIdList" entry="fiscalTaxDocumentId">
                <service-call name="create#mchile.dte.FiscalTaxDocumentEmailMessage"
                              in-map="[fiscalTaxDocumentId:dte.fiscalTaxDocumentId, emailMessageId:emailMessageId, messageTypeEnumId:messageTypeEnumId]"/>
            </iterate>
        </actions>
    </service>

    <service verb="load" noun="EnvioDte" type="script" location="component://MoquiChile/service/mchile/DTECommServices/loadEnvioDte.groovy">
        <in-parameters>
            <parameter name="createUnknownIssuer" default="true" type="Boolean"/>
            <parameter name="requireIssuerInternalOrg" default="false" type="Boolean"/>
            <parameter name="createUnknownReceiver" default="false" type="Boolean"/>
            <parameter name="requireReceiverInternalOrg" default="false" type="Boolean"/>
            <parameter name="xml" type="Object" required="true"/>
            <parameter name="xmlFileName"/>
            <parameter name="pdf" type="Object"/>
            <parameter name="pdfFileName"/>
            <parameter name="attemptProductMatch" default-value="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resultado" type="Map">
                <parameter name="caratula" type="Map">
                    <parameter name="rutResponde" required="true"/>
                    <parameter name="rutRecibe" required="true"/>
                    <parameter name="nroDetalles" required="true"/>
                    <parameter name="nmbContacto"/>
                    <parameter name="fonoContacto"/>
                    <parameter name="mailContacto"/>
                </parameter>
                <!--
                <parameter name="recepcionEnvio" type="List">
                    <parameter name="recepcionEnvioDetalle" type="Map">
                        <parameter name="nombreArchivo" required="true"/>
                        <parameter name="fechaRecepcion" type="Timestamp" required="true"/>
                        <parameter name="codigoEnvio" required="true"/>
                        <parameter name="digestEnvio" required="true"/>
                        <parameter name="rutEmisorEnvio" required="true"/>
                        <parameter name="rutReceptorEnvio" required="true"/>
                        <parameter name="estadoRecepcion" required="true"/>
                        <parameter name="glosaEstadoRecepcion" required="true"/>
                        <parameter name="numeroDocumentos" type="Integer"/>
                        <parameter name="tipoDocumento" type="Integer" required="true"/>
                        <parameter name="folioDocumento" type="Integer" required="true"/>
                        <parameter name="fechaEmision" required="true"/>
                        <parameter name="rutEmisorDocumento" required="true"/>
                        <parameter name="rutReceptorDocumento" required="true"/>
                        <parameter name="estadoRecepcionDocumento" required="true"/>
                        <parameter name="glosaObservacion" required="true"/>
                    </parameter>
                </parameter>
                -->
                <parameter name="recepcionDte" type="List">
                    <parameter name="recepcionDteDetalle" type="Map">
                        <parameter name="tipoDte" type="Integer" required="true"/>
                        <parameter name="folio" type="Integer" required="true"/>
                        <parameter name="fchEmis" required="true"/>
                        <parameter name="rutEmisor" required="true"/>
                        <parameter name="rutRecep" required="true"/>
                        <parameter name="mntTotal" required="true"/>
                        <parameter name="estadoRecepDte" required="true"/>
                        <parameter name="recepDteGlosa" required="true"/>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
    </service>

    <service verb="generaEnvio" noun="Documentos" type="script" location="component://MoquiChile/service/mchile/DTECommServices/generaEnvio.groovy">
        <description>GeneraciÃ³n de envio documento a partir de facturas ya generadas.</description>
        <in-parameters>
            <parameter name="rutReceptor" default-value="60803000-K"><description>El receptor del envio es el SII</description></parameter>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="documentIdList" required="true" type="List"/>
            <parameter name="saveSinFirma" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="xmlContentLocation"/>
        </out-parameters>
    </service>

    <service verb="enviaSII" noun="Documento"  type="script" location="component://MoquiChile/service/mchile/DTECommServices/enviaSiiDocumento.groovy">
        <description>
            Envio documento a partir de documento envio ya generado
            rutOrganizacion: rut de compaÃ±Ã­a que envÃ­a
            rutEnviador: rut de persona que envÃ­a
            documentoS: nombre de documento a enviar (que puede contener varios)
        </description>
        <in-parameters>
            <parameter name="rutOrganizacion" required="true"/>
            <parameter name="documentLocation" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
    </service>

    <service verb="enviarDirecto" noun="SII">
        <description>
            Servicio para enviar boleta de forma directa al SII, sin armar un envio nuevo
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:organizationPartyId]" out-map="context"/>

            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="contentEv">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
                <select-field field-name="contentLocation"/>
            </entity-find-one>

            <set field="contentLocation" from="contentEv.contentLocation"/>

            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="organizationPartyId"/>
                <econdition field-name="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            </entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="OrganizaciÃ³n $organizationPartyId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:organizationPartyId]" out-map="context"/>

            <service-call name="mchile.DTECommServices.enviaSII#Boleta" in-map="[compaS:rutEmisor, enviadorS:rutEnvia, documentoS:contentLocation, organizationPartyId:organizationPartyId]" out-map="context"/>
            <!-- TODO: Eliminar archivo temporal -->
            <!-- Marcar boleta como enviada -->
            <!-- Se marca DTE como enviada -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>
            <set field="dteEv.sentAuthStatusId" value="Ftd-SentAuthUnverified"/>
            <set field="dteEv.trackId" from="trackId"/>
            <entity-update value-field="dteEv"/>
        </actions>
    </service>

    <service verb="generaEnvio" noun="Boletas" type="script" location="component://MoquiChile/service/mchile/DTEServices/generaEnvioBoletas.groovy">
        <description>
            GeneraciÃ³n de envio documento a partir de facturas ya generadas.
        </description>
        <in-parameters>
            <parameter name="recepS"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="documentIdList" required="true" type="List"/>
            <parameter name="saveSinFirma" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="archivoEnvio"/>
        </out-parameters>
    </service>

    <service verb="marcarEnviados" noun="Documentos">
        <description>
            Marca lista de documentos como enviados, usando el trackid devuelto por el SII
        </description>
        <in-parameters>
            <parameter name="trackId"/>
            <parameter name="documentIdList" required="true" type="List"/>
        </in-parameters>
        <actions>
            <iterate list="documentIdList" entry="documentId">
                <!-- Se marca DTE como enviada -->
                <set field="idDte" from="documentId"/>
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                    <field-map field-name="fiscalTaxDocumentId" from="idDte"/>
                </entity-find-one>
                <set field="dteEv.sentAuthStatusId" value="Ftd-SentAuthUnverified"/>
                <set field="dteEv.trackId" from="trackId"/>
                <entity-update value-field="dteEv"/>
            </iterate>
        </actions>
    </service>

    <service verb="verificaEnSII" noun="Documento">
        <description>
            VerificaciÃ³n en el SII de DTE ya enviado
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="statusSii" required="true"/>
            <parameter name="salida" required="true"/>
            <parameter name="errCode" required="true"/>
        </out-parameters>
        <actions>
            <set field="statusSii" value=""/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:organizationPartyId]" out-map="context"/>
            <service-call name="mchile.DTEServices.get#DteContent"
                          in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml']" out-map="context"/>
            <if condition="!content">
                <return error="true" message="DTE no existe"/>
            </if>
            <set field="envio" from="content"/>
            <set field="salida" value=""/>
            <set field="statusXML" value=""/>
            <script><![CDATA[
                import java.io.FileInputStream
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.HashMap
                import org.apache.xmlbeans.XmlOptions
                import cl.nic.dte.net.ConexionSii
                import cl.nic.dte.util.Utilities
                import cl.sii.siiDte.DTEDocument
                import cl.sii.xmlSchema.RESPUESTADocument

                HashMap<String, String> namespaces = new HashMap<String, String>()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                //DTEDocument doc = DTEDocument.Factory.parse(new FileInputStream(envio), opts)
                DTEDocument doc = DTEDocument.Factory.parse(contentRef.openStream(), opts)
                ConexionSii con = new ConexionSii()

                RESPUESTADocument resp
                if (dteSystemIsProduction) {
                    String token = con.getToken(pkey, certificate)
                    resp = con.getEstadoDTEProduccion(rutEnvia, doc.getDTE().getDocumento(), token)
                } else {
                    String token = con.getTokenCert(pkey, certificate)
                    resp = con.getEstadoDTECertificacion(rutEnvia, doc.getDTE().getDocumento(), token)
                }
                //opts.setSavePrettyPrintIndent(2)
                //opts.setSavePrettyPrint()
                //resp.save(System.out, opts)

                logger.warn("------" + resp.toString())

                statusXML = resp.toString()

                int inicio = statusXML.indexOf("<SII:ESTADO>")
                int fin = statusXML.indexOf("</SII:ESTADO>")

                statusSii = statusXML.substring(inicio + 12, fin)
                ec.logger.warn("STATUS: " + statusSii)

                inicio = statusXML.indexOf("<SII:GLOSA_ERR>")
                fin = statusXML.indexOf("</SII:GLOSA_ERR>")
                salida = statusXML.substring(inicio + 15, fin)

                inicio = statusXML.indexOf("<SII:ERR_CODE>")
                fin = statusXML.indexOf("</SII:ERR_CODE>")
                errCode = statusXML.substring(inicio + 14, fin)
                ec.logger.warn("errCode: ${errCode}")

                ]]></script>
            <if condition="errCode == '0'">
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" for-update="true"/>
                <if condition="dte.sentAuthStatusId == 'Ftd-SentAuthUnverified'">
                    <set field="dte.sentAuthStatusId" value="Ftd-SentAuth"/>
                    <entity-update value-field="dte"/>
                </if>
            </if>
        </actions>
    </service>

    <service verb="verificaEnSII" noun="Boleta">
        <description>
            VerificaciÃ³n en el SII de boleta usando rut empresa, tipo y folio
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="salida" required="true"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:organizationPartyId]" out-map="context"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>

            <service-call name="mchile.DTEServices.get#DteContent"
                          in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml']" out-map="context"/>

            <if condition="!content">
                <return error="true" message="DTE no existe"/>
            </if>
            <set field="envio" from="content"/>

            <set field="salida" value=""/>
            <set field="statusXML" value=""/>

            <set field="tipo" value="39"/>
            <if condition="fiscalTaxDocumentTypeEnumId.equals('Ftdt-41')">
                <set field="tipo" value="41"/>
            </if>

            <!-- Recuperar folio -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="boletaField">
                <select-field field-name="fiscalTaxDocumentNumber"/>
                <select-field field-name="receiverPartyId"/>
                <select-field field-name="receiverPartyIdTypeEnumId"/>
                <select-field field-name="receiverPartyIdValue"/>
            </entity-find-one>
            <set field="folio" from="boletaField.fiscalTaxDocumentNumber"/>
            <set field="receiverPartyId" from="boletaField.receiverPartyId"/>
            <set field="receiverPartyIdTypeEnumId" from="boletaField.receiverPartyIdTypeEnumId"/>
            <set field="rutReceptor" from="boletaField.receiverPartyIdValue"/>
            <set field="invoiceId" from="boletaField.invoiceId"/>

            <if condition="!rutReceptor">
                <return error="true" message="No estÃ¡ definido el rut de receptor en el DTE"/>
            </if>

            <!-- Obtencion de monto desde invoiceId -->
            <set field="monto" value="0"/>
            <set field="fechaEmision" value="23-11-2020"/>

            <!-- Recuperacion de xml para parsear -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="contentField">
                <select-field field-name="contentLocation"/>
            </entity-find-one>
            <if condition="!contentField">
                <return error="true" message="Boleta no tiene XML generado"/>
            </if>
            <set field="xmlDataRef" from="ec.resource.getLocationReference(contentField.contentLocation)"/>
            <script>
                import javax.xml.parsers.*
                import org.w3c.dom.*
                import java.text.DateFormat
                import java.text.SimpleDateFormat
                import java.util.Date

                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()
                DocumentBuilder builder = null
                Document document = null

                builder = factory.newDocumentBuilder()
                document = builder.parse(xmlDataRef.openStream())
                document.getDocumentElement().normalize()
                Element root = document.getDocumentElement()

                NodeList nList = document.getElementsByTagName("MntTotal")
                monto = nList.item(0).getTextContent()

                nList = document.getElementsByTagName("FchEmis")
                fechaEmision = nList.item(0).getTextContent()

                // Formateo de fecha desde YYYY-MM-DD a DD-MM-YYYY
                SimpleDateFormat sourceFmt = new SimpleDateFormat("yyyy-MM-dd")
                SimpleDateFormat targetFmt = new SimpleDateFormat("dd-MM-yyyy")

                Date date1 = sourceFmt.parse(fechaEmision)
                fechaEmision = targetFmt.format(date1)

            </script>

            <script>
                import java.io.FileInputStream
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.HashMap
                import org.apache.xmlbeans.XmlOptions
                import cl.nic.dte.net.ConexionSiiBoleta
                import cl.nic.dte.util.Utilities
                import org.json.simple.JSONObject

                ConexionSiiBoleta con = new ConexionSiiBoleta()


                System.out.println("Folio: " + folio + ", token: " + token)

                // Ejecutar GET https://apicert.sii.cl/boleta.electronica.envio/{rut}-{dv}-{trackid}
                // Se obtiene objeto JSON
                JSONObject resp
                if (dteSystemIsProduction) {
                    String token = con.getToken(pkey, certificate)
                    resp = con.getEstadoBOLETAProduccion(rutEmisor, rutReceptor, monto, fechaEmision, folio, tipo, token)
                } else {
                    String token = con.getTokenCert(pkey, certificate)
                    resp = con.getEstadoBOLETACertificacion(rutEmisor, rutReceptor, monto, fechaEmision, folio, tipo, token)
                }

                //String estado = (String) recp.get("estado")

                salida = resp.toString()
                logger.warn("Salida JSON: " + salida)
            </script>
        </actions>
    </service>

    <service verb="enviaSII" noun="Boleta">
        <description>
            Envio boleta a partir de documento envio ya generado
            compaS: rut de compaÃ±Ã­a que envÃ­a
            enviadorS: rut de persona que envÃ­a
            documentoS: nombre de documento a enviar (que puede contener varios)
        </description>
        <in-parameters>
            <parameter name="compaS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="documentContentLocation" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
        <actions>
            <!-- ValidaciÃ³n rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:organizationPartyId]" out-map="context"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>

            <set field="trackId" value=""/>
            <script>
                import java.io.File
                import java.io.FileInputStream
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import cl.nic.dte.net.ConexionSiiBoleta
                import cl.nic.dte.util.Utilities
                import org.json.simple.JSONObject
                import org.moqui.resource.ResourceReference

                ConexionSiiBoleta con = new ConexionSiiBoleta()
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passS.toCharArray())
                String alias = ks.aliases().nextElement()
                //logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias)
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray())


                String enviadorS = Utilities.getRutFromCertificate(x509)

                ResourceReference documentoRr = ec.resource.getLocationReference(documentContentLocation)
                JSONObject recp
                if (dteSystemIsProduction) {
                    String token = con.getToken(pKey, x509)
                    recp = con.uploadEnvioProduccion(enviadorS, compaS, documentoRr.openStream(), token)
                } else {
                    String token = con.getTokenCert(pKey, x509)
                    recp = con.uploadEnvioCertificacion(enviadorS, compaS, documentoRr.openStream(), token)
                }

                String estado = (String) recp.get("estado")
                trackId = String.valueOf(recp.get("trackid"))

                if (estado.equals("REC")) {
                    logger.warn("Boleta rechazada: " + recp.toString())
                } else if (estado.equals("RPR")) {
                    logger.warn("Boleta aceptada con reparos")
                } else if (estado.equals(RFR)) {
                    logger.warn("Boleta con error en firma")
                } else {
                    logger.warn("Boleta recibida con trackid" + trackId)
                }

            </script>
            <if condition="estado.equals('REC')">
                <then>
                    <return message="Error al enviar al SII"/>
                </then>
                <else-if condition="estado.equals('RFR')">
                    <return message="Error en Firma"/>
                </else-if>
                <else>
                    <return message="Recibo con exito"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="verificaEnvioSII" noun="Boleta">
        <description>
            <!-- TODO -->
            VerificaciÃ³n en el SII de envio con rut y trackid
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="trackId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="salida" required="true"/>
        </out-parameters>
        <actions>
            <set field="statusSii" value=""/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:organizationPartyId]" out-map="context"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>

            <service-call name="mchile.DTEServices.get#DteContent"
                          in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml']" out-map="context"/>

            <if condition="!content">
                <return error="true" message="DTE no existe"/>
            </if>
            <set field="envio" from="content"/>

            <set field="salida" value=""/>
            <set field="statusXML" value=""/>

            <script>
                import java.io.FileInputStream
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.HashMap
                import org.apache.xmlbeans.XmlOptions
                import cl.nic.dte.net.ConexionSiiBoleta
                import cl.nic.dte.util.Utilities
                import org.json.simple.JSONObject

                ConexionSiiBoleta con = new ConexionSiiBoleta()

                String enviadorS = Utilities.getRutFromCertificate(certificate)

                System.out.println("Enviador: " + rutEnvia + ", token: " + token)

                // Ejecutar GET https://apicert.sii.cl/boleta.electronica.envio/{rut}-{dv}-{trackid}
                // Se obtiene objeto JSON
                JSONObject resp
                if (dteSystemIsProduction) {
                    String token = con.getToken(pkey, certificate)
                    resp = con.getEstadoEnvioBOLETAProduccion(rutEmisor, trackId, token)
                } else {
                    String token = con.getTokenCert(pkey, certificate)
                    resp = con.getEstadoEnvioBOLETACertificacion(rutEmisor, trackId, token)
                }

                //String estado = (String) recp.get("estado")
                //trackId = String.valueOf(recp.get("trackid"))

                salida = resp.toString()
                logger.warn("Salida JSON: " + salida)
            </script>
        </actions>
    </service>

    <service verb="marcarNoEnviado" noun="Documento">
        <description>
            Marca una DTE como no enviada al SII
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteEv">
                <return error="true" message="No existe DTE especificada"/>
            </if>

            <set field="dteEv.sentAuthStatusId" value="Ftd-NotSentAuth"/>
            <entity-update value-field="dteEv"/>
        </actions>
    </service>

    <service verb="marcarEnviado" noun="Documento">
        <description>
            Marca una DTE como ya enviada al SII
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteEv">
                <return error="true" message="No existe DTE especificada"/>
            </if>

            <set field="dteEv.sentAuthStatusId" value="Ftd-SentAuth"/>
            <entity-update value-field="dteEv"/>
        </actions>
    </service>

</services>