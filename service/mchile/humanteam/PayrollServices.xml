<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="create" noun="NextPayrollPeriods">
        <in-parameters>
            <parameter name="date" type="Date"/>
            <parameter name="timePeriodTypeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="timePeriodIdList" type="List"/>
        </out-parameters>
        <actions>
            <!--
            <service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="userOrgInfo"/>
            -->
            <entity-find entity-name="mantle.party.PartyRole" list="internalOrgList">
                <econdition field-name="partyRoleTypeEnumId" value="OrgInternal"/>
            </entity-find>
            <set field="timePeriodIdList" from="[]"/>
            <iterate entry="internalOrg" list="internalOrgList">
                <service-call name="mchile.humanteam.PayrollServices.create#PayrollPeriod" in-map="[partyId:internalOrg.partyId]" out-map="out"/>
                <script>timePeriodIdList.add(out.timePeriodId)</script>
            </iterate>
            <script>ec.message.addMessage("Created timePeriods ${timePeriodIdList}")</script>
        </actions>
    </service>

    <service verb="create" noun="PayrollPeriod">
        <in-parameters>
            <parameter name="timePeriodTypeId" default-value="PayrollMonth"/>
            <parameter name="date" type="Timestamp"/>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="timePeriodId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriodType" value-field="timePeriodType"/>
            <if condition="timePeriodType == null"><return error="true" message="Could not find time period type ${timePeriodTypeId}"/></if>
            <!-- find existing time period -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="existingList">
                <econdition field-name="timePeriodTypeId" from="timePeriodTypeId"/>
                <econdition field-name="partyId"/>
                <date-filter valid-date="date"/>
            </entity-find>
            <if condition="existingList">
                <return error="true" message="Error creating Payroll Period of type ${timePeriodTypeId}, existing period for same date (${date}): ${existingList.first.timePeriodId}"/>
            </if>
            <!-- find from and thru dates -->
            <script>
                Calendar cal = Calendar.instance
                cal.setTimeInMillis(date.time)
                cal.set(Calendar.MILLISECOND, 0)
                cal.set(Calendar.SECOND, 0)
                cal.set(Calendar.MINUTE, 0)
                cal.set(Calendar.HOUR, 0)
                if (timePeriodType.lengthUomId == 'TF_mon') {
                    cal.set(Calendar.DAY_OF_MONTH, 1)
                } else {
                    ec.message.addError("Unhandled Uom: ${timePeriodType.lengthUomId}")
                }
                fromDate = new java.sql.Timestamp(cal.time.time)
                cal.add(Calendar.MILLISECOND, -1)
                previousThruDate = new java.sql.Timestamp(cal.time.time)
                if (timePeriodType.lengthUomId == 'TF_mon') {
                    cal.add(Calendar.MONTH, 1)
                }
                thruDate = cal.time
            </script>
            <!-- find previous by dates -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="previousList">
                <econdition field-name="timePeriodTypeId" from="timePeriodTypeId"/>
                <econdition field-name="partyId"/>
                <date-filter valid-date="previousThruDate"/>
            </entity-find>
            <if condition="previousList"><then>
                <service-call name="mantle.party.TimeServices.create#TimePeriod" in-map="[previousPeriodId:previousList.first.timePeriodId]"/>
            </then><else>
                <service-call name="mantle.party.TimeServices.create#TimePeriod" in-map="[partyId:partyId, timePeriodTypeId:timePeriodTypeId, fromDate:fromDate]" out-map="context"/>
            </else></if>
            <service-call name="mchile.humanteam.PayrollServices.get#PayrollPeriodTaxRate" in-map="[timePeriodId:timePeriodId]"/>
        </actions>
    </service>

    <service verb="get" noun="TimePeriod">
        <in-parameters>
            <parameter name="activeOrgId"/>
            <parameter name="timePeriodId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="timePeriodId"/>
            <parameter name="timePeriod"/>
            <parameter name="timePeriodOrgId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.time.TimePeriod" list="periods" limit="1">
                <econdition field-name="timePeriodId" ignore-if-empty="true"/>
                <econdition field-name="timePeriodTypeId" value="PayrollMonth"/>
                <econdition field-name="partyId" from="activeOrgId" ignore-if-empty="true"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <set field="timePeriod" from="periods.first"/>
            <set field="timePeriodId" from="timePeriod?.timePeriodId"/>
            <set field="timePeriodOrgId" from="timePeriod?.partyId"/>
        </actions>
    </service>

    <service verb="get" noun="ParameterValue">
        <in-parameters>
            <parameter name="adjCalcServiceId" default-value="MChile.PayrollPeriodAdjustments"/>
            <parameter name="parameterNameList" required="true" type="List"/>
            <parameter name="validDate" type="Timestamp"/>
            <parameter name="type" default-value="Number"/>
        </in-parameters>
        <out-parameters>
            <parameter name="valueMap" type="Map"/>
        </out-parameters>
        <actions>
            <set field="locale" from="new Locale('en','US')"/>
            <set field="valueMap" from="[:]"/>
            <iterate entry="parameterName" list="parameterNameList">
                <script>outName = parameterName.toLowerCase()[0] + parameterName.substring(1)</script>
                <entity-find entity-name="mantle.humanres.employment.PayrollAdjCalcParameter" list="parameterList">
                    <econdition field-name="adjCalcServiceId"/>
                    <econdition field-name="parameterName"/>
                    <date-filter valid-date="validDate?:ec.user.nowTimestamp"/>
                </entity-find>
                <if condition="parameterList.size() &lt; 1 || parameterList.first.parameterValue == null"><return error="true" message="Could not find parameter ${parameterName}"/></if>
                <script>
                    if (type == 'Number') valueMap.put(outName, ec.l10n.parseNumber(parameterList.first.parameterValue, null, locale))
                    else valueMap.put(parameterName, parameterList.first.parameterValue)
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="PeriodParameters">
        <in-parameters>
            <parameter name="activeOrgId"/>
            <parameter name="timePeriodId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="timePeriodOrgId"/>
            <parameter name="timePeriodId"/>
            <parameter name="periodFromDate" type="Date"/>
            <parameter name="periodThruDate" type="Date"/>
            <parameter name="periodUfValue" type="BigDecimal"/>
            <parameter name="periodUfTitle"/>
            <parameter name="previousUfValue" type="BigDecimal"/>
            <parameter name="previousUfTitle"/>
            <parameter name="periodUtmValue" type="BigDecimal"/>
            <parameter name="periodUtaValue" type="BigDecimal"/>
            <parameter name="topeImponibleAfpCLF" type="BigDecimal"/>
            <parameter name="topeImponibleAfp" type="BigDecimal"/>
            <parameter name="topeImponibleIpsCLF" type="BigDecimal"/>
            <parameter name="topeImponibleIps" type="BigDecimal"/>
            <parameter name="topeImponibleAfcCLF" type="BigDecimal"/>
            <parameter name="topeImponibleAfc" type="BigDecimal"/>
            <parameter name="rentaMinimaGeneralCLP" type="BigDecimal"/>
            <parameter name="rentaMinimaMenoresCLP" type="BigDecimal"/>
            <parameter name="rentaMinimaCasaCLP" type="BigDecimal"/>
            <parameter name="rentaMinimaNoremCLP" type="BigDecimal"/>
            <parameter name="topeApvMensualCLF" type="BigDecimal"/>
            <parameter name="topeApvMensual" type="BigDecimal"/>
            <parameter name="topeApvAnualCLF" type="BigDecimal"/>
            <parameter name="topeApvAnual" type="BigDecimal"/>
            <parameter name="topeDepositoConvenidoAnualCLF" type="BigDecimal"/>
            <parameter name="topeDepositoConvenidoAnual" type="BigDecimal"/>
            <parameter name="tasaAfcContratoIndefinidoEmpleador" type="BigDecimal"/>
            <parameter name="tasaAfcContratoIndefinidoTrabajador" type="BigDecimal"/>
            <parameter name="tasaAfcContratoFijoEmpleador" type="BigDecimal"/>
            <parameter name="tasaAfcContratoFijoTrabajador" type="BigDecimal"/>
            <parameter name="tasaAfcContrato11AnosEmpleador" type="BigDecimal"/>
            <parameter name="tasaAfcContrato11AnosTrabajador" type="BigDecimal"/>
            <parameter name="tasaSis" type="BigDecimal"/>
            <parameter name="tasaTrabajoPesadoEmpleador" type="BigDecimal"/>
            <parameter name="tasaTrabajoPesadoTrabajador" type="BigDecimal"/>
            <parameter name="tasaTrabajoMenosPesadoEmpleador" type="BigDecimal"/>
            <parameter name="tasaTrabajoMenosPesadoTrabajador" type="BigDecimal"/>
            <parameter name="afpRateList" type="List"/>
            <parameter name="asignacionFamiliarList" type="List"/>
            <parameter name="taxRateListMap" type="List">
                <parameter name="taxRateList" type="Map"/>
            </parameter>
        </out-parameters>
        <actions>
            <set field="locale" from="new Locale('en','US')"/>
            <service-call name="mchile.humanteam.PayrollServices.get#TimePeriod" in-map="context" out-map="context"/>
            <if condition="!timePeriod">
                <return error="true" message="Did not find Payroll Time Period"/>
            </if>
            <set field="periodFromDate" from="new java.sql.Timestamp(timePeriod.fromDate.time)"/>
            <set field="periodThruDate" from="new java.sql.Timestamp(timePeriod.thruDate.time)"/>
            <service-call name="mchile.CurrencyServices.get#ExchangeRate" in-map="[fromCurrencyUomId:'CLF', date:periodThruDate]" out-map="periodUf"/>
            <set field="periodUfValue" from="periodUf.value"/>
            <set field="periodUfTitle" from="ec.l10n.format(periodThruDate, '\'al\' dd \'de\' MMMM yyyy')"/>
            <service-call name="mchile.CurrencyServices.get#ExchangeRate" in-map="[fromCurrencyUomId:'CL_UTM', date:periodThruDate]" out-map="periodUtm"/>
            <set field="periodUtmValue" from="periodUtm.value"/>
            <set field="periodUtaValue" from="periodUtmValue*12"/>
            <set field="previousThruDate" from="new java.sql.Timestamp(timePeriod.fromDate.time-10)"/>
            <service-call name="mchile.CurrencyServices.get#ExchangeRate" in-map="[fromCurrencyUomId:'CLF', date:previousThruDate]" out-map="previousUf"/>
            <set field="previousUfValue" from="previousUf.value"/>
            <set field="previousUfTitle" from="ec.l10n.format(previousThruDate, '\'al\' dd \'de\' MMMM yyyy')"/>

            <service-call name="mchile.humanteam.PayrollServices.get#ParameterValue" in-map="[parameterNameList:['TopeImponibleAfpCLF', 'TopeImponibleIpsCLF',
                          'TopeImponibleAfcCLF', 'RentaMinimaGeneralCLP', 'RentaMinimaMenoresCLP', 'RentaMinimaCasaCLP', 'RentaMinimaNoremCLP',
                          'TopeApvMensualCLF', 'TopeApvAnualCLF', 'TopeDepositoConvenidoAnualCLF', 'TasaAfcContratoIndefinidoEmpleador',
                          'TasaAfcContratoIndefinidoTrabajador', 'TasaAfcContratoFijoEmpleador', 'TasaAfcContratoFijoTrabajador',
                          'TasaAfcContrato11AnosEmpleador', 'TasaAfcContrato11AnosTrabajador',  'TasaSis', 'TasaTrabajoPesadoEmpleador',
                          'TasaTrabajoPesadoTrabajador', 'TasaTrabajoMenosPesadoEmpleador', 'TasaTrabajoMenosPesadoTrabajador'],
                          validDate:periodFromDate]" out-map="pv"/>
            <script>context.putAll(pv.valueMap)</script>

            <if condition="topeImponibleAfpCLF"><set field="topeImponibleAfp" from="topeImponibleAfpCLF*periodUfValue"/></if>
            <!-- Valor para IPS se calcula con UF del último día del mes anterior -->
            <if condition="topeImponibleIpsCLF"><set field="topeImponibleIps" from="topeImponibleIpsCLF*previousUfValue"/></if>
            <if condition="topeImponibleAfcCLF"><set field="topeImponibleAfc" from="topeImponibleAfcCLF*periodUfValue"/></if>
            <if condition="topeApvMensualCLF"><set field="topeApvMensual" from="topeApvMensualCLF*periodUfValue"/></if>
            <if condition="topeApvAnualCLF"><set field="topeApvAnual" from="topeApvAnualCLF*periodUfValue"/></if>
            <if condition="topeDepositoConvenidoAnualCLF"><set field="topeDepositoConvenidoAnual" from="topeDepositoConvenidoAnualCLF*periodUfValue"/></if>

            <!-- Cobro AFP -->
            <entity-find entity-name="mchile.humanteam.payroll.AfpRate" list="afpRateListEV">
                <date-filter valid-date="periodFromDate"/>
                <order-by field-name="afpPartyId"/>
            </entity-find>
            <set field="afpRateList" from="[]"/>
            <iterate entry="afpRate" list="afpRateListEV">
                <entity-find-one entity-name="mantle.party.Organization" value-field="afpOrganization" auto-field-map="[partyId:afpRate.afpPartyId]"/>
                <script>afpRateList.add([partyId:afpRate.afpPartyId, rate:afpRate.rate, organizationName:afpOrganization.organizationName])</script>
            </iterate>

            <!-- Asignación Familiar -->
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentAndDetail" list="asignacionFamiliarListEV">
                <econdition field-name="payrollAdjustmentId" value="ClAsignacionFamiliar"/>
                <date-filter valid-date="periodFromDate"/>
            </entity-find>
            <set field="asignacionFamiliarList" from="[]"/>
            <iterate list="asignacionFamiliarListEV" entry="af">
                <set field="requisitoRenta" from="(af.periodMin == 0? '': (ec.l10n.formatCurrency(af.periodMin, 'CLP') + ' &lt;= ')) + 'Renta' + (af.periodMax? (' &lt;= ' + ec.l10n.formatCurrency(af.periodMax-1, 'CLP')): '')"/>
                <script>asignacionFamiliarList.add([tramo:af.detailSeqId, monto:af.flatAmount, requisitoRenta:requisitoRenta])</script>
            </iterate>

            <service-call name="mchile.humanteam.PayrollServices.get#PayrollPeriodTaxRate" in-map="[timePeriodId:timePeriodId]" out-map="context"/>
            <set field="taxRateListMap" from="taxRateListMap"/>

        </actions>
    </service>

    <service verb="get" noun="PayrollPeriodTaxRate">
        <in-parameters><parameter name="timePeriodId" required="true"/></in-parameters>
        <out-parameters><parameter name="taxRateListMap"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
            <if condition="!timePeriod">
                <return error="true" message="Could not find time period with Id ${timePeriodId}"/>
            </if>
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentAndDetail" list="taxRateListEV">
                <econdition field-name="payrollAdjustmentId" value="ClImpSegCatClClp"/>
                <date-filter valid-date="new java.sql.Timestamp(timePeriod.fromDate.time)"/>
            </entity-find>
            <if condition="!taxRateListEV">
                <if condition="timePeriod.timePeriodTypeId != 'PayrollMonth'">
                    <return error="true" message="Unsupported timePeriodTypeId ${timePeriod.timePeriodTypeId}"/>
                </if>
                <set field="fromDate" from="new java.sql.Timestamp(timePeriod.fromDate.time)"/>
                <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentAndDetail" list="taxRateListUtm">
                    <econdition field-name="payrollAdjustmentId" value="ClImpSegCatClUtm"/>
                    <date-filter valid-date="fromDate"/>
                    <order-by field-name="periodMin"/>
                </entity-find>
                <if condition="!taxRateListUtm">
                    <return error="true" message="Could not find taxrate for type ${taxTypeEnumId}"/>
                </if>
                <service-call name="mchile.CurrencyServices.get#ExchangeRate" in-map="[fromCurrencyUomId:'CL_UTM', date:fromDate]" out-map="utmMap"/>
                <set field="utmValue" from="utmMap.value"/>
                <set field="cumulatedAccruedAmount" from="0" type="BigDecimal"/>
                <iterate list="taxRateListUtm" entry="taxRateUtm">
                    <set field="periodMin" from="taxRateUtm.periodMin*utmValue"/>
                    <set field="periodMax" from="taxRateUtm.periodMax?(taxRateUtm.periodMax*utmValue):null"/>
                    <set field="flatAmount" from="(periodMin*taxRateUtm.rate)-cumulatedAccruedAmount"/>
                    <if condition="periodMax">
                        <script>cumulatedAccruedAmount += (periodMax-periodMin)*taxRateUtm.rate</script>
                    </if>
                    <set field="taxRateClp" from="taxRateUtm.map+[payrollAdjustmentId:'ClImpSegCatClClp', periodMin:periodMin, periodMax:periodMax,
                                                   fromDate:timePeriod.fromDate, thruDate:timePeriod.thruDate, flatAmount:-flatAmount,
                                                   payrollPhaseEnumId:'PrphTax', description:'Impuesto de Segunda Categoría, en Pesos']"/>
                    <service-call name="store#mantle.humanres.employment.PayrollAdjustment" in-map="taxRateClp"/>
                    <service-call name="create#mantle.humanres.employment.PayrollAdjustmentDetail" in-map="taxRateClp"/>
                </iterate>
                <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentAndDetail" list="taxRateListEV">
                    <econdition field-name="payrollAdjustmentId" value="ClImpSegCatClClp"/>
                    <date-filter valid-date="new java.sql.Timestamp(timePeriod.fromDate.time)"/>
                </entity-find>
            </if>
            <set field="monthRateList" from="[]"/>
            <set field="biweekRateList" from="[]"/>
            <set field="weekRateList" from="[]"/>
            <set field="dayRateList" from="[]"/>
            <iterate entry="tr" list="taxRateListEV">
                <script>
                    monthRateList.add([rate:tr.rate, periodMin:tr.periodMin, periodMax:tr.periodMax, flatAmount:tr.flatAmount])
                    biweekRateList.add([rate:tr.rate, periodMin:(tr.periodMin?:0)/2, periodMax:(tr.periodMax?:0)/2, flatAmount:(tr.flatAmount?:0)/2])
                    weekRateList.add([rate:tr.rate, periodMin:(tr.periodMin?:0)/30*7, periodMax:(tr.periodMax?:0)/30*7, flatAmount:(tr.flatAmount?:0)/30*7])
                    dayRateList.add([rate:tr.rate, periodMin:(tr.periodMin?:0)/30, periodMax:(tr.periodMax?:0)/30, flatAmount:(tr.flatAmount?:0)/30])
                </script>
            </iterate>
            <set field="taxRateListMap" from="[PayrollMonth:monthRateList, PayrollBiweek:biweekRateList, PayrollWeek:weekRateList, PayrollDay:dayRateList]"/>
        </actions>
    </service>

    <service verb="get" noun="PayrollPeriodTypes">
        <out-parameters>
            <parameter name="payrollPeriodTypes"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.time.TimePeriodType" list="timePeriodTypeList">
                <econdition field-name="periodPurposeEnumId" value="Payroll"/>
            </entity-find>
            <set field="payrollPeriodTypes" from="timePeriodTypeList.timePeriodTypeId"/>
        </actions>
    </service>

    <service verb="prepare" noun="PayrollPeriodAdjustments">
        <implements service="mantle.humanres.PayrollServices.calculate#Adjustment"/>
        <in-parameters>
            <parameter name="timePeriodId"/>
        </in-parameters>
        <actions>
            <log message="check#PayrollPeriodAdjustments"/>
            <!--<service-call name="mchile.humanteam.PayrollServices.get#PayrollPeriodTaxRate" in-map="context"/>-->
        </actions>
    </service>

    <service verb="calculate" noun="PensionFundAdjustment">
        <implements service="mantle.humanres.PayrollServices.calculate#Adjustment"/>
        <out-parameters>
            <parameter name="adjustmentList" type="List"/>
            <parameter name="taxablePayAmount" type="BigDecimal"/>
            <parameter name="medicalTaxablePayAmount" type="BigDecimal"/>
            <parameter name="socialTaxablePayAmount" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <set field="affiliationTypeEnumId" value="MchCeaPensionFund"/>
            <set field="employeePartyId" from="employee.partyId"/>
            <entity-find entity-name="mchile.humanteam.payroll.EmployeeAffiliation" list="emplAffList">
                <econdition field-name="fromDate" operator="less-equals" from="timePeriod.thruDate"/>
                <econdition field-name="thruDate" operator="greater-equals" from="timePeriod.fromDate" or-null="true"/>
                <econdition field-name="affiliationTypeEnumId"/>
                <econdition field-name="employeePartyId"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <set field="emplAff" from="emplAffList.first"/>
            <if condition="emplAff == null"><return error="true" message="Found no definition of Isapre for employee ${employeePartyId}"/></if>
            <service-call name="mchile.humanteam.PayrollServices.get#PeriodParameters" in-map="[timePeriodId:timePeriodId]" out-map="pp"/>
            <set field="adjustmentBasisAmount" from="taxablePayAmount &lt;= pp.topeImponibleAfp ? taxablePayAmount : pp.topeImponibleAfp" type="BigDecimal"/>
            <!-- Define afcBase before modifying taxablePayAmount -->
            <set field="afcBase" from="taxablePayAmount > pp.topeImponibleAfc ? pp.topeImponibleAfc : taxablePayAmount"/>
            <set field="payeePartyId" from="emplAff.organizationPartyId"/>
            <entity-find-one entity-name="mantle.party.Organization" value-field="afpOrg"><field-map field-name="partyId" from="payeePartyId"/></entity-find-one>
            <set field="afpName" from="afpOrg.organizationName"/>

            <entity-find entity-name="mchile.humanteam.payroll.AfpRate" list="afpRateList">
                <econdition field-name="afpPartyId" from="emplAff.organizationPartyId"/>
                <date-filter valid-date="new java.sql.Timestamp(timePeriod.fromDate.time)"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <if condition="!afpRateList"><return error="true" message="No AfpRate found for Afp ${emplAff.organizationPartyId} at ${timePeriod.fromDate}"/></if>
            <set field="afpRate" from="afpRateList.first"/>
            <set field="amount" from="(adjustmentBasisAmount * afpRate.rate /100).setScale(0, BigDecimal.ROUND_HALF_UP)"/>
            <set field="description" value="Cotización Previsional (AFP ${afpName})"/>

            <script>
                adjustmentList = priorAdjustmentList
                adjustmentList.add([isEmployerPaid:'N', quantity:1, isTax:'N', isTaxable:'Y', isSocialTax:'N', isSocialTaxable:'N', isMedicalTax:'N', isMedicalTaxable:'N', rateBasisEnumId:'PrbsIncome', adjustmentApplies:false, payeeDueDays:13, itemTypeEnumId:'ItemClAfp', payeePartyId:payeePartyId, amount:-amount, description:description])
                taxablePayAmount = taxablePayAmount - amount
            </script>

            <!-- Afc -->
            <set field="afcRateEmpleador" from="null"/>
            <set field="afcRateTrabajador" from="null"/>
            <if condition="employment.employmentDurationTypeEnumId == 'MchedtPlazoIndefinido'"><then>
                <set field="afcRateEmpleador" from="pp.tasaAfcContratoIndefinidoEmpleador"/>
                <set field="afcRateTrabajador" from="pp.tasaAfcContratoIndefinidoTrabajador"/>
            </then><else-if condition="employment.employmentDurationTypeEnumId == 'MchedtPlazoFijo'">
                <set field="afcRateEmpleador" from="pp.tasaAfcContratoFijoEmpleador"/>
                <set field="afcRateTrabajador" from="pp.tasaAfcContratoFijoTrabajador"/>
            </else-if><else-if condition="employment.employmentDurationTypeEnumId == 'MchedtPlazoIndefinido11Anos'">
                <set field="afcRateEmpleador" from="pp.tasaAfcContrato11AnosEmpleador"/>
                <set field="afcRateTrabajador" from="pp.tasaAfcContrato11AnosTrabajador"/>
            </else-if><else>
                <return error="true" message="Unknown employmentDurationType ${empoymentDurationTypeEnumId}"/>
            </else></if>
            <set field="afcBaseMap" from="[quantity:1, isTax:'N', isTaxable:'Y', isSocialTax:'N', isSocialTaxable:'Y', isMedicalTax:'N', isMedicalTaxable:'Y',
                                          rateBasisEnumId:'PrbsIncome', adjustmentApplies:true, payeeDueDays:13, payeePartyId:'CHLSPENS-AFC']"/>
            <set field="afcAmountEmpleador" from="(afcBase*afcRateEmpleador/100).setScale(0, BigDecimal.ROUND_HALF_UP)"/>
            <set field="afcAmountTrabajador" from="(afcBase*afcRateTrabajador/100).setScale(0, BigDecimal.ROUND_HALF_UP)"/>
            <script>
                if (afcAmountEmpleador > 0) adjustmentList.add(afcBaseMap+[isEmployerPaid:'Y', itemTypeEnumId:'ItemClAfcEmpleador', amount:-afcAmountEmpleador, description:'Seguro de Cesantía de cargo del empleador (AFC)'])
                if (afcAmountTrabajador > 0) {
                    adjustmentList.add(afcBaseMap+[isEmployerPaid:'N', itemTypeEnumId:'ItemClAfcTrabajador', amount:-afcAmountTrabajador, description:'Seguro de Cesantía de cargo del trabajador (AFC)'])
                    taxablePayAmount = taxablePayAmount - afcAmountTrabajador
                }
            </script>
        </actions>
    </service>

    <service verb="calculate" noun="HealthAdjustment">
        <implements service="mantle.humanres.PayrollServices.calculate#Adjustment"/>
        <out-parameters>
            <parameter name="adjustmentList" type="List"/>
            <parameter name="taxablePayAmount" type="BigDecimal"/>
            <parameter name="medicalTaxablePayAmount" type="BigDecimal"/>
            <parameter name="socialTaxablePayAmount" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <set field="employeePartyId" from="employment.fromPartyId"/>
            <set field="affiliationTypeEnumId" value="MchCeaHealth"/>
            <entity-find entity-name="mchile.humanteam.payroll.EmployeeAffiliation" list="emplAffList">
                <econdition field-name="fromDate" operator="less-equals" from="timePeriod.thruDate"/>
                <econdition field-name="thruDate" operator="greater-equals" from="timePeriod.fromDate" or-null="true"/>
                <econdition field-name="affiliationTypeEnumId"/>
                <econdition field-name="employeePartyId"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <service-call name="mchile.humanteam.PayrollServices.get#PeriodParameters" in-map="[timePeriodId:timePeriodId]" out-map="pp"/>

            <set field="adjustmentBasisAmount" from="medicalTaxablePayAmount &lt;= pp.topeImponibleAfp ? medicalTaxablePayAmount : pp.topeImponibleAfp" type="BigDecimal"/>
            <set field="legalAmount" from="(adjustmentBasisAmount * 7 / 100).setScale(0, BigDecimal.ROUND_HALF_UP)"/>
            <set field="baseMap" from="[isEmployerPaid:'N', quantity:1, isTax:'N', isTaxable:'Y', isSocialTax:'N', isSocialTaxable:'N', isMedicalTax:'N', isMedicalTaxable:'N',
                                            rateBasisEnumId:'PrbsIncome', adjustmentApplies:true, payeeDueDays:13, itemTypeEnumId:'ItemClIsapre']"/>
            <set field="adjustmentList" from="priorAdjustmentList"/>
            <set field="emplAff" from="emplAffList.first"/>
            <if condition="emplAff == null"><then>
                <script>adjustmentList.add(baseMap+[payeePartyId:'CHLSSAL-FONASA', amount:-legalAmount, itemTypeEnumId:'', description:'Cotización Salud obligatoria (Fonasa)'])</script>
            </then><else>
                <entity-find-one entity-name="mantle.party.Organization" value-field="isapreOrg"><field-map field-name="partyId" from="emplAff.organizationPartyId"/></entity-find-one>
                <if condition="isapreOrg == null"><return error="true" message="Could not find organization for Affiliation ${emplAff}"/></if>
                <set field="isapreName" from="isapreOrg.organizationName"/>
                <set field="baseMap.payeePartyId" from="emplAff.organizationPartyId"/>
                <set field="baseMap.description" value="Cotización Salud obligatoria (Isapre ${isapreName})"/>
                <if condition="emplAff.currencyUomId == 'CLF'"><then>
                    <set field="totalAmount" from="(pp.periodUfValue*emplAff.amount).setScale(0, BigDecimal.ROUND_HALF_UP)"/>
                </then><else-if condition="emplAff.currencyUomId == 'CLP'">
                    <set field="totalAmount" from="emplAff.amount.setScale(0, BigDecimal.ROUND_HALF_UP)"/>
                </else-if><else>
                    <return error="true" message="Unsupported currency while processing EmployeeAffiliation ${emplAff}"/>
                </else></if>
                <if condition="totalAmount > legalAmount"><then>
                    <!-- Se agrega un adicional -->
                    <script>
                        adjustmentList.add(baseMap+[amount:-legalAmount])
                        adjustmentList.add(baseMap+[itemTypeEnumId:'ItemClCotizVoluntaria', description:"Cotización Salud adicional (Isapre ${isapreName})", amount:(legalAmount-totalAmount)])
                        taxablePayAmount = taxablePayAmount - legalAmount
                    </script>
                </then><else-if condition="totalAmount &lt; legalAmount">
                    <!-- Se paga el legalAmount y queda un excedente -->
                    <script>
                        adjustmentList.add(baseMap+[amount:-legalAmount])
                        taxablePayAmount = taxablePayAmount - legalAmount
                    </script>
                </else-if><else>
                    <script>
                        adjustmentList.add(baseMap+[amount:-legalAmount])
                        taxablePayAmount = taxablePayAmount - legalAmount
                    </script>
                </else></if>
            </else></if>
        </actions>
    </service>

</services>