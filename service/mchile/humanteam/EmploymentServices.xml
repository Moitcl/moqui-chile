<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="EmploymentDisplayInfo">
        <in-parameters><parameter name="partyRelationshipId"/></in-parameters>
        <out-parameters>
            <parameter name="employment" type="Map"/>
            <parameter name="employmentFacility" type="Map"/>
            <parameter name="employeeParty" type="Map"/>
            <parameter name="employerParty" type="Map"/>
            <parameter name="currentSalary" type="Map"/>
            <parameter name="salaryHistory" type="Map"/>
            <parameter name="currentHealthInsuranceAffiliation" type="Map"/>
            <parameter name="healthInsuranceAffiliationHistory" type="List"/>
            <parameter name="healthInsuranceOrganizationNamesById" type="Map"/>
            <parameter name="currentPensionFundAffiliation" type="Map"/>
            <parameter name="pensionFundAffiliationHistory" type="List"/>
            <parameter name="pensionFundOrganizationNamesById" type="Map"/>
            <parameter name="commutingAdjustmentHistory" type="List"/>
            <parameter name="currentCommutingAdjustment" type="Map"/>
            <parameter name="nourishmentAdjustmentHistory" type="List"/>
            <parameter name="currentNourishmentAdjustment" type="Map"/>
            <parameter name="employmentTerminationType"/>
            <parameter name="employmentTerminationReason"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.humanres.employment.EmploymentAndRelationship" value-field="employment"/>
            <if condition="employment == null"><return error="true" message="Could not find Employment ${partyRelationshipId}"/></if>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="employeePartyEv" auto-field-map="[partyId:employment.fromPartyId]"/>
            <set field="employeeParty" from="employeePartyEv.getMap()"/>
            <entity-find entity-name="mantle.party.PartyIdentification" list="rutList">
                <econdition field-name="partyIdTypeEnumId" value="PtidNationalTaxId"/>
                <econdition field-name="partyId" from="employeeParty.partyId"/>
                <order-by field-name="-expireDate"/>
            </entity-find>
            <if condition="rutList"><service-call name="mchile.GeneralServices.format#Rut" in-map="[rut:rutList.first.idValue]" out-map="employeeParty"/></if>
            <entity-find entity-name="mchile.humanteam.employment.EmploymentFacility" list="facilityList">
                <econdition field-name="partyRelationshipId"/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <log message="facilityList: ${facilityList}"/>
            <entity-find-one entity-name="mantle.facility.Facility" value-field="employmentFacility" auto-field-map="[facilityId:facilityList.first?.facilityId]"/>
            <log message="employmentFacility: ${employmentFacility}"/>

            <if condition="employment.terminationTypeEnumId"><entity-find-one value-field="employmentTerminationType" entity-name="moqui.basic.Enumeration" auto-field-map="[enumId:employment.terminationTypeEnumId]"/></if>
            <if condition="employment.terminationReasonEnumId"><entity-find-one value-field="employmentTerminationReason" entity-name="moqui.basic.Enumeration" auto-field-map="[enumId:employment.terminationReasonEnumId]"/></if>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="employerPartyEv" auto-field-map="[partyId:employment.toPartyId]"/>
            <set field="employerParty" from="employerPartyEv.getMap()"/>
            <entity-find entity-name="mantle.party.PartyIdentification" list="rutList">
                <econdition field-name="partyIdTypeEnumId" value="PtidNationalTaxId"/>
                <econdition field-name="partyId" from="employerParty.partyId"/>
                <order-by field-name="-expireDate"/>
            </entity-find>
            <if condition="rutList"><service-call name="mchile.GeneralServices.format#Rut" in-map="[rut:rutList.first.idValue]" out-map="employerParty"/></if>

            <!-- Salary -->
            <entity-find entity-name="mantle.humanres.employment.EmploymentSalary" list="salaryHistory">
                <econdition field-name="partyRelationshipId" from="employment.partyRelationshipId"/>
                <econdition field-name="timePeriodTypeId" from="employment.timePeriodTypeId"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <if condition="salaryHistory"><set field="currentSalary" from="salaryHistory.first"/></if>

            <!-- Movilización -->
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentAndDetail" list="commutingAdjustmentHistory">
                <econdition field-name="partyRelationshipId" from="employment.partyRelationshipId"/>
                <econdition field-name="itemTypeEnumId" value="ItemPayrollCommuting"/>
                <econdition field-name="exclusiveByItemType" operator="not-equals" value="Y"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <iterate entry="adjustment" list="commutingAdjustmentHistory">
                <if condition="adjustment.fromDate &lt;= ec.user.nowTimestamp &amp;&amp; (adjustment.thruDate == null || adjustment.thruDate >= ec.user.nowTimestamp)"><set field="currentCommutingAdjustment" from="adjustment"/></if>
            </iterate>

            <!-- Colación -->
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentAndDetail" list="nourishmentAdjustmentHistory">
                <econdition field-name="partyRelationshipId" from="employment.partyRelationshipId"/>
                <econdition field-name="itemTypeEnumId" value="ItemPayrollNourishment"/>
                <econdition field-name="exclusiveByItemType" operator="not-equals" value="Y"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <iterate entry="adjustment" list="nourishmentAdjustmentHistory">
                <if condition="adjustment.fromDate &lt;= ec.user.nowTimestamp &amp;&amp; (adjustment.thruDate == null || adjustment.thruDate >= ec.user.nowTimestamp)"><set field="currentNourishmentAdjustment" from="adjustment"/></if>
            </iterate>

            <!-- Isapre -->
            <entity-find entity-name="mchile.humanteam.employment.EmployeeAffiliation" list="healthInsuranceAffiliationHistory">
                <econdition field-name="employeePartyId" from="employeeParty.partyId"/>
                <econdition field-name="affiliationTypeEnumId" value="MchCeaHealth"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <set field="healthInsuranceOrganizationNamesById" from="[:]"/>
            <iterate list="healthInsuranceAffiliationHistory" entry="hiah">
                <if condition="'CLF' != hiah.currencyUomId"><return error="true" message="Unsupported Currency ${hiah.currencyUomId} for Health Insurance Affiliation"/></if>
                <if condition="!healthInsuranceOrganizationNamesById.keySet().contains(hiah.organizationPartyId)">
                    <entity-find-one entity-name="mantle.party.PartyDetail" value-field="pd" auto-field-map="[partyId:hiah.organizationPartyId]"/>
                    <script>healthInsuranceOrganizationNamesById.put(hiah.organizationPartyId, pd.organizationName)</script>
                </if>
                <if condition="currentHealthInsuranceAffiliation == null &amp;&amp; hiah.fromDate &lt;= ec.user.nowTimestamp &amp;&amp; ( hiah.thruDate == null || hiah.thruDate > ec.user.nowTimestamp)">
                    <set field="currentHealthInsuranceAffiliation" from="hiah"/></if>
            </iterate>

            <!-- Afp -->
            <entity-find entity-name="mchile.humanteam.employment.EmployeeAffiliation" list="pensionFundAffiliationHistory">
                <econdition field-name="employeePartyId" from="employeeParty.partyId"/>
                <econdition field-name="affiliationTypeEnumId" value="MchCeaPensionFund"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <set field="pensionFundOrganizationNamesById" from="[:]"/>
            <iterate list="pensionFundAffiliationHistory" entry="pfah">
                <if condition="!pensionFundOrganizationNamesById.keySet().contains(pfah.organizationPartyId)">
                    <entity-find-one entity-name="mantle.party.PartyDetail" value-field="pd" auto-field-map="[partyId:pfah.organizationPartyId]"/>
                    <script>pensionFundOrganizationNamesById.put(pfah.organizationPartyId, pd.organizationName)</script>
                </if>
                <if condition="currentPensionFundAffiliation == null &amp;&amp; pfah.fromDate &lt;= ec.user.nowTimestamp &amp;&amp; ( pfah.thruDate == null || pfah.thruDate > ec.user.nowTimestamp)">
                    <set field="currentPensionFundAffiliation" from="pfah"/></if>
            </iterate>
        </actions>
    </service>

    <service verb="modify" noun="EmploymentSalary">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="newSalary" required="true" type="BigDecimal"/>
            <parameter name="fromDate" required="true" type="Timestamp"/>
            <parameter name="comments"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.humanres.employment.Employment" value-field="employment"/>
            <set field="partyRel" from="employment.partyRel"/>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="acctgPref" auto-field-map="[organizationPartyId:partyRel.toPartyId]"/>
            <if condition="!acctgPref"><return error="true" message="Could not find AcctgPref for party ${partyRel.toPartyId}"/></if>
            <entity-find entity-name="mantle.humanres.employment.EmploymentSalary" list="salaryHistory" limit="1" for-update="true">
                <econdition field-name="partyRelationshipId" from="employment.partyRelationshipId"/>
                <econdition field-name="timePeriodTypeId" from="employment.timePeriodTypeId"/>
                <econdition field-name="thruDate" or-null="true" operator="greater-equals" from="fromDate"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <if condition="salaryHistory">
                <set field="currentSalary" from="salaryHistory.first"/>
                <if condition="currentSalary.fromDate >= fromDate">
                    <return error="true" message="Current salary has fromDate before new fromDate"/>
                </if>
                <set field="currentSalary.thruDate" from="fromDate"/>
                <entity-update value-field="currentSalary"/>
            </if>
            <service-call name="create#mantle.humanres.employment.EmploymentSalary" in-map="[partyRelationshipId:employment.partyRelationshipId, timePeriodTypeId:employment.timePeriodTypeId, fromDate:fromDate, amount:newSalary, currencyUomId:acctgPref.baseCurrencyUomId, comments:comments]"/>
        </actions>
    </service>

    <service verb="modify" noun="PayrollAdjustment">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="itemTypeEnumId" required="true"/>
            <parameter name="flatAmount" required="true" type="BigDecimal"/>
            <parameter name="fromDate" required="true" type="Timestamp"/>
        </in-parameters>
        <out-parameters><parameter name="payrollAdjustmentId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.humanres.employment.Employment" value-field="employment"/>
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustment" list="existingList" limit="1">
                <econdition field-name="partyRelationshipId" from="employment.partyRelationshipId"/>
                <econdition field-name="timePeriodTypeId" from="employment.timePeriodTypeId"/>
                <econdition field-name="thruDate" or-null="true" operator="greater-equals" from="fromDate"/>
                <econdition field-name="itemTypeEnumId"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <if condition="existingList">
                <set field="existing" from="existingList.first"/>
                <if condition="existing.fromDate >= fromDate">
                    <return error="true" message="Found existing adjustment has fromDate after new fromDate: ${existing}"/>
                </if>
                <set field="existing.thruDate" from="fromDate"/>
                <entity-update value-field="existing"/>
            </if>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="itemTypeEnum" auto-field-map="[enumId:itemTypeEnumId]"/>
            <service-call name="create#mantle.humanres.employment.PayrollAdjustment" in-map="[description:itemTypeEnum.description, partyRelationshipId:partyRelationshipId, itemTypeEnumId:itemTypeEnumId, exclusiveByItemType:'N', payrollPhaseEnumId:'PrphExpenses', timePeriodTypeId:employment.timePeriodTypeId, fromDate:fromDate, isTax:'N', isTaxable:'N', isSocialTaxable:'N', isMedicalTaxable:'N', isEmployerPaid:'N', applyStdDeduction:'N']" out-map="context"/>
            <service-call name="create#mantle.humanres.employment.PayrollAdjustmentDetail" in-map="[payrollAdjustmentId:payrollAdjustmentId, detailSeqId:'01', flatAmount:flatAmount]"/>
        </actions>
    </service>

    <service verb="modify" noun="EmployeeAffiliation">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="employeePartyId" required="true"/>
            <parameter name="affiliationTypeEnumId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="amount" type="BigDecimal"/>
            <parameter name="folioFun"/>
            <parameter name="currencyUomId"/>
            <parameter name="fromDate" required="true" type="Timestamp"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyRelationshipId"/>
        </out-parameters>
        <actions>
            <if condition="affiliationTypeEnumId == 'MchCeaHealth'">
                <if condition="!amount"><message type="danger">Health insurance affiliation requires amount</message></if>
                <if condition="!currencyUomId"><message type="danger">Health insurance affiliation requires curency</message></if>
            </if>
            <check-errors/>
            <entity-find entity-name="mchile.humanteam.employment.EmployeeAffiliation" list="existingList" for-update="true">
                <econdition field-name="employeePartyId"/>
                <econdition field-name="affiliationTypeEnumId"/>
                <econdition field-name="thruDate" or-null="true" operator="greater" from="fromDate"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <if condition="existingList">
                <set field="existing" from="existingList.first"/>
                <if condition="existing.fromDate >= fromDate">
                    <return error="true" message="Found existing affiliation with fromDate after new fromDate"/>
                </if>
                <set field="existing.thruDate" from="fromDate"/>
                <entity-update value-field="existing"/>
            </if>
            <service-call name="create#mchile.humanteam.employment.EmployeeAffiliation" in-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="LeaveDisplayInfo">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="accruedVacationDays"/>
            <parameter name="plannedLeaves"/>
            <parameter name="leaveHistory"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mchile.humanteam.employment.LeaveAccrued" value-field="accruedVacation" auto-field-map="[partyRelationshipId:partyRelationshipId, leaveTypeEnumId:'PltFeriadoLegal']"/>
            <if condition="accruedVacation">
                <if condition="accruedVacation.uomId != 'TF_day'"><return error="true" message="Unsupported vacation Uom ${accruedVacation.uomId}"/></if>
                <set field="accruedVacationDays" from="accruedVacation.quantityAvailable"/>
            </if>
            <entity-find entity-name="mchile.humanteam.employment.LeaveDetail" list="leaveHistory">
                <econdition field-name="partyRelationshipId"/>
                <econdition field-name="fromDate" operator="less-equals" from="ec.user.nowTimestamp"/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <entity-find entity-name="mchile.humanteam.employment.LeaveDetail" list="plannedLeaves">
                <econdition field-name="partyRelationshipId"/>
                <econdition field-name="thruDate" operator="greater" from="ec.user.nowTimestamp"/>
                <order-by field-name="fromDate"/>
            </entity-find>
        </actions>
    </service>

    <service verb="update" noun="AccruedLeaveFromDetail">
        <in-parameters>
            <parameter name="leaveDetailId"/>
            <parameter name="partyRelationshipId"/>
            <parameter name="leaveTypeEnumId"/>
            <parameter name="changeReasonEnumId"/>
            <parameter name="registrationDate"/>
            <parameter name="fromDate" type="Timestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="diffAmount" type="BigDecimal"/>
            <parameter name="description"/>
            <parameter name="amountUomId"/>
        </in-parameters>
        <actions>
            <!-- Only maintain AccruedLeave for specified leave types -->
            <if condition="leaveTypeEnumId != 'PltFeriadoLegal'"><return/></if>
            <entity-find-one entity-name="mantle.humanres.employment.Employment" value-field="employment"/>
            <if condition="!employment"><return error="true" message="Did not find employment for LeaveDetail ${leaveDetailId}"/></if>
            <entity-find-one entity-name="mchile.humanteam.employment.LeaveAccrued" value-field="accrued"/>
            <if condition="accrued"><then>
                <!--<log message="existing accrued: ${accrued}"/>-->
                <if condition="accrued.uomId != amountUomId">
                    <return error="true" message="UomId mismatch, existing (${accrued.uomId}) is different from Detail (${amountUomId})"/>
                </if>
                <set field="newAvailable" from="accrued.quantityAvailable + diffAmount"/>
                <!--<log message="Setting quantityAvailable to ${newAvailable}"/>-->
                <set field="accrued.quantityAvailable" from="newAvailable"/>
                <entity-update value-field="accrued"/>
            </then><else>
                <!--<log message="creating new LeaveAccrued"/>-->
                <service-call name="create#mchile.humanteam.employment.LeaveAccrued" in-map="context+[quantityAvailable:diffAmount, uomId:amountUomId]"/>
            </else></if>
        </actions>
    </service>

    <service verb="add" noun="EmploymentAccruedLeaveForPeriod" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="employerPartyId"/>
            <parameter name="timePeriodTypeId" default-value="PayrollMonth"/>
            <parameter name="leaveTypeEnumId" default-value="PltFeriadoLegal"/>
            <parameter name="maxAccrueDays" default="50" type="Long">
                <description>Maximum days to consider</description>
            </parameter>
        </in-parameters>
        <actions>
            <if condition="timePeriodTypeId != 'PayrollMonth'"><return error="true" message="Cannot handle Time Period Type ${timePeriodTypeId}"/></if>
            <if condition="leaveTypeEnumId != 'PltFeriadoLegal'"><return error="true" message="Cannot handle Leave Type ${leaveTypeEnumId}"/></if>
            <set field="changeReasonEnumId" value="PcrPeriodAccrued"/>
            <set field="diffAmount" from="1.25"/>
            <set field="amountUomId" value="TF_day"/>
            <entity-find entity-name="mantle.humanres.employment.EmploymentAndRelationship" list="currentEmployments">
                <econdition field-name="toPartyId" ignore-if-empty="true" from="employerPartyId"/>
                <econdition field-name="timePeriodTypeId"/>
                <date-filter/>
            </entity-find>
            <iterate list="currentEmployments" entry="employment">
                <entity-find-one entity-name="mantle.party.PartyDetail" auto-field-map="[partyId:employment.fromPartyId]" value-field="partyDetail"/>
                <log message="Evaluating employee ${ec.resource.expand('PartyNameOnlyTemplate', null, partyDetail)}"/>
                <entity-find entity-name="mchile.humanteam.employment.LeaveDetail" list="lastLeaveDetail" limit="1">
                    <econdition field-name="partyRelationshipId" from="employment.partyRelationshipId"/>
                    <econdition field-name="leaveTypeEnumId"/>
                    <econdition field-name="changeReasonEnumId"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <set field="accruedThruDate" from="lastLeaveDetail ? (lastLeaveDetail.first.thruDate) : employment.fromDate"/>
                <set field="maxAccrueDate" from="new Timestamp(ec.user.nowTimestamp.time - maxAccrueDays*24*60*60*1000)"/>
                <if condition="accruedThruDate.before(maxAccrueDate)"><set field="accruedThruDate" from="maxAccrueDate"/></if>
                <script><![CDATA[
                    Calendar cal = Calendar.instance
                    cal.setTimeInMillis(accruedThruDate.time)
                ]]></script>
                <while condition="cal.time.time &lt; ec.user.nowTimestamp.time">
                    <script>
                        fromDate = new Timestamp(cal.time.time)
                        cal.add(Calendar.MONTH, 1)
                        thruDate = new Timestamp(cal.time.time)
                    </script>
                    <if condition="thruDate &lt; ec.user.nowTimestamp">
                        <log message="Adding LeaveDetail for employment ${employment.partyRelationshipId} period from ${fromDate} to ${thruDate}"/>-->
                        <service-call name="create#mchile.humanteam.employment.LeaveDetail" in-map="context+[partyRelationshipId:employment.partyRelationshipId, registrationDate:ec.user.nowTimestamp]"/>
                    </if>
                </while>
            </iterate>
        </actions>
    </service>

    <service verb="update" noun="Employee">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="rut"/>
            <parameter name="birthDate" type="Date"/>
            <parameter name="comments"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.Party" value-field="party" for-update="true"/>
            <if condition="!party"><return error="true" message="could not find party with Id ${partyId}"/></if>
            <if condition="party.comments != comments">
                <set field="party.comments" from="comments"/>
                <entity-update value-field="party"/></if>

            <set field="person" from="party.person"/>
            <if condition="!person"><return error="true" message="Party ${partyId} is not a person"/></if>
            <if condition="birthDate != null &amp;&amp; person.birthDate != birthDate">
                <set field="person.birthDate" from="birthDate"/>
                <entity-update value-field="person"/></if>

            <entity-find entity-name="mantle.party.PartyIdentification" list="rutList" for-update="true">
                <econdition field-name="partyId"/>
                <econdition field-name="partyIdTypeEnumId" operator="in" from="['PtidUniqueNationalId', 'PtidNationalTaxId']"/>
            </entity-find>
            <iterate list="rutList" entry="rutEv">
                <if condition="rut != null &amp;&amp; rutEv.idValue != rut">
                    <set field="rutEv.idValue" from="rut"/>
                    <entity-update value-field="rutEv"/></if>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="Employment">
        <in-parameters>
            <parameter name="fromPartyId" required="true"/>
            <parameter name="toPartyId" required="true"/>
            <parameter name="timePeriodTypeId" required="true"/>
            <parameter name="emplPositionId" required="true"/>
            <parameter name="employmentDurationTypeEnumId" required="true"/>
            <parameter name="employmentEmployeeConditionTypeEnumId" required="true"/>
            <parameter name="fromDate" required="true" type="Timestamp"/>
            <parameter name="amount" required="true" type="BigDecimal"/>
            <parameter name="currencyUomId" default="CLP"/>
            <parameter name="commutingAssignment" type="BigDecimal" default="0"/>
            <parameter name="nourishmentAssignment" type="BigDecimal" default="0"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyRelationshipId"/>
        </out-parameters>
        <actions>
            <set field="relationshipTypeEnumId" value="PrtEmployee"/>
            <set field="toRoleTypeId" value="OrgInternal"/>
            <service-call name="create#mantle.party.PartyRelationship" in-map="context" out-map="context"/>
            <service-call name="create#mantle.humanres.employment.Employment" in-map="context"/>
            <service-call name="create#mantle.humanres.employment.EmploymentSalary" in-map="context"/>
            <if condition="nourishmentAssignment">
                <service-call name="mchile.humanteam.EmploymentServices.modify#PayrollAdjustment" in-map="[partyRelationshipId:partyRelationshipId, itemTypeEnumId:'ItemPayrollNourishment', flatAmount:nourishmentAssignment, fromDate:fromDate]" out-map="nourishOut"/>
                <set field="nourishmentAdjustmentId" from="nourishOut.payrollAdjustmentId"/>
                <log message="nourishmentAdjustmentId: ${nourishmentAdjustmentId}"/>
            </if>
            <if condition="commutingAssignment">
                <service-call name="mchile.humanteam.EmploymentServices.modify#PayrollAdjustment" in-map="[partyRelationshipId:partyRelationshipId, itemTypeEnumId:'ItemPayrollCommuting', flatAmount:commutingAssignment, fromDate:fromDate]" out-map="commutingOut"/>
                <set field="commutingAdjustmentId" from="commutingOut.payrollAdjustmentId"/>
                <log message="commutingAdjustmentId: ${commutingAdjustmentId}"/>
            </if>
        </actions>
    </service>

    <service verb="end" noun="Employment">
        <in-parameters>
            <parameter name="partyRelationshipId"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="terminationTypeEnumId"/>
            <parameter name="terminationReasonEnumId"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.humanres.employment.Employment" value-field="employment" for-update="true"/>
            <entity-find-one entity-name="mantle.party.PartyRelationship" value-field="relationship" for-update="true"/>
            <entity-find-count entity-name="mantle.party.time.TimePeriod" count-field="closedPeriodAmount">
                <econdition field-name="timePeriodTypeId" from="employment.timePeriodTypeId"/>
                <econdition field-name="partyId" from="relationship.toPartyId"/>
                <econdition field-name="isClosed" value="Y"/>
                <econdition field-name="thruDate" operator="greater-equals" from="thruDate"/>
            </entity-find-count>
            <if condition="closedPeriodAmount"><return error="true" message="Cannot end employment on a date inside closed PayrollPeriod"/></if>
            <set field="employment.terminationTypeEnumId" from="terminationTypeEnumId"/>
            <set field="employment.terminationReasonEnumId" from="terminationReasonEnumId"/>
            <entity-update value-field="employment"/>
            <script>
                Calendar cal = Calendar.instance
                cal.setTimeInMillis(thruDate.time)
                cal.set(Calendar.HOUR, 23)
                cal.set(Calendar.MINUTE, 59)
                cal.set(Calendar.SECOND, 59)
                cal.set(Calendar.MILLISECOND, 999)
                thruDate = new java.sql.Timestamp(cal.time.time)
            </script>
            <set field="relationship.thruDate" from="thruDate"/>
            <entity-update value-field="relationship"/>
        </actions>
    </service>

    <service verb="get" noun="CertificateInfo">
        <in-parameters>
            <parameter name="certificateType"/>
            <parameter name="leaveDetailId"/>
            <parameter name="certificateDate"/>
        </in-parameters>
        <out-parameters>
            <parameter name="templateLocation"/>
            <parameter name="title"/>
            <parameter name="documentType"/>
            <parameter name="employeePartyDetail"/>
            <parameter name="employeeRut"/>
            <parameter name="employerPartyDetail"/>
            <parameter name="employerRut"/>
            <parameter name="fromDate"/>
            <parameter name="thruDate"/>
            <parameter name="days"/>
            <parameter name="accruedAmount"/>
            <parameter name="certificateDate"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mchile.humanteam.employment.LeaveDetail" value-field="leaveDetail"/>
            <if condition="leaveDetail.leaveTypeEnumId == 'PltFeriadoLegal' &amp;&amp; leaveDetail.changeReasonEnumId == 'PcrAccruedUsage'"><then>
                <set field="documentType" value="vacaciones"/>
                <set field="title" value="Certificado de Feriado Legal"/>
            </then><else-if condition="leaveDetail.leaveTypeEnumId == 'PltPermisoSinRem'">
                <set field="documentType" value="permisoSinGoce"/>
                <set field="title" value="Permiso sin goce de sueldo"/>
            </else-if><else>
                <return error="true" message="Don't know how to issue certificate for leaveDetail ${leaveDetail}"/>
            </else></if>
            <if condition="!certificateDate">
                <set field="certificateDate" from="leaveDetail.fromDate.before(ec.user.nowTimestamp)? leaveDetail.fromDate: ec.user.nowTimestamp"/>
            </if>
            <set field="partyRelationshipId" from="leaveDetail.partyRelationshipId"/>
            <entity-find-one entity-name="mantle.humanres.employment.EmploymentAndRelationship" value-field="employment"/>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="employeePartyDetail" auto-field-map="[partyId:employment.fromPartyId]"/>
            <service-call name="mchile.GeneralServices.get#RutForParty" in-map="[partyId:employment.fromPartyId]" out-map="rutMap"/>
            <set field="employeeRut" from="rutMap.rut"/>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="employerPartyDetail" auto-field-map="[partyId:employment.toPartyId]"/>
            <service-call name="mchile.GeneralServices.get#RutForParty" in-map="[partyId:employment.fromPartyId]" out-map="rutMap"/>
            <set field="employerRut" from="rutMap.rut"/>
            <set field="fromDate" from="leaveDetail.fromDate"/>
            <set field="thruDate" from="leaveDetail.thruDate"/>
            <set field="days" from="-leaveDetail.diffAmount"/>
            <if condition="documentType == 'vacaciones'">
                <entity-find entity-name="mchile.humanteam.employment.LeaveDetail" list="previousLeaves">
                    <econdition field-name="partyRelationshipId"/>
                    <econdition field-name="amountUomId" value="TF_day"/>
                    <econdition field-name="leaveTypeEnumId" value="PltFeriadoLegal"/>
                    <econdition field-name="thruDate" operator="less-equals" from="certificateDate"/>
                    <order-by field-name="thruDate"/>
                </entity-find>
                <set field="accruedAmount" from="0" type="BigDecimal"/>
                <iterate entry="leave" list="previousLeaves">
                    <set field="accruedAmount" from="accruedAmount + leave.diffAmount"/></iterate>
                <set field="accruedDate" from="previousLeaves? previousLeaves.get(previousLeaves.size()-1).thruDate: certificateDate"/>
            </if>
            <set field="templateLocation" value="component://MoquiChile/template/humanteam/CertificadoAusencia.xsl-fo.ftl"/>

        </actions>
    </service>

</services>