<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">


    <service verb="genera" noun="Factura">
        <description>
            Generación de factura de acuerdo a plantilla
            <!-- TODO: DTE de otros tipos -->
        </description>
        <in-parameters>
            <parameter name="tipoFacturaS" required="true"/>
            <parameter name="rutReceptor" required="true"/>
            <parameter name="rznSocReceptor" required="true"/>
            <parameter name="giroReceptor" required="true"/>
            <parameter name="contactoReceptor" required="true"/>
            <parameter name="dirReceptor" required="true"/>
            <parameter name="cmnaReceptor" required="true"/>
            <parameter name="ciudadReceptor" default-value="${cmnaReceptor}"/>
            <parameter name="detailList" type="List" required="true"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="medioPago" required="true"/>
            <parameter name="formaPago" required="true" type="String"/>
            <parameter name="textoReferencia"/>
        </in-parameters>
        <out-parameters>
            <parameter name="factura"/>
        </out-parameters>
        <actions>
            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]" out-map="context"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_FACTURA']" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>

            <!-- Obtención de folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[dteTypeEnumId:tipoFacturaS]" out-map="context"/>
            <set field="folioS" from="folio" type="Integer"/>
            <script>
                cafS = cafS + caf
            </script>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDefType.Documento.Referencia;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                int folio;
                DTEDocument doc;
                AutorizacionType caf;
                X509Certificate cert;
                PrivateKey key;
                int tipoFactura;
                int frmPago;

                // Leo el folio
                folio = Integer.valueOf(folioS);
                tipoFactura = Integer.valueOf(tipoFacturaS);
                frmPago = Integer.valueOf(formaPago);


                //if (tipoFactura != 33 oo tipoFactura != 34) {
                //    throw new Exception("Debe ingresar tipo de factura 33 o 34");
                //}
                // Leo Autorizacion
                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                caf = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts).getAUTORIZACION();


                // Construyo base a partir del template
                doc = DTEDocument.Factory.parse(new File(plantillaS), opts);

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)


                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Se recorre lista de productos para armar documento (detailList)

                IdDoc iddoc = doc.getDTE().getDocumento().getEncabezado().addNewIdDoc();
                iddoc.setFolio(folio);
                doc.getDTE().getDocumento().setID("N" + iddoc.getFolio());

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura));

                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                // Indicador Servicio
                // 3 para Factura de Servicios
                // Para Facturas de Exportación:
                //   4 Servicios de Hotelería
                //   5 Servicio de Transporte Terrestre Internacional
                iddoc.setIndServicio(BigInteger.valueOf(3));

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                // Medio y forma de pago
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago));
                iddoc.setFmaPago(BigInteger.valueOf(frmPago));

                // Referencia
                //iddoc.setReferencia(textoReferencia);

                // Receptor
                Receptor recp = doc.getDTE().getDocumento().getEncabezado().addNewReceptor();
                recp.setRUTRecep(rutReceptor);
                recp.setRznSocRecep(rznSocReceptor);
                recp.setGiroRecep(giroReceptor);
                recp.setContacto(contactoReceptor);
                recp.setDirRecep(dirReceptor);
                recp.setCmnaRecep(cmnaReceptor);
                recp.setCiudadRecep(ciudadReceptor);

            </script>
            <if condition="tipoFactura == 33">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();

                    tot.setMntNeto(totalInvoice);
                    tot.setTasaIVA(BigDecimal.valueOf(19));
                    // Valor de solo IVA
                    totalIVA = totalInvoice * 0.19
                    tot.setIVA(totalIVA)
                    // total neto + IVA
                    totalInvoice = totalInvoice + totalIVA
                    tot.setMntTotal(totalInvoice);
                </script>
            </if>
            <if condition="tipoFactura == 34">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);
                </script>
            </if>
            <!-- TODO: Nota de Crédito Electrónica -->
            <if condition="tipoFactura == 61">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);
                </script>
            </if>
            <script>

                // Timbro

                doc.getDTE().timbrar(caf.getCAF(), caf.getPrivateKey(null));

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);

                // releo el doc para que se reflejen los cambios de formato
                doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts);

                // Guardo
                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                String uri = "";

                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                if (doc.getDTE().isSetDocumento()) {
                    uri = doc.getDTE().getDocumento().getID();
                    doc.getDTE().getDocumento().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetLiquidacion()) {
                    uri = doc.getDTE().getLiquidacion().getID();
                    doc.getDTE().getLiquidacion().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetExportaciones()) {
                    uri = doc.getDTE().getExportaciones().getID();
                    doc.getDTE().getExportaciones().xsetTmstFirma(now);
                }

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                doc.save(new File(resultS + "FACT" + folio + "-sinfirma.xml"), opts);
                doc.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "Documento");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "Documento")) {
                    Path path = Paths.get(resultS + "FACT" + folio + ".xml");
                    Files.write(path, salida);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "FACT" + folio + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar factura folio "+folio);
                }
            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->
            <set field="fiscalTaxDocumentId" from="tipoFacturaS+folioS"/>
            <set field="fiscalTaxDocumentTypeEnumId" from="tipoFacturaS"/>
            <set field="amount" from="totalInvoice"/>
            <set field="folio" from="folioS"/>
            <set field="xml" value="FACT${folio}.xml"/>
            <set field="pdf" value="FACT${folio}.pdf"/>
            <set field="receptor" from="rutReceptor"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf, dte:xml]" out-map="context"/>
            <set field="xml" value="${resultS}FACT${folio}.xml"/>
            <set field="pdf" value="${pathPdf}FACT${folio}.pdf"/>
            <service-call name="create#tfpos.FiscalTaxDocument" in-map="context" out-map="context"/>

        </actions>
    </service>

    <service verb="generaEnvio" noun="Documentos">
        <description>
            Generación de envio documento a partir de facturas ya generadas.

            En esta implementación se genera envío con una sola factura, pues se requiere que todas las facturas sean para el mismo receptor

        </description>
        <in-parameters>
            <parameter name="recepS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="idS" required="true"/>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="xml" required="true"/>
            <!--parameter name="listaFacturas" required="true" type="List"/-->
        </in-parameters>
        <out-parameters>
            <parameter name="archivoEnvio"/>
        </out-parameters>
        <actions>

            <set field="documentoS" from="xml"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:recepS]" out-map="context"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]" out-map="context"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_ENVIO']" out-map="context"/>
            <set field="plantillaEnvio" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>

            <!-- Variable para guardar nombre de archivo del envio -->
            <set field="archivoEnvio" value=""/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Date;
                import java.util.HashMap;

                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula.SubTotDTE;

                // Construyo Envio
                EnvioDTEDocument envio = EnvioDTEDocument.Factory.parse(new FileInputStream(plantillaEnvio));

                // Debo agregar el schema location (Sino SII rechaza)
                XmlCursor cursor = envio.newCursor();
                if (cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioDTE_v10.xsd");
                }

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Asigno un ID
                envio.getEnvioDTE().getSetDTE().setID(idS);

                cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula car =
                envio.getEnvioDTE().getSetDTE().getCaratula();

                car.setRutReceptor(recepS);
                car.setRutEnvia(enviadorS);

                // documentos a enviar
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // Cantidad de documentos a enviar
                //DTEDefType[] dtes = new DTEDefType[otherArgs.length];

                //String[] otherArgs = parser.getRemainingArgs();
                String[] DTEList = new String[1];

                // TODO: Armar lista de documentos
                DTEList[0] = documentoS;

                DTEDefType[] dtes = new DTEDefType[DTEList.size()];

                logger.warn("Tamaño:" + DTEList.size()+ " - Ubic 1 : " + DTEList[0]);

                HashMap&lt;Integer, Integer&gt; hashTot = new HashMap&lt;Integer, Integer&gt;();

                for (int i = 0; i &lt; DTEList.length; i++) {
                    dtes[i] = DTEDocument.Factory.parse(new FileInputStream(DTEList[i]), opts).getDTE();
                    // armar hash para totalizar por tipoDTE
                    if (hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) != null) {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(),
                        hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) + 1);
                    } else {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(), 1);
                    }
                }
                SubTotDTE[] subtDtes = new SubTotDTE[hashTot.size()];
                int i = 0;
                for (Integer tipo : hashTot.keySet()) {
                    SubTotDTE subt = SubTotDTE.Factory.newInstance();
                    subt.setTpoDTE(new BigInteger(tipo.toString()));
                    subt.setNroDTE(new BigInteger(hashTot.get(tipo).toString()));
                    subtDtes[i] = subt;
                    i++;
                }

                car.setSubTotDTEArray(subtDtes);
                // Le doy un formato bonito (debo hacerlo antes de firmar para no
                // afectar los DTE internos)
                opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);
                envio = EnvioDTEDocument.Factory.parse(envio.newInputStream(opts));


                envio.getEnvioDTE().getSetDTE().setDTEArray(dtes);

                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                envio.getEnvioDTE().getSetDTE().getCaratula().xsetTmstFirmaEnv(now);


                // firmo
                //envio.sign(pKey, x509);


                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                envio.save(new File(pathResults + "ENV" + idS + "-sinfirma.xml"), opts);
                envio.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, "#" + idS, pKey, x509, "#" + idS,"SetDTE");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "SetDTE")) {
                    archivoEnvio = pathResults + "ENV" + idS + ".xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + ".xml");
                    Files.write(path, salida);
                    logger.warn("Envio generado OK");
                } else {
                    archivoEnvio = pathResults + "ENV" + idS + "-mala.xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar envio");
                }
            </script>

            <!-- Se guarda referencia a XML de envío en BD -->

            <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="fiscalTaxDocumentField" cache="false" for-update="true" />
            <log message="Encontrado: $fiscalTaxDocumentField" level="warn"/>
            <set field="fiscalTaxDocumentField.envio" from="archivoEnvio" type="String"/>
            <entity-update value-field="fiscalTaxDocumentField"/>

        </actions>
    </service>

    <service verb="enviaSII" noun="Documento">
        <description>
            Envio documento a partir de documento envio ya generado
            compaS: rut de compañía que envía
            enviadorS: rut de persona que envía
            documentoS: nombre de documento a enviar (que puede contener varios)
        </description>
        <in-parameters>
            <parameter name="compaS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="documentoS" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
        <actions>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]" out-map="context"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>

            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;


                ConexionSii con = new ConexionSii();
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);

                logger.warn("Token: " + token);

                String enviadorS = Utilities.getRutFromCertificate(x509);

                RECEPCIONDTEDocument recp = con.uploadEnvioCertificacion(enviadorS, compaS, new File(documentoS), token);
                logger.warn("-----------------");
                logger.warn(recp.xmlText());

                // Se verifica si el status es 0

                String statusXML = recp.xmlText();
                int inicio = statusXML.indexOf("&lt;siid:STATUS&gt;");
                int fin = statusXML.indexOf("&lt;/siid:STATUS&gt;");

                statusXML = statusXML.substring(inicio+1,fin);
                statusXML = statusXML.replaceAll("siid:STATUS&gt;","");
                logger.warn("STATUS: " + statusXML);

                if(statusXML.equals("0")) {
                    trackId = recp.xmlText();
                    inicio = trackId.indexOf("&lt;siid:TRACKID&gt;");
                    fin = trackId.indexOf("&lt;/siid:TRACKID&gt;");
                    trackId = trackId.substring(inicio+1,fin);
                    trackId = trackId.replaceAll("siid:TRACKID&gt;","");
                    logger.warn("DTE Enviada correctamente con trackId " + trackId);
                } else {
                    logger.warn("Error "+ statusXML + " al enviar DTE");
                }

                logger.warn(textXML);
                logger.warn("-----------------");

            </script>

        </actions>
    </service>

    <service verb="load" noun="DTEConfig">
        <description>
            Carga parametros desde archivo resources
        </description>
        <in-parameters>
            <parameter name="resourceName" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resourceValue"/>
        </out-parameters>
        <actions>
            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Properties;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                Properties config = new Properties();
                InputStream input = new FileInputStream("/home/cherrera/git/moqui-framework/runtime/component/moqui-chile/resources/DTEConfig.properties");

                config.load(input);

                resourceValue = config.getProperty(resourceName).toString();
            </script>
        </actions>
    </service>

    <service verb="get" noun="DTEFilename">
        <description>
            Retorna nombre de archivo de DTE
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="format" default-value="'xml'"/>
        </in-parameters>
        <out-parameters>
            <parameter name="filename"/>
            <parameter name="path"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>

            <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="document"/>
            <if condition="format == 'xml'">
                <set field="filename" value="${document.xml}"/>
            </if>
            <if condition="format == 'pdf'">
                <set field="filename" value="${document.pdf}"/>
            </if>
            <set field="path" value="${pathResults}"/>
        </actions>
    </service>

    <service verb="genera" noun="PDF">
        <description>
            Genera archivo PDF de Factura (envio)
        </description>
        <in-parameters>
            <parameter name="pdf" required="true"/>
            <parameter name="dte" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_PDF']" out-map="context"/>
            <set field="template" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>

            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                pdf = pathPdf + pdf;
                dte = pathResults + dte;

                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(template), new FileOutputStream(pdf));

                logger.warn("---------------");
                logger.warn("PDF Generado: " + pdf);
                logger.warn("---------------");
            </script>
        </actions>
    </service>

    <service verb="load" noun="Caf">
        <description>
            Carga CAF en Sistema
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="rut" required="true"/>
            <parameter name="desde" required="true"/>
            <parameter name="hasta" required="true"/>
            <parameter name="fechaAutorizacion" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rut]" out-map="context"/>
            <!-- TODO: Parseado de CAF -->
            <set field="archivo" from="filename.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="fileRoot" value="${resourceValue}"/>
            <set field="contentLocation" value="${fileRoot}/${archivo}"/>

            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>
            <script>
                fileStream = filename.getInputStream()
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <set field="updateMap" from="[filename:archivo,desde:desde, hasta:hasta, dteTypeEnumId:dteTypeEnumId, fechaAutorizacion:fechaAutorizacion,rut:rut, ultimoFolio:desde]"/>
            <service-call name="create#MoquiChile.Caf" out-map="context" in-map="updateMap"/>
        </actions>
    </service>

    <service verb="get" noun="Folio">
        <description>
            Obtiene folio para el tipo de DTE especificado.
            Cuida de no repetir el folio
        </description>
        <in-parameters>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
            <parameter name="caf"/>
        </out-parameters>
        <actions>
            <!-- Se filtra por CAF activo (PK) para el tipo de DTE -->
            <set field="activo" value="true"/>
            <entity-find-one entity-name="MoquiChile.Caf" value-field="cafEntry" for-update="true"/>

            <if condition="!cafEntry">
                <return error="true" message="No existe CAF activo para DTE tipo ${dteTypeEnumId}"/>
            </if>

            <script>
                cafEntry.ultimoFolio = cafEntry.ultimoFolio + 1
            </script>

            <if condition="cafEntry.ultimoFolio &lt; cafEntry.desde">
                <return message="Error en CAF" error="true"/>
            </if>

            <if condition="cafEntry.ultimoFolio &gt; cafEntry.hasta">
                <return message="No se pueden usar más folios de CAF actual" error="true"/>
            </if>


            <entity-update value-field="cafEntry"/>
            <set field="folio" from="cafEntry.ultimoFolio"/>

            <set field="caf" from="cafEntry.filename"/>

        </actions>
    </service>

    <service verb="facturar" noun="Invoice">
        <description>
            Obtiene datos para llamar a método generar#Factura
        </description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
            <parameter name="textoReferencia"/>
        </in-parameters>
        <actions>
            <!-- Manejo forma y medio de pago -->

            <service-call name="mantle.account.InvoiceServices.get#InvoiceDisplayInfo" in-map="[invoiceId:invoiceId]" out-map="context"/>
            <set field="paymentId" from="paymentApplicationList.paymentId"/>

            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <!-- Ajuste de forma de pago -->
            <set field="medioPago" value="OT"/>
            <set field="formaPago" value="3"/>
            <if condition="payment.paymentInstrumentEnumId == 'PiCreditCard'">
                <set field="medioPago" value="TC"/>
                <set field="formaPago" value="2"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheck'">
                <set field="medioPago" value="CH"/>
                <set field="formaPago" value="1"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheck'">
                <set field="medioPago" value="CH"/>
                <set field="formaPago" value="1"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheckDate'">
                <set field="medioPago" value="CF"/>
                <set field="formaPago" value="2"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheckDate'">
                <set field="medioPago" value="CF"/>
                <set field="formaPago" value="2"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiCash'">
                <set field="medioPago" value="EF"/>
                <set field="formaPago" value="1"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiLetra'">
                <set field="medioPago" value="LT"/>
                <set field="formaPago" value="2"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiBillingAccount'">
                <set field="medioPago" value="PE"/>
                <set field="formaPago" value="1"/>
            </if>


            <!-- Datos principales de invoice -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="invoice == null"><return error="true" message="Invoice not found with ID ${invoiceId}"/></if>
            <set field="partyId" from="invoice.toPartyId"/>
            <set field="toPartyId" from="invoice.toPartyId"/>

            <!-- Items de invoice -->
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/></entity-find>

            <!-- email receptor -->
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:toPartyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo"/>
            </if>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <!-- Datos para encontrar contacto -->

            <set field="contactMechId"/>

            <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="contactMechPurposeId" value="PostalTax"/>
            </entity-find-one>
            <set field="contactMechId" from="contactMechField.contactMechId"/>


            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <set field="cmnaReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>

            <!-- TODO: party puede ser Organization o Persona -->
            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <set field="giroReceptor" from="organizationField.giro"/>
                <!-- Obtención de contacto en organización -->
                <entity-find-one entity-name="mantle.party.PartyRelationship" value-field="relationField">
                    <field-map field-name="toPartyId" from="partyId"/>
                    <field-map field-name="relationshipTypeEnumId" value="PtrAgent"/>
                </entity-find-one>
                <if condition="relationField">
                    <set field="partyIdReceptor" from="relationField.fromPartyId"/>
                    <entity-find-one entity-name="mantle.party.Person" value-field="personField">
                        <field-map field-name="partyId" from="partyIdReceptor"/>
                    </entity-find-one>
                    <set field="contactoReceptor" from="personField.firstNAme"/>
                    <script>
                        contactoReceptor = contactoReceptor + " " + personField.lastName
                    </script>
                </if>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>


            <!-- Generacion de factura -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[tipoFacturaS:dteTypeEnumId, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:invoiceItemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, textoReferencia:textoReferencia]" out-map="context"/>
        </actions>
    </service>

    <service verb="activar" noun="Caf">
        <description>
            Activa CAF para ser usado
        </description>
        <in-parameters>
            <parameter name="cafId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="MoquiChile.Caf" value-field="cafField" for-update="true"/>

            <if condition="!cafField">
                <return error="true" message="No existe CAF"/>
            </if>

            <set field="cafField.activo" value="true"/>
            <entity-update value-field="cafField"/>
        </actions>
    </service>

    <service verb="desactivar" noun="Caf">
        <description>
            Desactiva CAF para no ser usado
        </description>
        <in-parameters>
            <parameter name="cafId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="MoquiChile.Caf" value-field="cafField" for-update="true"/>

            <if condition="!cafField">
                <return error="true" message="No existe CAF"/>
            </if>

            <set field="cafField.activo" value="" type="String"/>
            <entity-update value-field="cafField"/>
        </actions>
    </service>


    <service verb="preparaEnvio" noun="Documentos">
        <description>
            Obtiene datos para llamar a servicio enviar#Documento
        </description>
        <in-parameters>
            <parameter name="documentIds" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'RUT_ENVIADOR']" out-map="context"/>
            <set field="enviadorS" value="${resourceValue}"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'RUT_EMPRESA']" out-map="context"/>
            <set field="compaS" value="${resourceValue}"/>

            <set field="documentList" from="documentIds instanceof List ? documentIds : documentIds.split(',') as List"/>

            <iterate list="documentList" entry="document">
                <set field="documentTemp" from="document instanceof List ? document : document.split('-') as List"/>
                <set field="fiscalTaxDocumentId" value="${documentTemp[0]}"/>
                <set field="fiscalTaxDocumentTypeEnumId" value="${documentTemp[1]}"/>

                <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="detalleDocumento"/>
                <set field="idS" value="Doc${fiscalTaxDocumentId}-${detalleDocumento.folio}"/>
                <set field="recepS" from="detalleDocumento.receptor"/>
                <set field="xml" from="detalleDocumento.xml"/>

                <service-call name="mchile.DTEServices.generaEnvio#Documentos" in-map="[recepS:recepS, enviadorS:enviadorS, idS:idS,
                        fiscalTaxDocumentId:fiscalTaxDocumentId, xml:xml, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]" out-map="context"/>
                <set field="documentoS" from="archivoEnvio"/>
                <!-- TODO: Enviar finalmente al SII -->
                <service-call name="mchile.DTEServices.enviaSII#Documento" in-map="[compaS:compaS, enviadorS:enviadorS , documentoS:documentoS]" out-map="context"/>
            </iterate>
        </actions>
    </service>


    <service verb="verificaEnSII" noun="Documento">
        <description>
            Verificación en el SII de DTE ya enviado
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
        </in-parameters>
        <actions>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>

            <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="fiscalTaxDocumentField" cache="false" for-update="false"/>

            <if condition="!fiscalTaxDocumentField">
                <return error="true" message="DTE no existe"/>
            </if>

            <set field="envio" from="fiscalTaxDocumentField.xml" type="String"/>
            <set field="salida" value=""/>

            <script>
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.HashMap;

                import org.apache.xmlbeans.XmlOptions;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.xmlSchema.RESPUESTADocument;

                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                DTEDocument doc = DTEDocument.Factory.parse(new FileInputStream(envio), opts);

                ConexionSii con = new ConexionSii();

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                System.out.println("Usando certificado " + alias + " del archivo PKCS12: " + certS);


                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);

                System.out.println("Token: " + token);

                String enviadorS = Utilities.getRutFromCertificate(x509);

                RESPUESTADocument resp = con.getEstadoDTECertificacion(enviadorS, doc.getDTE().getDocumento(), token);
                opts.setSavePrettyPrintIndent(2);
                opts.setSavePrettyPrint();
                resp.save(System.out, opts);

                logger.warn("------" + resp.toString())

                salida = resp.toString();

            </script>
            <return error="false" message="${salida}"/>
        </actions>
    </service>

    <service verb="load" noun="Dte">
        <description>
            Carga DTE recibida al sistema
        </description>
        <in-parameters>
            <parameter name="nroDocumento" required="true"/>
            <parameter name="xml" type="org.apache.commons.fileupload.FileItem" required="false"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="false"/>
            <parameter name="emisor" required="true"/>
            <parameter name="amount" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:emisor]" out-map="context"/>

            <set field="archivoPdf" from="pdf.getName()"/>
            <set field="archivoXml" from="xml.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RECIBIDAS']" out-map="context"/>
            <set field="fileRoot" value="${resourceValue}"/>
            <set field="contentLocationPdf" value="${fileRoot}/${archivoPdf}"/>
            <set field="contentLocationXml" value="${fileRoot}/${archivoXml}"/>

            <set field="docRrPdf" from="ec.resource.getLocationReference(contentLocationPdf)"/>
            <set field="docRrXml" from="ec.resource.getLocationReference(contentLocationXml)"/>
            <script>
                fileStream = pdf.getInputStream()
                try { docRrPdf.putStream(fileStream) } finally { fileStream.close() }

                fileStream = xml.getInputStream()
                try { docRrXml.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <set field="updateMap" from="[fiscalTaxDocumentId:nroDocumento, pdf:contentLocationPdf, xml:contentLocationXml,fiscalTaxDocumentTypeEnumId:dteTypeEnumId, emisor:emisor, amount:amount]"/>
            <service-call name="create#tfpos.FiscalTaxDocument" out-map="context" in-map="updateMap"/>
        </actions>
    </service>

    <service verb="generar" noun="NotaCredito">
        <description>
            Obtiene datos para llamar a método generar#Factura para Nota de Crédito
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO: Datos para nota de crédito -->

            <!-- Datos de devolución, para armar nota de crédito -->
            <service-call name="mantle.order.ReturnServices.get#ReturnDisplayInfo" in-map="[returnId:returnId]" out-map="context"/>
            <!--
               vendorPartyId
               customerPartyId
               postalContactMechId
               productId
               orderId
               returnQuantity
               responseAmount

            -->

            <!-- Recuperación de referencias -->
            <entity-find entity-name="MoquiChile.ReferenciaReturn" list="referenciaList">
                <econdition field-name="returnId" from="returnId"/>
            </entity-find>
            <return error="true" message="************* Referencias: $referenciaList"/>

            <!-- Items de invoice -->
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/></entity-find>

            <!-- email receptor -->
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:toPartyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo"/>
            </if>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <!-- Datos para encontrar contacto -->

            <set field="contactMechId"/>

            <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="contactMechPurposeId" value="PostalTax"/>
            </entity-find-one>
            <set field="contactMechId" from="contactMechField.contactMechId"/>


            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <set field="cmnaReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>

            <!-- TODO: party puede ser Organization o Persona -->
            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <set field="giroReceptor" from="organizationField.giro"/>
                <!-- Obtención de contacto en organización -->
                <entity-find-one entity-name="mantle.party.PartyRelationship" value-field="relationField">
                    <field-map field-name="toPartyId" from="partyId"/>
                    <field-map field-name="relationshipTypeEnumId" value="PtrAgent"/>
                </entity-find-one>
                <if condition="relationField">
                    <set field="partyIdReceptor" from="relationField.fromPartyId"/>
                    <entity-find-one entity-name="mantle.party.Person" value-field="personField">
                        <field-map field-name="partyId" from="partyIdReceptor"/>
                    </entity-find-one>
                    <set field="contactoReceptor" from="personField.firstNAme"/>
                    <script>
                        contactoReceptor = contactoReceptor + " " + personField.lastName
                    </script>
                </if>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>


            <!-- Generacion de nota de crédito -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[tipoFacturaS:'61', rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:invoiceItemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, textoReferencia:textoReferencia]" out-map="context"/>
        </actions>
    </service>

    <service verb="agregar" noun="Referencia">
        <description>
            Agrega una referencia para DTE
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="folio" required="true"/>
            <parameter name="rutOtroContribuyente" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
            <parameter name="idAdicional"/>
            <parameter name="fecha" required="true"/>
            <parameter name="codigoReferenciaEnumId" required="true"/>
            <parameter name="razonReferencia"/>
        </in-parameters>
        <actions>
            <!-- Verificación de RUT -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutOtroContribuyente]"/>

            <log message="***** codigoReferenciaEnumId: $codigoReferenciaEnumId, idAdicional: $idAdicional "/>

            <!-- Inserción en tabla referenceReturn -->
            <set field="createMap" from="[dteTypeEnumId:dteTypeEnumId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, returnId:returnId]"/>
            <service-call name="create#MoquiChile.ReferenciaReturn" out-map="context" in-map="createMap"/>
        </actions>
    </service>

    <service verb="eliminar" noun="Referencia">
        <description>
            Eliminar referencia de una DTE
        </description>
        <in-parameters>
            <parameter name="referenciaReturnId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="MoquiChile.ReferenciaReturn" value-field="referenciaField" for-update="true"/>
            <entity-delete value-field="referenciaField"/>
        </actions>
    </service>

</services>