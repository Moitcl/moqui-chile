<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="escape" noun="Characters">
        <in-parameters>
            <parameter name="cadenaString" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="outString"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                // Escapamos letras o signos
                StringBuilder sb = new StringBuilder();
                for(int i = 0; i < cadenaString.length(); i++){
                    char c = cadenaString.charAt(i);
                    switch(c){
                        case '<': sb.append("&lt;"); break;
                        case '>': sb.append("&gt;"); break;
                        case '\"': sb.append("&quot;"); break;
                        case '&': sb.append("&amp;"); break;
                        case '\'': sb.append("&apos;"); break;
                        case 'Ñ': sb.append("&Ntilde;"); break;
                    default:
                        if(c>0x7e) {
                            sb.append("&#"+((int)c)+";");
                        } else {
                            sb.append(c);
                        }
                    }
                }
                outString = sb.toString();
            ]]></script>
            <set field="outString" from="sb.toString()"/>
        </actions>
    </service>

    <service verb="genera" noun="Factura">
        <description>
            Generación de DTE de acuerdo a plantilla
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="rutReceptor" required="true"/>
            <parameter name="receiverPartyId" required="true"/>
            <parameter name="rznSocReceptor" required="true"/>
            <parameter name="giroReceptor" required="true"/>
            <parameter name="contactoReceptor" required="true"/>
            <parameter name="dirReceptor" required="true"/>
            <parameter name="cmnaReceptor" required="true"/>
            <parameter name="ciudadReceptor" default-value="${cmnaReceptor}"/>
            <parameter name="detailList" type="List" required="false"/>
            <parameter name="invoiceId" required="false"/>
            <parameter name="medioPago" required="false"/>
            <parameter name="formaPago" required="false" type="String"/>
            <parameter name="referenciaList" type="List"/>
            <parameter name="globalDiscount"/>
            <parameter name="glosaDr"/>
            <parameter name="indTraslado"/>
            <parameter name="tipoDespacho"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <entity-find-one entity-name="mantle.party.Organization" value-field="orgField">
                <field-map field-name="partyId" from="activeOrgId"/>
                <select-field field-name="giro"/>
                <select-field field-name="templateFactura"/>
                <select-field field-name="templatePdf"/>
                <select-field field-name="templateEnvio"/>
                <select-field field-name="templateAceptaciones"/>
                <select-field field-name="templateLibro"/>
                <select-field field-name="logo"/>
                <select-field field-name="fchResol"/>
                <select-field field-name="nroResol"/>
            </entity-find-one>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:emisorS]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:orgField.templateFactura]" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>

            <!-- Recuperación del código SII de DTE -->
            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
            <set field="tipoFactura" from="codeOut.siiCode"/>
            <set field="tipoFacturaS" from="codeOut.siiCode"/>

            <set field="fechaEmision"/>

            <!-- Obtención de folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, activeOrgId:activeOrgId]" out-map="context"/>

            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                cafS = cafS + caf
            </script>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDefType.Documento.Referencia;
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal;
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;


                int folio;
                DTEDocument doc;
                AutorizacionType caf;
                X509Certificate cert;
                PrivateKey key;
                int tipoFactura;
                int frmPago = 1;
                int listSize = 0;

                // Leo el folio
                folio = Integer.valueOf(folioS);
                tipoFactura = Integer.valueOf(tipoFacturaS);
                if(formaPago != null)
                   frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                caf = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts).getAUTORIZACION();


                // Construyo base a partir del template
                doc = DTEDocument.Factory.parse(new File(plantillaS), opts);

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)


                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Se recorre lista de productos para armar documento (detailList)

                IdDoc iddoc = doc.getDTE().getDocumento().getEncabezado().addNewIdDoc();
                iddoc.setFolio(folio);
                // Obtención de ID distinto
                logger.warn("id: " + System.nanoTime());
                //doc.getDTE().getDocumento().setID("N" + iddoc.getFolio());
                doc.getDTE().getDocumento().setID("N" + System.nanoTime());

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura));
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);
                // Indicador Servicio
                // 3 para Factura de Servicios
                // Para Facturas de Exportación:
                //   4 Servicios de Hotelería
                //   5 Servicio de Transporte Terrestre Internacional
                //iddoc.setIndServicio(BigInteger.valueOf(3));

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                // Medio y forma de pago
                if (medioPago != null ) {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago));
                } else {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"));
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago));

                // Si es guía de despacho se configura indicador de traslado
                if(BigInteger.valueOf(tipoFactura) == 52) {
                    iddoc.setIndTraslado(Long.valueOf(indTraslado));
                    if(tipoDespacho != null) {
                        iddoc.setTipoDespacho(Long.valueOf(tipoDespacho));
                    }
                }
            </script>
            <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:cmnaReceptor]" out-map="context"/>
            <set field="cmnaReceptor" from="outString"/>
            <service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:dirReceptor]" out-map="context"/>
            <set field="dirReceptor" from="outString"/-->
            <script>

                // Receptor
                Receptor recp = doc.getDTE().getDocumento().getEncabezado().addNewReceptor();
                recp.setRUTRecep(rutReceptor.trim());
                recp.setRznSocRecep(rznSocReceptor);
                recp.setGiroRecep(giroReceptor);
                recp.setContacto(contactoReceptor);
                recp.setDirRecep(dirReceptor);
                recp.setCmnaRecep(cmnaReceptor);
                recp.setCiudadRecep(ciudadReceptor);
            </script>
            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>
            <set field="totalNeto" value="0" type="Long"/>
            <set field="totalExento" value="0" type="Long"/>


            <if condition="tipoFactura == 33">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                    <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                    <set field="pctDiscount" from="detailEntry.pctDiscount"/>
                    <script>

                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        if((pctDiscount != null) &amp;&amp; (pctDiscount &gt; 0)) {
                            logger.warn("Aplicando descuento " + pctDiscount+"% a precio "+ priceItem );
                            descuento = totalItem * pctDiscount / 100;
                            logger.warn("Descuento:" + descuento);
                            //totalInvoice = totalInvoice + totalItem - descuento
                            det[i].setDescuentoPct(pctDiscount);
                            det[i].setDescuentoMonto(Math.round(descuento));
                            totalItem = totalItem - descuento
                        }
                        // Descuento global
                        if((itemAfecto.equals("true"))  &amp;&amp; (globalDiscount != null) &amp;&amp; (Integer.valueOf(globalDiscount) &gt; 0)) {
                            logger.warn("Aplicando descuento global " + globalDiscount+"% a precio "+ priceItem );
                            //descuento = totalItem * Integer.valueOf(globalDiscount) / 100;
                            logger.warn("Descuento:" + descuento);
                            //det[i].setDescuentoPct(pctDiscount);
                            //det[i].setDescuentoMonto(Math.round(descuento));
                            //totalItem = totalItem - Math.round(descuento)
                            //logger.warn("precio inicial item: " + priceItem);
                            //priceItem = Math.round(priceItem - (priceItem * Integer.valueOf(globalDiscount) / 100));
                            //logger.warn("precio final item:" + priceItem);
                        }
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( Math.round(totalItem));
                        if(itemAfecto.equals("true")) {
                            totalNeto = totalNeto + totalItem
                        } else {
                            totalExento = totalExento + totalItem
                            det[i].setIndExe(1);
                        }

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    i = 0
                    listSize = referenciaList.size()
                    Referencia[] ref = new Referencia[listSize]
                </script>
                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('0')) { // Used for Set de Pruebas SII
                            ref[i].setTpoDocRef('SET');
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                            ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                            ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        } else {
                    </script>
                    <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                    <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                            //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                            ref[i].setTpoDocRef(tpoDocRef);
                            ref[i].setRUTOtr(rutReceptor);
                            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                            Date date = formatter.parse(fechaRef);
                            ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                            ref[i].setCodRef(codRef);
                            ref[i].setRazonRef(referenciaEntry.razonReferencia);
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>

                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Descuento Global
                    if(globalDiscount != null &amp;&amp; Integer.valueOf(globalDiscount) > 0) {
                        logger.warn("Descuento global:" + globalDiscount);
                        long descuento = totalNeto * Integer.valueOf(globalDiscount) / 100;
                        logger.warn("Descuento::" + descuento);
                        totalNeto = totalNeto - descuento
                        // Creación entradas en XML

                        DscRcgGlobal dscGlobal = DscRcgGlobal.Factory.newInstance();
                        // iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"));
                        dscGlobal.setNroLinDR(BigInteger.valueOf(1));
                        dscGlobal.setTpoMov(DscRcgGlobal.TpoMov.Enum.forString("D"));
                        dscGlobal.setTpoValor(cl.sii.siiDte.DineroPorcentajeType.Enum.forString("%"));
                        //dscGlobal.setValorDR(BigDecimal.valueOf(descuento));// Porcentaje Dscto
                        dscGlobal.setValorDR(BigDecimal.valueOf(Integer.valueOf(globalDiscount)));// Porcentaje Dscto
                        dscGlobal.setGlosaDR(glosaDr);
                        DscRcgGlobal[] dscGB = new DscRcgGlobal[1];
                        dscGB[0] = dscGlobal;
                        doc.getDTE().getDocumento().setDscRcgGlobalArray(dscGB);
                    }
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntNeto(Math.round(totalNeto));
                    montoNeto = totalNeto;
                    tot.setTasaIVA(BigDecimal.valueOf(19));
                    // Valor de solo IVA
                    long totalIVA = Math.round(totalNeto * 0.19)
                    montoIVARecuperable = totalIVA;
                    tot.setIVA(totalIVA)
                    logger.warn("monto neto:" + montoNeto);
                    logger.warn("total IVA:" + totalIVA);
                    // total neto + IVA
                    totalInvoice = totalNeto + totalIVA + totalExento
                    tot.setMntTotal(Math.round(totalInvoice))
                    logger.warn("Total Exento: " + totalExento);
                    if(totalExento &gt; 0) {
                        tot.setMntExe(Math.round(totalExento));
                    }
                </script>
            </if>

            <if condition="tipoFactura == 34">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <if condition="detailEntry.quantityUomId">
                        <set field="uom" value="Hora"/>
                    </if>

                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->

                    <script><![CDATA[

                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        det[i].setIndExe(1);
                        if(uom != null)
                            det[i].setUnmdItem(uom);
                        totalInvoice = totalInvoice + totalItem
                        montoNeto = 0
                        montoExento = totalInvoice

                        i = i + 1
                    ]]></script>
                </iterate>
                <script>
                    i = 0
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                        listSize = referenciaList.size();
                        ref = new Referencia[listSize];
                    } else {
                        listSize = 0;
                    }
                    //Referencia[] ref = new Referencia[listSize]

                </script>


                <iterate list="referenciaList" entry="referenciaEntry">
                    <log message="Agregando referencia $referenciaEntry" level="warn"/>
                    <set field="folioRef" from="referenciaEntry.folio" type="String"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('0')) { // Used for Set de Pruebas SII
                            ref[i].setTpoDocRef('SET');
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                            ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                            ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        } else {
                    </script>
                            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                            <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                            //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                            ref[i].setTpoDocRef(tpoDocRef);
                            ref[i].setRUTOtr(rutReceptor);
                            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                            Date date = formatter.parse(fechaRef);
                            ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                            ref[i].setCodRef(codRef);
                            ref[i].setRazonRef(referenciaEntry.razonReferencia);
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }
                        i = i + 1
                    </script>
                </iterate>

                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);
                    montoTotal = totalInvoice;
                    montoExento = totalInvoice;

                </script>
            </if>
            <!-- TODO: Nota de Crédito Electrónica -->
            <if condition="tipoFactura == 61">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <log message="Creando DTE tipo 61" level="warn"/>
                <script>

                    i = 0
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                        listSize = referenciaList.size();
                        ref = new Referencia[listSize];
                    } else {
                        listSize = 0;
                    }
                </script>
                <set field="dteExenta" value="false" type="Boolean"/>
                <!-- TODO: Si la referencia es tipo fe de erratas, Monto Item puede ser 0 -->
                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="String"/>

                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);

                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('0')) {
                            ref[i].setTpoDocRef('SET');
                            ref[i].setCodRef(codRef);
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                        } else {
                    </script>
                            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                            <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                            //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                            ref[i].setTpoDocRef(tpoDocRef);
                            ref[i].setCodRef(codRef);
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-34")) {
                            dteExenta = true;
                        }
                        // Valor Opcional
                        //ref[i].xsetIndGlobal('0');
                        //ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        //ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    i = 0;
                </script>
                <iterate list="detailList" entry="detailEntry">
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.returnQuantity" type="Integer"/>

                    <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                    <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>

                    <set field="priceItem" from="detailEntry.returnPrice" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>

                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->
                    <set field="pctDiscount" from="detailEntry.pctDiscount"/>
                    <log message="Descuento item: $pctDiscount" level="warn"/>
                    <script><![CDATA[
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        if(dteExenta) {
                            det[i].setIndExe(1);
                        }
                        if((pctDiscount != null) && (BigDecimal.valueOf(pctDiscount) > 0)) {
                            logger.warn("Aplicando descuento " + pctDiscount+"% a precio "+ priceItem );
                            descuento = totalItem * pctDiscount / 100;
                            logger.warn("Descuento:" + descuento);
                            //totalInvoice = totalInvoice + totalItem - descuento
                            det[i].setDescuentoPct(pctDiscount);
                            det[i].setDescuentoMonto(Math.round(descuento));
                            totalItem = totalItem - Math.round(descuento)
                        }


                        if(BigDecimal.valueOf(codRef) != 2 && BigDecimal.valueOf(codRef) != 1) { // Corrige montos o anula documento
                            logger.warn("codRef == 1 o codRef == 2");
                            if(BigDecimal.valueOf(qtyItem) > 0) {
                                det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                            }
                            if(BigDecimal.valueOf(priceItem) > 0) {
                                det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                            }
                            det[i].setMontoItem( totalItem );
                        } else if (BigDecimal.valueOf(codRef) == 2 ){ // codRef == 2 (Corrige giro) no lleva montos
                            logger.warn("codRef = 2");
                            //det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                            //det[i].setPrcItem( BigDecimal.valueOf(priceItem));
                            //det[i].setMontoItem(totalItem);
                            det[i].setNmbItem("CORRIGE GIROS");
                            det[i].setMontoItem(0);
                            //totalItem = 0
                        } else if( BigDecimal.valueOf(codRef) == 1 ){ // Cod ref == 1
                            logger.warn("codigo ref == 1");
                            det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                            det[i].setPrcItem( BigDecimal.valueOf(priceItem));
                            det[i].setMontoItem(totalItem);
                            //totalItem = 0
                        }
                        totalInvoice = totalInvoice + totalItem
                        if(itemAfecto.equals("true")) {
                            totalNeto = totalNeto + totalItem
                        } else {
                            totalExento = totalExento + totalItem
                            det[i].setIndExe(1);
                        }
                        i = i + 1
                    ]]></script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);

                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();

                    long montoExe = 0;
                    montoNeto = Long.valueOf(Math.round(totalNeto))
                    long montoIva = Math.round(montoNeto * 0.19)
                    long montoTotal = montoIva + montoNeto + totalExento
                    long montoIvaExento = 0
                    // Si la razon es modifica texto (2) no van los montos
                    logger.warn("Codref: " + codRef + ", dteExenta: " + dteExenta);
                    if(BigDecimal.valueOf(codRef) == 1) { // Anulación
                        if(!dteExenta) {
                            tot.setTasaIVA(BigDecimal.valueOf(19));
                            tot.setMntExe(totalExento);
                            tot.setIVA(montoIva);
                            tot.setMntNeto(montoNeto);
                            tot.setMntTotal(montoTotal);
                            montoExento = montoExe;
                            montoIvaRecuperable = montoIva;
                        } else {
                            tot.setMntExe(montoNeto);
                            //tot.setMntNeto(montoNeto);
                            tot.setMntTotal(montoNeto);
                            montoExento = montoNeto;
                            montoIvaRecuperable = 0;
                        }
                    } else if(BigDecimal.valueOf(codRef) != 2) {
                        logger.warn("Else 3")
                        if(!dteExenta) {
                            logger.warn("Else 4")
                            tot.setTasaIVA(BigDecimal.valueOf(19));
                            tot.setMntExe(totalExento);
                            tot.setIVA(montoIva);
                            tot.setMntNeto(montoNeto);
                            tot.setMntTotal(montoTotal);
                            montoExento = montoExe;
                            montoIvaRecuperable = montoIva;
                        } else {
                            logger.warn("Else 5")
                            tot.setMntExe(montoNeto);
                            //tot.setMntNeto(montoNeto);
                            tot.setMntTotal(montoNeto);
                            montoExento = montoNeto;
                            montoIvaRecuperable = 0;
                        }
                    } else { // Modifica Texto
                        if(!dteExenta) {
                            logger.warn("Else 6");
                            //tot.setMntExe(montoNeto);
                            //tot.setMntTotal(montoTotal);
                            tot.setMntNeto(0);
                            tot.setTasaIVA(BigDecimal.valueOf(19));
                            tot.setIVA(0);
                            tot.setMntTotal(0);
                        } else {
                            logger.warn("Else 7");
                            tot.setMntTotal(0);
                        }
                    }

                    //totalInvoice = totalNeto + Math.round(totalIVA) + totalExento
                    //tot.setMntTotal(Math.round(totalInvoice))
                    //if(totalExento &gt; 0) {
                    //    tot.setMntExe(totalExento);
                    //}

                </script>

            </if>
            <!-- TODO: Nota de Débito Electrónica -->
            <if condition="tipoFactura == 56">
                <script>

                    //iddoc.setMntBruto(BigInteger.valueOf(1));

                    int i = 0
                    if(detailList != null) {
                        listSize = detailList.size();
                    } else {
                        listSize = 0;
                    }
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Long"/>
                <set field="totalItempTmp" value="0" type="Long"/>

                <!-- TODO: En este caso la lista de detalles es lo que hay que modificar -->
                <!-- TODO: detailList:[01-1-100.000-102193, 02-1-100.000-11092] -->
                <set field="dteExenta" value="false" type="Boolean"/>
                <script>
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                        listSize = referenciaList.size();
                        ref = new Referencia[listSize];
                    } else {
                        listSize = 0;
                    }

                </script>
                <!-- La referencia es solo a una Nota de Crédito -->
                <iterate list="referenciaList" entry="referenciaEntry">
                <log message="Iterando referencias ${referenciaEntry}" level="warn"/>
                <script>
                    logger.warn("Folio:" + referenciaEntry.folio)
                </script>
                <set field="folioRef" from="referenciaEntry.folio" type="String"/>
                <!-- Guardamos el código de referencia real, en lugar del SET -->
                <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                <set field="dteTypeRef" from="referenciaEntry.fiscalTaxDocumentTypeEnumId" type="String"/>
                <script>
                    // Agrego referencias
                    ref[i] = Referencia.Factory.newInstance();
                    ref[i].setNroLinRef(i+1);

                    if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('0')) {
                        ref[i].setTpoDocRef('SET');
                        ref[i].setCodRef(codRef);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                    } else {
                    </script>
                        <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                        <set field="tpoDocRef" from="codeOut.siiCode"/>

                    <script>
                        //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                        ref[i].setTpoDocRef(tpoDocRef);
                        //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                        ref[i].setCodRef(codRef);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                    }
                    logger.warn("DTE Type: " + referenciaEntry.fiscalTaxDocumentTypeEnumId)
                    if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-34") || referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-61") ) {
                        dteExenta = true;
                    }
                    // Valor Opcional
                    //ref[i].xsetIndGlobal('0');
                    //ref[i].setRUTOtr(rutReceptor);

                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                    Date date = formatter.parse(fechaRef);
                    //ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                    ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                    ref[i].setRazonRef(referenciaEntry.razonReferencia);

                    i = i + 1
                </script>
                </iterate>
                <script>
                    i = 0
                </script>
                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="detailTemp" from="detailEntry instanceof List ? detailEntry : detailEntry.split('-') as List"/>
                    <set field="itemNumber" value="${detailTemp[0]}"/>
                    <set field="qtyItem" value="${detailTemp[1]}" type="Long" default-value="0"/>
                    <set field="priceItem" value="${detailTemp[2]}" type="String" default-value="0"/>
                    <set field="nombreItem" value="${detailTemp[3]}"/>

                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->

                    <script><![CDATA[
                        logger.warn("DTE Exenta: " + dteExenta)
                        priceItem = priceItem.replace(".","");
                        totalItemTmp = qtyItem * Long.valueOf(priceItem)
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        if(dteExenta) {
                            if(BigDecimal.valueOf(codRef) != 2 && BigDecimal.valueOf(codRef) != 1) {
                                logger.warn("If 1: totalItemTmp: " + totalItemTmp);
                                det[i].setIndExe(BigInteger.valueOf(1));
                                det[i].setQtyItem(qtyItem);
                                det[i].setPrcItem(Long.valueOf(priceItem));
                                det[i].setMontoItem(Long.valueOf(totalItemTmp));
                            } else {
                                logger.warn("If 2");
                                det[i].setMontoItem(0);
                                //det[i].setQtyItem(qtyItem);
                                //det[i].setPrcItem(0);
                            }
                        } else {
                            if(BigDecimal.valueOf(codRef) != 2 && BigDecimal.valueOf(codRef) != 1) {
                                logger.warn("If 8: totalItemTmp: " + totalItemTmp);
                                det[i].setQtyItem(qtyItem);
                                det[i].setPrcItem(Long.valueOf(priceItem));
                                det[i].setMontoItem(Long.valueOf(totalItemTmp));
                            } else {
                                logger.warn("If 9");
                                det[i].setMontoItem(0);
                            }
                        }
                        totalInvoice = totalInvoice + totalItemTmp

                        i = i + 1
                    ]]></script>
                </iterate>
                <script><![CDATA[
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();

                    long montoExe = 0;
                    montoNeto = Long.valueOf(totalInvoice)
                    long montoIva = montoNeto * 0.19
                    long montoTotal = montoIva + montoNeto
                    logger.warn("codRef:" + codRef +", dteExenta:" +dteExenta);
                    // Si la razon es modifica texto (2) no van los montos
                    // Notas de débito son siempre afectas
                    if(codRef != 2 && codRef != 1) {
                        logger.warn("Else 3")
                        if(!dteExenta) {
                            logger.warn("Else 4")
                            tot.setTasaIVA(BigDecimal.valueOf(19));
                            tot.setMntExe(montoExe);
                            tot.setIVA(montoIva);
                            tot.setMntNeto(montoNeto);
                            tot.setMntTotal(montoTotal);
                            montoExento = montoExe;
                            montoNeto = montoNeto;
                            montoIvaRecuperable = montoIva;
                        } else { // Cod con factura exenta en la NC
                            logger.warn("Else 5, montoNeto: " + montoNeto)
                            tot.setMntExe(montoNeto);
                            tot.setMntTotal(montoNeto);
                            tot.setMntNeto(0);
                            tot.setIVA(0);
                            //tot.setTasaIVA(BigDecimal.valueOf(19));
                            montoExento = montoNeto;
                            montoIVARecuperable = 0;
                        }
                    } else {
                        logger.warn("CodRef == 1, " + dteExenta);
                        if(!dteExenta) {
                            //tot.setMntExe(montoNeto);
                            tot.setMntTotal(0);
                        } else {
                            tot.setMntTotal(0);
                        }
                    }
                    i = 0

                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                    ]]>
                </script>
            </if>
            <!-- TODO: Guías de Despacho -->
            <if condition="tipoFactura == 52">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <log message="Creando DTE tipo 52" level="warn"/>
                <script>

                    i = 0
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                        listSize = referenciaList.size();
                        ref = new Referencia[listSize];
                    } else {
                        listSize = 0;
                    }
                </script>
                <set field="dteExenta" value="false" type="Boolean"/>
                <!-- TODO: Si la referencia es tipo fe de erratas, Monto Item puede ser 0 -->
                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="String"/>

                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);

                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('0')) {
                        ref[i].setTpoDocRef('SET');
                        //ref[i].setCodRef(codRef);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        } else {
                    </script>
                    <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                    <set field="tpoDocRef" from="codeOut.siiCode"/>

                    <script>
                        //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                        ref[i].setTpoDocRef(tpoDocRef);
                        //ref[i].setCodRef(codRef);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-34")) {
                        dteExenta = true;
                        }
                        // Valor Opcional
                        //ref[i].xsetIndGlobal('0');
                        //ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        //ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    i = 0;
                </script>
                <iterate list="detailList" entry="detailEntry">
                    <entity-find-one entity-name="mantle.product.Product" value-field="productField" cache="false">
                        <field-map field-name="productId" from="detailEntry.productId"/></entity-find-one>
                    <set field="nombreItem" from="productField.productName"/>

                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>



                    <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                    <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>

                    <entity-find-one entity-name="mantle.product.ProductPrice" value-field="productPriceField" cache="false">
                        <field-map field-name="productId" from="detailEntry.productId"/>
                        <!--field-map field-name="priceTypeEnumId" value="PptCurrent"/-->
                    </entity-find-one>
                    <set field="priceItem" type="Integer" value="0"/>

                    <if condition="productPriceField"><then>
                        <if condition="productPriceField.price">
                            <set field="priceItem" from="productPriceField.price"/>
                        </if>
                    </then></if>

                    <set field="totalItem" type="Long"/>
                    <script>
                        totalItem = Math.round(BigDecimal.valueOf(qtyItem) * BigDecimal.valueOf(priceItem))
                    </script>
                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->

                    <script><![CDATA[
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        //if(dteExenta) {
                        //    det[i].setIndExe(1);
                        //}
                        //if((pctDiscount != null) && (BigDecimal.valueOf(pctDiscount) > 0)) {
                        //    logger.warn("Aplicando descuento " + pctDiscount+"% a precio "+ priceItem );
                        //    descuento = totalItem * pctDiscount / 100;
                        //    logger.warn("Descuento:" + descuento);
                        //    //totalInvoice = totalInvoice + totalItem - descuento
                        //    det[i].setDescuentoPct(pctDiscount);
                        //   det[i].setDescuentoMonto(Math.round(descuento));
                        //    totalItem = totalItem - Math.round(descuento)
                        //}
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        logger.warn("priceInclude = " + priceInclude);
                        if(!indTraslado.equals("5")) {
                            if(Math.round(priceItem) > 0) {
                                det[i].setPrcItem(BigDecimal.valueOf(Math.round(priceItem)));
                            }
                            det[i].setMontoItem(totalItem);
                            totalInvoice = totalInvoice + totalItem
                            //if(itemAfecto.equals("true")) {
                                totalNeto = totalNeto + totalItem
                            //} else {
                            //    totalExento = totalExento + totalItem
                                //det[i].setIndExe(1);
                            //}
                        } else {
                            det[i].setMontoItem(0);
                        }


                        i = i + 1
                    ]]></script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);

                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();

                    long montoExe = 0;
                    montoNeto = Long.valueOf(Math.round(totalNeto))
                    long montoIva = Math.round(montoNeto * 0.19)
                    long montoTotal = montoIva + montoNeto + totalExento
                    long montoIvaExento = 0
                    // Si la razon es modifica texto (2) no van los montos
                    logger.warn("Codref: " + codRef + ", dteExenta: " + dteExenta);
                    tot.setTasaIVA(BigDecimal.valueOf(19));
                    tot.setMntExe(totalExento);
                    tot.setIVA(montoIva);
                    tot.setMntNeto(montoNeto);
                    tot.setMntTotal(montoTotal);
                    montoExento = montoExe;
                    montoIvaRecuperable = montoIva;

                </script>

            </if>

            <script>
                // Timbro

                doc.getDTE().timbrar(caf.getCAF(), caf.getPrivateKey(null));

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);

                // releo el doc para que se reflejen los cambios de formato
                doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts);

                // Guardo
                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                String uri = "";
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                if (doc.getDTE().isSetDocumento()) {
                    uri = doc.getDTE().getDocumento().getID();
                    doc.getDTE().getDocumento().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetLiquidacion()) {
                    uri = doc.getDTE().getLiquidacion().getID();
                    doc.getDTE().getLiquidacion().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetExportaciones()) {
                    uri = doc.getDTE().getExportaciones().getID();
                    doc.getDTE().getExportaciones().xsetTmstFirma(now);
                }

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                doc.save(new File(resultS + "DTE" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts);
                doc.save(out, opts);
                Document doc2 = XMLUtil.parseDocument(out.toByteArray());
                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "Documento");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "Documento")) {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml");
                    Files.write(path, salida);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar factura folio "+folio);
                }
            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->

            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}DTE${tipoFactura}-${folio}.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf, dte:xml, activeOrgId:activeOrgId]" out-map="context"/>

            <!-- Creación de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>

            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                Date date = new Date();
                Timestamp ts = new Timestamp(date.getTime());
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts]"/>
            <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts]"/>
            <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>

        </actions>
    </service>

    <service verb="generaEnvio" noun="Documentos">
        <description>
            Generación de envio documento a partir de facturas ya generadas.
        </description>
        <in-parameters>
            <parameter name="recepS" required="false"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="documentList" required="true" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="archivoEnvio"/>
        </out-parameters>
        <actions>

            <!-- Recuperacion de parametros de la organizacion -->
            <entity-find-one entity-name="mantle.party.Organization" value-field="orgField">
                <field-map field-name="partyId" from="activeOrgId"/>
                <select-field field-name="giro"/>
                <select-field field-name="templateFactura"/>
                <select-field field-name="templatePdf"/>
                <select-field field-name="templateEnvio"/>
                <select-field field-name="templateAceptaciones"/>
                <select-field field-name="templateLibro"/>
                <select-field field-name="logo"/>
                <select-field field-name="fchResol"/>
                <select-field field-name="nroResol"/>
            </entity-find-one>


            <set field="idS" value="Doc"/>

            <script>
                import java.text.SimpleDateFormat;
                import java.util.Date;

                Date dNow = new Date();
                SimpleDateFormat ft = new SimpleDateFormat("yyMMddhhmmssMs");
                String datetime = ft.format(dNow);
                idS = idS + datetime;

                String[] DTEList = new String[documentList.size()];
                int j = 0;
            </script>
           <iterate list="documentList" entry="docField">
               <set field="fiscalTaxDocument" from="docField"/>
               <entity-find-one entity-name="mch.dte.FiscalTaxDocumentContent" value-field="dteField">
                   <field-map field-name="fiscalTaxDocumentId" from="docField"/>
                   <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
                   <select-field field-name="contentLocation"/>
               </entity-find-one>
               <set field="xml" from="dteField.contentLocation"/>
               <script>
                DTEList[j] = xml;
                logger.warn("Agregado: " + DTEList[j])
                j++;

                </script>
           </iterate>

            <!-- Validación rut -->
            <if condition="recepS">
                <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:recepS]"/>
            </if>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:orgField.templateEnvio]" out-map="context"/>
            <set field="plantillaEnvio" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>

            <!-- Variable para guardar nombre de archivo del envio -->
            <set field="archivoEnvio" value=""/>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Date;
                import java.util.HashMap;

                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula.SubTotDTE;

                // Construyo Envio
                EnvioDTEDocument envio = EnvioDTEDocument.Factory.parse(new FileInputStream(plantillaEnvio));

                // Debo agregar el schema location (Sino SII rechaza)
                XmlCursor cursor = envio.newCursor();
                if (cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioDTE_v10.xsd");
                }
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Asigno un ID
                envio.getEnvioDTE().getSetDTE().setID(idS);

                cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula car =
                envio.getEnvioDTE().getSetDTE().getCaratula();

                //car.setRutReceptor(recepS);
                car.setRutReceptor('60803000-K');
                car.setRutEnvia(enviadorS);

                // documentos a enviar
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // Cantidad de documentos a enviar
                DTEDefType[] dtes = new DTEDefType[DTEList.size()];

                HashMap&lt;Integer, Integer&gt; hashTot = new HashMap&lt;Integer, Integer&gt;();

                for (int i = 0; i &lt; DTEList.length; i++) {
                    dtes[i] = DTEDocument.Factory.parse(new FileInputStream(DTEList[i]), opts).getDTE();
                    // armar hash para totalizar por tipoDTE
                    if (hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) != null) {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(),
                        hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) + 1);
                    } else {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(), 1);
                    }
                }
                SubTotDTE[] subtDtes = new SubTotDTE[hashTot.size()];
                int i = 0;
                for (Integer tipo : hashTot.keySet()) {
                    SubTotDTE subt = SubTotDTE.Factory.newInstance();
                    subt.setTpoDTE(new BigInteger(tipo.toString()));
                    subt.setNroDTE(new BigInteger(hashTot.get(tipo).toString()));
                    subtDtes[i] = subt;
                    i++;
                }
                car.setSubTotDTEArray(subtDtes);
                // Le doy un formato bonito (debo hacerlo antes de firmar para no
                // afectar los DTE internos)
                opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);
                envio = EnvioDTEDocument.Factory.parse(envio.newInputStream(opts));


                envio.getEnvioDTE().getSetDTE().setDTEArray(dtes);

                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                envio.getEnvioDTE().getSetDTE().getCaratula().xsetTmstFirmaEnv(now);

                // firmo
                //envio.sign(pKey, x509);


                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                envio.save(new File(pathResults + "ENV" + idS + "-sinfirma.xml"), opts);
                envio.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, "#" + idS, pKey, x509, "#" + idS,"SetDTE");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "SetDTE")) {
                    archivoEnvio = pathResults + "ENV" + idS + ".xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + ".xml");
                    Files.write(path, salida);
                    logger.warn("Envio generado OK");
                } else {
                    archivoEnvio = pathResults + "ENV" + idS + "-mala.xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar envio");
                }
            </script>
            <!-- Se guarda referencia a XML de envío en BD -->
            <iterate list="documentList" entry="docField">
                <set field="createMap" from="[fiscalTaxDocumentId:docField, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Misc', contentLocation:archivoEnvio, contentDate:ts]"/>
                <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

                <!-- Se marca DTE como enviada -->
                <set field="idDte" from="docField"/>
                <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                    <field-map field-name="fiscalTaxDocumentId" from="idDte"/>
                </entity-find-one>

                <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-Sent"/>
                <entity-update value-field="dteField"/>
            </iterate>

        </actions>
    </service>

    <service verb="generaEnvio" noun="Libro">
        <description>
            Generación de envio de libro de compra/venta
            DEPRECATED
        </description>
        <in-parameters>
            <parameter name="enviadorS" required="true"/>
            <parameter name="idS" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="xml" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="archivoEnvio"/>
        </out-parameters>
        <actions>
            <set field="documentoS" from="xml"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_ENVIO']" out-map="context"/>
            <set field="plantillaEnvio" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>
            <!--service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'RUT_EMPRESA']" out-map="context"/>
            <set field="emisorS" from="resourceValue"/-->

            <!-- Variable para guardar nombre de archivo del envio -->
            <set field="archivoEnvio" value=""/>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Date;
                import java.util.HashMap;

                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula.SubTotDTE;

                // Construyo Envio
                EnvioDTEDocument envio = EnvioDTEDocument.Factory.parse(new FileInputStream(plantillaEnvio));

                // Debo agregar el schema location (Sino SII rechaza)
                XmlCursor cursor = envio.newCursor();
                if (cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioDTE_v10.xsd");
                }

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Asigno un ID
                envio.getEnvioDTE().getSetDTE().setID(idS);

                cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula car =
                envio.getEnvioDTE().getSetDTE().getCaratula();

                car.setRutReceptor(recepS);
                car.setRutEnvia(enviadorS);

                // documentos a enviar
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // Cantidad de documentos a enviar
                //DTEDefType[] dtes = new DTEDefType[otherArgs.length];

                //String[] otherArgs = parser.getRemainingArgs();
                String[] DTEList = new String[1];

                // TODO: Armar lista de documentos
                DTEList[0] = documentoS;

                DTEDefType[] dtes = new DTEDefType[DTEList.size()];

                logger.warn("Tamaño:" + DTEList.size()+ " - Ubic 1 : " + DTEList[0]);

                HashMap&lt;Integer, Integer&gt; hashTot = new HashMap&lt;Integer, Integer&gt;();



                // Version para libro de compraventa
                for (int i = 0; i &lt; DTEList.length; i++ ) {
                    //dtes[i] = DTEDocument.Factory.parse(new FileInputStream(DTEList[i]), opts).getDTE();
                    dtes[i] = DTEDocument.Factory.parse(new FileInputStream(DTEList[i]), opts).getDTE();
                }

                //car.setSubTotDTEArray(subtDtes);
                // Le doy un formato bonito (debo hacerlo antes de firmar para no
                // afectar los DTE internos)
                opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);
                envio = EnvioDTEDocument.Factory.parse(envio.newInputStream(opts));


                envio.getEnvioDTE().getSetDTE().setDTEArray(dtes);

                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                envio.getEnvioDTE().getSetDTE().getCaratula().xsetTmstFirmaEnv(now);


                // firmo
                //envio.sign(pKey, x509);


                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                envio.save(new File(pathResults + "ENV" + idS + "-sinfirma.xml"), opts);
                envio.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, "#" + idS, pKey, x509, "#" + idS,"SetDTE");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "SetDTE")) {
                    archivoEnvio = pathResults + "ENV" + idS + ".xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + ".xml");
                    Files.write(path, salida);
                    logger.warn("Envio generado OK");
                } else {
                    archivoEnvio = pathResults + "ENV" + idS + "-mala.xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar envio");
                }
            </script>

            <!-- Se guarda referencia a XML de envío en BD -->

            <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="fiscalTaxDocumentField" cache="false" for-update="true" />
            <set field="fiscalTaxDocumentField.envio" from="archivoEnvio" type="String"/>
            <entity-update value-field="fiscalTaxDocumentField"/>

        </actions>
    </service>

    <service verb="enviaSII" noun="Documento">
        <description>
            Envio documento a partir de documento envio ya generado
            compaS: rut de compañía que envía
            enviadorS: rut de persona que envía
            documentoS: nombre de documento a enviar (que puede contener varios)
        </description>
        <in-parameters>
            <parameter name="compaS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="documentoS" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
        <actions>
            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>

            <set field="trackId" value=""/>

            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;


                ConexionSii con = new ConexionSii();
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);


                String enviadorS = Utilities.getRutFromCertificate(x509);

                RECEPCIONDTEDocument recp = con.uploadEnvioCertificacion(enviadorS, compaS, new File(documentoS), token);
                logger.warn("-----------------");
                logger.warn(recp.xmlText());

                // Se verifica si el status es 0

                String statusXML = recp.xmlText();
                int inicio = statusXML.indexOf("&lt;siid:STATUS&gt;");
                int fin = statusXML.indexOf("&lt;/siid:STATUS&gt;");

                statusXML = statusXML.substring(inicio+1,fin);
                statusXML = statusXML.replaceAll("siid:STATUS&gt;","");
                logger.warn("STATUS: " + statusXML);

                if(statusXML.equals("0")) {
                    trackId = recp.xmlText();
                    inicio = trackId.indexOf("&lt;siid:TRACKID&gt;");
                    fin = trackId.indexOf("&lt;/siid:TRACKID&gt;");
                    trackId = trackId.substring(inicio+1,fin);
                    trackId = trackId.replaceAll("siid:TRACKID&gt;","");
                    logger.warn("DTE Enviada correctamente con trackId " + trackId);
                } else {
                    logger.warn("Error "+ statusXML + " al enviar DTE");
                }

            </script>

        </actions>
    </service>


    <service verb="load" noun="DTEConfig">
        <description>
            Carga parametros desde archivo resources
        </description>
        <in-parameters>
            <parameter name="resourceName" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resourceValue"/>
        </out-parameters>
        <actions>
            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Properties;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                Properties config = new Properties();
                InputStream input = new FileInputStream("/home/cherrera/git/moqui-moit/moqui-framework/runtime/component/MoquiChile/resources/DTEConfig.properties");

                config.load(input);

                resourceValue = config.getProperty(resourceName).toString();
            </script>
        </actions>
    </service>

    <service verb="get" noun="DTEFilename">
        <description>
            Retorna nombre de archivo de DTE
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentContentTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="filename"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>

            <entity-find-one entity-name="mch.dte.FiscalTaxDocumentContent" value-field="document"/>
            <set field="filename" value="${document.contentLocation}"/>
        </actions>
    </service>

    <service verb="get" noun="AceptacionFilename">
        <description>
            Retorna nombre de archivo de acuse recibo DTE Terceros
        </description>
        <in-parameters>
            <parameter name="aceptacionDteId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="filename"/>
            <parameter name="path"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_ACEPTACIONES']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>

            <entity-find-one entity-name="mch.dte.AceptacionDte" value-field="document"/>
                <set field="filename" value="${document.xml}"/>
            <set field="path" value="${pathResults}"/>
        </actions>
    </service>

    <service verb="genera" noun="PDF">
        <description>
            Genera archivo PDF de Factura (envio)
        </description>
        <in-parameters>
            <parameter name="pdf" required="true"/>
            <parameter name="dte" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <!-- Recuperacion de parametros de la organizacion -->
            <entity-find-one entity-name="mantle.party.Organization" value-field="orgField">
                <field-map field-name="partyId" from="activeOrgId"/>
                <select-field field-name="giro"/>
                <select-field field-name="templateFactura"/>
                <select-field field-name="templatePdf"/>
                <select-field field-name="templateEnvio"/>
                <select-field field-name="templateAceptaciones"/>
                <select-field field-name="templateLibro"/>
                <select-field field-name="logo"/>
                <select-field field-name="fchResol"/>
                <select-field field-name="nroResol"/>
            </entity-find-one>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:orgField.templatePdf]" out-map="context"/>
            <set field="template" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>


            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(template), new FileOutputStream(pdf));

                logger.warn("---------------");
                logger.warn("PDF Generado: " + pdf);
                logger.warn("---------------");
            </script>
        </actions>
    </service>

    <service verb="load" noun="Caf">
        <description>
            Carga CAF en Sistema
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Carga de RUT de empresa -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="rut" from="partyIdentificationList.idValue[0]"/>


            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rut]" out-map="salidaRut"/>
            <set field="rutNoDv" from="salidaRut.rut"/>

            <set field="archivo" from="filename.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="fileRoot" value="${resourceValue}"/>
            <set field="contentLocation" value="${fileRoot}/${archivo}"/>

            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>

            <set field="desde" value=""/>
            <set field="hasta" value=""/>
            <set field="fechaAutorizacion" value=""/>
            <set field="fiscalTaxDocumentTypeEnumId" value=""/>
            <set field="rutCaf" value=""/>

            <script>
                fileStream = filename.getInputStream()
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script>
            <!-- TODO: Parseo de XML -->
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDefType.Documento.Referencia;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                AutorizacionType caf;
                caf = AUTORIZACIONDocument.Factory.parse(filename.getInputStream(), opts).getAUTORIZACION();
                desde = caf.getCAF().getDA().getRNG().getD().toString();
                hasta = caf.getCAF().getDA().getRNG().getH().toString();
                fechaAutorizacion = caf.getCAF().getDA().getFA().toString();
                fiscalTaxDocumentTypeEnumId = "Ftdt-${caf.getCAF().getDA().getTD().toString()}"
                rutCaf = caf.getCAF().getDA().getRE();
                logger.warn("===>" + caf.toString());

            </script>

            <if condition="!rutCaf.equals(rut.trim())">
                <return error="true" message="RUT de archivo CAF no corresponde al registrado en el sistema como emisor: $rutCaf :: $rut"/>
            </if>

            <set field="updateMap" from="[filename:archivo,desde:desde, hasta:hasta, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, fechaAutorizacion:fechaAutorizacion,rut:rut, ultimoFolio:desde, issuerPartyId:activeOrgId]"/>
            <service-call name="create#mch.dte.Caf" out-map="context" in-map="updateMap"/>

            <!-- TODO: Creación de registros para reservar folios -->
            <script><![CDATA[
                int inicio = Integer.parseInt(desde);
                int fin = Integer.parseInt(hasta);
                for (int folio = inicio; folio <= fin; folio++) {]]></script>
                    <set field="fiscalTaxDocumentId" value="$fiscalTaxDocumentTypeEnumId$folio$rutNoDv"/>
                    <log message="Creando: $fiscalTaxDocumentId, $dteTypeEnumId, $folio, $rut"/>
                    <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, fiscalTaxDocumentNumber:folio, issuerPartyId:activeOrgId,
                        issuerPartyIdTypeEnumId:'PtidNationalTaxId', fiscalTaxDocumentStatusEnumId:'Ftdt-NotIssued', fiscalTaxDocumentSentStatusEnumId:'Ftdt-NotSent']"/>
                    <service-call name="create#mch.dte.FiscalTaxDocument" out-map="context" in-map="createMap"/>
                <script><![CDATA[
                }
            ]]></script>

        </actions>
    </service>

    <service verb="get" noun="Folio">
        <description>
            Obtiene folio para el tipo de DTE especificado.
            Busca el folio más bajo disponible
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
            <parameter name="caf"/>
        </out-parameters>
        <actions>


            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>

            <!-- Se filtra por CAF activo (PK) para el tipo de DTE -->
            <set field="activo" value="true"/>
            <entity-find-one entity-name="mch.dte.Caf" value-field="cafEntry" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
                <field-map field-name="activo" value="true"/>
            </entity-find-one>

            <if condition="!cafEntry">
                <return error="true" message="No existe CAF activo para DTE tipo ${fiscalTaxDocumentTypeEnumId}"/>
            </if>

            <entity-find entity-name="mch.dte.FiscalTaxDocument" list="reservedList">
                <order-by field-name="fiscalTaxDocumentNumber"/>
                <econdition field-name="fiscalTaxDocumentTypeEnumId" value="${fiscalTaxDocumentTypeEnumId}"/>
                <econdition field-name="issuerPartyId" from="activeOrgId"/>
                <econdition field-name="fiscalTaxDocumentNumber" operator="greater-equals" from="cafEntry.desde"/>
                <econdition field-name="fiscalTaxDocumentNumber" operator="less-equals" from="cafEntry.hasta"/>
                <econdition field-name="fiscalTaxDocumentStatusEnumId" operator="equals" value="Ftdt-NotIssued"/>
                <select-field field-name="fiscalTaxDocumentNumber"/>

            </entity-find>
            <if condition="!reservedList">
                <return error="true" message="No hay folios disponibles para DTE tipo ${fiscalTaxDocumentTypeEnumId} ${cafEntry.desde}-${cafEntry.hasta} - ${cafEntry.filename}"/>
            </if>
           
            <set field="folio" from="reservedList.first().fiscalTaxDocumentNumber"/>

            <set field="caf" from="cafEntry.filename"/>

        </actions>
    </service>

    <service verb="facturar" noun="Invoice">
        <description>
            Obtiene datos para llamar a método generar#Factura
        </description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="items"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>

            <!-- Obtención de descuento global, si es > 0 se aplica -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoiceField">
                <field-map field-name="invoiceId" from="invoiceId"/>
            </entity-find-one>
            <set field="globalDiscount" from="invoiceField.globalDiscount"/>
            <set field="glosaDr" from="invoiceField.glosaDr"/>

            <set field="listItems" type="List"/>
            <if condition="items">
                <set field="listItems" from="items instanceof List ? items : items.split(',') as List"/>
            </if>
            <iterate list="listItems" entry="detailItem">
                <set field="listProduct" from="detailItem instanceof List ? detailItem : detailItem.split('-') as List"/>
                <log message="Leyendo: $listProduct" level="warn"/>
                <!-- Con invoiceId se busca en invoiceItem y se actualiza porcentaje de descuento -->
                <entity-find-one entity-name="mantle.account.invoice.InvoiceItem" value-field="invoiceItemField">
                    <field-map field-name="invoiceId" from="invoiceId"/>
                    <field-map field-name="invoiceItemSeqId" value="${listProduct[0]}"/>
                </entity-find-one>
                <script>
                    long discount = Long.valueOf(listProduct[3]);
                </script>
                <set field="invoiceItemField.pctDiscount" from="discount"/>
                <entity-update value-field="invoiceItemField"/>
            </iterate>

            <service-call name="mantle.account.InvoiceServices.get#InvoiceDisplayInfo" in-map="[invoiceId:invoiceId]" out-map="context"/>

            <set field="paymentId" from="paymentApplicationList.paymentId[0]"/>

            <if condition="paymentId">
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <!-- Ajuste de forma de pago -->
                <set field="medioPago" value="OT"/>
                <set field="formaPago" value="3"/>
                <if condition="payment.paymentInstrumentEnumId == 'PiCreditCard'">
                    <set field="medioPago" value="TC"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheck'">
                    <set field="medioPago" value="CH"/>
                    <set field="formaPago" value="1"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheck'">
                    <set field="medioPago" value="CH"/>
                    <set field="formaPago" value="1"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheckDate'">
                    <set field="medioPago" value="CF"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheckDate'">
                    <set field="medioPago" value="CF"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiCash'">
                    <set field="medioPago" value="EF"/>
                    <set field="formaPago" value="1"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiLetra'">
                    <set field="medioPago" value="LT"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiBillingAccount'">
                    <set field="medioPago" value="PE"/>
                    <set field="formaPago" value="1"/>
                </if>
            </if>
            <if condition="!paymentId">
                <set field="medioPago" value="CH"/>
                <set field="formaPago" value="1"/>
            </if>

            <!-- Datos principales de invoice -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="invoice == null"><return error="true" message="Invoice not found with ID ${invoiceId}"/></if>
            <set field="partyId" from="invoice.toPartyId"/>
            <set field="toPartyId" from="invoice.toPartyId"/>

            <!-- Items de invoice -->
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <!-- email receptor -->
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:toPartyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo, sólo se puede emitir boleta"/>
            </if>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <!-- Datos para encontrar contacto -->


            <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="contactMechPurposeId" value="PostalTax"/>
            </entity-find-one>
            <set field="contactMechId" from="contactMechField.contactMechId"/>

            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <if condition="!contactPostalAddressField">
                 <return message="Receptor no tiene dirección postal" error="true"/>
            </if>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>

            <!-- Comuna -->
            <entity-find-one entity-name="moqui.basic.Geo" value-field="geoField">
                <field-map field-name="geoId" from="contactPostalAddressField.stateProvinceGeoId"/>
            </entity-find-one>

            <set field="cmnaReceptor" from="geoField.geoName"/>
            <set field="ciudadReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <!-- TODO: party puede ser Organization o Persona -->
            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- email -->
                <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                    <field-map field-name="partyId" from="partyId"/>
                    <field-map field-name="contactMechPurposeId" value="PostalTax"/>
                </entity-find-one>
                <set field="contactMechId" from="contactMechField.contactMechId"/>
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <if condition="!organizationField.giro">
                    <return error="true" message="Receptor no tiene giro"/>
                </if>
                <set field="giroReceptor" from="organizationField.giro"/>
                <!-- Obtención de contacto para impuestos en organización -->
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                              in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
                <if condition="!contactOut.postalContactMechId">
                    <return error="true" message="Receptor no tiene contacto tributario asignado"/>
                </if>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                    <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
                </entity-find-one>
                <!-- Obtención de contacto en organización -->
                <if condition="!postalAddressField">
                    <return error="true" message="Nombre receptor no encontrado"/>
                </if>

                <set field="contactoReceptor" from="postalAddressField.toName"/>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- email -->
                <!--service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:fromPartyId]" out-map="context"/>
                <set field="contactMechId" from="emailAddress"/-->

                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>

            <!-- Recuperación de referencias -->
            <entity-find entity-name="mch.dte.ReferenciaInvoiceAndFiscalCode" list="referenciaList">
                <econdition field-name="invoiceId" from="invoiceId"/>
                <order-by field-name="fiscalTaxDocumentTypeEnumId"/>
            </entity-find>
            <!-- TODO: Generación de Boletas -->
            <if condition="(fiscalTaxDocumentTypeEnumId == 'Ftdt-39') || (fiscalTaxDocumentTypeEnumId == 'Ftdt-41')"><then>
                <!-- Generacion de boletas -->
                <service-call name="mchile.DTEServices.genera#Boleta" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, activeOrgId:activeOrgId, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:invoiceItemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList, receiverPartyId:toPartyId]" out-map="context"/>
            </then><else>
                <!-- Generacion de factura -->
                <service-call name="mchile.DTEServices.genera#Factura" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, activeOrgId:activeOrgId, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:invoiceItemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList, receiverPartyId:toPartyId, globalDiscount:globalDiscount, glosaDr:glosaDr]" out-map="context"/>
            </else></if>
        </actions>
    </service>

    <service verb="activar" noun="Caf">
        <description>
            Activa CAF para ser usado
        </description>
        <in-parameters>
            <parameter name="cafId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mch.dte.Caf" value-field="cafField" for-update="true"/>

            <if condition="!cafField">
                <return error="true" message="No existe CAF"/>
            </if>

            <set field="cafField.activo" value="true"/>
            <entity-update value-field="cafField"/>
        </actions>
    </service>

    <service verb="desactivar" noun="Caf">
        <description>
            Desactiva CAF para no ser usado
        </description>
        <in-parameters>
            <parameter name="cafId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mch.dte.Caf" value-field="cafField" for-update="true"/>

            <if condition="!cafField">
                <return error="true" message="No existe CAF"/>
            </if>

            <set field="cafField.activo" value="" type="String"/>
            <entity-update value-field="cafField"/>
        </actions>
    </service>


    <service verb="preparaEnvio" noun="Documentos">
        <description>
            Obtiene datos para llamar a servicio enviar#Documento
        </description>
        <in-parameters>
            <parameter name="documentIds" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="libro" />
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'RUT_ENVIADOR']" out-map="context"/>
            <set field="enviadorS" value="${resourceValue}"/>

            <set field="documentList" from="documentIds instanceof List ? documentIds : documentIds.split(',') as List"/>

            <if condition="!libro">
                <service-call name="mchile.DTEServices.generaEnvio#Documentos" in-map="[recepS:recepS, activeOrgId:activeOrgId, enviadorS:enviadorS, documentList:documentList ]" out-map="context"/>
                <set field="documentoS" from="archivoEnvio"/>
                <service-call name="mchile.DTEServices.enviaSII#Documento" in-map="[compaS:emisorS, enviadorS:enviadorS , documentoS:documentoS]" out-map="context"/>
            </if>

            <if condition="libro">

                <iterate list="documentList" entry="libroEntry">
                    <set field="detailLibro" from="libroEntry instanceof List ? libroEntry : libroEntry.split('-') as List"/>
                    <set field="fiscalTaxDocumentId" from="detailLibro[0]"/>
                    <log level="warn" message="fiscalTaxDocumentId: $fiscalTaxDocumentId"/>
                    <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="libroField">
                        <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                    </entity-find-one>
                    <set field="xml" from="libroField.xml"/>

                    <service-call name="mchile.DTEServices.generaEnvio#Libro" in-map="[enviadorS:enviadorS, activeOrgId:activeOrgId, idS:'ID178', xml:xml ]" out-map="context"/>
                    <set field="documentoS" from="archivoEnvio"/>

                    <service-call name="mchile.DTEServices.enviaSII#Documento" in-map="[compaS:emisorS, enviadorS:enviadorS , documentoS:xml]" out-map="context"/>
                </iterate>
            </if>
        </actions>
    </service>


    <service verb="verificaEnSII" noun="Documento">
        <description>
            Verificación en el SII de DTE ya enviado
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="statusSii" required="true"/>
            <parameter name="salida" required="true"/>
        </out-parameters>
        <actions>

            <set field="statusSii" value=""/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>

            <service-call name="mchile.DTEServices.get#DteContent"
                          in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml']" out-map="context"/>

            <if condition="!content">
                <return error="true" message="DTE no existe"/>
            </if>
            <set field="envio" from="content" type="String"/>


            <!--set field="envio" from="fiscalTaxDocumentField.xml" type="String"/-->
            <set field="salida" value=""/>
            <set field="statusXML" value=""/>

            <script>
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.HashMap;


                import org.apache.xmlbeans.XmlOptions;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.xmlSchema.RESPUESTADocument;

                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                DTEDocument doc = DTEDocument.Factory.parse(new FileInputStream(envio), opts);

                ConexionSii con = new ConexionSii();

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                System.out.println("Usando certificado " + alias + " del archivo PKCS12: " + certS);


                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);

                String enviadorS = Utilities.getRutFromCertificate(x509);

                RESPUESTADocument resp = con.getEstadoDTECertificacion(enviadorS, doc.getDTE().getDocumento(), token);
                opts.setSavePrettyPrintIndent(2);
                opts.setSavePrettyPrint();
                resp.save(System.out, opts);

                logger.warn("------" + resp.toString())

                salida = resp.toString();
                statusXML = salida
                String status = "0"

                int inicio = statusXML.indexOf("&lt;SII:ERR_CODE&gt;");
                int fin = statusXML.indexOf("&lt;/SII:ERR_CODE&gt;");

                statusXML = statusXML.substring(inicio+1,fin);
                statusXML = statusXML.replaceAll("SII:ERR_CODE&gt;","");
                logger.warn("STATUS: " + statusXML);
                statusSii = statusXML
            </script>
            <set field="statusSii" from="statusXML"/>
        </actions>
    </service>

    <service verb="preLoad" noun="Dte">
        <description>
            Servicio para simplificar carga de Facturas vs Boletas discriminando por los dos grandes tipos antes de parsear el XML
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="invoiceId"/>
            <parameter name="xml" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="productMatch" default-value="false"/>
            <parameter name="fiscalTaxDocumentAggrEnumId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <actions>
            <if condition="fiscalTaxDocumentAggrEnumId == 'Ftdt-Boletas'"><then>
                <service-call name="mchile.DTEServices.load#Boleta" in-map="[xml:xml, pdf:pdf, activeOrgId:activeOrgId, productMatch:productMatch, organizationPartyId:organizationPartyId]"/>
            </then><else>
                <service-call name="mchile.DTEServices.load#Dte" in-map="[xml:xml, pdf:pdf, activeOrgId:activeOrgId, productMatch:productMatch, organizationPartyId:organizationPartyId]"/>
            </else>
            </if>
        </actions>
    </service>

    <service verb="load" noun="Boleta">
        <description>
            Carga boleta en XML recibida por la organización
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="invoiceId"/>
            <parameter name="xml" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="productMatch" default-value="false"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Carga de RUT de empresa -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="rut" from="partyIdentificationList.idValue[0]"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rut]" out-map="salidaRut"/>
            <set field="rutNoDv" from="salidaRut.rut"/>

            <!-- Carga XML -->
            <set field="archivoXml" from="xml.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RECIBIDAS']" out-map="context"/>
            <set field="fileRoot" value="${resourceValue}"/>

            <set field="contentLocationXml" value="${fileRoot}/${archivoXml}"/>
            <set field="docRrXml" from="ec.resource.getLocationReference(contentLocationXml)"/>
            <script>
                // Se guardan ambos archivos
                fileStream = xml.getInputStream()
                try { docRrXml.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <!-- Carga PDF -->
            <set field="archivoPdf" from="pdf.getName()"/>
            <if condition="archivoPdf">
                <set field="contentLocationPdf" value="${fileRoot}/${archivoPdf}"/>
                <set field="docRrPdf" from="ec.resource.getLocationReference(contentLocationPdf)"/>
                <script>
                    // Se guardan ambos archivos
                    fileStream = pdf.getInputStream()
                    try { docRrPdf.putStream(fileStream) } finally { fileStream.close() }
                </script>
            </if>

            <set field="rutEmisor" value=""/>
            <set field="rutReceptor" value=""/>
            <set field="razonSocialEmisor" value=""/>
            <set field="montoNeto" value="0"/>
            <set field="tipoDte" value=""/>
            <set field="folioDte" value=""/>
            <set field="fechaEmision" value=""/>
            <set field="totalIva" value="0" type="Long"/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.text.DateFormat;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia;
                import cl.sii.siiDte.boletas.BOLETADefType;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:siid", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                //namespaces.put("xsi:schemaLocation","http://www.sii.cl/SiiDte EnvioDTE_v10.xsd");
                //XmlOptions opts = new XmlOptions();
                //opts.setLoadSubstituteNamespaces(namespaces);

                XmlOptions opts = new XmlOptions();
                //opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);


                cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA boleta = EnvioBOLETADocument.Factory.parse(xml.getInputStream()).getEnvioBOLETA();
                // Caratula
                rutEmisor = boleta.setDTE.getCaratula().getRutEmisor().toString();
                rutReceptor = boleta.setDTE.getCaratula().getRutReceptor().toString();

                logger.warn("Emisor: " + rutEmisor + ", receptor: " + rutReceptor);


                //montoNeto = envio.setDTE.getDTEArray().toString();
                //cl.sii.siiDte.boletas.BOLETADefType[] boletaArray = envio.setDTE.getDTEArray();
                cl.sii.siiDte.boletas.BOLETADefType[] boletaArray = boleta.setDTE.getDTEArray();

                for (int i = 0; i &lt; boletaArray.size(); i++) {
                    // tipo de DTE
                    tipoDte = boletaArray[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().toString();
                    folioDte = boletaArray[i].getDocumento().getEncabezado().getIdDoc().getFolio().toString();
                    fechaEmision = boletaArray[i].getDocumento().getEncabezado().getIdDoc().getFchEmis().toString();
                    razonSocialEmisor = boletaArray[i].getDocumento().getEncabezado().getEmisor().getRznSocEmisor().toString();
                    // Totales
                    montoNeto = boletaArray[i].getDocumento().getEncabezado().getTotales().getMntNeto().toString();
                    montoTotal = boletaArray[i].getDocumento().getEncabezado().getTotales().getMntTotal().toString();
                    montoExento = boletaArray[i].getDocumento().getEncabezado().getTotales().getMntExe().toString();
                    //tasaIva = boletaArray[i].getDocumento().getEncabezado().getTotales().getTasaIVA().toString();
                    iva = boletaArray[i].getDocumento().getEncabezado().getTotales().getIVA().toString();

                    logger.warn("Leído: " + tipoDte + " - " + folioDte + " - " + fechaEmision + " - " + montoNeto + " - " + iva);
                    logger.warn("MontoExe: " + montoExento + "- Razon social: " + razonSocialEmisor);
                    DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = formatter.parse(fechaEmision);
                    logger.warn("Date: " + date);
                    Timestamp ts = new Timestamp(date.getTime());

            </script>
                    <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="receiverField">
                        <field-map field-name="idValue" from="rutReceptor"/>
                    </entity-find-one>
                    <set field="receiverPartyId" from="receiverField.partyId"/>

                    <if condition="receiverPartyId != organizationPartyId">
                        <return error="true" message="Receptor en Boleta no corresponde a receptor especificado ($receiverPartyId != $organizationPartyId)"/>
                    </if>

                    <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                    <econdition field-name="idValue" from="rutEmisor"/></entity-find>
                    <!-- TODO: Verificar caso en que emisor tenga varias razones sociales -->
                    <if condition="!partyIdentificationList.idValue[0]">
                        <return error="true" message="Organización no tiene RUT definido"/>
                    </if>
                    <set field="issuerPartyId" from="partyIdentificationList.partyId[0]"/>

                    <!-- Verificación de Razón Social en XML vs lo guardado en Moqui -->
                    <entity-find-one entity-name="mantle.party.Party" value-field="partyField">
                        <field-map field-name="partyId" from="issuerPartyId"/>
                    </entity-find-one>
                    <if condition="!partyField">
                        <return error="true" message="Receptor no existe"/>
                    </if>

                    <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

                    <set field="razonSocialMoqui"/>
                    <if condition="partyTypeEnumId == 'PtyOrganization'"><then>
                        <entity-find-one entity-name="mantle.party.Organization" value-field="partyOrgField">
                            <field-map field-name="partyId" from="issuerPartyId"/>
                        </entity-find-one>
                        <if condition="partyOrgField">
                            <set field="razonSocialMoqui" from="partyOrgField.organizationName"/>
                        </if>
                    </then><else>
                        <entity-find-one entity-name="mantle.party.Person" value-field="partyPersonField">
                            <field-map field-name="partyId" from="issuerPartyId"/>
                        </entity-find-one>
                        <script>
                            razonSocialMoqui = partyPersonField.firstName + " " + partyPersonField.lastName;
                        </script>
                    </else></if>

                    <if condition="(razonSocialEmisor != razonSocialMoqui) &amp;&amp; (partyTypeEnumId == 'PtyOrganization')" >
                        <return error="true" message="Razón social en XML no coindice con la registrada: $razonSocialEmisor != $razonSocialMoqui"/>
                    </if>

                    <service-call name="mchile.DTEServices.get#MoquiSIICode" in-map="[siiCode:tipoDte]" out-map="mapOut"/>
                    <set field="tipoDteEnumId" from="mapOut.fiscalTaxDocumentTypeEnumId"/>

                    <!-- Creación de orden de compra -->
                    <service-call name="mchile.PurchaseServices.create#Purchase" in-map="[vendorPartyId:issuerPartyId]" out-map="purchaseOutMap"/>
                    <set field="itemDescription" type="String"/>
                    <set field="quantity"/>
                    <set field="price"/>
                    <set field="indExe"/> <!-- 1 exento, 2 no facturable, 3 garantía dep. envases, 4 item no venta (guia despacho), 5 guia despacho, 6 no facturable) -->
                    <set field="productId"/>
                    <set field="pseudoId"/>
                    <set field="montoItem" value="0" type="Long"/>
                    <script>
                Detalle[] detalleArray = boletaArray[i].getDocumento().getDetalleArray();
                logger.warn("Recorriendo detalles:" + detalleArray.size());
                for (int j = 0; j &lt; detalleArray.size(); j++) {
                    // Adición de items a orden
                    logger.warn("-----------------------------------");
                    logger.warn("Leyendo línea detalle " + j + ",");
                    logger.warn("Indicador exento: " + detalleArray[j].getIndExe());
                    logger.warn("Nombre item: " + detalleArray[j].getNmbItem());
                    logger.warn("Cantidad: " + detalleArray[j].getQtyItem());
                    logger.warn("Precio: " + detalleArray[j].getPrcItem());
                    logger.warn("Monto: " + detalleArray[j].getMontoItem());
                    itemDescription = detalleArray[j].getNmbItem();
                    quantity = detalleArray[j].getQtyItem();
                    price = detalleArray[j].getPrcItem();

                    montoItem = detalleArray[j].getMontoItem();
                    // Si el indicador es no exento hay que agregar IVA como item aparte
                    // Se puede ir sumando el IVA y si es mayor que 0 crear el item
                    if(detalleArray[j].getIndExe() == null &amp;&amp; (tipoDte != '34') ) { // Item y documento afecto
                        logger.warn("Item afecto");
                        indExe = null;
                    } else { // Item exento o documento exento
                        logger.warn("Item exento");
                        indExe = 1;
                    }

                    </script>
                    <if condition="!indExe">
                        <set field="totalIva" from="(montoItem*0.19) + totalIva"/>
                    </if>
                    <if condition="!invoiceId">
                        <if condition="productMatch == 'false'"><then>
                            <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                            orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:itemDescription, quantity:quantity, unitAmount:price,
                                            itemTypeEnumId:'ItemExpOther']"/>
                        </then><else>
                            <!-- Se especificó buscar productos preexistentes, pueden haber hasta 5 códigos -->
                            <log message="Buscando código item" level="warn"/>
                            <script>
                                cl.sii.siiDte.DTEDefType.Documento.Detalle.CdgItem[] cdgItem = detalleArray[j].getCdgItemArray();
                                for (int k = 0; k &lt; cdgItem.size(); k++) {
                                logger.warn("Leyendo codigo "+k+", valor: " + cdgItem[k].getVlrCodigo());
                                pseudoId = cdgItem[k].getVlrCodigo();
                            </script>
                            <entity-find-one entity-name="mantle.product.Product" value-field="productField">
                                <field-map field-name="pseudoId" from="pseudoId"/>
                            </entity-find-one>
                            <if condition="productField"><then>
                                <set field="productId" from="productField.productId"/>
                                <log message="Agregando producto preexistente $productId, cantidad $quantity ***************"/>
                                <service-call name="mantle.order.OrderServices.add#OrderProductQuantity" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                            orderPartSeqId:purchaseOutMap.orderPartSeqId, productId:productId, description:itemDescription, quantity:quantity, unitAmount:price]"/>
                            </then><else>
                                <log level="warn" message="Producto $itemDescription no existe en el sistema, se creará como genérico"/>
                                <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                                orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:itemDescription, quantity:quantity, unitAmount:price,
                                                            itemTypeEnumId:'ItemExpOther']"/>
                            </else>
                            </if>
                        <script>
                            }
                        </script>
                        </else>
                        </if>
                    </if>
                <script>
                }

            </script>
            <log message="Total IVA: $totalIva" level="warn"/>
            <if condition="!invoiceId">
                <if condition="totalIva > 0">
                    <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                        orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:'Monto IVA Total', quantity:1, unitAmount:totalIva,
                                                        itemTypeEnumId:'ItemVatTax']"/>
                </if>
                <!-- Cierre de orden de compra -->
                <service-call name="mchile.PurchaseServices.place#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId,]" out-map="placePurchaseOut"/>

                <!-- Creación de Invoice -->
                <service-call name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice" in-map="[orderId:purchaseOutMap.orderId, orderPartSeqId:purchaseOutMap.orderPartSeqId]" out-map="invoiceOutMap"/>

                <service-call name="mchile.PurchaseServices.receive#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId,]" out-map="receiveOrderOut"/>
                <set field="invoiceId" from="invoiceOutMap.invoiceId"/>
            </if>

            <!-- Se guarda DTE recibido en la base de datos -->
            <set field="createMap" from="[issuerPartyId:issuerPartyId, issuerPartyIdTypeEnumId:'PtidNationalTaxId', fiscalTaxDocumentTypeEnumId:tipoDteEnumId, fiscalTaxDocumentNumber:folioDte,
                        receiverPartyId:activeOrgId, receiverPartyIdTypeEnumId:'PtidNationalTaxId', date:ts, invoiceId:invoiceId]"/>
            <service-call name="create#mch.dte.FiscalTaxDocument" out-map="mapOut" in-map="createMap"/>
            <!-- Se guarda contenido asociado a la DTE, todas las DTE que vienen en el mismo envío comparten el mismo XML -->
            <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:contentLocationXml, contentDate:ts]"/>
            <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <if condition="contentLocationPdf">
                <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:contentLocationPdf, contentDate:ts]"/>
                <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            </if>
            <script>
                }
            </script>

        </actions>
    </service>

    <service verb="load" noun="Dte">
        <description>
            Carga DTE recibida al sistema y llama a servicio que crea orden de compra + invoice correspondiente
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="invoiceId"/>
            <parameter name="xml" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="productMatch" default-value="false"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Carga de RUT de empresa -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="rut" from="partyIdentificationList.idValue[0]"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rut]" out-map="salidaRut"/>
            <set field="rutNoDv" from="salidaRut.rut"/>

            <!-- Carga XML -->
            <set field="archivoXml" from="xml.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RECIBIDAS']" out-map="context"/>
            <set field="fileRoot" value="${resourceValue}"/>

            <set field="contentLocationXml" value="${fileRoot}/${archivoXml}"/>
            <set field="docRrXml" from="ec.resource.getLocationReference(contentLocationXml)"/>
            <script>
                // Se guardan ambos archivos
                fileStream = xml.getInputStream()
                try { docRrXml.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <!-- Carga PDF -->
            <set field="archivoPdf" from="pdf.getName()"/>
            <if condition="archivoPdf">
                <set field="contentLocationPdf" value="${fileRoot}/${archivoPdf}"/>
                <set field="docRrPdf" from="ec.resource.getLocationReference(contentLocationPdf)"/>
                <script>
                    // Se guardan ambos archivos
                    fileStream = pdf.getInputStream()
                    try { docRrPdf.putStream(fileStream) } finally { fileStream.close() }
                </script>
            </if>

            <set field="rutEmisor" value=""/>
            <set field="rutReceptor" value=""/>
            <set field="razonSocialEmisor" value=""/>
            <set field="montoNeto" value="0"/>
            <set field="tipoDte" value=""/>
            <set field="folioDte" value=""/>
            <set field="fechaEmision" value=""/>
            <set field="totalIva" value="0" type="Long"/>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.text.DateFormat;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDefType.Documento.Referencia;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:siid", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");

                XmlOptions opts = new XmlOptions();
                //opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);


                EnvioDTE envio = EnvioDTEDocument.Factory.parse(xml.getInputStream()).getEnvioDTE();

                // Caratula
                rutEmisor = envio.setDTE.getCaratula().getRutEmisor().toString();
                rutReceptor = envio.setDTE.getCaratula().getRutReceptor().toString();

                // DTE
                montoNeto = envio.setDTE.getDTEArray().toString();
                cl.sii.siiDte.DTEDefType[] dteArray = envio.setDTE.getDTEArray();
                for (int i = 0; i &lt; dteArray.size(); i++) {
                    // tipo de DTE
                    tipoDte = dteArray[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().toString();
                    folioDte = dteArray[i].getDocumento().getEncabezado().getIdDoc().getFolio().toString();
                    fechaEmision = dteArray[i].getDocumento().getEncabezado().getIdDoc().getFchEmis().toString();
                    razonSocialEmisor = dteArray[i].getDocumento().getEncabezado().getEmisor().getRznSoc().toString();
                    // Totales
                    montoNeto = dteArray[i].getDocumento().getEncabezado().getTotales().getMntNeto().toString();
                    montoTotal = dteArray[i].getDocumento().getEncabezado().getTotales().getMntTotal().toString();
                    montoExento = dteArray[i].getDocumento().getEncabezado().getTotales().getMntExe().toString();
                    tasaIva = dteArray[i].getDocumento().getEncabezado().getTotales().getTasaIVA().toString();
                    iva = dteArray[i].getDocumento().getEncabezado().getTotales().getIVA().toString();

                    DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = formatter.parse(fechaEmision);
                    Timestamp ts = new Timestamp(date.getTime());

            </script>
                    <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="receiverField">
                        <field-map field-name="idValue" from="rutReceptor"/>
                    </entity-find-one>
                    <set field="receiverPartyId" from="receiverField.partyId"/>

                    <if condition="receiverPartyId != organizationPartyId">
                        <return error="true" message="Receptor en Boleta no corresponde a receptor especificado ($receiverPartyId != $organizationPartyId)"/>
                    </if>

                    <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                    <econdition field-name="idValue" from="rutEmisor"/></entity-find>
                    <!-- TODO: Verificar caso en que emisor tenga varias razones sociales -->
                    <if condition="!partyIdentificationList.idValue[0]">
                        <return error="true" message="Organización no tiene RUT definido"/>
                    </if>
                    <set field="issuerPartyId" from="partyIdentificationList.partyId[0]"/>

                    <!-- Verificación de Razón Social en XML vs lo guardado en Moqui -->
                    <entity-find-one entity-name="mantle.party.Party" value-field="partyField">
                        <field-map field-name="partyId" from="issuerPartyId"/>
                    </entity-find-one>
                    <if condition="!partyField">
                        <return error="true" message="Receptor no existe"/>
                    </if>

                    <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

                    <set field="razonSocialMoqui"/>
                    <if condition="partyTypeEnumId == 'PtyOrganization'"><then>
                        <entity-find-one entity-name="mantle.party.Organization" value-field="partyOrgField">
                            <field-map field-name="partyId" from="issuerPartyId"/>
                        </entity-find-one>
                        <if condition="partyOrgField">
                            <set field="razonSocialMoqui" from="partyOrgField.organizationName"/>
                        </if>
                    </then><else>
                    <entity-find-one entity-name="mantle.party.Person" value-field="partyPersonField">
                        <field-map field-name="partyId" from="issuerPartyId"/>
                    </entity-find-one>
                        <script>
                            razonSocialMoqui = partyPersonField.firstName + " " + partyPersonField.lastName;
                        </script>
                    </else></if>

                    <if condition="(razonSocialEmisor != razonSocialMoqui) &amp;&amp; (partyTypeEnumId == 'PtyOrganization')" >
                        <return error="true" message="Razón social en XML no coincide con la registrada: $razonSocialEmisor != $razonSocialMoqui"/>
                    </if>

                    <service-call name="mchile.DTEServices.get#MoquiSIICode" in-map="[siiCode:tipoDte]" out-map="mapOut"/>
                    <set field="tipoDteEnumId" from="mapOut.fiscalTaxDocumentTypeEnumId"/>

                    <!-- Creación de orden de compra -->
                    <service-call name="mchile.PurchaseServices.create#Purchase" in-map="[vendorPartyId:issuerPartyId]" out-map="purchaseOutMap"/>
                    <set field="itemDescription" type="String"/>
                    <set field="quantity"/>
                    <set field="price"/>
                    <set field="indExe"/> <!-- 1 exento, 2 no facturable, 3 garantía dep. envases, 4 item no venta (guia despacho), 5 guia despacho, 6 no facturable) -->
                    <set field="productId"/>
                    <set field="pseudoId"/>
                    <set field="montoItem" value="0" type="Long"/>
                    <script>
                        Detalle[] detalleArray = dteArray[i].getDocumento().getDetalleArray();
                        logger.warn("Recorriendo detalles:" + detalleArray.size());
                        for (int j = 0; j &lt; detalleArray.size(); j++) {
                            // Adición de items a orden
                            logger.warn("-----------------------------------");
                            logger.warn("Leyendo línea detalle " + j + ",");
                            logger.warn("Indicador exento: " + detalleArray[j].getIndExe());
                            logger.warn("Nombre item: " + detalleArray[j].getNmbItem());
                            logger.warn("Cantidad: " + detalleArray[j].getQtyItem());
                            logger.warn("Precio: " + detalleArray[j].getPrcItem());
                            logger.warn("Monto: " + detalleArray[j].getMontoItem());
                            itemDescription = detalleArray[j].getNmbItem();
                            quantity = detalleArray[j].getQtyItem();
                            price = detalleArray[j].getPrcItem();

                            montoItem = detalleArray[j].getMontoItem();
                            // Si el indicador es no exento hay que agregar IVA como item aparte
                            // Se puede ir sumando el IVA y si es mayor que 0 crear el item
                            if(detalleArray[j].getIndExe() == null &amp;&amp; (tipoDte != '34') ) { // Item y documento afecto
                                logger.warn("Item afecto");
                                indExe = null;
                            } else { // Item exento o documento exento
                                logger.warn("Item exento");
                                indExe = 1;
                            }

                            </script>
                                <if condition="!indExe">
                                    <set field="totalIva" from="(montoItem*0.19) + totalIva"/>
                                </if>
                                <if condition="!invoiceId">
                                    <if condition="productMatch == 'false'"><then>
                                        <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                            orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:itemDescription, quantity:quantity, unitAmount:price,
                                            itemTypeEnumId:'ItemExpOther']"/>
                                    </then><else>
                                       <!-- Se especificó buscar productos preexistentes, pueden haber hasta 5 códigos -->
                                        <log message="Buscando código item" level="warn"/>
                                        <script>
                                            cl.sii.siiDte.DTEDefType.Documento.Detalle.CdgItem[] cdgItem = detalleArray[j].getCdgItemArray();
                                            for (int k = 0; k &lt; cdgItem.size(); k++) {
                                                logger.warn("Leyendo codigo "+k+", valor: " + cdgItem[k].getVlrCodigo());
                                                pseudoId = cdgItem[k].getVlrCodigo();
                                                </script>
                                                    <entity-find-one entity-name="mantle.product.Product" value-field="productField">
                                                        <field-map field-name="pseudoId" from="pseudoId"/>
                                                    </entity-find-one>
                                                    <if condition="productField"><then>
                                                        <set field="productId" from="productField.productId"/>
                                                        <log message="Agregando producto preexistente $productId, cantidad $quantity ***************"/>
                                                        <service-call name="mantle.order.OrderServices.add#OrderProductQuantity" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                            orderPartSeqId:purchaseOutMap.orderPartSeqId, productId:productId, description:itemDescription, quantity:quantity, unitAmount:price]"/>
                                                    </then><else>
                                                        <log level="warn" message="Producto $itemDescription no existe en el sistema, se creará como genérico"/>
                                                        <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                                orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:itemDescription, quantity:quantity, unitAmount:price,
                                                            itemTypeEnumId:'ItemExpOther']"/>
                                                    </else>
                                                    </if>
                                                <script>
                                            }
                                        </script>
                                    </else>
                                    </if>
                                </if>
                            <script>
                        }

                    </script>
                    <log message="Total IVA: $totalIva" level="warn"/>
                    <if condition="!invoiceId">
                        <if condition="totalIva > 0">
                            <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                        orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:'Monto IVA Total', quantity:1, unitAmount:totalIva,
                                                        itemTypeEnumId:'ItemVatTax']"/>
                        </if>
                        <!-- Cierre de orden de compra -->
                        <service-call name="mchile.PurchaseServices.place#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId,]" out-map="placePurchaseOut"/>

                        <!-- Creación de Invoice -->
                        <service-call name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice" in-map="[orderId:purchaseOutMap.orderId, orderPartSeqId:purchaseOutMap.orderPartSeqId]" out-map="invoiceOutMap"/>

                        <service-call name="mchile.PurchaseServices.receive#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId,]" out-map="receiveOrderOut"/>
                        <set field="invoiceId" from="invoiceOutMap.invoiceId"/>
                    </if>

                    <!-- Se guarda DTE recibido en la base de datos -->
                    <set field="createMap" from="[issuerPartyId:issuerPartyId, issuerPartyIdTypeEnumId:'PtidNationalTaxId', fiscalTaxDocumentTypeEnumId:tipoDteEnumId, fiscalTaxDocumentNumber:folioDte,
                        receiverPartyId:activeOrgId, receiverPartyIdTypeEnumId:'PtidNationalTaxId', date:ts, invoiceId:invoiceId]"/>
                    <service-call name="create#mch.dte.FiscalTaxDocument" out-map="mapOut" in-map="createMap"/>
                    <!-- Se guarda contenido asociado a la DTE, todas las DTE que vienen en el mismo envío comparten el mismo XML -->
                    <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:contentLocationXml, contentDate:ts]"/>
                    <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
                    <if condition="contentLocationPdf">
                        <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:contentLocationPdf, contentDate:ts]"/>
                        <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
                    </if>
            <script>
                }
            </script>

        </actions>
    </service>

    <service verb="marcarNoEnviado" noun="Documento">
        <description>
            Marca una DTE como no enviada al SII
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteField">
                <return error="true" message="No existe DTE especificada"/>
            </if>

            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>
            <entity-update value-field="dteField"/>
        </actions>
    </service>

    <service verb="load" noun="Dt">
        <description>
            Carga documento tributario en papel recibido de tercero
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentNumber" required="true"/>
            <parameter name="invoiceId"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="issuerPartyId" required="true"/>
            <parameter name="amount" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="montoNeto"/>
            <parameter name="tasaImpuesto"/>
            <parameter name="tipoImpuesto"/>
            <!--parameter name="razonSocial"/-->
            <parameter name="fechaEmision"/>
            <parameter name="documentoAnulado"/>
            <parameter name="montoExento"/>
            <parameter name="montoIVARecuperable"/>
            <parameter name="codigoIVANoRecuperable"/>
            <parameter name="montoIVANoRecuperable"/>
            <parameter name="montoIVAUsoComun"/>
            <parameter name="codigoOtroImpuestoORetencion"/>
            <parameter name="tasaOtroImpuestoORetencion"/>
            <parameter name="montoOtroImpuestoORetencionConCredito"/>
            <parameter name="montoOtroImpuestoORetencionSinCredito"/>
            <parameter name="montoNetoActivoFijo"/>
            <parameter name="montoIVAActivoFijo"/>
            <parameter name="montoIVANoRetenido"/>
            <parameter name="codigoSucursal"/>
            <parameter name="notasDebitoCreditoFacturasCompra"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <set field="archivoPdf" from="pdf.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RECIBIDAS']" out-map="context"/>
            <set field="fileRoot" value="${resourceValue}"/>
            <set field="contentLocationPdf" value="${fileRoot}/${archivoPdf}"/>


            <set field="docRrPdf" from="ec.resource.getLocationReference(contentLocationPdf)"/>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.text.DateFormat;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                fileStream = pdf.getInputStream()
                try { docRrPdf.putStream(fileStream) } finally { fileStream.close() }

                DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                Date date = formatter.parse(fechaEmision);
                logger.warn("Date: " + date);
                Timestamp ts = new Timestamp(date.getTime());

            </script>

            <set field="purchaseOutMap" type="Map"/>
            <set field="invoiceOutMap" type="Map"/>
            <if condition="!invoiceId">
                <service-call name="mchile.PurchaseServices.create#Purchase" in-map="[vendorPartyId:issuerPartyId]" out-map="purchaseOutMap"/>
                <service-call name="mchile.PurchaseServices.place#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId,]" out-map="placePurchaseOut"/>
                <service-call name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice" in-map="[orderId:purchaseOutMap.orderId, orderPartSeqId:purchaseOutMap.orderPartSeqId]" out-map="invoiceOutMap"/>
                <set field="invoiceId" from="invoiceOutMap.invoiceId"/>
            </if>

            <!-- Creación de FiscalTaxDocument -->
            <set field="createMap" from="[issuerPartyId:issuerPartyId, issuerPartyIdTypeEnumId:'PtidNationalTaxId', fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, fiscalTaxDocumentNumber:fiscalTaxDocumentNumber,
                        receiverPartyId:activeOrgId, receiverPartyIdTypeEnumId:'PtidNationalTaxId', date:ts, invoiceId:invoiceId]"/>
            <service-call name="create#mch.dte.FiscalTaxDocument" out-map="mapOut" in-map="createMap"/>

            <!-- Creación de contenido (PDF) -->
            <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:contentLocationXml, contentDate:ts]"/>
            <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:contentLocationPdf, contentDate:ts]"/>
            <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Entrada en atributos -->
            <set field="updateMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, emailEmisor:emailEmisor, amount:amount,
                                         montoNeto:montoNeto, tasaImpuesto:tasaImpuesto, tipoImpuesto:tipoImpuesto, razonSocial:razonSocial, fechaEmision:fechaEmision, documentoAnulado:documentoAnulado,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable, codigoIVANoRecuperable:codigoIVANoRecuperable, montoIVANoRecuperable:montoIVANoRecuperable,
                                         montoIVAUsoComun:montoIVAUsoComun, codigoOtroImpuestoORetencion:codigoOtroImpuestoORetencion, tasaOtroImpuestoORetencion:tasaOtroImpuestoORetencion,
                                         montoOtroImpuestoORetencionConCredito:montoOtroImpuestoORetencionConCredito, montoOtroImpuestoORetencionSinCredito:montoOtroImpuestoORetencionSinCredito,
                                         montoNetoActivoFijo:montoNetoActivoFijo, montoIVAActivoFijo:montoIVAActivoFijo, montoIVANoRetenido:montoIVANoRetenido, codigoSucursal:codigoSucursal,
                                         notasDebitoCreditoFacturasCompra:notasDebitoCreditoFacturasCompra]"/>
            <service-call name="create#mch.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="updateMap"/>
        </actions>
    </service>

    <service verb="eliminar" noun="DTE">
        <description>
           Elimina registro de una DTE de cualquier tipo
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <script>
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.nio.file.Files;
            </script>

            <!-- Borrado de XML -->
            <entity-find-one entity-name="mch.dte.FiscalTaxDocumentContent" value-field="xmlContentToDelete">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
            </entity-find-one>
            <if condition="xmlContentToDelete">
                <entity-delete value-field="xmlContentToDelete"/>
            </if>
            <!-- Borrado de PDF -->
            <entity-find-one entity-name="mch.dte.FiscalTaxDocumentContent" value-field="pdfContentToDelete">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Pdf"/>
            </entity-find-one>
            <if condition="pdfContentToDelete">
                <entity-delete value-field="pdfContentToDelete"/>
            </if>

            <!-- Se verifica si la DTE es de un tercero -->

            <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>
            <set field="issuerId" from="dteField.issuerPartyId"/>
            <if condition="issuerId == activeOrgId"><then>
                <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-NotIssued"/>
                <set field="dteField.receiverPartyId" value=""/>
                <entity-update value-field="dteField"/>
            </then><else><!-- DTE de tercero -->
                <!-- Si hay una aceptación creada debe borrarse -->
                <entity-find entity-name="mch.dte.AceptacionDte" list="aceptacionList" for-update="true">
                    <econdition field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                </entity-find>
                <iterate list="aceptacionList" entry="aceptacionEntry">
                   <entity-find-one entity-name="mch.dte.AceptacionDte" value-field="aceptacionToDelete">
                       <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                       <field-map field-name="aceptacionDteId" from="aceptacionEntry.aceptacionDteId"/>
                   </entity-find-one>
                    <entity-delete value-field="aceptacionToDelete"/>
                </iterate>
                <entity-delete value-field="dteField"/>
            </else></if>

        </actions>
    </service>

    <service verb="get" noun="InvoiceFromReturn">
        <description>
            Obtiene datos para llamar a método generar#Factura para Nota de Crédito
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>
        </out-parameters>
        <actions>
            <!-- Se busca el orderId de la devolución -->
            <entity-find entity-name="mantle.order.return.ReturnHeaderDetail" list="returnHeaderList">
                <search-form-inputs/><select-field field-name="returnId,statusId,entryDate,facilityId,vendorPartyId,customerPartyId"/>
                <econditions combine="or">
                </econditions>
            </entity-find>

            <entity-find-one entity-name="mantle.order.return.ReturnItem" value-field="returnItemField">
                <select-field field-name="orderId"/>
                <select-field field-name="returnItemSeqId"/>
                <field-map field-name="returnId" from="returnId"/>
            </entity-find-one>

            <set field="orderId" from="returnItemField.orderId"/>
            <set field="returnItemSeqId" from="returnItemField.returnItemSeqId"/>

            <service-call name="mantle.order.OrderInfoServices.get#OrderDisplayInfo" in-map="[orderId:orderId]" out-map="invoiceList"/>

            <iterate list="invoiceList.invoiceIdSet" entry="invoiceEntry">
                <log message="Leyendo: ${invoiceEntry}" level="warn"/>
                <set field="invoiceId" from="invoiceEntry"/>
            </iterate>

        </actions>
    </service>

    <service verb="generar" noun="NotaCredito">
        <description>
            Obtiene datos para llamar a método generar#Factura para Nota de Crédito
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="items" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <set field="listItems" from="items instanceof List ? items : items.split(',') as List" default-value="null"/>
            <iterate list="listItems" entry="detailItem">
                <set field="listProduct" from="detailItem instanceof List ? detailItem : detailItem.split('-') as List"/>
                <log message="Leyendo: $listProduct" level="warn"/>
                <entity-find-one entity-name="mantle.order.return.ReturnItem" value-field="returnItemField">
                    <field-map field-name="returnId" from="returnId"/>
                    <field-map field-name="returnItemSeqId" value="${listProduct[0]}"/>
                </entity-find-one>
                <script>
                    long discount = Long.valueOf(listProduct[3]);
                </script>
                <set field="returnItemField.pctDiscount" from="discount"/>
                <entity-update value-field="returnItemField"/>
            </iterate>


            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Datos de devolución, para armar nota de crédito -->
            <service-call name="mantle.order.ReturnServices.get#ReturnDisplayInfo" in-map="[returnId:returnId]" out-map="context"/>

            <!-- Recuperación de referencias -->
            <entity-find entity-name="mch.dte.ReferenciaReturnAndFiscalCode" list="referenciaList">
                <econdition field-name="returnId" from="returnId"/>
                <order-by field-name="fiscalTaxDocumentTypeEnumId"/>
            </entity-find>

            <!-- Items de la devolución -->
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="returnId"/>
                <order-by field-name="returnItemSeqId"/>
            </entity-find>

            <!-- email receptor -->
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnField"/>

            <if condition="!returnField">
                <return error="true" message="No existe devolución"/>
            </if>
            <if condition="!returnField.customerPartyId">
                <return error="true" message="No existe tercero asociado a devolución"/>
            </if>

            <set field="partyId" from="returnField.customerPartyId"/>

            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:returnField.customerPartyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo"/>
            </if>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <!-- Datos para encontrar contacto -->

            <set field="contactMechId"/>

            <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="contactMechPurposeId" value="PostalTax"/>
            </entity-find-one>

            <if condition="!contactMechField">
                <return error="true" message="Receptor no tiene dirección para impuestos"/>
            </if>

            <set field="contactMechId" from="contactMechField.contactMechId"/>


            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <set field="cmnaReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <if condition="!partyField">
                <return error="true" message="Receptor no existe"/>
            </if>

            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>


            <set field="rznSocReceptor" value=""/>
            <set field="contactoReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <set field="giroReceptor" from="organizationField.giro"/>

                <!-- Obtención de contacto para impuestos en organización -->
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                              in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
                <if condition="!contactOut.postalContactMechId">
                    <return error="true" message="Receptor no tiene contacto tributario asignado"/>
                </if>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                    <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
                </entity-find-one>
                <!-- Obtención de contacto en organización -->
                <if condition="!postalAddressField">
                    <return error="true" message="Nombre receptor no encontrado"/>
                </if>

                <set field="contactoReceptor" from="postalAddressField.toName"/>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>

            <!-- Generacion de nota de crédito -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, emisorS:emisorS, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:returnItemList,
                          invoiceId:invoiceId, returnId:returnId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList, activeOrgId:activeOrgId, receiverPartyId:partyId]" out-map="factMapOut"/>
            <set field="fiscalTaxDocumentId" from="factMapOut.fiscalTaxDocumentId"/>
        </actions>
    </service>

    <service verb="generar" noun="NotaDebito">
        <description>
            Obtiene datos para llamar a método generar#Factura para Nota de Debito
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="items" required="false"/>
            <parameter name="fiscalTaxDocumentTypeEnumId"/>
            <parameter name="codRef"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentIdNotaDebito"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>


            <service-call name="mantle.account.InvoiceServices.get#InvoiceDisplayInfo" in-map="[invoiceId:invoiceId]" out-map="context"/>
            <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="factField"/>

            <if condition="!factField">
                <return error="true" message="No se encontró folio para factura ${fiscalTaxDocumentId}"/>
            </if>
            <set field="folioFact" from="factField.fiscalTaxDocumentNumber"/>

            <!-- TODO: Items a modificar a partir de lista de parámetros en referenciaList -->
            <if condition="items.length() != 0">
                <set field="itemList" from="items instanceof List ? items : items.split(',') as List" default-value="null"/>
            </if>

            <!-- email receptor -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoiceField"/>

            <if condition="!invoiceField">
                <return error="true" message="No existe invoice original"/>
            </if>
            <if condition="!invoiceField.toPartyId">
                <return error="true" message="No existe tercero asociado a invoice"/>
            </if>

            <set field="partyId" from="invoiceField.toPartyId"/>

            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:partyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo party: $partyId"/>
            </if>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfoList" out-map="contactOut"
            in-map="[partyId:partyId, getAll:true]"/>
            <set field="contactMechId"/>
            <iterate list="contactOut.postalAddressList" entry="postalAddList">
                <if condition="postalAddList.postalContactMechPurposeId == 'PostalTax'">
                    <set field="contactMechId" from="postalAddList.postalContactMechId"/>
                    <log message="Obteniendo dirección postal para impuestos: $contactMechId"/>
                </if>
            </iterate>

            <if condition="!contactMechId">
                <return error="true" message="Receptor no tiene dirección para impuestos"/>
            </if>

            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <!-- Comuna -->
            <entity-find-one entity-name="moqui.basic.Geo" value-field="geoField">
                <field-map field-name="geoId" from="contactPostalAddressField.stateProvinceGeoId"/>
            </entity-find-one>

            <if condition="!geoField">
                <return error="true" message="No existe comuna"/>
            </if>

            <set field="cmnaReceptor" from="geoField.geoName"/>
            <!-- Ciudad -->
            <set field="ciudadReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <if condition="!partyField">
                <return error="true" message="Receptor no existe"/>
            </if>

            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>

            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <if condition="!organizationField.giro">
                    <return error="true" message="Receptor no tiene giro"/>
                </if>
                <set field="giroReceptor" from="organizationField.giro"/>
                <!-- Obtención de contacto para impuestos en organización -->
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                              in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
                <if condition="!contactOut.postalContactMechId">
                    <return error="true" message="Receptor no tiene contacto tributario asignado"/>
                </if>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                    <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
                </entity-find-one>
                <!-- Obtención de contacto en organización -->
                <if condition="!postalAddressField">
                    <return error="true" message="Nombre receptor no encontrado"/>
                </if>

                <set field="contactoReceptor" from="postalAddressField.toName"/>


            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>

            <!-- Recuperación de referencias para obtener folio -->
            <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="fiscalTaxField">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <entity-find entity-name="mch.dte.ReferenciaNotaDebito" list="referenciaListOld">
                <econdition field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <order-by field-name="fiscalTaxDocumentTypeEnumId"/>
            </entity-find>


            <set field="referenciaList" type="NewMap" from="[]"/>
            <script>
                referenciaList.add(referenciaListOld);
            </script>

            <!-- Generacion de nota de crédito -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-56', emisorS:emisorS, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:itemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaListOld, activeOrgId:activeOrgId, receiverPartyId:partyId]" out-map="factMapOut"/>

            <set field="fiscalTaxDocumentIdNotaDebito" from="factMapOut.fiscalTaxDocumentId"/>

            <!-- TODO: Crear invoice para nuevo cargo o escribir en asiento contable? -->
            <!--auto-parameters entity-name="mantle.account.invoice.Invoice" include="nonpk"

                description
                currencyUomId
                acctgTransResultEnumId (AtrSuccess)
                invoiceTotal
                appliedPayment (debería ser 0)
                unpaidTotal
                productStoreId (WEB001)
                <service verb="create" noun="InvoiceItem">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <auto-parameters entity-name="mantle.account.invoice.InvoiceItem" include="nonpk">
                <exclude field-name="invoiceItemSeqId"/></auto-parameters>
        </in-parameters>
        <out-parameters><parameter name="invoiceItemSeqId"/></out-parameters>
        <actions>

                o usar adjust#Invoice?

            -->

            <!--service-call name="mantle.account.invoice.InvoiceServices.create#Invoice" in-map="context + [fromPartyId:fromPartyId, toPartyId:partyId]" out-map="context"/-->

        </actions>
    </service>

    <service verb="agregar" noun="Referencia">
        <description>
            Agrega una referencia para DTE (excepto Nota de Débito)
        </description>
        <in-parameters>
            <parameter name="returnId"/>
            <parameter name="invoiceId"/>
            <parameter name="shipmentId"/>
            <parameter name="folio" required="true"/>
            <parameter name="rutOtroContribuyente" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="idAdicional"/>
            <parameter name="fecha" required="true"/>
            <parameter name="codigoReferenciaEnumId" required="true"/>
            <parameter name="razonReferencia"/>
            <parameter name="esFactura" default-value="false"/>
        </in-parameters>
        <actions>
            <!-- Verificación de RUT -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutOtroContribuyente]"/>

            <!-- Inserción en tabla referenceReturn -->
            <if condition="esFactura == 'false'">
                <set field="createMap" from="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, returnId:returnId, razonReferencia:razonReferencia]"/>
                <service-call name="create#mch.dte.ReferenciaReturn" out-map="context" in-map="createMap"/>
            </if>
            <if condition="esFactura == 'true'">
                <set field="createMap" from="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, invoiceId:invoiceId, razonReferencia:razonReferencia]"/>
                <service-call name="create#mch.dte.ReferenciaInvoice" out-map="context" in-map="createMap"/>
            </if>
        </actions>
    </service>

    <service verb="agregar" noun="RefNotaDebito">
        <description>
            Agrega una referencia para asociar DTE con nota de débito
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId"/>
            <parameter name="folio" required="true"/>
            <parameter name="rutOtroContribuyente" required="true"/>
            <parameter name="idAdicional"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fecha" required="true"/>
            <parameter name="codigoReferenciaEnumId" required="true"/>
            <parameter name="razonReferencia"/>
        </in-parameters>
        <actions>
            <!-- Verificación de RUT -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutOtroContribuyente]"/>

            <!-- Inserción en tabla referenciaFactura -->
            <set field="createMap" from="[codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, fiscalTaxDocumentId:fiscalTaxDocumentId, razonReferencia:razonReferencia, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]"/>
            <service-call name="create#mch.dte.ReferenciaNotaDebito" out-map="context" in-map="createMap"/>
        </actions>
    </service>

    <service verb="agregar" noun="RefShipment">
        <description>
            Agrega una referencia para asociar DTE shipment/guía de despacho
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId"/>
            <parameter name="folio" required="true"/>
            <parameter name="rutOtroContribuyente" required="true"/>
            <parameter name="idAdicional"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fecha" required="true"/>
            <parameter name="codigoReferenciaEnumId" required="true"/>
            <parameter name="razonReferencia"/>
            <parameter name="shipmentId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Verificación de RUT -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutOtroContribuyente]"/>

            <!-- Inserción en tabla referenciaShipment -->
            <set field="createMap" from="[shipmentId:shipmentId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, fiscalTaxDocumentId:fiscalTaxDocumentId, razonReferencia:razonReferencia, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]"/>
            <service-call name="create#mch.dte.ReferenciaShipment" out-map="context" in-map="createMap"/>
        </actions>
    </service>

    <service verb="eliminar" noun="Referencia">
        <description>
            Eliminar referencia de una DTE
        </description>
        <in-parameters>
            <parameter name="referenciaReturnId"/>
            <parameter name="referenciaInvoiceId"/>
            <parameter name="referenciaFacturaId"/>
            <parameter name="referenciaNotaDebitoId"/>
            <parameter name="referenciaShipmentId"/>
        </in-parameters>
        <actions>
            <if condition="referenciaReturnId">
                <entity-find-one entity-name="mch.dte.ReferenciaReturn" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
            <if condition="referenciaInvoiceId">
                <entity-find-one entity-name="mch.dte.ReferenciaInvoice" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
            <if condition="referenciaFacturaId">
                <entity-find-one entity-name="mch.dte.ReferenciaFactura" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
            <if condition="referenciaNotaDebitoId">
                <entity-find-one entity-name="mch.dte.ReferenciaNotaDebito" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
            <if condition="referenciaShipmentId">
                <entity-find-one entity-name="mch.dte.ReferenciaShipment" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
        </actions>
    </service>

    <service verb="enviar" noun="Aceptacion">
        <description>
            Envío de respuesta a emisor DTE.

            Esta implementación inicialmente responde a un solo envío

            En un paso posterior se puede enviar Aceptación o Rechazo (no implementado)
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fiscalTaxDocumentNumber" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <!-- No se envían aceptaciones por boletas -->
            <if condition="(fiscalTaxDocumentTypeEnumId == 'Ftdt-39') || (fiscalTaxDocumentTypeEnumId == 'Ftdt-41') || (fiscalTaxDocumentTypeEnumId == 'PvtBoleta')">
                 <return message="Boletas no requieren envío de aceptación" type="warning"/>
            </if>


            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="rutResponde" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <entity-find-one entity-name="mantle.party.Organization" value-field="orgField">
                <field-map field-name="partyId" from="activeOrgId"/>
                <select-field field-name="giro"/>
                <select-field field-name="templateFactura"/>
                <select-field field-name="templatePdf"/>
                <select-field field-name="templateEnvio"/>
                <select-field field-name="templateAceptaciones"/>
                <select-field field-name="templateLibro"/>
                <select-field field-name="logo"/>
                <select-field field-name="fchResol"/>
                <select-field field-name="nroResol"/>
            </entity-find-one>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_ACEPTACIONES']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:orgField.templatePdf]" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:orgField.templateAceptaciones]" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'RUT_ENVIADOR']" out-map="context"/>
            <set field="rutEnviador" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RECIBIDAS']" out-map="context"/>
            <set field="dirS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'NMB_CONTACTO']" out-map="context"/>
            <set field="nmbContacto" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'MAIL_CONTACTO']" out-map="context"/>
            <set field="mailContacto" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'FONO_CONTACTO']" out-map="context"/>
            <set field="fonoContacto" from="resourceValue"/>

            <!-- Se guarda aceptacion para obtener el aceptacionDteId -->
            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto, issuerPartyId:activeOrgId]"/>
            <service-call name="create#mch.dte.AceptacionDte" out-map="context" in-map="createMap"/>

            <!-- Recuperación de datos para emitir aceptación -->
            <entity-find-one entity-name="mch.dte.FiscalTaxDocumentContent" value-field="dteField">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
                <select-field field-name="contentLocation"/>
            </entity-find-one>

            <set field="envioRecibido" from="dteField.contentLocation"/>
            <set field="idS" value="" type="String"/>
            <script>
               idS =  (int) (System.currentTimeMillis() / 1000L)
            </script>
            <set field="nmbEnvio" value=""/>
            <set field="fchRecep" value=""/>
            <set field="rutEmisor" value=""/>
            <set field="rutReceptor" value=""/>
            <set field="estadoRecepEnvEnumId" value=""/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.io.FileOutputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;
                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlOptions;
                import org.apache.xmlbeans.XmlCursor;
                import org.w3c.dom.Document;
                import org.w3c.dom.Element;
                import org.w3c.dom.NodeList;
                import javax.xml.crypto.dsig.*;
                import javax.xml.transform.*;
                import javax.xml.crypto.dsig.dom.DOMValidateContext;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.RespuestaDTEDocument;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.Caratula;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.RecepcionEnvio;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.RecepcionEnvio.RecepcionDTE;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.ResultadoDTE;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                import javax.xml.parsers.DocumentBuilder;
                import javax.xml.parsers.DocumentBuilderFactory;
                import javax.xml.parsers.ParserConfigurationException;
                javax.xml.crypto.dsig.dom.DOMValidateContext;
                javax.xml.crypto.dsig.XMLSignatureException;
                import org.xml.sax.SAXException;

                DTEDocument doc;
                X509Certificate cert;
                PrivateKey key;

                EnvioDTEDocument envio = null;
                try {
                    envio = EnvioDTEDocument.Factory.parse(new FileInputStream(envioRecibido));
                } catch (Exception e) {
                    logger.warn("Error al cargar archivo de envio recepcionado: " + envioRecibido, e);
                    return;
                }
                VerifyResult resl = envio.verifyXML();
                boolean envioEsquemaOK = true;
                boolean envioFirmaOK = true;
                String errorEsquema = "";
                String errorFirma = "";

                if( !resl.isOk()) {
                    logger.error("Envio recibido: Estructura XML incorrecta: " + resl.getMessage());
                    errorEsquema = resl.getMessage();
                    envioEsquemaOK = false;
                } else {
                    logger.warn("Envio recibido: Estructura XML OK");
                }
                // Revisar
                resl = envio.verifySignature();
                if( !resl.isOk()) {
                    logger.error("Envio recibido: firma XML incorrecta");
                } else {
                    logger.debug("Envio recibido: firma XML OK");
                }
                boolean envioRutOK = true;

                String rutContribuyente = rutResponde;

                if(!rutContribuyente.equals(envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor())) {
                    logger.error("Error: carátula de envioDTE recibido dice que rut de receptor es: " + envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor() +
                                " el cual es distinto al de nuestra empresa: " + rutContribuyente);
                    envioRutOK = false;
                }

                //Certificado cert = new Certificado();
                //CertificadoLlave certLlave = cert.getCertificado(certS, passS);
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                ArrayList&lt;RecepcionDTE&gt; arrRecepcionDTE = new ArrayList&lt;RecepcionDTE&gt;();
                ArrayList&lt;ResultadoDTE&gt; resultados = new ArrayList&lt;ResultadoDTE&gt;();
                RecepcionEnvio rre = RecepcionEnvio.Factory.newInstance();

                File f = new File(envioRecibido);
                rre.setNmbEnvio(f.getName());
                rre.xsetFchRecep(FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date())));
                rre.setCodEnvio(idS);
                rre.setEnvioDTEID(envio.getEnvioDTE().getSetDTE().getID());
                rre.setEstadoRecepEnv(0);
                rre.setRecepEnvGlosa("Envio Recibido Conforme");

                fchRecep = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date())).toString()
                envioDteId = envio.getEnvioDTE().getSetDTE().getID()
                estadoRecepEnvEnumId = 0

                if (envioFirmaOK &amp;&amp; envioEsquemaOK &amp;&amp; envioRutOK ) {
                    X509Certificate x509 = XMLUtil.getCertificate(envio.getEnvioDTE().getSignature());
                    logger.warn("Firmado por: " + x509.getSubjectX500Principal().getName());

                    for (DTEDefType dte : envio.getEnvioDTE().getSetDTE().getDTEArray()) {

                        x509 = XMLUtil.getCertificate(dte.getSignature());
                        logger.warn("DTE ID " + dte.getDocumento().getID() + " Firmado por: " + x509.getSubjectX500Principal().getName());
                        logger.warn("Por almacenar en " + dirS);
                        String nombreDTE = dirS + "dte-"+dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor()+"-"+dte.getDocumento().getEncabezado().getIdDoc().getFolio()+".xml";
                        rutEmisor = dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor()
                        try {
                            FileOutputStream fout = new FileOutputStream(nombreDTE);
                            fout.write(dte.getBytes());
                            fout.flush();
                            fout.close();
                        } catch (FileNotFoundException e) {
                            logger.warn("Error al guardar DTE en path " + nombreDTE, e);
                            return
                        } catch (IOException e) {
                            logger.warn("Error al escribir DTE en path " + nombreDTE, e);
                            return
                        }
                        logger.warn("Grabado DTE recibido en PATH: " + nombreDTE);

                        boolean firmaOKDTE = true;
                        if(!resl.isOk()) {
                            logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML Incorrecta: " + resl.getMessage());
                            firmaOKDTE = false;  // Revisar
                        } else {
                            logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML OK");
                        }
                        boolean rutDTEOK = true;

                        if(!rutContribuyente.equals(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep())) {
                            logger.warn("Error, DTE id: " + dte.getDocumento().getID() + " folio: " + dte.getDocumento().getEncabezado().getIdDoc().getFolio()
                                        + " tipo: " + dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE().toString() + " contiene RUT de receptor ["
                                        + dte.getDocumento().getEncabezado().getReceptor().getRUTRecep() + "] que no corresponde a nuestra empresa [" + rutContribuyente + "]");
                            rutDTEOK = false;
                        }
                        // RecepcionDTE
                        RecepcionDTE rDTE = RecepcionDTE.Factory.newInstance();
                        rDTE.setFolio(dte.getDocumento().getEncabezado().getIdDoc().getFolio());
                        rDTE.setTipoDTE(dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE());
                        rDTE.setFchEmis(dte.getDocumento().getEncabezado().getIdDoc().getFchEmis());
                        rDTE.setRUTEmisor(dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor());
                        rDTE.setRUTRecep(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep());
                        rDTE.setMntTotal(dte.getDocumento().getEncabezado().getTotales().getMntTotal());

                        ResultadoDTE resDTE = ResultadoDTE.Factory.newInstance();
                        resDTE.setFolio(dte.getDocumento().getEncabezado().getIdDoc().getFolio());
                        resDTE.setTipoDTE(dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE());
                        resDTE.setFchEmis(dte.getDocumento().getEncabezado().getIdDoc().getFchEmis());
                        resDTE.setRUTEmisor(dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor());
                        resDTE.setRUTRecep(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep());
                        resDTE.setMntTotal(dte.getDocumento().getEncabezado().getTotales().getMntTotal());
                        // se asocia el ID del envio recepcionado en nuestra BD
                        resDTE.setCodEnvio(new Long(idS));

                        if( firmaOKDTE &amp;&amp; rutDTEOK) {
                            //EstadoDTESII estadoDTE = null;
                            // Validacion en SII no implementada
                            //estadoDTE = new EstadoDTESII();
                            //estadoDTE.setEstado("DOK");
                            estadoDTE = "DOK";
                        } else {
                            if( !firmaOKDTE) {
                                resDTE.setEstadoDTE(new Integer(2));
                                resDTE.setEstadoDTEGlosa("DTE rechazado - Error de Firma");
                                estadoRecepEnvEnumId = 2
                                logger.warn("DTE Rechazado - Error de Firma");
                                rDTE.setEstadoRecepDTE(new Integer(1));
                                rDTE.setRecepDTEGlosa("DTE No Recibido - Error de Firma");
                                logger.warn("DTE No Recibido - Error de Firma");
                            } else if(!rutDTEK) {
                                resDTE.setEstadoDTE(new Integer(2));
                                resDTE.setEstadoDTEGlosa("DTE rechazado - Error en RUT Receptor");
                                logger.warn("DTE rechazado - Error en RUT Receptor");

                                rDTE.setEstadoRecepDTE(new Integer(3));
                                rDTE.setRecepDTEGlosa("DTE No Recibido - Error en RUT Receptor");
                                logger.warn("DTE No Recibido - Error en RUT Receptor");
                            }
                        }
                        resultados.add(resDTE);
                        arrRecepcionDTE.add(rDTE);
                    }
                } else {
                    logger.warn("Envio no cumple con la firma o con esquema XML");

                    // Revisar si es problema de esquema o de firma
                    if(!envioEsquemaOK) {
                        rre.setEstadoRecepEnv(1);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - Error de schema: " + errorEsquema);
                    } else if (!envioFirmaOK) {
                        rre.setEstadoRecepEnv(2);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - Error de Firma: " + errorFirma);
                    } else if (!envioRutOK) {
                        rre.setEstadoRecepEnv(3);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - RUT receptor no corresponde");
                    }
                    logger.warn("Glosa respuesta envío: " + rre.getRecepEnvGlosa());
                }
                Caratula caratula = Caratula.Factory.newInstance();
                Resultado resultado = Resultado.Factory.newInstance();

                if (arrRecepcionDTE.size > 0) {
                    RecepcionDTE[] resultadoDTE = new RecepcionDTE[arrRecepcionDTE.size()];
                    for(int i = 0; i &lt; arrRecepcionDTE.size(); i++)
                        resultadoDTE[i] = arrRecepcionDTE.get(i);
                    rre.setRecepcionDTEArray(resultadoDTE);
                    caratula.setNroDetalles(arrRecepcionDTE.size());
                } else {
                    if (resultados.size() > 0) {
                        ResultadoDTE[] resultadoDTE = new ResultadoDTE[resultados.size()];
                        for (int i = 0; i &lt; resultados.size(); i++)
                            resultadoDTE[i] = resultados.get(i);
                        resultado.setResultadoDTEArray(resultadoDTE);
                    } else {
                        caratula.setNroDetalles(1);
                    }
                }
                caratula.setRutResponde(rutContribuyente);
                caratula.setRutRecibe(rutEmisor);
                caratula.setIdRespuesta(new Long(idS));
                caratula.setVersion(new BigDecimal("1.0"));
                // Datos en plantilla?
                caratula.setNmbContacto(nmbContacto);
                caratula.setMailContacto(mailContacto);
                caratula.setFonoContacto(fonoContacto);

                resultado.setCaratula(caratula);
                resultado.setID("RESP-" + idS);

                if(!rre.isNil()) {
                    logger.warn("Se responde aceptacion");
                    RecepcionEnvio[] reArray = new RecepcionEnvio[1];
                    reArray[0] = rre;
                    resultado.setRecepcionEnvioArray(reArray);
                }
                RespuestaDTE respDTE = RespuestaDTE.Factory.newInstance();
                respDTE.setResultado(resultado);
                respDTE.setVersion(new BigDecimal("1.0"));

                RespuestaDTEDocument respuesta = RespuestaDTEDocument.Factory.newInstance();
                respuesta.setRespuestaDTE(respDTE);

                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("http://www.sii.cl/SiiDte","");

                XmlOptions opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);
                opts.setSaveSuggestedPrefixes(namespaces);
                opts.setCharacterEncoding("ISO-8859-1");

                // leo certificado y llave privada del archivo pkcs12
                ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias2 = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias2 + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                XmlCursor cursor = respuesta.newCursor();
                if(cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte RespuestaEnvioDTE_v10.xsd");
                }
                try {
                    respuesta = RespuestaDTEDocument.Factory.parse(respuesta.newInputStream(opts));
                } catch (Exception e) {
                    logger.warn("Error al obtener respuesta con formato antes de firmar", e);
                }
                uri = "#RESP-10000";
                try {
                    logger.warn("Respuesta antes de firmar: " + new String(respuesta.getBytes()));
                    //respuesta.sign(certLlave.getPkey(), certLlave.getX509());
                    respuesta.sign(pKey, x509);
                    //respDTE.sign(pKey, x509);
                } catch (Exception e) {
                    logger.error("Error al firmar respuesta" + e.printStackTrace());
                    return
                }
                // releo el doc para que se reflejen los cambios de formato
                //doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts);
                //doc = DTEDocument.Factory.parse(respuesta.newInputStream(opts), opts);
                //return
                // Guardo
                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                uri = "";

                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                //if (respuesta.getDTE().isSetDocumento()) {
                //    //uri = respuesta.getRespuestaDTE().getDocumento().getID();
                //    //respuesta.getRespuestaDTE().getDocumento().xsetTmstFirma(now);
                //    logger.warn("*********************************");
                //}
                //else if (doc.getDTE().isSetLiquidacion()) {
                //    uri = doc.getDTE().getLiquidacion().getID();
                //    doc.getDTE().getLiquidacion().xsetTmstFirma(now);
                //} else if (doc.getDTE().isSetExportaciones()) {
                //    uri = doc.getDTE().getExportaciones().getID();
                //    doc.getDTE().getExportaciones().xsetTmstFirma(now);
                //}
                uri = "#" + uri;
                //uri = "#RESP-10000";

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out2 = new ByteArrayOutputStream();
                //doc.save(new File(resultS + "RESP-sinfirma.xml"), opts);
                //doc.save(out2, opts);
                logger.warn("Escribiendo " + resultS + "RESP-" + idS + ".xml");
                respuesta.save(new File(resultS + "RESP-" + idS + ".xml"), opts);
                respuesta.save(out2, opts);
                logger.warn("Escribiendo archivo temporal para attachment" + resultS + "RESP.xml");
                respuesta.save(new File(resultS + "RESP.xml"), opts);
                ByteArrayOutputStream outTemp = new ByteArrayOutputStream();
                respuesta.save(outTemp, opts);
            </script>
            <!-- Recuperación de algunos datos desde FiscalTaxDocument -->
            <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="fiscalTaxDocumentField">
                <field-map field-name="fiscalTaxDocumentId"/>
            </entity-find-one>
            <set field="folioAceptacion" from="fiscalTaxDocumentField.fiscalTaxDocumentNumber"/>


            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto]"/>
            <service-call name="create#mch.dte.AceptacionDte" out-map="context" in-map="createMap"/>

            <entity-find-one entity-name="mch.dte.AceptacionDte" value-field="aceptacionField" for-update="true"/>
            <!--set field="aceptacionField.nmbEnvio" from="fiscalTaxDocumentField.razonSocial" type="String"/-->
            <set field="aceptacionField.fchRecep" from="fchRecep" type="String"/>
            <set field="aceptacionField.codEnvio" from="idS" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.envioDteId" value="RESP-${idS}" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.rutReceptor" from="rutResponde" type="String"/>
            <set field="aceptacionField.estadoRecepEnvEnumId" from="estadoRecepEnvEnumId" type="String"/>
            <set field="aceptacionField.nroDetalles" value="1" type="Integer"/>
            <set field="aceptacionField.xml" value="${resultS}RESP-${idS}.xml" type="String"/>
            <entity-update value-field="aceptacionField"/>

            <set field="bodyParameters" from="[fiscalTaxDocumentId:folioAceptacion, nmbContacto:nmbContacto, mailContacto:mailContacto, fonoContacto:fonoContacto]"/>
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="fiscalTaxDocumentId" from="folioAceptacion"/>
                <field-map field-name="emailTypeEnumId" from="emailTypeEnumId"/>
                <field-map field-name="toAddresses" value="cherrera156@gmail.com"/>
                <field-map field-name="emailTemplateId" value="Aceptacion"/>
                <field-map field-name="bodyParameters" from="bodyParameters"/>
            </service-call>

        </actions>
    </service>


    <service verb="genera" noun="LibroVentas">
        <description>
            Generación de libro de Ventas
        </description>
        <in-parameters>
            <parameter name="tipo" default="'VENTA'"/><!-- Compra o venta -->
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'TEMPLATE_LIBRO_INVCJ']" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>
            <set field="emisorS" value="76222457-7"/>
            <set field="enviadorS" value="12857517-0"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'NRO_RESOL_INVCJ']" out-map="context"/>
            <set field="nroResol" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'FCH_RESOL_INVCJ']" out-map="context"/>
            <set field="fchResol" from="resourceValue"/>

            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String" value="2"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Properties;
                import java.util.Iterator;
                import java.util.Map;
                import java.util.Map.Entry;
                import java.nio.file.Path;
                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;

                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;

                import cl.helpcom.recursos.Validador;
                import cl.helpcom.recursos.ComunicadorAppClienteTXT;
                import cl.helpcom.dte.util.FirmaLibro;
                import cl.helpcom.dte.util.AgregarCamposLibros;
                import cl.helpcom.recursos.LectorFichero;

                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenSegmento;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Caratula;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.IVANoRec;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.OtrosImp;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp;
                import cl.sii.siiDte.FechaType;

                LectorFichero lectorFichero = new LectorFichero();
                String resultadoSinFirma = "/tmp/LBR-temp.xml";

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm");
                idS  = "ID"+dateFormat.format(new Date());

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT();
                Validador val = new Validador();

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                // Lee y llena los campos  => Caratula se debe armar con parámetros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C");
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;());
                arrayLineasCaratulas.get(0).add(emisorS);
                arrayLineasCaratulas.get(0).add(enviadorS);
                arrayLineasCaratulas.get(0).add('2018-04');
                arrayLineasCaratulas.get(0).add(fchResol);
                arrayLineasCaratulas.get(0).add(nroResol);
                arrayLineasCaratulas.get(0).add(tipo);
                arrayLineasCaratulas.get(0).add(tipoLibro);
                arrayLineasCaratulas.get(0).add(tipoEnvio);

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para envío ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                /* XML FACTURA */
                LibroCompraVentaDocument libCV;

                /* LibroCV */
                libCV = LibroCompraVentaDocument.Factory.parse(new FileInputStream(plantillaS));

                // libCV = LibroCompraVentaDocument.Factory.newInstance();
                LibroCompraVenta libroCompraVenta = libCV.getLibroCompraVenta();
                libCV.getLibroCompraVenta().setVersion(new BigDecimal("1.0"));
                EnvioLibro envioLibro = libroCompraVenta.addNewEnvioLibro();

                // ID de libro se debería calcular
                libCV.getLibroCompraVenta().getEnvioLibro().setID(idS);
                //libCV.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                XmlCursor cursor = libCV.newCursor();
                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo();

                AgregarCamposLibros addCampos = new AgregarCamposLibros();
                // Agregar CARATULA
                addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas);

                // Factura Electronica (33)
                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(33);
                totalesPeriodo.setTotDoc(4);
                totalesPeriodo.setTotMntExe(49015);
                totalesPeriodo.setTotMntNeto(13187210);
                totalesPeriodo.setTotMntIVA(2505571);
                totalesPeriodo.setTotMntTotal(15741796);

                // Nota de Debito Electronica (56)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(56);
                totalesPeriodo.setTotDoc(1);
                totalesPeriodo.setTotMntExe(0);
                totalesPeriodo.setTotMntNeto(0);
                totalesPeriodo.setTotMntIVA(0);
                totalesPeriodo.setTotMntTotal(0);

                // Nota de Credito Electrónica (61)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(61);
                totalesPeriodo.setTotDoc(3);
                totalesPeriodo.setTotMntExe(35339);
                totalesPeriodo.setTotMntNeto(5153396);
                totalesPeriodo.setTotMntIVA(979146);
                totalesPeriodo.setTotMntTotal(6167881);

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3));
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml";

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                //opts = new XmlOptions();
                opts.setSavePrettyPrint();
                //opts.setSavePrettyPrintIndent(0);
                //opts.setCharacterEncoding("ISO-8859-1");
                libCV = LibroCompraVentaDocument.Factory.parse(libCV.newInputStream(opts), (opts));

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                //libCV.save(archivoEnvio, opts);

                libCV.save(new File(resultS + "LIBCV" + idS + "-sinfirma.xml"), opts);
                libCV.save(out, opts);

                FirmaLibro firmaLibro = new FirmaLibro();

                String mensaje=firmaLibro.firmarLibro(certS, passS, resultS + "LIBCV" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio);

            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->
            <!--set field="periodo" from="arrayLineasCaratulas.get(0).get(2)"/>
            <set field="tipoLibro" from="arrayLineasCaratulas.get(0).get(5)"/-->
        </actions>
    </service>


    <service verb="genera" noun="LibroCompras">
        <description>
            Generación de libro de Compra/Venta
        </description>
        <in-parameters>
            <parameter name="tipo" default="'COMPRA'"/><!-- Compra o venta -->
            <parameter name="tipoLibro" default="'MENSUAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'TEMPLATE_LIBRO_INVCJ']" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>
            <set field="emisorS" value="76222457-7"/>
            <set field="enviadorS" value="12857517-0"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'NRO_RESOL_INVCJ']" out-map="context"/>
            <set field="nroResol" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'FCH_RESOL_INVCJ']" out-map="context"/>
            <set field="fchResol" from="resourceValue"/>

            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Properties;
                import java.util.Iterator;
                import java.util.Map;
                import java.util.Map.Entry;
                import java.nio.file.Path;
                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;

                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;

                import cl.helpcom.recursos.Validador;
                import cl.helpcom.recursos.ComunicadorAppClienteTXT;
                import cl.helpcom.dte.util.FirmaLibro;
                import cl.helpcom.dte.util.AgregarCamposLibros;
                import cl.helpcom.recursos.LectorFichero;

                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenSegmento;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Caratula;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.IVANoRec;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.OtrosImp;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp;
                import cl.sii.siiDte.FechaType;

                LectorFichero lectorFichero = new LectorFichero();
                String resultadoSinFirma = "/tmp/LBR-temp.xml";

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm");
                idS  = "ID"+dateFormat.format(new Date());

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT();
                Validador val = new Validador();

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                // Lee y llena los campos  => Caratula se debe armar con parámetros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C");
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;());
                arrayLineasCaratulas.get(0).add(emisorS);
                arrayLineasCaratulas.get(0).add(enviadorS);
                arrayLineasCaratulas.get(0).add('2018-04');
                arrayLineasCaratulas.get(0).add(fchResol);
                arrayLineasCaratulas.get(0).add(nroResol);
                arrayLineasCaratulas.get(0).add(tipo);
                arrayLineasCaratulas.get(0).add(tipoLibro);
                arrayLineasCaratulas.get(0).add(tipoEnvio);

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para envío ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                /* XML FACTURA */
                LibroCompraVentaDocument libCV;

                /* LibroCV */
                libCV = LibroCompraVentaDocument.Factory.parse(new FileInputStream(plantillaS));

                // libCV = LibroCompraVentaDocument.Factory.newInstance();
                LibroCompraVenta libroCompraVenta = libCV.getLibroCompraVenta();
                libCV.getLibroCompraVenta().setVersion(new BigDecimal("1.0"));
                EnvioLibro envioLibro = libroCompraVenta.addNewEnvioLibro();

                // ID de libro se debería calcular
                libCV.getLibroCompraVenta().getEnvioLibro().setID(idS);
                //libCV.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                XmlCursor cursor = libCV.newCursor();
                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo();

                AgregarCamposLibros addCampos = new AgregarCamposLibros();
                // Agregar CARATULA
                addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas);

                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(30);
                totalesPeriodo.setTotDoc(2);
                totalesPeriodo.setTotMntExe(0);
                totalesPeriodo.setTotMntNeto(83036);
                totalesPeriodo.setTotMntIVA(10045);
                totalesPeriodo.setTotOpIVAUsoComun(1);
                totalesPeriodo.setTotIVAUsoComun(5732);
                totalesPeriodo.setFctProp(0.6);
                totalesPeriodo.setTotCredIVAUsoComun(3439);
                totalesPeriodo.setTotMntTotal(98813);


                // Factura Electronica (33)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(33);
                totalesPeriodo.setTotDoc(2);
                totalesPeriodo.setTotMntExe(10611);
                totalesPeriodo.setTotMntNeto(23524);
                totalesPeriodo.setTotMntIVA(2169);
                // IVA No Recuperable
                totIvaNoRec = new ArrayList&lt;TotIVANoRec&gt;();
                oit = TotIVANoRec.Factory.newInstance();
                oit.setCodIVANoRec(4);
                oit.setTotOpIVANoRec(1);
                oit.setTotMntIVANoRec(2301);
                totIvaNoRec.add(oit);
                arrayTot = new TotIVANoRec[totIvaNoRec.size()];
                totIvaNoRec.toArray(arrayTot);
                totalesPeriodo.setTotIVANoRecArray(arrayTot);
                totalesPeriodo.setTotMntTotal(38605);

                // Factura Exenta Electronica (34)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                //totalesPeriodo.setTpoDoc(34);
                //totalesPeriodo.setTotDoc(1);
                //totalesPeriodo.setTotMntExe(29744);
                //totalesPeriodo.setTotMntNeto(0);
                //totalesPeriodo.setTotMntIVA(0);
                //totalesPeriodo.setTotMntTotal(29744);

                // Factura Exenta (32)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                //totalesPeriodo.setTpoDoc(32);
                //totalesPeriodo.setTotDoc(1);
                //totalesPeriodo.setTotMntExe(29628);
                //totalesPeriodo.setTotMntNeto(0);
                //totalesPeriodo.setTotMntIVA(0);
                //totalesPeriodo.setTotMntTotal(29628);

                // Nota de Credito (60)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(60);
                totalesPeriodo.setTotDoc(2);
                totalesPeriodo.setTotMntExe(0);
                totalesPeriodo.setTotMntNeto(11924);
                totalesPeriodo.setTotMntIVA(2266);
                totalesPeriodo.setTotMntTotal(14190);

                // Nota de Credito Electronica (61)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                //totalesPeriodo.setTpoDoc(61);
                //totalesPeriodo.setTotDoc(1);
                //totalesPeriodo.setTotMntExe(8649);
                //totalesPeriodo.setTotMntNeto(5990);
                //totalesPeriodo.setTotMntIVA(0);
                // IVA No Recuperable
                //totIvaNoRec = new ArrayList&lt;TotIVANoRec&gt;();
                //oit = TotIVANoRec.Factory.newInstance();
                //oit.setCodIVANoRec(1);
                //oit.setTotOpIVANoRec(1);
                //oit.setTotMntIVANoRec(1138);
                //totIvaNoRec.add(oit);
                //arrayTot = new TotIVANoRec[totIvaNoRec.size()];
                //totIvaNoRec.toArray(arrayTot);
                //totalesPeriodo.setTotIVANoRecArray(arrayTot);
                //totalesPeriodo.setTotMntTotal(15777);

                // Nota de Debito Electronica (56)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                //totalesPeriodo.setTpoDoc(56);
                //totalesPeriodo.setTotDoc(1);
                //totalesPeriodo.setTotMntExe(3967);
                //totalesPeriodo.setTotMntNeto(0);
                //totalesPeriodo.setTotMntIVA(0);
                //totalesPeriodo.setTotMntTotal(3967);

                // Factura de Compra Electronica (46)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(46);
                totalesPeriodo.setTotDoc(1);
                totalesPeriodo.setTotMntExe(0);
                totalesPeriodo.setTotMntNeto(10619);
                totalesPeriodo.setTotMntIVA(2018);

                ArrayList&lt;TotOtrosImp&gt; totOtrosImp = new ArrayList&lt;TotOtrosImp&gt;();
                toimp = TotOtrosImp.Factory.newInstance();
                toimp.setCodImp(15);
                toimp.setTotMntImp(2018);
                totOtrosImp.add(toimp);
                arrayTot = new TotOtrosImp[totOtrosImp.size()];
                totOtrosImp.toArray(arrayTot);
                totalesPeriodo.setTotOtrosImpArray(arrayTot);
                totalesPeriodo.setTotMntTotal(10619);

                // **************************************************
                // Factura 234
                // Detalles
                Detalle detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(30);
                detalle.setNroDoc(234);
                detalle.setTasaImp(19);
                //detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2018-04-20"))
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                detalle.setMntExe(0);
                detalle.setMntNeto(52870);
                detalle.setMntIVA(10045);
                detalle.setMntTotal(62915);

                // Factura Electrónica 32
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(33);
                detalle.setNroDoc(32);
                detalle.setTasaImp(19);
                //detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2018-04-10"))
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                detalle.setMntExe(10611)
                detalle.setMntNeto(11414);
                detalle.setMntIVA(2169);
                detalle.setMntTotal(24194);

                // Factura 781
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(30);
                detalle.setNroDoc(781);
                detalle.setTasaImp(19);
                detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2018-04-21"))
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                detalle.setMntExe(0);
                detalle.setMntNeto(30166);
                detalle.setIVAUsoComun(5732);
                detalle.setMntTotal(35898);


                // Nota de Crédito 451
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(60);
                detalle.setNroDoc(451);
                detalle.setTasaImp(19);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2018-04-29"))
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                detalle.setMntExe(0);
                detalle.setMntNeto(2926);
                detalle.setMntIVA(556);
                detalle.setMntTotal(3482);

                // Factura Electronica 67
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(33);
                detalle.setNroDoc(67);
                detalle.setTasaImp(19);
                detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2018-04-10"))
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                detalle.setMntExe(0)
                detalle.setMntNeto(12110);
                ivaNoRec = new ArrayList&lt;IVANoRec&gt;();
                oi = IVANoRec.Factory.newInstance();
                oi.setCodIVANoRec(new BigInteger(4));
                oi.setMntIVANoRec(2301);
                ivaNoRec.add(oi);
                array = new IVANoRec[ivaNoRec.size()];
                ivaNoRec.toArray(array);
                detalle.setIVANoRecArray(array);
                detalle.setMntTotal(14411);

                // Factura de Compra Electrónica 9
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(46);
                detalle.setNroDoc(9);
                detalle.setTasaImp(19);
                //detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2018-04-10"))
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                detalle.setMntExe(0)
                detalle.setMntNeto(10619);
                detalle.setMntIVA(2018);
                ArrayList&lt;OtrosImp&gt; otrosImp = new ArrayList&lt;OtrosImp&gt;();
                oimp = OtrosImp.Factory.newInstance();
                oimp.setCodImp(15);
                oimp.setTasaImp(19);
                oimp.setMntImp(2018);
                otrosImp.add(oimp);
                array = new OtrosImp[otrosImp.size()];
                otrosImp.toArray(array);
                detalle.setOtrosImpArray(array);
                detalle.setMntTotal(10619);

                // Nota de Crédito 211
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(60);
                detalle.setNroDoc(211);
                detalle.setTasaImp(19);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2018-04-12"))
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                detalle.setMntExe(0);
                detalle.setMntNeto(8998);
                detalle.setMntIVA(1710);
                detalle.setMntTotal(10708);

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3));
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml";


                // Agregar DETALLES (SOLO LIBRO DE COMPRAS)
                if(tipo.equals("COMPRA")) {
                logger.warn("agregando detalles libro de compras");
                    addCampos.addDatosDetalle(envioLibro, arrayLineasDetalle,c.getCantidadDetallesTotales());
                    //addCampos.addDatosDetalle(envioLibro, arrayLineasDetalle,7);
                }
               // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                //opts = new XmlOptions();
                opts.setSavePrettyPrint();
                //opts.setSavePrettyPrintIndent(0);
                //opts.setCharacterEncoding("ISO-8859-1");
                libCV = LibroCompraVentaDocument.Factory.parse(libCV.newInputStream(opts), (opts));

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                //libCV.save(archivoEnvio, opts);

                libCV.save(new File(resultS + "LIBCV" + idS + "-sinfirma.xml"), opts);
                libCV.save(out, opts);

                FirmaLibro firmaLibro = new FirmaLibro();

                String mensaje=firmaLibro.firmarLibro(certS, passS, resultS + "LIBCV" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio);

            </script>
        </actions>
    </service>

    <service verb="genera" noun="LibroGuias">
        <description>
            Generación de libro de Compra/Venta - hardcoded!
        </description>
        <in-parameters>
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'TEMPLATE_LIBRO_GUIA_INVCJ']" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>
            <set field="emisorS" value="76222457-7"/>
            <set field="enviadorS" value="12857517-0"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'NRO_RESOL_INVCJ']" out-map="context"/>
            <set field="nroResol" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'FCH_RESOL_INVCJ']" out-map="context"/>
            <set field="fchResol" from="resourceValue"/>

            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Properties;
                import java.util.Iterator;
                import java.util.Map;
                import java.util.Map.Entry;
                import java.nio.file.Path;
                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;

                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;

                import cl.helpcom.recursos.Validador;
                import cl.helpcom.recursos.ComunicadorAppClienteTXT;
                import cl.helpcom.dte.util.FirmaLibroGuia;
                import cl.helpcom.dte.util.AgregarCamposLibros;
                import cl.helpcom.recursos.LectorFichero;

                import cl.sii.siiDte.libroguia.LibroGuiaDocument;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Detalle;
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotalesPeriodo;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenSegmento;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Caratula;
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Detalle.IVANoRec;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotTraslado;
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec;
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp;
                import cl.sii.siiDte.FechaType;
                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.libroguia.SignatureType;

                LectorFichero lectorFichero = new LectorFichero();
                String resultadoSinFirma = "/tmp/LBR-temp.xml";

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm");
                idS  = "ID"+dateFormat.format(new Date());

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT();
                Validador val = new Validador();

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                // Lee y llena los campos  => Caratula se debe armar con parámetros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C");
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;());
                arrayLineasCaratulas.get(0).add(emisorS);
                arrayLineasCaratulas.get(0).add(enviadorS);
                arrayLineasCaratulas.get(0).add('2018-04');
                arrayLineasCaratulas.get(0).add(fchResol);
                arrayLineasCaratulas.get(0).add(nroResol);
                arrayLineasCaratulas.get(0).add(tipo);
                arrayLineasCaratulas.get(0).add(tipoLibro);
                arrayLineasCaratulas.get(0).add(tipoEnvio);

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para envío ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                /* XML FACTURA */
                LibroGuiaDocument libGuia;

                /* LibroGuia */
                libGuia = LibroGuiaDocument.Factory.parse(new FileInputStream(plantillaS));

                LibroGuia libroGuia = libGuia.getLibroGuia();
                libGuia.getLibroGuia().setVersion(new BigDecimal("1.0"));
                //EnvioLibro envioLibro = libroGuia.addNewEnvioLibro();
                EnvioLibro envioLibro = libroGuia.getEnvioLibro();
                // ID de libro se debería calcular
                libGuia.getLibroGuia().getEnvioLibro().setID(idS);
                XmlCursor cursor = libGuia.newCursor();


                //AgregarCamposLibros addCampos = new AgregarCamposLibros();
                // Agregar CARATULA
                //addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas);


                //Caratula caratula = envioLibro.addNewCaratula();
                Caratula caratula = envioLibro.getCaratula();
                caratula.setRutEmisorLibro(emisorS);
                caratula.setRutEnvia(enviadorS);
                Calendar cal = Calendar.getInstance();
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2018'));
                cal.set(Calendar.MONTH, Integer.valueOf('03'));
                caratula.setPeriodoTributario(cal);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2018'));
                cal.set(Calendar.MONTH, Integer.valueOf('09'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('24'));
                caratula.setFchResol(cal);
                caratula.setNroResol(Integer.valueOf(nroResol));
                //logger.warn("Leido:" + arrayLineasCaratulas.get(0).get(6));
                //caratula.setTipoLibro(caratula.getTipoLibro().forString("ESPECIAL"));
                //caratula.xsetTipoLibro("&lt;TipoLibro&gt;ESPECIAL&lt;/TipoLibro&gt;");
                //caratula.setTipoLibro(cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Caratula.TipoLibro.Enum.forString('TOTAL'));
                //caratula.setTipoEnvio(caratula.getTipoEnvio().forString(tipoEnvio));
                caratula.setFolioNotificacion(1); // Solo para envío ESPECIAL
                logger.warn("Caratula: " + caratula.getTipoEnvio());

                //iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago));


                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo();
                resumenPeriodo.setTotFolAnulado(0);
                resumenPeriodo.setTotGuiaAnulada(1);
                resumenPeriodo.setTotGuiaVenta(1);
                resumenPeriodo.setTotMntGuiaVta(3283703);
                resumenPeriodo.setTotMntModificado(0);
                ArrayList&lt;TotTraslado&gt; totTraslado = new ArrayList&lt;TotTraslado&gt;();
                oimp = TotTraslado.Factory.newInstance();
                oimp.setTpoTraslado(5);
                oimp.setCantGuia(1);
                oimp.setMntGuia(0);
                totTraslado.add(oimp);
                array = new TotTraslado[totTraslado.size()];
                totTraslado.toArray(array);
                resumenPeriodo.setTotTrasladoArray(array);

                //AgregarCamposLibros addCampos = new AgregarCamposLibros();
                // Agregar CARATULA
                //addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas);


                Detalle detalle = envioLibro.addNewDetalle(); // Caso 1025774-1
                detalle.setFolio(17);
                detalle.setOperacion(1);
                detalle.setTpoOper(5);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2018'));
                cal.set(Calendar.MONTH, Integer.valueOf('03'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('24'));
                detalle.setFchDoc(cal);
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                //detalle.setMntExe(0);
                detalle.setMntNeto(0);
                detalle.setTasaImp(0);
                detalle.setIVA(0);
                detalle.setMntTotal(0);

                detalle = envioLibro.addNewDetalle(); // Caso 1025774-2
                detalle.setFolio(18);
                detalle.setOperacion(1);
                detalle.setTpoOper(1);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2018'));
                cal.set(Calendar.MONTH, Integer.valueOf('03'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('24'));
                detalle.setFchDoc(cal);
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                //detalle.setMntExe(0);
                detalle.setMntNeto(2759414);
                detalle.setTasaImp(19);
                detalle.setIVA(524289);
                detalle.setMntTotal(3283703);
                detalle.setTpoDocRef(33);
                detalle.setFolioDocRef(18);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2018'));
                cal.set(Calendar.MONTH, Integer.valueOf('04'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('10'));
                detalle.setFchDocRef(cal);

                detalle = envioLibro.addNewDetalle(); // Caso 1025774-3
                detalle.setFolio(19);
                detalle.setAnulado(2);
                detalle.setOperacion(1);
                detalle.setTpoOper(1);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2018'));
                cal.set(Calendar.MONTH, Integer.valueOf('03'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('24'));
                detalle.setFchDoc(cal);
                detalle.setRUTDoc("78518640-0");
                detalle.setRznSoc("HORTITEC SPA");
                //detalle.setMntExe(0);
                detalle.setMntNeto(2053884);
                detalle.setTasaImp(19);
                detalle.setIVA(390238);
                detalle.setMntTotal(2444122);

                //SignatureType signature = libroGuia.addNewSignature();

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3));
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml";


                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                //opts = new XmlOptions();
                opts.setSavePrettyPrint();
                libGuia = LibroGuiaDocument.Factory.parse(libGuia.newInputStream(opts), (opts));

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());
                // firmo
                //libGuia.sign(key, cert);

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                libGuia.save(new File(resultS + "LIBGUIA" + idS + "-sinfirma.xml"), opts);
                libGuia.save(out, opts);

                FirmaLibroGuia firmaLibro = new FirmaLibroGuia();
                String mensaje=firmaLibro.firmarLibro(certS, passS, resultS + "LIBGUIA" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio);


            </script>
        </actions>
    </service>

    <service verb="get" noun="DteContent">
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentContentTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="content"/>
        </out-parameters>
        <actions>
            <set field="content" from="null"/>
            <entity-find-one entity-name="mch.dte.FiscalTaxDocumentContent" value-field="contentField"/>
            <if condition="contentField">
                <set field="content" from="contentField.contentLocation"/>
            </if>
        </actions>
    </service>

    <service verb="get" noun="SIICode">
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="siiCode"/>
        </out-parameters>
        <actions>
            <set field="siiCode" from="null"/>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumField">
                <field-map field-name="enumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="enumTypeId" value="FiscalTaxDocumentType"/>
            </entity-find-one>
            <set field="siiCode" from="enumField.enumCode"/>
        </actions>
    </service>

    <service verb="get" noun="MoquiSIICode">
        <in-parameters>
            <parameter name="siiCode" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId"/>
        </out-parameters>
        <actions>
            <set field="fiscalTaxDocumentTypeEnumId" from="null"/>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumField">
                <field-map field-name="enumCode" from="siiCode"/>
                <field-map field-name="enumTypeId" value="FiscalTaxDocumentType"/>
            </entity-find-one>
            <set field="fiscalTaxDocumentTypeEnumId" from="enumField.enumId"/>
        </actions>
    </service>

    <service verb="check" noun="Afecto">
        <in-parameters>
            <parameter name="productId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="afecto" type="String"/>
        </out-parameters>
        <actions>
            <set field="afecto" from="null"/>
            <entity-find-one entity-name="mantle.product.category.ProductCategoryMember" value-field="categoryMemberField">
                <field-map field-name="productId" from="productId"/>
                <field-map field-name="productCategoryId" value="100000"/>
            </entity-find-one>
            <log level="warn" message="Verificando item $productId"/>
            <if condition="categoryMemberField"><then>
                <log message="Item afecto encontrado $productId" level="warn"/>
                <set field="afecto" value="true"/>
            </then>
            <else>
                <log level="warn" message="Item exento"/>
                <set field="afecto" value="false"/>
            </else></if>
        </actions>
    </service>

    <service verb="genera" noun="Boleta">
        <description>
            <!-- TODO -->
            Generación de Boleta acuerdo a plantilla
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="rutReceptor" required="true"/>
            <parameter name="receiverPartyId" required="true"/>
            <parameter name="rznSocReceptor" required="true"/>
            <parameter name="giroReceptor" required="true"/>
            <parameter name="contactoReceptor" required="true"/>
            <parameter name="dirReceptor" required="true"/>
            <parameter name="cmnaReceptor" required="true"/>
            <parameter name="ciudadReceptor" default-value="${cmnaReceptor}"/>
            <parameter name="detailList" type="List" required="false"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="medioPago" required="false"/>
            <parameter name="formaPago" required="false" type="String"/>
            <parameter name="referenciaList" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <entity-find-one entity-name="mantle.party.Organization" value-field="orgField">
                <field-map field-name="partyId" from="activeOrgId"/>
                <select-field field-name="giro"/>
                <select-field field-name="templateBoleta"/><!-- TODO -->
                <select-field field-name="templatePdf"/>
                <select-field field-name="templateEnvio"/>
                <select-field field-name="templateAceptaciones"/>
                <select-field field-name="templateLibro"/>
                <select-field field-name="logo"/>
                <select-field field-name="fchResol"/>
                <select-field field-name="nroResol"/>
            </entity-find-one>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:emisorS]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:orgField.templateFactura]" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>

            <!-- Recuperación del código SII de DTE -->
            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
            <set field="tipoFactura" from="codeOut.siiCode"/>
            <set field="tipoFacturaS" from="codeOut.siiCode"/>

            <set field="fechaEmision"/>


            <!-- Obtención de folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, activeOrgId:activeOrgId]" out-map="context"/>

            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                cafS = cafS + caf
            </script>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia;
                import cl.sii.siiDte.boletas.BOLETADefType;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                int folio;
                DTEDocument doc;
                AutorizacionType caf;
                X509Certificate cert;
                PrivateKey key;
                int tipoFactura;
                int frmPago = 1;
                int listSize = 0;

                // Leo el folio
                folio = Integer.valueOf(folioS);
                tipoFactura = Integer.valueOf(tipoFacturaS);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                caf = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts).getAUTORIZACION();


                // Construyo base a partir del template
                doc = DTEDocument.Factory.parse(new File(plantillaS), opts);

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)


                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Se recorre lista de productos para armar documento (detailList)

                IdDoc iddoc = doc.getDTE().getDocumento().getEncabezado().addNewIdDoc();
                iddoc.setFolio(folio);
                doc.getDTE().getDocumento().setID("N" + iddoc.getFolio());

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura));
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 3 para Factura de Servicios
                // Para Facturas de Exportación:
                //   4 Servicios de Hotelería
                //   5 Servicio de Transporte Terrestre Internacional
                //iddoc.setIndServicio(BigInteger.valueOf(3));

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                // Medio y forma de pago
                if (medioPago != null ) {
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago));
                } else {
                iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"));
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago));
            </script>
            <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:cmnaReceptor]" out-map="context"/>
            <set field="cmnaReceptor" from="outString"/>
            <service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:dirReceptor]" out-map="context"/>
            <set field="dirReceptor" from="outString"/-->
            <script>

                // Receptor
                Receptor recp = doc.getDTE().getDocumento().getEncabezado().addNewReceptor();
                recp.setRUTRecep(rutReceptor.trim());
                recp.setRznSocRecep(rznSocReceptor);
                recp.setGiroRecep(giroReceptor);
                recp.setContacto(contactoReceptor);
                recp.setDirRecep(dirReceptor);
                recp.setCmnaRecep(cmnaReceptor);
                recp.setCiudadRecep(ciudadReceptor);


            </script>
            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>


            <if condition="tipoFactura == 39">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem


                        i = i + 1
                    </script>
                </iterate>
                <script>
                    i = 0
                    listSize = referenciaList.size()
                    Referencia[] ref = new Referencia[listSize]
                </script>

                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('0')) { // Used for Set de Pruebas SII
                        ref[i].setTpoDocRef('SET');
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        } else {
                    </script>
                    <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                    <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                        //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                        ref[i].setTpoDocRef(tpoDocRef);
                        ref[i].setRUTOtr(rutReceptor);
                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>

                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();

                    tot.setMntNeto(totalInvoice);
                    montoNeto = totalInvoice;
                    tot.setTasaIVA(BigDecimal.valueOf(19));
                    // Valor de solo IVA
                    long totalIVA = totalInvoice * 0.19
                    montoIVARecuperable = totalIVA;
                    tot.setIVA(totalIVA)
                    logger.warn("monto neto:" + montoNeto);
                    logger.warn("total IVA:" + totalIVA);
                    // total neto + IVA
                    totalInvoice = totalInvoice + totalIVA
                    logger.warn("Total: " + totalInvoice);
                    tot.setMntTotal(totalInvoice)
                </script>
            </if>

            <if condition="tipoFactura == 41">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>

                <iterate list="detailList" entry="detailEntry">
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <if condition="detailEntry.quantityUomId">
                        <set field="uom" value="Hora"/>
                    </if>

                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->

                    <script><![CDATA[

                        logger.warn("String: " + nombreItem);

                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        det[i].setIndExe(1);
                        if(uom != null)
                            det[i].setUnmdItem(uom);
                        totalInvoice = totalInvoice + totalItem
                        montoNeto = 0
                        montoExento = totalInvoice

                        i = i + 1
                    ]]></script>
                </iterate>
                <script>
                    i = 0
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                    listSize = referenciaList.size();
                    ref = new Referencia[listSize];
                    } else {
                    listSize = 0;
                    }
                    //Referencia[] ref = new Referencia[listSize]

                </script>


                <iterate list="referenciaList" entry="referenciaEntry">
                    <log message="Agregando referencia $referenciaEntry" level="warn"/>
                    <set field="folioRef" from="referenciaEntry.folio" type="String"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('0')) { // Used for Set de Pruebas SII
                        ref[i].setTpoDocRef('SET');
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        } else {
                    </script>
                    <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                    <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                        //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                        ref[i].setTpoDocRef(tpoDocRef);
                        ref[i].setRUTOtr(rutReceptor);
                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }
                        i = i + 1
                    </script>
                </iterate>

                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);
                    montoTotal = totalInvoice;
                    montoExento = totalInvoice;

                </script>
            </if>

            <script>
                // Timbro

                doc.getDTE().timbrar(caf.getCAF(), caf.getPrivateKey(null));

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);

                // releo el doc para que se reflejen los cambios de formato
                doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts);

                // Guardo
                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                String uri = "";
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                if (doc.getDTE().isSetDocumento()) {
                uri = doc.getDTE().getDocumento().getID();
                doc.getDTE().getDocumento().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetLiquidacion()) {
                uri = doc.getDTE().getLiquidacion().getID();
                doc.getDTE().getLiquidacion().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetExportaciones()) {
                uri = doc.getDTE().getExportaciones().getID();
                doc.getDTE().getExportaciones().xsetTmstFirma(now);
                }

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                doc.save(new File(resultS + "DTE" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts);
                doc.save(out, opts);
                Document doc2 = XMLUtil.parseDocument(out.toByteArray());
                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "Documento");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "Documento")) {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml");
                    Files.write(path, salida);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar factura folio "+folio);
                }
            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->

            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}DTE${tipoFactura}-${folio}.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf, dte:xml, activeOrgId:activeOrgId]" out-map="context"/>

            <!-- Creación de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mch.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
            </entity-find-one>

            <set field="dteField.issuerPartyId" from="activeOrgId"/>
            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>
            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                Date date = new Date();
                Timestamp ts = new Timestamp(date.getTime());
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts]"/>
            <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts]"/>
            <service-call name="create#mch.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>

        </actions>
    </service>

    <service verb="update" noun="InvoiceGlobalDiscount">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="globalDiscount" type="Integer" default-value="0"/>
            <parameter name="glosaDr"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoiceField">
                <field-map field-name="invoiceId" from="invoiceId"/>
            </entity-find-one>
            <set field="invoiceField.globalDiscount" from="globalDiscount"/>
            <set field="invoiceField.glosaDr" from="glosaDr"/>
            <entity-update value-field="invoiceField"/>
        </actions>
    </service>

    <service verb="update" noun="ShipmentIndTraslado">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="indTrasladoEnumId" required="true"/>
            <parameter name="tipoDespachoEnumId"/>
            <parameter name="priceInclude"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipmentField">
                <field-map field-name="shipmentId" from="shipmentId"/>
            </entity-find-one>
            <set field="shipmentField.indTrasladoEnumId" from="indTrasladoEnumId"/>
            <if condition="tipoDespachoEnumId">
                <set field="shipmentField.tipoDespachoEnumId" from="tipoDespachoEnumId"/>
            </if>
            <set field="shipmentField.priceInclude" from="priceInclude"/>
            <entity-update value-field="shipmentField"/>
        </actions>
    </service>

    <service verb="generar" noun="GuiaDespacho">
        <description>
            Obtiene datos para generar Guía de Despacho a partir de un shipment
        </description>
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="indTrasladoEnumId" required="true"/>
            <parameter name="tipoDespachoEnumId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.shipment.ShipmentItemDetail" list="shipmentItemDetailList">
                <econdition field-name="shipmentId"/><order-by field-name="productId"/></entity-find>


            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperación de referencias -->
            <entity-find entity-name="mch.dte.ReferenciaShipment" list="referenciaList">
                <econdition field-name="shipmentId" from="shipmentId"/>
            </entity-find>

            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipmentField"/>

            <if condition="!shipmentField">
                <return error="true" message="No existe despacho"/>
            </if>
            <if condition="!shipmentField.toPartyId">
                <return error="true" message="No existe tercero asociado a despacho"/>
            </if>
            <set field="partyId" from="shipmentField.toPartyId"/>
            <set field="indTrasladoEnumId" from="shipmentField.indTrasladoEnumId"/>
            <set field="tipoDespachoEnumId" from="shipmentField.tipoDespachoEnumId"/>

            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:shipmentField.toPartyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo"/>
            </if>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>


            <!-- Datos para encontrar contacto -->

            <set field="contactMechId"/>

            <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="contactMechPurposeId" value="PostalTax"/>
            </entity-find-one>

            <if condition="!contactMechField">
                <return error="true" message="Receptor no tiene dirección para impuestos"/>
            </if>

            <set field="contactMechId" from="contactMechField.contactMechId"/>


            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <set field="cmnaReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <if condition="!partyField">
                <return error="true" message="Receptor no existe"/>
            </if>

            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>


            <set field="rznSocReceptor" value=""/>
            <set field="contactoReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <set field="giroReceptor" from="organizationField.giro"/>

                <!-- Obtención de contacto para impuestos en organización -->
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                              in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
                <if condition="!contactOut.postalContactMechId">
                    <return error="true" message="Receptor no tiene contacto tributario asignado"/>
                </if>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                    <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
                </entity-find-one>
                <!-- Obtención de contacto en organización -->
                <if condition="!postalAddressField">
                    <return error="true" message="Nombre receptor no encontrado"/>
                </if>

                <set field="contactoReceptor" from="postalAddressField.toName"/>

            </if>

            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>

            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:indTrasladoEnumId]" out-map="codeOut"/>
            <set field="indTraslado" from="codeOut.siiCode"/>
            <set field="tipoDespacho" type="String"/>

            <if condition="tipoDespachoEnumId">
                <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:tipoDespachoEnumId]" out-map="codeOut"/>
                <set field="tipoDespacho" from="codeOut.siiCode"/>
            </if>


            <!-- Generacion de guía de despacho -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-52', emisorS:emisorS, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:shipmentItemDetailList,
                          invoiceId:invoiceId, returnId:returnId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList, activeOrgId:activeOrgId, receiverPartyId:partyId,
                          indTraslado:indTraslado, tipoDespacho:tipoDespacho]" out-map="factMapOut"/>
            <set field="fiscalTaxDocumentId" from="factMapOut.fiscalTaxDocumentId"/>
        </actions>
    </service>


</services>