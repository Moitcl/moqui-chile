<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">


    <service verb="genera" noun="Factura">
        <description>
            Generación de DTE de acuerdo a plantilla
            <!-- TODO: DTE de otros tipos -->
        </description>
        <in-parameters>
            <parameter name="tipoFacturaS" required="true"/>
            <parameter name="rutReceptor" required="true"/>
            <parameter name="rznSocReceptor" required="true"/>
            <parameter name="giroReceptor" required="true"/>
            <parameter name="contactoReceptor" required="true"/>
            <parameter name="dirReceptor" required="true"/>
            <parameter name="cmnaReceptor" required="true"/>
            <parameter name="ciudadReceptor" default-value="${cmnaReceptor}"/>
            <parameter name="detailList" type="List" required="true"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="medioPago" required="false"/>
            <parameter name="formaPago" required="false" type="String"/>
            <parameter name="referenciaList" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="factura"/>
        </out-parameters>
        <actions>
            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]" out-map="context"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_FACTURA']" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <!-- Obtención de folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[dteTypeEnumId:tipoFacturaS]" out-map="context"/>
            <set field="folioS" from="folio" type="Integer"/>
            <script>
                cafS = cafS + caf
            </script>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDefType.Documento.Referencia;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;


                int folio;
                DTEDocument doc;
                AutorizacionType caf;
                X509Certificate cert;
                PrivateKey key;
                int tipoFactura;
                int frmPago = 1;

                // Leo el folio
                folio = Integer.valueOf(folioS);
                tipoFactura = Integer.valueOf(tipoFacturaS);
                if(formaPago != null)
                   frmPago = Integer.valueOf(formaPago);

                //if (tipoFactura != 33 oo tipoFactura != 34) {
                //    throw new Exception("Debe ingresar tipo de factura 33 o 34");
                //}
                // Leo Autorizacion
                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                caf = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts).getAUTORIZACION();


                // Construyo base a partir del template
                doc = DTEDocument.Factory.parse(new File(plantillaS), opts);

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)


                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Se recorre lista de productos para armar documento (detailList)

                IdDoc iddoc = doc.getDTE().getDocumento().getEncabezado().addNewIdDoc();
                iddoc.setFolio(folio);
                doc.getDTE().getDocumento().setID("N" + iddoc.getFolio());

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura));

                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                // Indicador Servicio
                // 3 para Factura de Servicios
                // Para Facturas de Exportación:
                //   4 Servicios de Hotelería
                //   5 Servicio de Transporte Terrestre Internacional
                iddoc.setIndServicio(BigInteger.valueOf(3));

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                // Medio y forma de pago
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago));
                iddoc.setFmaPago(BigInteger.valueOf(frmPago));

                // Receptor
                Receptor recp = doc.getDTE().getDocumento().getEncabezado().addNewReceptor();
                recp.setRUTRecep(rutReceptor);
                recp.setRznSocRecep(rznSocReceptor);
                recp.setGiroRecep(giroReceptor);
                recp.setContacto(contactoReceptor);
                recp.setDirRecep(dirReceptor);
                recp.setCmnaRecep(cmnaReceptor);
                recp.setCiudadRecep(ciudadReceptor);

            </script>


            <if condition="tipoFactura == 33">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    i = 0
                    listSize = referenciaList.size
                    Referencia[] ref = new Referencia[listSize]
                </script>
                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        ref[i].setTpoDocRef(referenciaEntry.dteTypeEnumId);
                        ref[i].setIndGlobal(0);
                        ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>

                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();

                    tot.setMntNeto(totalInvoice);
                    tot.setTasaIVA(BigDecimal.valueOf(19));
                    // Valor de solo IVA
                    totalIVA = totalInvoice * 0.19
                    tot.setIVA(totalIVA)
                    // total neto + IVA
                    totalInvoice = totalInvoice + totalIVA
                    tot.setMntTotal(totalInvoice);
                </script>
            </if>
            <if condition="tipoFactura == 34">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>


                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>

                <script>
                    i = 0
                    listSize = referenciaList.size
                    Referencia[] ref = new Referencia[listSize]
                </script>
                <iterate list="referenciaList" entry="referenciaEntry">
                    <log message="Agregando referencia $referenciaEntry" level="warn"/>
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        ref[i].setTpoDocRef(referenciaEntry.dteTypeEnumId);
                        ref[i].setIndGlobal(0);
                        ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>

                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);

                </script>
            </if>

            <!-- TODO: Nota de Crédito Electrónica -->
            <if condition="tipoFactura == 61">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>

                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.returnQuantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <if condition="!detailEntry.responseAmount">
                        <return error="true" message="No hay precio para crédito producto $nombreItem"/>
                    </if>
                    <set field="priceItem" from="detailEntry.responseAmount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);

                    i = 0
                    listSize = referenciaList.size
                    Referencia[] ref = new Referencia[listSize]
                </script>

                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        ref[i].setTpoDocRef(referenciaEntry.dteTypeEnumId);
                        ref[i].setIndGlobal(0);
                        ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>
            </if>

            <!-- TODO: Nota de Débito Electrónica -->
            <if condition="tipoFactura == 56">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>

                <!-- TODO: En este caso la lista de detalles es lo que hay que modificar -->
                <!-- TODO: detailList:[01-1-100.000-102193, 02-1-100.000-11092] -->

                <iterate list="detailList" entry="detailEntry">

                    <set field="detailTemp" from="detailEntry instanceof List ? detailEntry : detailEntry.split('-') as List"/>
                    <set field="itemNumber" value="${detailTemp[0]}"/>
                    <set field="qtyItem" value="${detailTemp[1]}" type="Integer"/>
                    <set field="priceItem" value="${detailTemp[2]}" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>

                    <!-- TODO: obtener nombre de productId -->
                    <entity-find-one entity-name="mantle.store.Product" value-field="productField"/>
                    <set field="nombreItem" from="productField.productName"/>

                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);

                    i = 0
                    listSize = referenciaList.size
                    Referencia[] ref = new Referencia[listSize]
                </script>

                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        ref[i].setTpoDocRef(referenciaEntry.dteTypeEnumId);
                        ref[i].setIndGlobal(0);
                        ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>
            </if>

            <!-- TODO: Factura de Exportación Electrónica -->
            <if condition="tipoFactura == 110">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>


                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>

                <script>
                    i = 0
                    listSize = referenciaList.size
                    Referencia[] ref = new Referencia[listSize]
                </script>
                <iterate list="referenciaList" entry="referenciaEntry">
                    <log message="Agregando referencia $referenciaEntry" level="warn"/>
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        ref[i].setTpoDocRef(referenciaEntry.dteTypeEnumId);
                        ref[i].setIndGlobal(0);
                        ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>

                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);

                </script>
            </if>

            <!-- TODO: Nota de Débito de Exportación -->
            <if condition="tipoFactura == 111">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>

                <!-- TODO: En este caso la lista de detalles es lo que hay que modificar -->
                <!-- TODO: detailList:[01-1-100.000-102193, 02-1-100.000-11092] -->

                <iterate list="detailList" entry="detailEntry">

                    <set field="detailTemp" from="detailEntry instanceof List ? detailEntry : detailEntry.split('-') as List"/>
                    <set field="itemNumber" value="${detailTemp[0]}"/>
                    <set field="qtyItem" value="${detailTemp[1]}" type="Integer"/>
                    <set field="priceItem" value="${detailTemp[2]}" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>

                    <!-- TODO: obtener nombre de productId -->
                    <entity-find-one entity-name="mantle.store.Product" value-field="productField"/>
                    <set field="nombreItem" from="productField.productName"/>

                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);

                    i = 0
                    listSize = referenciaList.size
                    Referencia[] ref = new Referencia[listSize]
                </script>

                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        ref[i].setTpoDocRef(referenciaEntry.dteTypeEnumId);
                        ref[i].setIndGlobal(0);
                        ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>
            </if>

            <!-- TODO: Nota de Crédito de Exportación -->
            <if condition="tipoFactura == 112">
                <script>
                    int i = 0
                    listSize = detailList.size
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>

                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.returnQuantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <if condition="!detailEntry.responseAmount">
                        <return error="true" message="No hay precio para crédito producto $nombreItem"/>
                    </if>
                    <set field="priceItem" from="detailEntry.responseAmount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);

                    i = 0
                    listSize = referenciaList.size
                    Referencia[] ref = new Referencia[listSize]
                </script>

                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        ref[i].setTpoDocRef(referenciaEntry.dteTypeEnumId);
                        ref[i].setIndGlobal(0);
                        ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>
            </if>

            <script>

                // Timbro

                doc.getDTE().timbrar(caf.getCAF(), caf.getPrivateKey(null));

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);

                // releo el doc para que se reflejen los cambios de formato
                doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts);

                // Guardo
                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                String uri = "";

                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                if (doc.getDTE().isSetDocumento()) {
                    uri = doc.getDTE().getDocumento().getID();
                    doc.getDTE().getDocumento().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetLiquidacion()) {
                    uri = doc.getDTE().getLiquidacion().getID();
                    doc.getDTE().getLiquidacion().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetExportaciones()) {
                    uri = doc.getDTE().getExportaciones().getID();
                    doc.getDTE().getExportaciones().xsetTmstFirma(now);
                }

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                doc.save(new File(resultS + "FACT" + folio + "-sinfirma.xml"), opts);
                doc.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "Documento");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "Documento")) {
                    Path path = Paths.get(resultS + "FACT" + folio + ".xml");
                    Files.write(path, salida);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "FACT" + folio + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar factura folio "+folio);
                }
            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->
            <set field="fiscalTaxDocumentId" from="tipoFacturaS+folioS"/>
            <set field="fiscalTaxDocumentTypeEnumId" from="tipoFacturaS"/>
            <set field="amount" from="totalInvoice"/>
            <set field="folio" from="folioS"/>
            <set field="xml" value="FACT${folio}.xml"/>
            <set field="pdf" value="FACT${folio}.pdf"/>
            <set field="receptor" from="rutReceptor"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf, dte:xml]" out-map="context"/>
            <set field="xml" value="${resultS}FACT${folio}.xml"/>
            <set field="pdf" value="${pathPdf}FACT${folio}.pdf"/>
            <service-call name="create#tfpos.FiscalTaxDocument" in-map="context" out-map="context"/>

        </actions>
    </service>

    <service verb="generaEnvio" noun="Documentos">
        <description>
            Generación de envio documento a partir de facturas ya generadas.

            En esta implementación se genera envío con una sola factura, pues se requiere que todas las facturas sean para el mismo receptor

        </description>
        <in-parameters>
            <parameter name="recepS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="idS" required="true"/>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="xml" required="true"/>
            <!--parameter name="listaFacturas" required="true" type="List"/-->
        </in-parameters>
        <out-parameters>
            <parameter name="archivoEnvio"/>
        </out-parameters>
        <actions>

            <set field="documentoS" from="xml"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:recepS]" out-map="context"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]" out-map="context"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_ENVIO']" out-map="context"/>
            <set field="plantillaEnvio" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>

            <!-- Variable para guardar nombre de archivo del envio -->
            <set field="archivoEnvio" value=""/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Date;
                import java.util.HashMap;

                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula.SubTotDTE;

                // Construyo Envio
                EnvioDTEDocument envio = EnvioDTEDocument.Factory.parse(new FileInputStream(plantillaEnvio));

                // Debo agregar el schema location (Sino SII rechaza)
                XmlCursor cursor = envio.newCursor();
                if (cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioDTE_v10.xsd");
                }

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Asigno un ID
                envio.getEnvioDTE().getSetDTE().setID(idS);

                cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula car =
                envio.getEnvioDTE().getSetDTE().getCaratula();

                car.setRutReceptor(recepS);
                car.setRutEnvia(enviadorS);

                // documentos a enviar
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // Cantidad de documentos a enviar
                //DTEDefType[] dtes = new DTEDefType[otherArgs.length];

                //String[] otherArgs = parser.getRemainingArgs();
                String[] DTEList = new String[1];

                // TODO: Armar lista de documentos
                DTEList[0] = documentoS;

                DTEDefType[] dtes = new DTEDefType[DTEList.size()];

                logger.warn("Tamaño:" + DTEList.size()+ " - Ubic 1 : " + DTEList[0]);

                HashMap&lt;Integer, Integer&gt; hashTot = new HashMap&lt;Integer, Integer&gt;();

                for (int i = 0; i &lt; DTEList.length; i++) {
                    dtes[i] = DTEDocument.Factory.parse(new FileInputStream(DTEList[i]), opts).getDTE();
                    // armar hash para totalizar por tipoDTE
                    if (hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) != null) {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(),
                        hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) + 1);
                    } else {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(), 1);
                    }
                }
                SubTotDTE[] subtDtes = new SubTotDTE[hashTot.size()];
                int i = 0;
                for (Integer tipo : hashTot.keySet()) {
                    SubTotDTE subt = SubTotDTE.Factory.newInstance();
                    subt.setTpoDTE(new BigInteger(tipo.toString()));
                    subt.setNroDTE(new BigInteger(hashTot.get(tipo).toString()));
                    subtDtes[i] = subt;
                    i++;
                }

                car.setSubTotDTEArray(subtDtes);
                // Le doy un formato bonito (debo hacerlo antes de firmar para no
                // afectar los DTE internos)
                opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);
                envio = EnvioDTEDocument.Factory.parse(envio.newInputStream(opts));


                envio.getEnvioDTE().getSetDTE().setDTEArray(dtes);

                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                envio.getEnvioDTE().getSetDTE().getCaratula().xsetTmstFirmaEnv(now);


                // firmo
                //envio.sign(pKey, x509);


                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                envio.save(new File(pathResults + "ENV" + idS + "-sinfirma.xml"), opts);
                envio.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, "#" + idS, pKey, x509, "#" + idS,"SetDTE");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "SetDTE")) {
                    archivoEnvio = pathResults + "ENV" + idS + ".xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + ".xml");
                    Files.write(path, salida);
                    logger.warn("Envio generado OK");
                } else {
                    archivoEnvio = pathResults + "ENV" + idS + "-mala.xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar envio");
                }
            </script>

            <!-- Se guarda referencia a XML de envío en BD -->

            <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="fiscalTaxDocumentField" cache="false" for-update="true" />
            <log message="Encontrado: $fiscalTaxDocumentField" level="warn"/>
            <set field="fiscalTaxDocumentField.envio" from="archivoEnvio" type="String"/>
            <entity-update value-field="fiscalTaxDocumentField"/>

        </actions>
    </service>

    <service verb="enviaSII" noun="Documento">
        <description>
            Envio documento a partir de documento envio ya generado
            compaS: rut de compañía que envía
            enviadorS: rut de persona que envía
            documentoS: nombre de documento a enviar (que puede contener varios)
        </description>
        <in-parameters>
            <parameter name="compaS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="documentoS" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
        <actions>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]" out-map="context"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>

            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;


                ConexionSii con = new ConexionSii();
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);

                logger.warn("Token: " + token);

                String enviadorS = Utilities.getRutFromCertificate(x509);

                RECEPCIONDTEDocument recp = con.uploadEnvioCertificacion(enviadorS, compaS, new File(documentoS), token);
                logger.warn("-----------------");
                logger.warn(recp.xmlText());

                // Se verifica si el status es 0

                String statusXML = recp.xmlText();
                int inicio = statusXML.indexOf("&lt;siid:STATUS&gt;");
                int fin = statusXML.indexOf("&lt;/siid:STATUS&gt;");

                statusXML = statusXML.substring(inicio+1,fin);
                statusXML = statusXML.replaceAll("siid:STATUS&gt;","");
                logger.warn("STATUS: " + statusXML);

                if(statusXML.equals("0")) {
                    trackId = recp.xmlText();
                    inicio = trackId.indexOf("&lt;siid:TRACKID&gt;");
                    fin = trackId.indexOf("&lt;/siid:TRACKID&gt;");
                    trackId = trackId.substring(inicio+1,fin);
                    trackId = trackId.replaceAll("siid:TRACKID&gt;","");
                    logger.warn("DTE Enviada correctamente con trackId " + trackId);
                } else {
                    logger.warn("Error "+ statusXML + " al enviar DTE");
                }

                logger.warn(textXML);
                logger.warn("-----------------");

            </script>

        </actions>
    </service>

    <service verb="load" noun="DTEConfig">
        <description>
            Carga parametros desde archivo resources
        </description>
        <in-parameters>
            <parameter name="resourceName" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resourceValue"/>
        </out-parameters>
        <actions>
            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Properties;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                Properties config = new Properties();
                InputStream input = new FileInputStream("/home/cherrera/git/moqui-framework/runtime/component/moqui-chile/resources/DTEConfig.properties");

                config.load(input);

                resourceValue = config.getProperty(resourceName).toString();
            </script>
        </actions>
    </service>

    <service verb="get" noun="DTEFilename">
        <description>
            Retorna nombre de archivo de DTE
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="format" default-value="'xml'"/>
        </in-parameters>
        <out-parameters>
            <parameter name="filename"/>
            <parameter name="path"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>

            <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="document"/>
            <if condition="format == 'xml'">
                <set field="filename" value="${document.xml}"/>
            </if>
            <if condition="format == 'pdf'">
                <set field="filename" value="${document.pdf}"/>
            </if>
            <set field="path" value="${pathResults}"/>
        </actions>
    </service>

    <service verb="get" noun="AceptacionFilename">
        <description>
            Retorna nombre de archivo de acuse recibo DTE Terceros
        </description>
        <in-parameters>
            <parameter name="aceptacionDteId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="filename"/>
            <parameter name="path"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_ACEPTACIONES']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>

            <entity-find-one entity-name="MoquiChile.AceptacionDte" value-field="document"/>
                <set field="filename" value="${document.xml}"/>
            <set field="path" value="${pathResults}"/>
        </actions>
    </service>

    <service verb="genera" noun="PDF">
        <description>
            Genera archivo PDF de Factura (envio)
        </description>
        <in-parameters>
            <parameter name="pdf" required="true"/>
            <parameter name="dte" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_PDF']" out-map="context"/>
            <set field="template" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>

            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                pdf = pathPdf + pdf;
                dte = pathResults + dte;

                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(template), new FileOutputStream(pdf));

                logger.warn("---------------");
                logger.warn("PDF Generado: " + pdf);
                logger.warn("---------------");
            </script>
        </actions>
    </service>

    <service verb="load" noun="Caf">
        <description>
            Carga CAF en Sistema
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="rut" required="true"/>
            <parameter name="desde" required="true"/>
            <parameter name="hasta" required="true"/>
            <parameter name="fechaAutorizacion" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rut]" out-map="context"/>
            <!-- TODO: Parseado de CAF -->
            <set field="archivo" from="filename.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="fileRoot" value="${resourceValue}"/>
            <set field="contentLocation" value="${fileRoot}/${archivo}"/>

            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>
            <script>
                fileStream = filename.getInputStream()
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <set field="updateMap" from="[filename:archivo,desde:desde, hasta:hasta, dteTypeEnumId:dteTypeEnumId, fechaAutorizacion:fechaAutorizacion,rut:rut, ultimoFolio:desde]"/>
            <service-call name="create#MoquiChile.Caf" out-map="context" in-map="updateMap"/>
        </actions>
    </service>

    <service verb="get" noun="Folio">
        <description>
            Obtiene folio para el tipo de DTE especificado.
            Cuida de no repetir el folio
        </description>
        <in-parameters>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
            <parameter name="caf"/>
        </out-parameters>
        <actions>
            <!-- Se filtra por CAF activo (PK) para el tipo de DTE -->
            <set field="activo" value="true"/>
            <entity-find-one entity-name="MoquiChile.Caf" value-field="cafEntry" for-update="true"/>

            <if condition="!cafEntry">
                <return error="true" message="No existe CAF activo para DTE tipo ${dteTypeEnumId}"/>
            </if>

            <script>
                cafEntry.ultimoFolio = cafEntry.ultimoFolio + 1
            </script>

            <if condition="cafEntry.ultimoFolio &lt; cafEntry.desde">
                <return message="Error en CAF" error="true"/>
            </if>

            <if condition="cafEntry.ultimoFolio &gt; cafEntry.hasta">
                <return message="No se pueden usar más folios de CAF actual" error="true"/>
            </if>


            <entity-update value-field="cafEntry"/>
            <set field="folio" from="cafEntry.ultimoFolio"/>

            <set field="caf" from="cafEntry.filename"/>

        </actions>
    </service>

    <service verb="facturar" noun="Invoice">
        <description>
            Obtiene datos para llamar a método generar#Factura
        </description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Manejo forma y medio de pago -->

            <service-call name="mantle.account.InvoiceServices.get#InvoiceDisplayInfo" in-map="[invoiceId:invoiceId]" out-map="context"/>
            <set field="paymentId" from="paymentApplicationList.paymentId"/>

            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <!-- Ajuste de forma de pago -->
            <set field="medioPago" value="OT"/>
            <set field="formaPago" value="3"/>
            <if condition="payment.paymentInstrumentEnumId == 'PiCreditCard'">
                <set field="medioPago" value="TC"/>
                <set field="formaPago" value="2"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheck'">
                <set field="medioPago" value="CH"/>
                <set field="formaPago" value="1"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheck'">
                <set field="medioPago" value="CH"/>
                <set field="formaPago" value="1"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheckDate'">
                <set field="medioPago" value="CF"/>
                <set field="formaPago" value="2"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheckDate'">
                <set field="medioPago" value="CF"/>
                <set field="formaPago" value="2"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiCash'">
                <set field="medioPago" value="EF"/>
                <set field="formaPago" value="1"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiLetra'">
                <set field="medioPago" value="LT"/>
                <set field="formaPago" value="2"/>
            </if>
            <if condition="payment.paymentInstrumentEnumId == 'PiBillingAccount'">
                <set field="medioPago" value="PE"/>
                <set field="formaPago" value="1"/>
            </if>


            <!-- Datos principales de invoice -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="invoice == null"><return error="true" message="Invoice not found with ID ${invoiceId}"/></if>
            <set field="partyId" from="invoice.toPartyId"/>
            <set field="toPartyId" from="invoice.toPartyId"/>

            <!-- Items de invoice -->
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/></entity-find>

            <!-- email receptor -->
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:toPartyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo, sólo se puede emitir boleta"/>
            </if>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <!-- Datos para encontrar contacto -->


            <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="contactMechPurposeId" value="PostalTax"/>
            </entity-find-one>
            <set field="contactMechId" from="contactMechField.contactMechId"/>

            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <if condition="!contactPostalAddressField">
                 <return message="Receptor no tiene dirección postal" error="true"/>
            </if>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>

            <!-- Comuna -->
            <entity-find-one entity-name="moqui.basic.Geo" value-field="geoField">
                <field-map field-name="geoId" from="contactPostalAddressField.stateProvinceGeoId"/>
            </entity-find-one>




            <set field="cmnaReceptor" from="geoField.geoName"/>
            <set field="ciudadReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <!-- TODO: party puede ser Organization o Persona -->
            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- email -->
                <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                    <field-map field-name="partyId" from="partyId"/>
                    <field-map field-name="contactMechPurposeId" value="PostalTax"/>
                </entity-find-one>
                <set field="contactMechId" from="contactMechField.contactMechId"/>
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <set field="giroReceptor" from="organizationField.giro"/>
                <!-- Obtención de contacto en organización -->
                <entity-find-one entity-name="mantle.party.PartyRelationship" value-field="relationField">
                    <field-map field-name="toPartyId" from="partyId"/>
                    <field-map field-name="relationshipTypeEnumId" value="PtrAgent"/>
                </entity-find-one>
                <if condition="relationField">
                    <set field="partyIdReceptor" from="relationField.fromPartyId"/>
                    <entity-find-one entity-name="mantle.party.Person" value-field="personField">
                        <field-map field-name="partyId" from="partyIdReceptor"/>
                    </entity-find-one>
                    <set field="contactoReceptor" from="personField.firstNAme"/>
                    <script>
                        contactoReceptor = contactoReceptor + " " + personField.lastName
                    </script>
                </if>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- email -->
                <!--service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:fromPartyId]" out-map="context"/>
                <set field="contactMechId" from="emailAddress"/-->

                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>

            <!-- Recuperación de referencias -->
            <entity-find entity-name="MoquiChile.ReferenciaInvoice" list="referenciaList">
                <econdition field-name="invoiceId" from="invoiceId"/>
            </entity-find>

            <!-- Generacion de factura -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[tipoFacturaS:dteTypeEnumId, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:invoiceItemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList]" out-map="context"/>
        </actions>
    </service>

    <service verb="activar" noun="Caf">
        <description>
            Activa CAF para ser usado
        </description>
        <in-parameters>
            <parameter name="cafId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="MoquiChile.Caf" value-field="cafField" for-update="true"/>

            <if condition="!cafField">
                <return error="true" message="No existe CAF"/>
            </if>

            <set field="cafField.activo" value="true"/>
            <entity-update value-field="cafField"/>
        </actions>
    </service>

    <service verb="desactivar" noun="Caf">
        <description>
            Desactiva CAF para no ser usado
        </description>
        <in-parameters>
            <parameter name="cafId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="MoquiChile.Caf" value-field="cafField" for-update="true"/>

            <if condition="!cafField">
                <return error="true" message="No existe CAF"/>
            </if>

            <set field="cafField.activo" value="" type="String"/>
            <entity-update value-field="cafField"/>
        </actions>
    </service>


    <service verb="preparaEnvio" noun="Documentos">
        <description>
            Obtiene datos para llamar a servicio enviar#Documento
        </description>
        <in-parameters>
            <parameter name="documentIds" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'RUT_ENVIADOR']" out-map="context"/>
            <set field="enviadorS" value="${resourceValue}"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'RUT_EMPRESA']" out-map="context"/>
            <set field="compaS" value="${resourceValue}"/>

            <set field="documentList" from="documentIds instanceof List ? documentIds : documentIds.split(',') as List"/>

            <iterate list="documentList" entry="document">
                <set field="documentTemp" from="document instanceof List ? document : document.split('-') as List"/>
                <set field="fiscalTaxDocumentId" value="${documentTemp[0]}"/>
                <set field="fiscalTaxDocumentTypeEnumId" value="${documentTemp[1]}"/>

                <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="detalleDocumento"/>
                <set field="idS" value="Doc${fiscalTaxDocumentId}-${detalleDocumento.folio}"/>
                <set field="recepS" from="detalleDocumento.receptor"/>
                <set field="xml" from="detalleDocumento.xml"/>

                <service-call name="mchile.DTEServices.generaEnvio#Documentos" in-map="[recepS:recepS, enviadorS:enviadorS, idS:idS,
                        fiscalTaxDocumentId:fiscalTaxDocumentId, xml:xml, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]" out-map="context"/>
                <set field="documentoS" from="archivoEnvio"/>
                <!-- TODO: Enviar finalmente al SII -->
                <service-call name="mchile.DTEServices.enviaSII#Documento" in-map="[compaS:compaS, enviadorS:enviadorS , documentoS:documentoS]" out-map="context"/>
            </iterate>
        </actions>
    </service>


    <service verb="verificaEnSII" noun="Documento">
        <description>
            Verificación en el SII de DTE ya enviado
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="statusSii" required="true"/>
            <parameter name="salida" required="true"/>
        </out-parameters>
        <actions>

            <set field="statusSii" value=""/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>

            <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="fiscalTaxDocumentField" cache="false" for-update="false"/>

            <if condition="!fiscalTaxDocumentField">
                <return error="true" message="DTE no existe"/>
            </if>

            <set field="envio" from="fiscalTaxDocumentField.xml" type="String"/>
            <set field="salida" value=""/>
            <set field="statusXML" value=""/>

            <script>
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.HashMap;


                import org.apache.xmlbeans.XmlOptions;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.xmlSchema.RESPUESTADocument;

                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                DTEDocument doc = DTEDocument.Factory.parse(new FileInputStream(envio), opts);

                ConexionSii con = new ConexionSii();

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                System.out.println("Usando certificado " + alias + " del archivo PKCS12: " + certS);


                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);

                System.out.println("Token: " + token);

                String enviadorS = Utilities.getRutFromCertificate(x509);

                RESPUESTADocument resp = con.getEstadoDTECertificacion(enviadorS, doc.getDTE().getDocumento(), token);
                opts.setSavePrettyPrintIndent(2);
                opts.setSavePrettyPrint();
                resp.save(System.out, opts);

                logger.warn("------" + resp.toString())

                salida = resp.toString();
                statusXML = salida
                String status = "0"

                int inicio = statusXML.indexOf("&lt;SII:ERR_CODE&gt;");
                int fin = statusXML.indexOf("&lt;/SII:ERR_CODE&gt;");

                statusXML = statusXML.substring(inicio+1,fin);
                statusXML = statusXML.replaceAll("SII:ERR_CODE&gt;","");
                logger.warn("STATUS: " + statusXML);
                statusSii = statusXML

            </script>
            <set field="statusSii" from="statusXML"/>
            <log message="=> $statusSii" level="warn"/>
        </actions>
    </service>

    <service verb="load" noun="Dte">
        <description>
            Carga DTE recibida al sistema
        </description>
        <in-parameters>
            <parameter name="nroDocumento" required="true"/>
            <parameter name="xml" type="org.apache.commons.fileupload.FileItem" required="false"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="false"/>
            <parameter name="emisor" required="true"/>
            <parameter name="emailEmisor" required="true"/>
            <parameter name="amount" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
            <parameter name="montoNeto"/>
            <parameter name="tasaImpuesto"/>
            <parameter name="tipoImpuesto"/>
            <parameter name="razonSocial"/>
            <parameter name="fechaEmision"/>
            <parameter name="documentoAnulado"/>
            <parameter name="montoExento"/>
            <parameter name="montoIVARecuperable"/>
            <parameter name="codigoIVANoRecuperable"/>
            <parameter name="montoIVANoRecuperable"/>
            <parameter name="montoIVAUsoComun"/>
            <parameter name="codigoOtroImpuestoORetencion"/>
            <parameter name="tasaOtroImpuestoORetencion"/>
            <parameter name="montoOtroImpuestoORetencionConCredito"/>
            <parameter name="montoOtroImpuestoORetencionSinCredito"/>
            <parameter name="montoNetoActivoFijo"/>
            <parameter name="montoIVAActivoFijo"/>
            <parameter name="montoIVANoRetenido"/>
            <parameter name="codigoSucursal"/>
            <parameter name="notasDebitoCreditoFacturasCompra"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:emisor]" out-map="context"/>

            <set field="archivoPdf" from="pdf.getName()"/>
            <set field="archivoXml" from="xml.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RECIBIDAS']" out-map="context"/>
            <set field="fileRoot" value="${resourceValue}"/>
            <set field="contentLocationPdf" value="${fileRoot}/${archivoPdf}"/>
            <set field="contentLocationXml" value="${fileRoot}/${archivoXml}"/>

            <set field="docRrPdf" from="ec.resource.getLocationReference(contentLocationPdf)"/>
            <set field="docRrXml" from="ec.resource.getLocationReference(contentLocationXml)"/>
            <script>
                fileStream = pdf.getInputStream()
                try { docRrPdf.putStream(fileStream) } finally { fileStream.close() }

                fileStream = xml.getInputStream()
                try { docRrXml.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <set field="updateMap" from="[fiscalTaxDocumentId:nroDocumento, pdf:contentLocationPdf, xml:contentLocationXml,fiscalTaxDocumentTypeEnumId:dteTypeEnumId, emisor:emisor, emailEmisor:emailEmisor, amount:amount,
                                         montoNeto:montoNeto, tasaImpuesto:tasaImpuesto, tipoImpuesto:tipoImpuesto, razonSocial:razonSocial, fechaEmision:fechaEmision, documentoAnulado:documentoAnulado,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable, codigoIVANoRecuperable:codigoIVANoRecuperable, montoIVANoRecuperable:montoIVANoRecuperable,
                                         montoIVAUsoComun:montoIVAUsoComun, codigoOtroImpuestoORetencion:codigoOtroImpuestoORetencion, tasaOtroImpuestoORetencion:tasaOtroImpuestoORetencion,
                                         montoOtroImpuestoORetencionConCredito:montoOtroImpuestoORetencionConCredito, montoOtroImpuestoORetencionSinCredito:montoOtroImpuestoORetencionSinCredito,
                                         montoNetoActivoFijo:montoNetoActivoFijo, montoIVAActivoFijo:montoIVAActivoFijo, montoIVANoRetenido:montoIVANoRetenido, codigoSucursal:codigoSucursal,
                                         notasDebitoCreditoFacturasCompra:notasDebitoCreditoFacturasCompra]"/>
            <service-call name="create#tfpos.FiscalTaxDocument" out-map="context" in-map="updateMap"/>
        </actions>
    </service>

    <service verb="eliminar" noun="DTETercero">
        <description>
           Elimina registro de una DTE recibida de un tercero proveedor
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
        </in-parameters>
        <actions>

            <!-- TODO: Borrar archivo de filesystem -->
            <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="dteField" for-update="true"/>
            <entity-delete value-field="dteField"/>

        </actions>
    </service>

    <service verb="generar" noun="NotaCredito">
        <description>
            Obtiene datos para llamar a método generar#Factura para Nota de Crédito
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO: Datos para nota de crédito -->

            <!-- Datos de devolución, para armar nota de crédito -->
            <service-call name="mantle.order.ReturnServices.get#ReturnDisplayInfo" in-map="[returnId:returnId]" out-map="context"/>
            <!--
               vendorPartyId
               customerPartyId
               postalContactMechId
               productId
               orderId
               returnQuantity
               responseAmount
            -->

            <!-- Recuperación de referencias -->
            <entity-find entity-name="MoquiChile.ReferenciaReturn" list="referenciaList">
                <econdition field-name="returnId" from="returnId"/>
            </entity-find>

            <!-- Items de la devolución -->
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="returnId"/></entity-find>

            <!-- email receptor -->
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnField"/>

            <if condition="!returnField">
                <return error="true" message="No existe devolución"/>
            </if>
            <if condition="!returnField.customerPartyId">
                <return error="true" message="No existe tercero asociado a devolución"/>
            </if>

            <set field="partyId" from="returnField.customerPartyId"/>

            <!-- TODO: Lógica para evitar emitir notas a uno mismo -->


            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:returnField.customerPartyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo"/>
            </if>
            <set field="username" from="emailAddress"/>


            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <!-- Datos para encontrar contacto -->

            <set field="contactMechId"/>

            <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="contactMechPurposeId" value="PostalTax"/>
            </entity-find-one>

            <if condition="!contactMechField">
                <return error="true" message="Receptor no tiene dirección para impuestos"/>
            </if>

            <set field="contactMechId" from="contactMechField.contactMechId"/>


            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <set field="cmnaReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <if condition="!partyField">
                <return error="true" message="Receptor no existe"/>
            </if>

            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>


            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <set field="giroReceptor" from="organizationField.giro"/>
                <!-- Obtención de contacto en organización -->
                <entity-find-one entity-name="mantle.party.PartyRelationship" value-field="relationField">
                    <field-map field-name="toPartyId" from="partyId"/>
                    <field-map field-name="relationshipTypeEnumId" value="PtrAgent"/>
                </entity-find-one>
                <if condition="relationField">
                    <set field="partyIdReceptor" from="relationField.fromPartyId"/>
                    <entity-find-one entity-name="mantle.party.Person" value-field="personField">
                        <field-map field-name="partyId" from="partyIdReceptor"/>
                    </entity-find-one>
                    <set field="contactoReceptor" from="personField.firstNAme"/>
                    <script>
                        contactoReceptor = contactoReceptor + " " + personField.lastName
                    </script>
                </if>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>


            <!-- Generacion de nota de crédito -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[tipoFacturaS:'61', rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:returnItemList,
                          invoiceId:returnId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList]" out-map="context"/>
        </actions>
    </service>

    <service verb="generar" noun="NotaDebito">
        <description>
            Obtiene datos para llamar a método generar#Factura para Nota de Debito
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="items" required="true"/>
        </in-parameters>
        <actions>

            <!-- TODO: Datos para nota de débito -->
            <!-- TODO: Nota de Débito lleva IVA si modifica montos -->

            <!-- Recuperar con fiscalTaxDocumentId el nro. de invoice, guardando el nro. de factura -->
            <!-- Para cada detalle del invoice, seleccionar los que se deseen cambiar -->
            <!-- Con detalle cambiado, generar la nota de débito con referencia a factura -->

            <service-call name="mantle.account.InvoiceServices.get#InvoiceDisplayInfo" in-map="[invoiceId:invoiceId]" out-map="context"/>
            <!--
               vendorPartyId
               customerPartyId
               postalContactMechId
               productId
               orderId
               returnQuantity
               responseAmount
            -->

            <!-- Recuperación de referencias para obtener folio -->
            <entity-find entity-name="MoquiChile.ReferenciaFactura" list="referenciaList">
                <econdition field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find>

            <set field="folioFact" from="referenciaList.first.folio"/>

            <!-- TODO: Items a modificar a partir de lista de parámetros en referenciaList -->
            <set field="itemList" from="items instanceof List ? items : items.split(',') as List"/>

            <!-- email receptor -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoiceField"/>

            <if condition="!invoiceField">
                <return error="true" message="No existe invoice original"/>
            </if>
            <if condition="!invoiceField.toPartyId">
                <return error="true" message="No existe tercero asociado a invoice"/>
            </if>

            <set field="partyId" from="invoiceField.toPartyId"/>

            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:partyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo"/>
            </if>
            <set field="username" from="emailAddress"/>


            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <!-- Datos para encontrar contacto -->

            <set field="contactMechId"/>

            <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="contactMechPurposeId" value="PostalTax"/>
            </entity-find-one>

            <if condition="!contactMechField">
                <return error="true" message="Receptor no tiene dirección para impuestos"/>
            </if>

            <set field="contactMechId" from="contactMechField.contactMechId"/>

            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <set field="cmnaReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>

            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <if condition="!partyField">
                <return error="true" message="Receptor no existe"/>
            </if>

            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <set field="giroReceptor" from="organizationField.giro"/>
                <!-- Obtención de contacto en organización -->
                <entity-find-one entity-name="mantle.party.PartyRelationship" value-field="relationField">
                    <field-map field-name="toPartyId" from="partyId"/>
                    <field-map field-name="relationshipTypeEnumId" value="PtrAgent"/>
                </entity-find-one>
                <if condition="relationField">
                    <set field="partyIdReceptor" from="relationField.fromPartyId"/>
                    <entity-find-one entity-name="mantle.party.Person" value-field="personField">
                        <field-map field-name="partyId" from="partyIdReceptor"/>
                    </entity-find-one>
                    <set field="contactoReceptor" from="personField.firstNAme"/>
                    <script>
                        contactoReceptor = contactoReceptor + " " + personField.lastName
                    </script>
                </if>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>

            <return error="true" message="*** tipoFacturaS:'56', rutReceptor:$rutReceptor, rznSocReceptor:$rznSocReceptor, giroReceptor:$giroReceptor,
                          contactoReceptor:$contactoReceptor, dirReceptor:$dirReceptor, cmnaReceptor:$cmnaReceptor, ciudadReceptor:$ciudadReceptor, detailList:$itemList,
                          invoiceId:$invoiceId, formaPago:$formaPago, medioPago:$medioPago, referenciaList:$referenciaList - $contactMechId"/>

            <!-- Generacion de nota de crédito -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[tipoFacturaS:'56', rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:returnItemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList]" out-map="context"/>

            <!-- TODO: Crear invoice para nuevo cargo -->
            <!--auto-parameters entity-name="mantle.account.invoice.Invoice" include="nonpk"

                description
                currencyUomId
                acctgTransResultEnumId (AtrSuccess)
                invoiceTotal
                appliedPayment (debería ser 0)
                unpaidTotal
                productStoreId (WEB001)
                <service verb="create" noun="InvoiceItem">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <auto-parameters entity-name="mantle.account.invoice.InvoiceItem" include="nonpk">
                <exclude field-name="invoiceItemSeqId"/></auto-parameters>
        </in-parameters>
        <out-parameters><parameter name="invoiceItemSeqId"/></out-parameters>
        <actions>

                o usar adjust#Invoice?

            -->

            <service-call name="mantle.account.invoice.InvoiceServices.create#Invoice" in-map="context + [fromPartyId:fromPartyId, toPartyId:partyId]" out-map="context"/>

        </actions>
    </service>

    <service verb="agregar" noun="Referencia">
        <description>
            Agrega una referencia para DTE (excepto Nota de Débito)
        </description>
        <in-parameters>
            <parameter name="returnId"/>
            <parameter name="invoiceId"/>
            <parameter name="folio" required="true"/>
            <parameter name="rutOtroContribuyente" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
            <parameter name="idAdicional"/>
            <parameter name="fecha" required="true"/>
            <parameter name="codigoReferenciaEnumId" required="true"/>
            <parameter name="razonReferencia"/>
            <parameter name="esFactura" default-value="false"/>
        </in-parameters>
        <actions>
            <!-- Verificación de RUT -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutOtroContribuyente]"/>

            <!-- Inserción en tabla referenceReturn -->
            <if condition="esFactura == 'false'">
                <set field="createMap" from="[dteTypeEnumId:dteTypeEnumId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, returnId:returnId, razonReferencia:razonReferencia]"/>
                <service-call name="create#MoquiChile.ReferenciaReturn" out-map="context" in-map="createMap"/>
            </if>
            <if condition="esFactura == 'true'">
                <set field="createMap" from="[dteTypeEnumId:dteTypeEnumId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, invoiceId:invoiceId, razonReferencia:razonReferencia]"/>
                <service-call name="create#MoquiChile.ReferenciaInvoice" out-map="context" in-map="createMap"/>
            </if>
        </actions>
    </service>

    <service verb="agregar" noun="RefNotaDebito">
        <description>
            Agrega una referencia para asociar factura con nota de débito
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId"/>
            <parameter name="folio" required="true"/>
            <parameter name="rutOtroContribuyente" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
            <parameter name="idAdicional"/>
            <parameter name="fecha" required="true"/>
            <parameter name="codigoReferenciaEnumId" required="true"/>
            <parameter name="razonReferencia"/>
        </in-parameters>
        <actions>
            <!--return error="true" message="$fiscalTaxDocumentId - $folio - $rutOtroContribuyente - $dteTypeEnumId - $idAdicional - $fecha - $codigoReferenciaEnumId - $razonReferencia"/-->
            <!-- Verificación de RUT -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutOtroContribuyente]"/>

            <!-- Inserción en tabla referenciaFactura -->
            <set field="createMap" from="[dteTypeEnumId:dteTypeEnumId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, fiscalTaxDocumentId:fiscalTaxDocumentId, razonReferencia:razonReferencia]"/>
            <service-call name="create#MoquiChile.ReferenciaFactura" out-map="context" in-map="createMap"/>
        </actions>
    </service>

    <service verb="eliminar" noun="Referencia">
        <description>
            Eliminar referencia de una DTE
        </description>
        <in-parameters>
            <parameter name="referenciaReturnId"/>
            <parameter name="referenciaInvoiceId"/>
        </in-parameters>
        <actions>
            <if condition="referenciaReturnId">
                <entity-find-one entity-name="MoquiChile.ReferenciaReturn" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
            <if condition="referenciaInvoiceId">
                <entity-find-one entity-name="MoquiChile.ReferenciaInvoice" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
        </actions>
    </service>

    <service verb="enviar" noun="Aceptacion">
        <description>
            Envío de respuesta a emisor DTE.

            Esta implementación inicialmente responde a un solo envío

            En un paso posterior se puede enviar Aceptación o Rechazo
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="rutRecibe" required="true"/>
            <parameter name="nroDetalles" default-value="1"/>
            <parameter name="xml" required="true"/>
        </in-parameters>
        <actions>
            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutRecibe]" out-map="context"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_ACEPTACIONES']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_ACEPTACION']" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'RUT_EMPRESA']" out-map="context"/>
            <set field="rutResponde" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'RUT_ENVIADOR']" out-map="context"/>
            <set field="rutEnviador" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RECIBIDAS']" out-map="context"/>
            <set field="dirS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'NMB_CONTACTO']" out-map="context"/>
            <set field="nmbContacto" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'MAIL_CONTACTO']" out-map="context"/>
            <set field="mailContacto" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'FONO_CONTACTO']" out-map="context"/>
            <set field="fonoContacto" from="resourceValue"/>

            <!-- Se guarda aceptacion para obtener el aceptacionDteId -->
            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto]"/>
            <service-call name="create#MoquiChile.AceptacionDte" out-map="context" in-map="createMap"/>


            <set field="envioRecibido" from="xml"/>
            <set field="dirS" value="/home/cherrera/git/moqui-framework/runtime/component/moqui-chile/DTE/TEMP/"/>
            <set field="idS" from="aceptacionDteId"/>
            <set field="nmbEnvio" value=""/>
            <set field="fchRecep" value=""/>
            <set field="rutEmisor" value=""/>
            <set field="rutReceptor" value=""/>
            <set field="estadoRecepEnvEnumId" value=""/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.io.FileOutputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;
                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlOptions;
                import org.apache.xmlbeans.XmlCursor;
                import org.w3c.dom.Document;
                import org.w3c.dom.Element;
                import org.w3c.dom.NodeList;
                import javax.xml.crypto.dsig.*;
                import javax.xml.transform.*;
                import javax.xml.crypto.dsig.dom.DOMValidateContext;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.RespuestaDTEDocument;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.Caratula;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.RecepcionEnvio;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.RecepcionEnvio.RecepcionDTE;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.ResultadoDTE;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                import javax.xml.parsers.DocumentBuilder;
                import javax.xml.parsers.DocumentBuilderFactory;
                import javax.xml.parsers.ParserConfigurationException;
                javax.xml.crypto.dsig.dom.DOMValidateContext;
                javax.xml.crypto.dsig.XMLSignatureException;
                import org.xml.sax.SAXException;

                DTEDocument doc;
                X509Certificate cert;
                PrivateKey key;

                EnvioDTEDocument envio = null;
                try {
                    envio = EnvioDTEDocument.Factory.parse(new FileInputStream(envioRecibido));
                } catch (Exception e) {
                    logger.warn("Error al cargar archivo de envio recepcionado: " + envioRecibido, e);
                    return;
                }
                VerifyResult resl = envio.verifyXML();
                boolean envioEsquemaOK = true;
                boolean envioFirmaOK = true;
                String errorEsquema = "";
                String errorFirma = "";

                if( !resl.isOk()) {
                    logger.error("Envio recibido: Estructura XML incorrecta: " + resl.getMessage());
                    errorEsquema = resl.getMessage();
                    envioEsquemaOK = false;
                } else {
                    logger.warn("Envio recibido: Estructura XML OK");
                }
                // Revisar
                resl = envio.verifySignature();
                if( !resl.isOk()) {
                    logger.error("Envio recibido: firma XML incorrecta");
                } else {
                    logger.debug("Envio recibido: firma XML OK");
                }
                boolean envioRutOK = true;

                String rutContribuyente = rutResponde;

                if(!rutContribuyente.equals(envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor())) {
                    logger.error("Error: carátula de envioDTE recibido dice que rut de receptor es: " + envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor() +
                                " el cual es distinto al de nuestra empresa: " + rutContribuyente);
                    envioRutOK = false;
                }
                //Certificado cert = new Certificado();
                //CertificadoLlave certLlave = cert.getCertificado(certS, passS);
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                ArrayList&lt;RecepcionDTE&gt; arrRecepcionDTE = new ArrayList&lt;RecepcionDTE&gt;();
                ArrayList&lt;ResultadoDTE&gt; resultados = new ArrayList&lt;ResultadoDTE&gt;();
                RecepcionEnvio rre = RecepcionEnvio.Factory.newInstance();

                File f = new File(envioRecibido);
                rre.setNmbEnvio(f.getName());
                rre.xsetFchRecep(FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date())));
                rre.setCodEnvio(Long.parseLong(idS));
                rre.setEnvioDTEID(envio.getEnvioDTE().getSetDTE().getID());
                rre.setEstadoRecepEnv(0);
                rre.setRecepEnvGlosa("Envio Recibido Conforme");

                fchRecep = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date())).toString()
                envioDteId = envio.getEnvioDTE().getSetDTE().getID()
                estadoRecepEnvEnumId = 0

                if (envioFirmaOK &amp;&amp; envioEsquemaOK &amp;&amp; envioRutOK ) {
                    X509Certificate x509 = XMLUtil.getCertificate(envio.getEnvioDTE().getSignature());
                    logger.warn("Firmado por: " + x509.getSubjectX500Principal().getName());

                    for (DTEDefType dte : envio.getEnvioDTE().getSetDTE().getDTEArray()) {

                        x509 = XMLUtil.getCertificate(dte.getSignature());
                        logger.warn("DTE ID " + dte.getDocumento().getID() + " Firmado por: " + x509.getSubjectX500Principal().getName());
                        logger.warn("Por almacenar en " + dirS);
                        String nombreDTE = dirS + "dte-"+dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor()+"-"+dte.getDocumento().getEncabezado().getIdDoc().getFolio()+".xml";
                        rutEmisor = dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor()
                        try {
                            FileOutputStream fout = new FileOutputStream(nombreDTE);
                            fout.write(dte.getBytes());
                            fout.flush();
                            fout.close();
                        } catch (FileNotFoundException e) {
                            logger.warn("Error al guardar DTE en path " + nombreDTE, e);
                            return
                        } catch (IOException e) {
                            logger.warn("Error al escribir DTE en path " + nombreDTE, e);
                            return
                        }
                        logger.warn("Grabado DTE recibido en PATH: " + nombreDTE);

                        boolean firmaOKDTE = true;
                        if(!resl.isOk()) {
                            logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML Incorrecta: " + resl.getMessage());
                            firmaOKDTE = false;  // Revisar
                        } else {
                            logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML OK");
                        }
                        boolean rutDTEOK = true;

                        if(!rutContribuyente.equals(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep())) {
                            logger.warn("Error, DTE id: " + dte.getDocumento().getID() + " folio: " + dte.getDocumento().getEncabezado().getIdDoc().getFolio()
                                        + " tipo: " + dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE().toString() + " contiene RUT de receptor ["
                                        + dte.getDocumento().getEncabezado().getReceptor().getRUTRecep() + "] que no corresponde a nuestra empresa [" + rutContribuyente + "]");
                            rutDTEOK = false;
                        }
                        // RecepcionDTE
                        RecepcionDTE rDTE = RecepcionDTE.Factory.newInstance();
                        rDTE.setFolio(dte.getDocumento().getEncabezado().getIdDoc().getFolio());
                        rDTE.setTipoDTE(dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE());
                        rDTE.setFchEmis(dte.getDocumento().getEncabezado().getIdDoc().getFchEmis());
                        rDTE.setRUTEmisor(dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor());
                        rDTE.setRUTRecep(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep());
                        rDTE.setMntTotal(dte.getDocumento().getEncabezado().getTotales().getMntTotal());

                        ResultadoDTE resDTE = ResultadoDTE.Factory.newInstance();
                        resDTE.setFolio(dte.getDocumento().getEncabezado().getIdDoc().getFolio());
                        resDTE.setTipoDTE(dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE());
                        resDTE.setFchEmis(dte.getDocumento().getEncabezado().getIdDoc().getFchEmis());
                        resDTE.setRUTEmisor(dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor());
                        resDTE.setRUTRecep(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep());
                        resDTE.setMntTotal(dte.getDocumento().getEncabezado().getTotales().getMntTotal());
                        // se asocia el ID del envio recepcionado en nuestra BD
                        resDTE.setCodEnvio(new Long(idS));

                        if( firmaOKDTE &amp;&amp; rutDTEOK) {
                            //EstadoDTESII estadoDTE = null;
                            // Validacion en SII no implementada
                            //estadoDTE = new EstadoDTESII();
                            //estadoDTE.setEstado("DOK");
                            estadoDTE = "DOK";
                        } else {
                            if( !firmaOKDTE) {
                                resDTE.setEstadoDTE(new Integer(2));
                                resDTE.setEstadoDTEGlosa("DTE rechazado - Error de Firma");
                                estadoRecepEnvEnumId = 2
                                logger.warn("DTE Rechazado - Error de Firma");
                                rDTE.setEstadoRecepDTE(new Integer(1));
                                rDTE.setRecepDTEGlosa("DTE No Recibido - Error de Firma");
                                logger.warn("DTE No Recibido - Error de Firma");
                            } else if(!rutDTEK) {
                                resDTE.setEstadoDTE(new Integer(2));
                                resDTE.setEstadoDTEGlosa("DTE rechazado - Error en RUT Receptor");
                                logger.warn("DTE rechazado - Error en RUT Receptor");

                                rDTE.setEstadoRecepDTE(new Integer(3));
                                rDTE.setRecepDTEGlosa("DTE No Recibido - Error en RUT Receptor");
                                logger.warn("DTE No Recibido - Error en RUT Receptor");
                            }
                        }
                        resultados.add(resDTE);
                        arrRecepcionDTE.add(rDTE);
                    }
                } else {
                    logger.warn("Envio no cumple con la firma o con esquema XML");

                    // Revisar si es problema de esquema o de firma
                    if(!envioEsquemaOK) {
                        rre.setEstadoRecepEnv(1);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - Error de schema: " + errorEsquema);
                    } else if (!envioFirmaOK) {
                        rre.setEstadoRecepEnv(2);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - Error de Firma: " + errorFirma);
                    } else if (!envioRutOK) {
                        rre.setEstadoRecepEnv(3);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - RUT receptor no corresponde");
                    }
                    logger.warn("Glosa respuesta envío: " + rre.getRecepEnvGlosa());
                }
                Caratula caratula = Caratula.Factory.newInstance();
                Resultado resultado = Resultado.Factory.newInstance();

                if (arrRecepcionDTE.size > 0) {
                    RecepcionDTE[] resultadoDTE = new RecepcionDTE[arrRecepcionDTE.size()];
                    for(int i = 0; i &lt; arrRecepcionDTE.size(); i++)
                        resultadoDTE[i] = arrRecepcionDTE.get(i);
                    rre.setRecepcionDTEArray(resultadoDTE);
                    caratula.setNroDetalles(arrRecepcionDTE.size());
                } else {
                    if (resultados.size() > 0) {
                        ResultadoDTE[] resultadoDTE = new ResultadoDTE[resultados.size()];
                        for (int i = 0; i &lt; resultados.size(); i++)
                            resultadoDTE[i] = resultados.get(i);
                        resultado.setResultadoDTEArray(resultadoDTE);
                    } else {
                        caratula.setNroDetalles(1);
                    }
                }
                caratula.setRutResponde(rutContribuyente);
                caratula.setRutRecibe(rutEmisor);
                caratula.setIdRespuesta(new Long(idS));
                caratula.setVersion(new BigDecimal("1.0"));

                // Datos en plantilla?
                caratula.setNmbContacto(nmbContacto);
                caratula.setMailContacto(mailContacto);
                caratula.setFonoContacto(fonoContacto);

                resultado.setCaratula(caratula);
                resultado.setID("RESP-" + idS);

                if(!rre.isNil()) {
                    logger.warn("Se responde aceptacion");
                    RecepcionEnvio[] reArray = new RecepcionEnvio[1];
                    reArray[0] = rre;
                    resultado.setRecepcionEnvioArray(reArray);
                }
                RespuestaDTE respDTE = RespuestaDTE.Factory.newInstance();
                respDTE.setResultado(resultado);
                respDTE.setVersion(new BigDecimal("1.0"));

                RespuestaDTEDocument respuesta = RespuestaDTEDocument.Factory.newInstance();
                respuesta.setRespuestaDTE(respDTE);

                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("http://www.sii.cl/SiiDte","");

                XmlOptions opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);
                opts.setSaveSuggestedPrefixes(namespaces);
                opts.setCharacterEncoding("ISO-8859-1");

                // leo certificado y llave privada del archivo pkcs12
                ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias2 = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias2 + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                XmlCursor cursor = respuesta.newCursor();
                if(cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte RespuestaEnvioDTE_v10.xsd");
                }
                try {
                    respuesta = RespuestaDTEDocument.Factory.parse(respuesta.newInputStream(opts));
                } catch (Exception e) {
                    logger.warn("Error al obtener respuesta con formato antes de firmar", e);
                }
                uri = "#RESP-10000";
                try {
                    logger.warn("Respuesta antes de firmar: " + new String(respuesta.getBytes()));
                    //respuesta.sign(certLlave.getPkey(), certLlave.getX509());
                    respuesta.sign(pKey, x509);
                    //respDTE.sign(pKey, x509);
                } catch (Exception e) {
                    logger.error("Error al firmar respuesta" + e.printStackTrace());
                    return
                }
                // releo el doc para que se reflejen los cambios de formato
                //doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts);
                //doc = DTEDocument.Factory.parse(respuesta.newInputStream(opts), opts);
                //return
                // Guardo
                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                uri = "";

                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                //if (respuesta.getDTE().isSetDocumento()) {
                //    //uri = respuesta.getRespuestaDTE().getDocumento().getID();
                //    //respuesta.getRespuestaDTE().getDocumento().xsetTmstFirma(now);
                //    logger.warn("*********************************");
                //}
                //else if (doc.getDTE().isSetLiquidacion()) {
                //    uri = doc.getDTE().getLiquidacion().getID();
                //    doc.getDTE().getLiquidacion().xsetTmstFirma(now);
                //} else if (doc.getDTE().isSetExportaciones()) {
                //    uri = doc.getDTE().getExportaciones().getID();
                //    doc.getDTE().getExportaciones().xsetTmstFirma(now);
                //}
                uri = "#" + uri;
                //uri = "#RESP-10000";

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out2 = new ByteArrayOutputStream();
                //doc.save(new File(resultS + "RESP-sinfirma.xml"), opts);
                //doc.save(out2, opts);
                logger.warn("Escribiendo " + resultS + "RESP-" + idS + ".xml");
                respuesta.save(new File(resultS + "RESP-" + idS + ".xml"), opts);
                respuesta.save(out2, opts);
                logger.warn("Escribiendo archivo temporal para attachment" + resultS + "RESP.xml");
                respuesta.save(new File(resultS + "RESP.xml"), opts);
                ByteArrayOutputStream outTemp = new ByteArrayOutputStream();
                respuesta.save(outTemp, opts);
            </script>
            <!-- Recuperación de algunos datos desde FiscalTaxDocument -->
            <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="fiscalTaxDocumentField">
                <field-map field-name="fiscalTaxDocumentId"/>
            </entity-find-one>

            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto]"/>
            <service-call name="create#MoquiChile.AceptacionDte" out-map="context" in-map="createMap"/>

            <entity-find-one entity-name="MoquiChile.AceptacionDte" value-field="aceptacionField" for-update="true"/>
            <set field="aceptacionField.nmbEnvio" from="fiscalTaxDocumentField.razonSocial" type="String"/>
            <set field="aceptacionField.fchRecep" from="fchRecep" type="String"/>
            <set field="aceptacionField.codEnvio" from="idS" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.envioDteId" value="RESP-${idS}" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.rutReceptor" from="rutResponde" type="String"/>
            <set field="aceptacionField.estadoRecepEnvEnumId" from="estadoRecepEnvEnumId" type="String"/>
            <set field="aceptacionField.nroDetalles" value="1" type="Integer"/>
            <set field="aceptacionField.xml" value="${resultS}RESP-${idS}.xml" type="String"/>
            <entity-update value-field="aceptacionField"/>

            <!-- TODO: Corregir fecha en fchRecep -->
            <set field="bodyParameters" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, nmbContacto:nmbContacto, mailContacto:mailContacto, fonoContacto:fonoContacto]"/>
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="emailTypeEnumId" from="emailTypeEnumId"/>
                <field-map field-name="toAddresses" value="cherrera156@gmail.com"/>
                <field-map field-name="emailTemplateId" value="Aceptacion"/>
                <field-map field-name="bodyParameters" from="bodyParameters"/>
            </service-call>

        </actions>
    </service>


    <service verb="genera" noun="Libro">
        <description>
            Generación de libro de Compra/Venta
        </description>
        <in-parameters>
            <parameter name="tipo" required="true"/><!-- Compra o venta -->
            <parameter name="tipoEnvio" default="'MENSUAL'"/><!-- MENSUAL, PARCIAL -->
            <parameter name="periodo" default-value="'2004-01'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="mensualEspecial" default-value="true"/><!-- Libro mensual o especial (requerido por SII) -->
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_PDF']" out-map="context"/>
            <set field="pathPdf" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_LIBRO']" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>
            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Valores por Default
                envio de tipo TOTAL en Carátula
                Resumen Período debe ir siempre
                Detalle debe ir en caso de tipo TOTAL
            -->

            <script>
                import java.math.BigDecimal;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Properties;
                import java.nio.file.Path;
                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;

                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;

                import cl.helpcom.recursos.Validador;
                import cl.helpcom.recursos.ComunicadorAppClienteTXT;
                import cl.helpcom.dte.util.FirmaLibro;
                import cl.helpcom.dte.util.AgregarCamposLibros;
                import cl.helpcom.recursos.LectorFichero;

                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenSegmento;

                LectorFichero lectorFichero = new LectorFichero();

                //String rutaLibro="/var/www/html/Centaurus/DTE/"+empID+"/BASELIBRO/"+nomDoc;
                String rutaLibro="/home/cherrera/LibroPrueba.csv";

                String resultadoSinFirma = "/tmp/LBR"+empID+".xml";

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy-HHmm");
                idS  = dateFormat.format(new Date());


                ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT();
                Validador val = new Validador();

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();

                // Leer campos desde base de datos: Último Período (o período especificado)
                // Armar arreglos para reusar código

                // Lee y llena los campos  => Caratula se debe armar con parámetros
                arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C");
                arrayLineasTotal= c.formatoLibroCVLineas(rutaLibro,arrayLineasTotal, "T");
                arrayLineasDetalle = c.formatoLibroCVLineas(rutaLibro,arrayLineasDetalle, "D");
                arrayLineasSegmentos = c.formatoLibroCVLineas(rutaLibro,arrayLineasSegmentos, "S");


                // Valida los campos
                val.validaEntradaLCVCaratula(arrayLineasCaratulas);
                val.validaEntradaLCVTotales(arrayLineasTotal, c.getCantidadTotales());
                val.validaEntradaLCVDetalles(arrayLineasDetalle,c.getCantidadDetallesTotales());

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                /* XML FACTURA */
                LibroCompraVentaDocument libCV;

                /* LibroCV */
                libCV = LibroCompraVentaDocument.Factory.parse(new FileInputStream(plantillaS));

                // libCV = LibroCompraVentaDocument.Factory.newInstance();
                LibroCompraVenta libroCompraVenta = libCV.getLibroCompraVenta();
                libCV.getLibroCompraVenta().setVersion(new BigDecimal("1.0"));
                EnvioLibro envioLibro = libroCompraVenta.addNewEnvioLibro();

                // ID de libro se debería calcular
                //libCV.getLibroCompraVenta().getEnvioLibro().setID("V2001-3");
                libCV.getLibroCompraVenta().getEnvioLibro().setID(idS);

                XmlCursor cursor = libCV.newCursor();

                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo();

                AgregarCamposLibros addCampos = new AgregarCamposLibros();

                // Agregar CARATULA
                addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas);
                // Agregar TOTALES
                addCampos.addDatosTotales(resumenPeriodo,arrayLineasTotal,c.getCantidadTotales());

                System.out.println("XML:\n " + libCV.toString());

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3));
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+".xml";

                // Agregar RESUMEN SEGMENTO
                if (arrayLineasSegmentos.size()>0) {
                    if (arrayLineasSegmentos.get(0).get(0)!=null) {
                        System.out.println("Agregando segmento");
                        ResumenSegmento resumenSegmento = envioLibro.addNewResumenSegmento();
                        addCampos.addDatosResumenSegmento(resumenSegmento,arrayLineasSegmentos, c.getCantidadSegmentos());
                    }
                }
                // Agregar DETALLES
                addCampos.addDatosDetalle(envioLibro, arrayLineasDetalle,c.getCantidadDetallesTotales());

                XmlOptions opts = new XmlOptions();
                opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);
                opts.setCharacterEncoding("ISO-8859-1");
                libCV = LibroCompraVentaDocument.Factory.parse(libCV.newInputStream(opts), (opts));

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                //libCV.save(archivoEnvio, opts);

                //libCV.save(new File(resultS + "LIBCV" + idS + "-sinfirma.xml"), opts);
                //libCV.save(out, opts);

                FirmaLibro firmaLibro = new FirmaLibro();

                //String mensaje=firmaLibro.firmarLibro(certS, passS, resultadoSinFirma,outPDF,empresaINT,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvioS);
                String mensaje=firmaLibro.firmarLibro(certS, passS, resultadoSinFirma,outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio);

                System.out.println("LIBRO ENVIADO CORRECTAMENTE\n"+mensaje+"@"+outPDF);

            </script>
            <!-- TODO: Enviar documento a SII -->
            <!-- Registro de DTE en base de datos y generación de PDF -->
            <set field="periodo" from="arrayLineasCaratulas.get(0).get(2)"/>
            <set field="tipoLibro" from="arrayLineasCaratulas.get(0).get(5)"/>
            <!--set field="fiscalTaxDocumentId" value="$periodo-$tipoLibro"/-->
            <set field="fiscalTaxDocumentId" from="idS"/>
            <if condition="tipoLibro == 'VENTA'">
                <set field="fiscalTaxDocumentTypeEnumId" value="PvtLibroVentas"/>
            </if>
            <if condition="tipoLibro == 'COMPRA'">
                <set field="fiscalTaxDocumentTypeEnumId" value="PvtLibroCompras"/>
            </if>
            <set field="xml" from="outPDF"/>
            <service-call name="create#tfpos.FiscalTaxDocument" in-map="context" out-map="context"/>

        </actions>
    </service>

</services>