<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">


    <service verb="genera" noun="Factura">
        <description>
            Generación de factura de acuerdo a plantilla
        </description>
        <in-parameters>
            <parameter name="folioS" required="true"/>
            <parameter name="tipoFacturaS" required="true"/>
            <parameter name="rutReceptor" required="true"/>
            <parameter name="rznSocReceptor" required="true"/>
            <parameter name="giroReceptor" required="true"/>
            <parameter name="contactoReceptor" required="true"/>
            <parameter name="dirReceptor" required="true"/>
            <parameter name="cmnaReceptor" required="true"/>
            <parameter name="ciudadReceptor" required="true"/>
            <parameter name="detailList" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="factura"/>
        </out-parameters>
        <actions>
            <!--set field="cafS" value="/home/cherrera/git/DTE-develop/scripts/CAF.xml"/>
            <set field="plantillaS" value="/home/cherrera/git/DTE-develop/scripts/plantilla_documento.xml"/>
            <set field="resultS" value="/home/cherrera/git/DTE-develop/scripts/PruebaDTE-Moqui.xml"/>
            <set field="certS" value="/home/cherrera/git/DTE-develop/scripts/12857517-0.pfx"/>
            <set field="passS" value="5378anth"/>
            <set field="folioS" value="33"/>
            <set field="tipoFacturaS" value="34"/-->

            <!-- TODO: Manejar lista de detalles que van en factura -->
            <!--
                Totales
                Neto
                Tasa IVA
                Valor IVA
                Total

                Detalle Items:
                Nro. Línea Detalle
                Nombre Item
                Cantidad Item
                Precio Item
                Monto Item

            -->
            <!-- TODO: Generar Folio a partir de tabla -->
            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]" out-map="context"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="resultS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMP']" out-map="context"/>
            <set field="pathTemp" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="cafS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_FACTURA']" out-map="context"/>
            <set field="plantillaS" from="resourceValue"/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;


                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;


                int folio;
                DTEDocument doc;
                AutorizacionType caf;
                X509Certificate cert;
                PrivateKey key;
                int tipoFactura;


                // Leo el folio
                folio = Integer.valueOf(folioS);
                tipoFactura = Integer.valueOf(tipoFacturaS);

                //if (tipoFactura != 33 oo tipoFactura != 34) {
                //    throw new Exception("Debe ingresar tipo de factura 33 o 34");
                //}
                // Leo Autorizacion
                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                caf = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts).getAUTORIZACION();


                // Construyo base a partir del template
                doc = DTEDocument.Factory.parse(new File(plantillaS), opts);

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)


                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Agrego al doc datos inventados para pruebas

                // IdDoc

                // TODO: Pasar a parámetros

                IdDoc iddoc = doc.getDTE().getDocumento().getEncabezado().addNewIdDoc();
                iddoc.setFolio(folio);
                doc.getDTE().getDocumento().setID("N" + iddoc.getFolio());

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura));

                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                iddoc.setIndServicio(BigInteger.valueOf(3));
                iddoc.setFmaPago(BigInteger.valueOf(1));

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                // TODO: Revisar medios de pago
                iddoc.setMedioPago(MedioPagoType.Enum.forString("LT"));
                iddoc.setFmaPago(BigInteger.valueOf(2));

                // Receptor
                Receptor recp = doc.getDTE().getDocumento().getEncabezado().addNewReceptor();
                recp.setRUTRecep("60803000-K");
                recp.setRznSocRecep("Servicio de Impuestos Internos");
                recp.setGiroRecep("GOBIERNO CENTRAL Y ADMINISTRACION PUB.");
                recp.setContacto("Director Impuestos Internos");
                recp.setDirRecep("Teatinos 120");
                recp.setCmnaRecep("Santiago");
                recp.setCiudadRecep("Santiago");

                // TODO: Procesar lista de detalles
                if (tipoFactura == 33) {
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntNeto(33900);
                    tot.setTasaIVA(BigDecimal.valueOf(19));
                    tot.setIVA(6441);
                    tot.setMntTotal(40341);

                    // Agrego detalles
                    Detalle[] det = new Detalle[2];
                    det[0] = Detalle.Factory.newInstance();
                    det[0].setNroLinDet(1);
                    det[0].setNmbItem("dominio sii");
                    det[0].setQtyItem(BigDecimal.valueOf(1));
                    det[0].setPrcItem(BigDecimal.valueOf(16949.584));
                    det[0].setMontoItem(16950);

                    det[1] = Detalle.Factory.newInstance();
                    det[1].setNroLinDet(2); // Revisar
                    det[1].setNmbItem("dominio impuestosinternos");
                    det[1].setQtyItem(BigDecimal.valueOf(1));
                    det[1].setPrcItem(BigDecimal.valueOf(16949.584));
                    det[1].setMontoItem(16950);

                    doc.getDTE().getDocumento().setDetalleArray(det);
                }

                if (tipoFactura == 34) {
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(33900);
                    tot.setMntTotal(33900);

                    // Agrego detalles
                    Detalle[] det = new Detalle[2];
                    det[0] = Detalle.Factory.newInstance();
                    det[0].setNroLinDet(1);
                    det[0].setNmbItem("implantancion dominio sii");
                    det[0].setQtyItem(BigDecimal.valueOf(1));
                    det[0].setPrcItem(BigDecimal.valueOf(16949.584));
                    det[0].setMontoItem(16950);

                    det[1] = Detalle.Factory.newInstance();
                    det[1].setNroLinDet(2);
                    det[1].setNmbItem("implantacion dominio impuestosinternos");
                    det[1].setQtyItem(BigDecimal.valueOf(1));
                    det[1].setPrcItem(BigDecimal.valueOf(16949.584));
                    det[1].setMontoItem(16950);

                    doc.getDTE().getDocumento().setDetalleArray(det);
                }
                // Timbro

                doc.getDTE().timbrar(caf.getCAF(), caf.getPrivateKey(null));

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);

                // releo el doc para que se reflejen los cambios de formato
                doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts);

                // Guardo
                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                String uri = "";

                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                if (doc.getDTE().isSetDocumento()) {
                    uri = doc.getDTE().getDocumento().getID();
                    doc.getDTE().getDocumento().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetLiquidacion()) {
                    uri = doc.getDTE().getLiquidacion().getID();
                    doc.getDTE().getLiquidacion().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetExportaciones()) {
                    uri = doc.getDTE().getExportaciones().getID();
                    doc.getDTE().getExportaciones().xsetTmstFirma(now);
                }

                uri = "#" + uri;

                logger.warn("URI: " + uri)


                ByteArrayOutputStream out = new ByteArrayOutputStream();
                doc.save(new File("FACT" + folio + "-sinfirma.xml"), opts);
                doc.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());
                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "Documento");
                doc2 = XMLUtil.parseDocument(salida);


                if (Signer.verify(doc2, "Documento")) {
                    Path path = Paths.get("FACT" + folio + ".xml");
                    Files.write(path, salida);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get("FACT" + folio + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar factura folio "+folio);
                }

                // TODO: Guardar en BD Path de factura y su ID (folio)

            </script>

        </actions>
    </service>

    <service verb="generaEnvio" noun="Documento">
        <description>
            Generación de envio documento a partir de factura ya generada
        </description>
        <in-parameters>
            <parameter name="recepS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="idS" required="true"/>
            <parameter name="documentoS" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="idS"/>
        </out-parameters>
        <actions>

            <!-- TODO: documentoS debería ser una lista? -->
            <!--
            <set field="plantillaEnvio" value="/home/cherrera/git/DTE-develop/scripts/plantilla_envio.xml"/>
            <set field="certS" value="/home/cherrera/git/DTE-develop/scripts/12857517-0.pfx"/>
            <set field="passS" value="5378anth"/>
            <set field="recepS" value="60803000-K"/>
            <set field="enviadorS" value="76514104-4"/>
            <set field="idS" value="TEST-MOQUI33"/>
            <set field="documentoS" value="/home/cherrera/git/moqui-framework/FACT33.xml"/> -->

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:recepS]" out-map="context"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]" out-map="context"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_ENVIO']" out-map="context"/>
            <set field="plantillaEnvio" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>

            <!--set field="DTEList" from="[]"/-->

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Date;
                import java.util.HashMap;

                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula.SubTotDTE;

                // Construyo Envio
                EnvioDTEDocument envio = EnvioDTEDocument.Factory.parse(new FileInputStream(plantillaEnvio));

                // Debo agregar el schema location (Sino SII rechaza)
                XmlCursor cursor = envio.newCursor();
                if (cursor.toFirstChild()) {
                cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"),
                "http://www.sii.cl/SiiDte EnvioDTE_v10.xsd");
                }

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Asigno un ID
                envio.getEnvioDTE().getSetDTE().setID(idS);

                cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula car =
                envio.getEnvioDTE().getSetDTE().getCaratula();

                car.setRutReceptor(recepS);
                car.setRutEnvia(enviadorS);

                // documentos a enviar
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // Cantidad de documentos a enviar
                //DTEDefType[] dtes = new DTEDefType[otherArgs.length];

                //String[] otherArgs = parser.getRemainingArgs();
                String[] DTEList = new String[1];

                // TODO: Armar lista de documentos
                DTEList[0] = documentoS;

                DTEDefType[] dtes = new DTEDefType[DTEList.size()];

                logger.warn("Tamaño:" + DTEList.size()+ " - Ubic 1 : " + DTEList[0]);
                HashMap&lt;Integer, Integer&gt; hashTot = new HashMap&lt;Integer, Integer&gt;();

                for (int i = 0; i &lt; DTEList.length; i++) {
                    dtes[i] = DTEDocument.Factory.parse(new FileInputStream(DTEList[i]), opts).getDTE();
                    // armar hash para totalizar por tipoDTE
                    if (hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) != null) {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(),
                        hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) + 1);
                    } else {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(), 1);
                    }
                }
                SubTotDTE[] subtDtes = new SubTotDTE[hashTot.size()];
                int i = 0;
                for (Integer tipo : hashTot.keySet()) {
                    SubTotDTE subt = SubTotDTE.Factory.newInstance();
                    subt.setTpoDTE(new BigInteger(tipo.toString()));
                    subt.setNroDTE(new BigInteger(hashTot.get(tipo).toString()));
                    subtDtes[i] = subt;
                    i++;
                    logger.warn("Otro for: " + i);
                }

                car.setSubTotDTEArray(subtDtes);
                // Le doy un formato bonito (debo hacerlo antes de firmar para no
                // afectar los DTE internos)
                opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);
                envio = EnvioDTEDocument.Factory.parse(envio.newInputStream(opts));


                envio.getEnvioDTE().getSetDTE().setDTEArray(dtes);

                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                envio.getEnvioDTE().getSetDTE().getCaratula().xsetTmstFirmaEnv(now);


                // firmo
                //envio.sign(pKey, x509);


                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                envio.save(new File("ENV" + idS + "-sinfirma.xml"), opts);
                envio.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                logger.warn("ids: " + idS);
                byte[] salida = Signer.sign(doc2, "#" + idS, pKey, x509, "#" + idS,"SetDTE");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "SetDTE")) {
                    Path path = Paths.get("ENV" + idS + ".xml");
                    Files.write(path, salida);
                    logger.warn("Envio generado OK");
                } else {
                    Path path = Paths.get("ENV" + idS + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar envio");
                }


            </script>

        </actions>
    </service>

    <service verb="envia" noun="Documento">
        <description>
            Envio documento a partir de documento envio ya generado
            compaS: rut de compañía que envía
            enviadorS: rut de persona que envía
            documentoS: nombre de documento a enviar (que puede contener varios)
        </description>
        <in-parameters>
            <parameter name="compaS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="documentoS" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
        <actions>
            <!--set field="certS" value="/home/cherrera/git/DTE-develop/scripts/12857517-0.pfx"/>
            <set field="passS" value="5378anth"/>
            <set field="compaS" value="76514104-4"/>
            <set field="enviadorS" value="12857517-0"/>
            <set field="documentoS" value="/home/cherrera/git/moqui-framework/ENVTEST-MOQUI33.xml"/-->

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]" out-map="context"/>


            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>


            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;


                ConexionSii con = new ConexionSii();
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new FileInputStream(certS), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);

                logger.warn("Token: " + token);

                String enviadorS = Utilities.getRutFromCertificate(x509);


                RECEPCIONDTEDocument recp = con.uploadEnvioCertificacion(enviadorS, compaS, new File(documentoS), token);
                logger.warn("-----------------");
                logger.warn(recp.xmlText());

                // Se verifica si el status es 0

                String statusXML = recp.xmlText();
                int inicio = statusXML.indexOf("&lt;siid:STATUS&gt;");
                int fin = statusXML.indexOf("&lt;/siid:STATUS&gt;");

                statusXML = statusXML.substring(inicio+1,fin);
                statusXML = statusXML.replaceAll("siid:STATUS&gt;","");
                logger.warn("STATUS: " + statusXML);

                if(statusXML.equals("0")) {
                    trackId = recp.xmlText();
                    inicio = trackId.indexOf("&lt;siid:TRACKID&gt;");
                    fin = trackId.indexOf("&lt;/siid:TRACKID&gt;");
                    trackId = trackId.substring(inicio+1,fin);
                    trackId = trackId.replaceAll("siid:TRACKID&gt;","");
                    logger.warn("DTE Enviada correctamente con trackId " + trackId);
                } else {
                    logger.warn("Error "+ statusXML + " al enviar DTE");
                }

                logger.warn(textXML);
                logger.warn("-----------------");

            </script>

        </actions>
    </service>

    <service verb="load" noun="DTEConfig">
        <description>
            Carga parametros desde archivo resources
        </description>
        <in-parameters>
            <parameter name="resourceName" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resourceValue"/>
        </out-parameters>
        <actions>
            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Properties;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                Properties config = new Properties();
                InputStream input = new FileInputStream("/home/cherrera/git/moqui-framework/runtime/component/moqui-chile/resources/DTEConfig.properties");

                config.load(input);

                resourceValue = config.getProperty(resourceName).toString();

            </script>

        </actions>
    </service>

    <service verb="get" noun="DTEFilename">
        <description>
            Retorna nombre de archivo de DTE
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="format" default-value="'xml'"/>
        </in-parameters>
        <out-parameters>
            <parameter name="filename"/>
            <parameter name="path"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_RESULTS']" out-map="context"/>
            <set field="pathResults" from="resourceValue"/>

            <entity-find-one entity-name="tfpos.FiscalTaxDocument" value-field="document"/>
            <if condition="format == 'xml'">
                <set field="filename" value="${document.xml}"/>
            </if><else>
                <set field="filename" value="${document.pdf}"/>
            </else>
            <set field="path" value="${pathResults}"/>
        </actions>
    </service>

    <service verb="genera" noun="PDF">
        <description>
            Genera archivo PDF de Factura (envio)
        </description>
        <in-parameters>
            <parameter name="resultado" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="compaS" required="true"/>
        </in-parameters>
        <actions>
            <!--set field="certS" value="/home/cherrera/git/DTE-develop/scripts/12857517-0.pfx"/>
            <set field="passS" value="5378anth"/>
            <set field="compaS" value="76514104-4"/>
            <set field="enviadorS" value="12857517-0"/>
            <set field="documentoS" value="/home/cherrera/git/moqui-framework/ENVTEST-MOQUI33.xml"/-->

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CERT']" out-map="context"/>
            <set field="certS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PASS_CERT']" out-map="context"/>
            <set field="passS" from="resourceValue"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_TEMPLATE_PDF']" out-map="context"/>
            <set field="template" from="resourceValue"/>


            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                Utilities.generatePDF(new FileInputStream(dte, new FileInputStream(template), new FileOutputStream(resultado));

                logger.warn("---------------");

                logger.warn("PDF Generado: " + resultado);
                logger.warn("---------------");

            </script>

        </actions>
    </service>

    <service verb="load" noun="Caf">
        <description>
            Carga CAF en Sistema
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="rut" required="true"/>
            <parameter name="desde" required="true"/>
            <parameter name="hasta" required="true"/>
            <parameter name="fechaAutorizacion" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO: Validar Rut -->
            <!-- TODO: Parseado de CAF -->
            <set field="archivo" from="filename.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[resourceName:'PATH_CAF']" out-map="context"/>
            <set field="fileRoot" value="${resourceValue}"/>
            <set field="contentLocation" value="${fileRoot}/${archivo}"/>

            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>
            <script>
                fileStream = filename.getInputStream()
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <set field="updateMap" from="[filename:archivo,desde:desde, hasta:hasta, dteTypeEnumId:dteTypeEnumId, fechaAutorizacion:fechaAutorizacion,rut:rut, ultimoFolio:desde]"/>
            <service-call name="create#MoquiChile.Caf" out-map="context" in-map="updateMap"/>
        </actions>
    </service>

    <service verb="get" noun="Folio">
        <description>
            Obtiene folio para el tipo de DTE especificado.
            Cuida de no repetir el folio
        </description>
        <in-parameters>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
        </out-parameters>
        <actions>
            <!-- TODO:

           Solo puede haber un CAF activo por tipo DTE

            -->
            <!-- Se filtra por CAF activo (PK) para el tipo de DTE -->
            <set field="activo" value="true"/>
            <entity-find-one entity-name="MoquiChile.Caf" value-field="caf" for-update="true"/>

            <script>

                caf.ultimoFolio = caf.ultimoFolio + 1

            </script>

            <if condition="caf.ultimoFolio &lt; caf.desde">
                <return message="Error en CAF" error="true"/>
            </if>

            <if condition="caf.ultimoFolio &gt; caf.hasta">
                <return message="No se pueden usar más folios de CAF actual" error="true"/>
            </if>


            <entity-update value-field="caf"/>
            <set field="folio" from="caf.ultimoFolio"/>

        </actions>
    </service>

    <service verb="get2" noun="Folio">
        <description>
            Obtiene folio para el tipo de DTE especificado.
            Cuida de no repetir el folio
        </description>
        <in-parameters>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
        </out-parameters>
        <actions>
            <!-- TODO: uso de secuencias para manejo de folios

           Solo puede haber un CAF activo por tipo DTE:

           Secuencias:

           33: dte33Seq
           34: dte34Seq

            -->

            <!-- Se filtra por CAF activo (PK) -->
            <set field="activo" value="true"/>
            <entity-find-one entity-name="MoquiChile.Caf" value-field="caf" for-update="true"/>

            <script>

                caf.ultimoFolio = caf.ultimoFolio + 1

            </script>

            <if condition="caf.ultimoFolio &lt; caf.desde">
                <return message="Error en CAF" error="true"/>
            </if>

            <if condition="caf.ultimoFolio &gt; caf.hasta">
                <return message="No se pueden usar más folios de CAF actual" error="true"/>
            </if>

            <!-- Se obtiene nuevo folio de acuerdo a tipo DTE -->

            <entity-update value-field="caf"/>
            <set field="folio" from="caf.ultimoFolio"/>

        </actions>
    </service>

    <service verb="facturar" noun="Invoice">
        <description>
            Obtiene datos para llamar a método generar#Factura
        </description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="dteTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <return error="true" message="***** invoiceId: $invoiceId, tipo Factura: $dteTypeEnumId"/>
            <!-- TODO:

                Obtener datos usando invoiceId:
                Total Neto
                Valor IVA
                Total

                folio
                tipoFactura?
                rutReceptor
                rznSocReceptor
                giroReceptor
                contactoReceptor
                dirReceptor
                cmnaReceptor
                ciudadReceptor
                detalle

                Por cada Item:
                - Nro. línea detalle
                - Nombre item
                - Precio item
                - Cantidad ite
                - Monto Item

            -->
            <!-- Datos principales de invoice -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="invoice == null"><return error="true" message="Invoice not found with ID ${invoiceId}"/></if>
            <set field="toPartyId" from="invoice.toPartyId"/>
            <set field="detailList" type="List"/>

            <!-- Items de invoice -->
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/></entity-find>
            <!--set field="invoiceTotal" from="0.0"/>
            <iterate list="invoiceItemList" entry="invoiceItem">
                <set field="invoiceTotal" from="invoiceTotal + ((invoiceItem.quantity != null ? invoiceItem.quantity : 1.0) * (invoiceItem.amount ?: 0.0)).setScale(2, BigDecimal.ROUND_HALF_UP)"/>
            </iterate-->

            <!-- email receptor -->
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:toPartyId]" out-map="context"/>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>
            <set field="rutReceptor" from="partyField.idValue"/>

            <!-- Datos para encontrar contacto -->
            <set field="contactMechPurposeId" value="PostalBilling"/>
            <entity-find-one entity-name="mantle.party.PartyContactMech" value-field="contactMechField"/>
            <set field="contactMechId" from="contactMechField.contactMechId"/>

            <!-- Datos de contacto -->
            <set field="contactMechPurposeId" value="PostalBilling"/>
            <entity-find-one entity-name="mantle.party.ContactMech" value-field="contactMechField"/>
            <set field="dirReceptor" from="contactMechField.infoString"/>

            <!-- Obtención de folio -->
            <service-call name="MoquiChile.DTEServices.get#folio" in-map="[dteTypeEnumId:dteTypeEnumId]" out-map="context"/>
            <!-- Se filtra por CAF activo (PK) -->
            <set field="activo" value="true"/>
            <entity-find-one entity-name="MoquiChile.Caf" value-field="caf" for-update="true"/>

            <!-- Generacion de factura -->
            <service-call name="MoquiChile.DTEServices.genera#Factura"
                          in-map="[folioS:folio, tipoFacturaS:dteTypeEnumId, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:invoiceItemList]" out-map="context"/>
        </actions>
    </service>

</services>