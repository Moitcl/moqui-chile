<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="escape" noun="Characters">
        <description>
            Sin uso, SII acepta los caracteres especiales directamente
        </description>
        <in-parameters>
            <parameter name="cadenaString" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="outString"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                // Escapamos letras o signos
                StringBuilder sb = new StringBuilder();
                for(int i = 0; i < cadenaString.length(); i++){
                    char c = cadenaString.charAt(i);
                    switch(c){
                        case '<': sb.append("&lt;"); break;
                        case '>': sb.append("&gt;"); break;
                        case '\"': sb.append("&quot;"); break;
                        case '&': sb.append("&amp;"); break;
                        case '\'': sb.append("&apos;"); break;
                        case 'Ñ': sb.append("&Ntilde;"); break;
                    default:
                        if(c>0x7e) {
                            sb.append("&#"+((int)c)+";");
                        } else {
                            sb.append(c);
                        }
                    }
                }
                outString = sb.toString();
            ]]></script>
            <set field="outString" from="sb.toString()"/>
        </actions>
    </service>

    <service verb="genera" noun="Factura">
        <description>
            Generación de DTE de acuerdo a plantilla
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="rutReceptor" required="true"/>
            <parameter name="receiverPartyId" required="true"/>
            <parameter name="rznSocReceptor" required="true"/>
            <parameter name="giroReceptor" required="true"/>
            <parameter name="contactoReceptor" required="true"/>
            <parameter name="dirReceptor" required="true"/>
            <parameter name="cmnaReceptor" required="true"/>
            <parameter name="ciudadReceptor" default-value="${cmnaReceptor}"/>
            <parameter name="detailList" type="List" required="false"/>
            <parameter name="invoiceId" required="false"/>
            <parameter name="medioPago" required="false"/>
            <parameter name="formaPago" required="false" type="String"/>
            <parameter name="referenciaList" type="List"/>
            <parameter name="globalDiscount"/>
            <parameter name="glosaDr"/>
            <parameter name="indTraslado"/>
            <parameter name="tipoDespacho"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:emisorS]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <!--set field="certS" from="pathCert"/-->
            <set field="certS" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="templateEnvio" from="templateEnvio"/>
            <set field="templateAceptaciones" from="templateAceptaciones"/>
            <set field="templateLibro" from="templateLibro"/>
            <set field="logo" from="logo"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <!-- Recuperación del código SII de DTE -->
            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
            <set field="tipoFactura" from="codeOut.siiCode"/>
            <set field="tipoFacturaS" from="codeOut.siiCode"/>

            <set field="fechaEmision"/>

            <!-- Obtención de folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, activeOrgId:activeOrgId]" out-map="context"/>

            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>

            <script>
                cafS = cafS + caf
            </script>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDefType.Documento.Referencia;
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal;
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;
                import org.apache.commons.io.IOUtils;

                int folio;
                DTEDocument doc;
                AutorizacionType caf;
                X509Certificate cert;
                PrivateKey key;
                int tipoFactura;
                int frmPago = 1;
                int listSize = 0;

                // Leo el folio
                folio = Integer.valueOf(folioS);
                tipoFactura = Integer.valueOf(tipoFacturaS);
                if(formaPago != null)
                   frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // Recuperación de archivo CAF desde BD

                caf = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts).getAUTORIZACION();

                // Construyo base a partir del template
                //doc = DTEDocument.Factory.parse(new File(plantillaS), opts);
                doc = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts);

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Se recorre lista de productos para armar documento (detailList)

                IdDoc iddoc = doc.getDTE().getDocumento().getEncabezado().addNewIdDoc();
                iddoc.setFolio(folio);
                // Obtención de ID distinto
                logger.warn("id: " + System.nanoTime());
                //doc.getDTE().getDocumento().setID("N" + iddoc.getFolio());
                doc.getDTE().getDocumento().setID("N" + System.nanoTime());

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura));
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);
                // Indicador Servicio
                // 3 para Factura de Servicios
                // Para Facturas de Exportación:
                //   4 Servicios de Hotelería
                //   5 Servicio de Transporte Terrestre Internacional
                //iddoc.setIndServicio(BigInteger.valueOf(3));

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                // Medio y forma de pago
                if (medioPago != null ) {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago));
                } else {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"));
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago));

                // Si es guía de despacho se configura indicador de traslado
                if(BigInteger.valueOf(tipoFactura) == 52) {
                    iddoc.setIndTraslado(Long.valueOf(indTraslado));
                    if(tipoDespacho != null) {
                        iddoc.setTipoDespacho(Long.valueOf(tipoDespacho));
                    }
                }
            </script>
            <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:cmnaReceptor]" out-map="context"/>
            <set field="cmnaReceptor" from="outString"/>
            <service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:dirReceptor]" out-map="context"/>
            <set field="dirReceptor" from="outString"/-->
            <script>

                // Receptor
                Receptor recp = doc.getDTE().getDocumento().getEncabezado().addNewReceptor();
                recp.setRUTRecep(rutReceptor.trim());
                recp.setRznSocRecep(rznSocReceptor);
                if(giroReceptor.length() &gt; 39)
                    recp.setGiroRecep(giroReceptor.substring(0,39));
                else
                    recp.setGiroRecep(giroReceptor);
                recp.setContacto(contactoReceptor);
                recp.setDirRecep(dirReceptor);
                recp.setCmnaRecep(cmnaReceptor);
                recp.setCiudadRecep(ciudadReceptor);
            </script>
            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>
            <set field="totalNeto" value="0" type="Long"/>
            <set field="totalExento" value="0" type="Long"/>

            <!-- Campo para guardar resumen atributos -->
            <set field="amount" value="0" type="Long"/>

            <set field="uom"/>

            <if condition="tipoFactura == 33">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                    <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                    <set field="pctDiscount" from="detailEntry.pctDiscount"/>
                    <if condition="detailEntry.quantityUomId.equals('TF_hr')">
                        <set field="uom" value="Hora"/>
                    </if>
                    <if condition="detailEntry.quantityUomId.equals('TF_mon')">
                        <set field="uom" value="Mes"/>
                    </if>
                    <script>

                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        if(uom != null)
                            det[i].setUnmdItem(uom);
                        if((pctDiscount != null) &amp;&amp; (pctDiscount &gt; 0)) {
                            logger.warn("Aplicando descuento " + pctDiscount+"% a precio "+ priceItem );
                            descuento = totalItem * pctDiscount / 100;
                            logger.warn("Descuento:" + descuento);
                            //totalInvoice = totalInvoice + totalItem - descuento
                            det[i].setDescuentoPct(pctDiscount);
                            det[i].setDescuentoMonto(Math.round(descuento));
                            totalItem = totalItem - descuento
                        }
                        // Descuento global
                        if((itemAfecto.equals("true"))  &amp;&amp; (globalDiscount != null) &amp;&amp; (Integer.valueOf(globalDiscount) &gt; 0)) {
                            logger.warn("Aplicando descuento global " + globalDiscount+"% a precio "+ priceItem );
                            //descuento = totalItem * Integer.valueOf(globalDiscount) / 100;
                            logger.warn("Descuento:" + descuento);
                            //det[i].setDescuentoPct(pctDiscount);
                            //det[i].setDescuentoMonto(Math.round(descuento));
                            //totalItem = totalItem - Math.round(descuento)
                            //logger.warn("precio inicial item: " + priceItem);
                            //priceItem = Math.round(priceItem - (priceItem * Integer.valueOf(globalDiscount) / 100));
                            //logger.warn("precio final item:" + priceItem);
                        }
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( Math.round(totalItem));
                        if(itemAfecto.equals("true")) {
                            totalNeto = totalNeto + totalItem
                        } else {
                            totalExento = totalExento + totalItem
                            det[i].setIndExe(1);
                        }

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    i = 0
                    listSize = referenciaList.size()
                    Referencia[] ref = new Referencia[listSize]
                </script>
                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('Ftdt-0')) { // Used for Set de Pruebas SII
                            ref[i].setTpoDocRef('SET');
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                            ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                            ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        } else {
                    </script>
                    <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                    <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                            //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                            ref[i].setTpoDocRef(tpoDocRef);
                            ref[i].setRUTOtr(rutReceptor);
                            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                            Date date = formatter.parse(fechaRef);
                            ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                            if(codRef != null)
                                ref[i].setCodRef(codRef);
                            if(referenciaEntry.razonReferencia != null)
                                ref[i].setRazonRef(referenciaEntry.razonReferencia);
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                </script>

                <script>
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Descuento Global
                    if(globalDiscount != null &amp;&amp; Integer.valueOf(globalDiscount) > 0) {
                        logger.warn("Descuento global:" + globalDiscount);
                        long descuento = Math.round(totalNeto * (Long.valueOf(globalDiscount) / 100));
                        logger.warn("Descuento::" + descuento);
                        totalNeto = totalNeto - descuento
                        // Creación entradas en XML
                        DscRcgGlobal dscGlobal = DscRcgGlobal.Factory.newInstance();
                        // iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"));
                        dscGlobal.setNroLinDR(BigInteger.valueOf(1));
                        dscGlobal.setTpoMov(DscRcgGlobal.TpoMov.Enum.forString("D"));
                        dscGlobal.setTpoValor(cl.sii.siiDte.DineroPorcentajeType.Enum.forString("%"));
                        //dscGlobal.setValorDR(BigDecimal.valueOf(descuento));// Porcentaje Dscto
                        dscGlobal.setValorDR(BigDecimal.valueOf(Integer.valueOf(globalDiscount)));// Porcentaje Dscto
                        dscGlobal.setGlosaDR(glosaDr);
                        DscRcgGlobal[] dscGB = new DscRcgGlobal[1];
                        dscGB[0] = dscGlobal;
                        doc.getDTE().getDocumento().setDscRcgGlobalArray(dscGB);
                    }
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntNeto(Math.round(totalNeto));
                    montoNeto = totalNeto;
                    tot.setTasaIVA(BigDecimal.valueOf(19));
                    // Valor de solo IVA
                    long totalIVA = Math.round(totalNeto * 0.19)
                    montoIVARecuperable = totalIVA;
                    tot.setIVA(totalIVA)
                    logger.warn("monto neto:" + montoNeto);
                    logger.warn("total IVA:" + totalIVA);
                    // total neto + IVA
                    totalInvoice = totalNeto + totalIVA + totalExento
                    tot.setMntTotal(Math.round(totalInvoice))
                    logger.warn("Total Exento: " + totalExento);
                    if(totalExento &gt; 0) {
                        tot.setMntExe(Math.round(totalExento));
                    }
                    amount = totalInvoice;
                </script>
            </if>

            <if condition="tipoFactura == 34">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <if condition="detailEntry.quantityUomId.equals('TF_hr')">
                        <set field="uom" value="Hora"/>
                    </if>
                    <if condition="detailEntry.quantityUomId.equals('TF_mon')">
                        <set field="uom" value="Mes"/>
                    </if>

                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->

                    <script><![CDATA[

                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        det[i].setIndExe(1);
                        if(uom != null)
                            det[i].setUnmdItem(uom);
                        totalInvoice = totalInvoice + totalItem
                        montoNeto = 0
                        montoExento = totalInvoice

                        i = i + 1
                    ]]></script>
                </iterate>
                <script>
                    i = 0
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                        listSize = referenciaList.size();
                        ref = new Referencia[listSize];
                    } else {
                        listSize = 0;
                    }
                    //Referencia[] ref = new Referencia[listSize]

                </script>


                <iterate list="referenciaList" entry="referenciaEntry">
                    <log message="Agregando referencia $referenciaEntry" level="warn"/>
                    <set field="folioRef" from="referenciaEntry.folio" type="String"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('Ftdt-0')) { // Used for Set de Pruebas SII
                            ref[i].setTpoDocRef('SET');
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                            ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                            ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        } else {
                    </script>
                            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                            <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                            //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                            ref[i].setTpoDocRef(tpoDocRef);
                            ref[i].setRUTOtr(rutReceptor);
                            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                            Date date = formatter.parse(fechaRef);
                            ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                            if(codRef != null)
                                ref[i].setCodRef(codRef);
                            if(referenciaEntry.razonReferencia != null)
                                ref[i].setRazonRef(referenciaEntry.razonReferencia);
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }
                        i = i + 1
                    </script>
                </iterate>

                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);
                    montoTotal = totalInvoice;
                    montoExento = totalInvoice;

                    amount = totalInvoice;

                </script>
            </if>
            <!-- TODO: Nota de Crédito Electrónica -->
            <set field="anulaBoleta"/>
            <set field="folioAnulaBoleta"/>
            <if condition="tipoFactura == 61">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <log message="Creando DTE tipo 61" level="warn"/>
                <script>

                    i = 0
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                        listSize = referenciaList.size();
                        ref = new Referencia[listSize];
                    } else {
                        listSize = 0;
                    }
                </script>
                <set field="dteExenta" value="false" type="Boolean"/>
                <!-- TODO: Si la referencia es tipo fe de erratas, Monto Item puede ser 0 -->
                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="String"/>

                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);

                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('Ftdt-0')) {
                            ref[i].setTpoDocRef('SET');
                            ref[i].setCodRef(codRef);
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                        } else {
                    </script>
                            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                            <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                            //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                            ref[i].setTpoDocRef(tpoDocRef);
                            ref[i].setCodRef(codRef);
                            ref[i].setFolioRef(referenciaEntry.folio.toString());
                            if((referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-39") || referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-41")) &amp;&amp; codRef.equals(1) ) {
                                // Nota de crédito hace referencia a Boletas Electrónicas
                                </script>
                                <set field="anulaBoleta" value="true"/>
                                <set field="folioAnulaBoleta" from="referenciaEntry.folio.toString()"/>
                                <script>
                            }
                        }
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-34")) {
                            dteExenta = true;
                        }
                        // Valor Opcional
                        //ref[i].xsetIndGlobal('0');
                        //ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        //ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    i = 0;
                    boolean alreadyPassed = false;
                </script>
                <iterate list="detailList" entry="detailEntry">
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.returnQuantity" type="Integer"/>

                    <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                    <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>

                    <set field="priceItem" from="detailEntry.returnPrice" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>

                    <!-- No es necesario escapar los caracteres, incluso provoca que el SII los rechace -->
                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->
                    <set field="pctDiscount" from="detailEntry.pctDiscount"/>
                    <log message="Descuento item: $pctDiscount" level="warn"/>
                    <script><![CDATA[
                        // Agrego detalles
                        if(!alreadyPassed) {
                            det[i] = Detalle.Factory.newInstance();
                            det[i].setNroLinDet(i+1);
                            det[i].setNmbItem(nombreItem);
                            if(dteExenta) {
                                det[i].setIndExe(1);
                            }
                            if((pctDiscount != null) && (BigDecimal.valueOf(pctDiscount) > 0)) {
                                logger.warn("Aplicando descuento " + pctDiscount+"% a precio "+ priceItem );
                                descuento = totalItem * pctDiscount / 100;
                                logger.warn("Descuento:" + descuento);
                                //totalInvoice = totalInvoice + totalItem - descuento
                                det[i].setDescuentoPct(pctDiscount);
                                det[i].setDescuentoMonto(Math.round(descuento));
                                totalItem = totalItem - Math.round(descuento)
                            }


                            if(BigDecimal.valueOf(codRef) != 2 && BigDecimal.valueOf(codRef) != 1) { // Corrige montos o anula documento
                                logger.warn("codRef == 1 o codRef == 2 :" + codRef);
                                if(BigDecimal.valueOf(qtyItem) > 0) {
                                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                                }
                                if(BigDecimal.valueOf(priceItem) > 0) {
                                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                                }
                                det[i].setMontoItem( totalItem );
                            } else if (BigDecimal.valueOf(codRef) == 2){ // codRef == 2 (Corrige giro) no lleva montos
                                logger.warn("codRef = 2");
                                //det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                                //det[i].setPrcItem( BigDecimal.valueOf(priceItem));
                                //det[i].setMontoItem(totalItem);
                                det[i].setNmbItem("CORRIGE GIROS");
                                det[i].setMontoItem(0);
                                alreadyPassed = true;
                                //totalItem = 0
                            } else if( BigDecimal.valueOf(codRef) == 1 ){ // Cod ref == 1
                                logger.warn("codigo ref == 1");
                                det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                                det[i].setPrcItem( BigDecimal.valueOf(priceItem));
                                det[i].setMontoItem(totalItem);
                                //totalItem = 0
                            }
                            totalInvoice = totalInvoice + totalItem
                            if(itemAfecto.equals("true") && !dteExenta) {
                                logger.warn("IFFFF1");
                                totalNeto = totalNeto + totalItem
                                montoNeto = totalNeto
                            } else {
                                totalExento = totalExento + totalItem
                                montoExento = totalExento
                                det[i].setIndExe(1);
                                logger.warn("IFFFF2, monto exento: "+ montoExento);
                            }
                            i = i + 1
                        }
                    ]]></script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);

                    // Corrección de arreglo para sacar items nulos
                    if (BigDecimal.valueOf(codRef) == 2){
                        logger.warn("Corrigiendo lista de detalles");
                        Detalle[] detFixed = new Detalle[1]
                        detFixed[0] = det[0];
                        doc.getDTE().getDocumento().setDetalleArray(detFixed);
                    } else {
                        doc.getDTE().getDocumento().setDetalleArray(det);
                    }
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();

                    long montoExe = 0;
                    montoNeto = Long.valueOf(Math.round(totalNeto))
                    long montoIva = Math.round(montoNeto * 0.19)
                    long montoTotal = montoIva + montoNeto + totalExento
                    long montoIvaExento = 0
                    // Si la razon es modifica texto (2) no van los montos
                    logger.warn("Codref: " + codRef + ", dteExenta: " + dteExenta);
                    if(BigDecimal.valueOf(codRef) == 1) { // Anulación
                        logger.warn("IF:" );
                        if(!dteExenta) {
                            logger.warn("IF2:" + montoIva);
                            tot.setTasaIVA(BigDecimal.valueOf(19));
                            tot.setMntExe(totalExento);
                            tot.setIVA(montoIva);
                            tot.setMntNeto(montoNeto);
                            tot.setMntTotal(montoTotal);
                            montoExento = totalExento;
                            montoIVARecuperable = montoIva;
                            amount = montoTotal;
                        } else {
                            logger.warn("IF3: montoNeto: " +montoNeto + ", montoExento: " + montoExento);
                            tot.setMntExe(montoExento);
                            tot.setMntTotal(montoExento);
                            montoExento = montoNeto;
                            montoIVARecuperable = 0;
                            amount = montoNeto;
                        }
                    } else if(BigDecimal.valueOf(codRef) != 2) {
                        logger.warn("codRef != 2");
                        if(!dteExenta) {
                            logger.warn("DTE no Exenta");
                            tot.setTasaIVA(BigDecimal.valueOf(19));
                            tot.setMntExe(totalExento);
                            tot.setIVA(montoIva);
                            tot.setMntNeto(montoNeto);
                            tot.setMntTotal(montoTotal);
                            montoExento = montoExe;
                            montoIVARecuperable = montoIva;
                            amount = montoTotal;
                        } else {
                            logger.warn("DTE Exenta, monto neto:"+ montoNeto);
                            //tot.setMntTotal(montoNeto);
                            if(!dteExenta) {
                                montoExento = montoNeto;
                            }
                            tot.setMntExe(montoExento);
                            tot.setMntTotal(montoExento);
                            montoIVARecuperable = 0;
                            amount = montoNeto;
                        }
                    } else { // Modifica Texto
                        if(!dteExenta) {
                            //tot.setMntExe(montoNeto);
                            //tot.setMntTotal(montoTotal);
                            tot.setMntNeto(0);
                            tot.setTasaIVA(BigDecimal.valueOf(19));
                            tot.setIVA(0);
                            tot.setMntTotal(0);
                            amount = 0;
                        } else {
                            tot.setMntTotal(0);
                            amount = 0;
                        }
                    }

                    //totalInvoice = totalNeto + Math.round(totalIVA) + totalExento
                    //tot.setMntTotal(Math.round(totalInvoice))
                    //if(totalExento &gt; 0) {
                    //    tot.setMntExe(totalExento);
                    //}

                </script>

            </if>
            <!-- Nota de Débito Electrónica -->
            <if condition="tipoFactura == 56">
                <script>

                    //iddoc.setMntBruto(BigInteger.valueOf(1));

                    int i = 0
                    if(detailList != null) {
                        listSize = detailList.size();
                    } else {
                        listSize = 0;
                    }
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Long"/>
                <set field="totalItempTmp" value="0" type="Long"/>

                <set field="dteExenta" value="false" type="Boolean"/>
                <script>
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                        listSize = referenciaList.size();
                        ref = new Referencia[listSize];
                    } else {
                        listSize = 0;
                    }

                </script>
                <!-- La referencia es solo a una Nota de Crédito -->
                <iterate list="referenciaList" entry="referenciaEntry">
                <log message="Iterando referencias ${referenciaEntry}" level="warn"/>
                <script>
                    logger.warn("Folio:" + referenciaEntry.folio)
                </script>
                <set field="folioRef" from="referenciaEntry.folio" type="String"/>
                <!-- Guardamos el código de referencia real, en lugar del SET -->
                <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                <set field="dteTypeRef" from="referenciaEntry.fiscalTaxDocumentTypeEnumId" type="String"/>
                <script>
                    // Agrego referencias
                    ref[i] = Referencia.Factory.newInstance();
                    ref[i].setNroLinRef(i+1);

                    if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('Ftdt-0')) {
                        ref[i].setTpoDocRef('SET');
                        ref[i].setCodRef(codRef);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                    } else {
                    </script>
                        <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                        <set field="tpoDocRef" from="codeOut.siiCode"/>

                    <script>
                        //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                        ref[i].setTpoDocRef(tpoDocRef);
                        //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                        ref[i].setCodRef(codRef);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                    }
                    logger.warn("DTE Type: " + referenciaEntry.fiscalTaxDocumentTypeEnumId)
                    if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-34") || referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-61") ) {
                        dteExenta = true;
                    }
                    // Valor Opcional
                    //ref[i].xsetIndGlobal('0');
                    //ref[i].setRUTOtr(rutReceptor);

                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                    Date date = formatter.parse(fechaRef);
                    //ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                    ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                    ref[i].setRazonRef(referenciaEntry.razonReferencia);

                    i = i + 1
                </script>
                </iterate>
                <script>
                    i = 0
                </script>
                <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="detailTemp" from="detailEntry instanceof List ? detailEntry : detailEntry.split('-') as List"/>
                    <set field="itemNumber" value="${detailTemp[0]}"/>
                    <set field="qtyItem" value="${detailTemp[1]}" type="Long" default-value="0"/>
                    <set field="priceItem" value="${detailTemp[2]}" type="String" default-value="0"/>
                    <set field="nombreItem" value="${detailTemp[3]}"/>

                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->

                    <script><![CDATA[
                        logger.warn("DTE Exenta: " + dteExenta)
                        priceItem = priceItem.replace(".","");
                        totalItemTmp = qtyItem * Long.valueOf(priceItem)
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        if(dteExenta) {
                            if(BigDecimal.valueOf(codRef) != 2 && BigDecimal.valueOf(codRef) != 1) {
                                det[i].setIndExe(BigInteger.valueOf(1));
                                det[i].setQtyItem(qtyItem);
                                det[i].setPrcItem(Long.valueOf(priceItem));
                                det[i].setMontoItem(Long.valueOf(totalItemTmp));
                            } else {
                                det[i].setMontoItem(0);
                                det[i].setNmbItem("ANULA DOCUMENTO DE REFERENCIA");
                                totalItemTmp = 0;
                                //det[i].setQtyItem(qtyItem);
                                //det[i].setPrcItem(0);
                            }
                        } else {
                            if(BigDecimal.valueOf(codRef) != 2 && BigDecimal.valueOf(codRef) != 1) {
                                det[i].setQtyItem(qtyItem);
                                det[i].setPrcItem(Long.valueOf(priceItem));
                                det[i].setMontoItem(Long.valueOf(totalItemTmp));
                            } else {
                                det[i].setMontoItem(0);// En simulación debe ser igual a monto de DTE anulada
                                //det[i].setMontoItem(Long.valueOf(totalItemTmp));// En simulación debe ser igual a monto de DTE anulada
                                det[i].setNmbItem("ANULA DOCUMENTO DE REFERENCIA");
                            }
                        }
                        totalInvoice = totalInvoice + totalItemTmp
                        i = i + 1
                    ]]></script>
                </iterate>
                <script><![CDATA[
                    // Corrección de arreglo para sacar items nulos
                    if (BigDecimal.valueOf(codRef) == 1){
                        logger.warn("Corrigiendo lista de detalles");
                        Detalle[] detFixed = new Detalle[1]
                        detFixed[0] = det[0];
                        doc.getDTE().getDocumento().setDetalleArray(detFixed);
                    } else {
                        doc.getDTE().getDocumento().setDetalleArray(det);
                    }

                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();

                    long montoExe = 0;
                    montoNeto = Long.valueOf(totalInvoice)
                    long montoIva = montoNeto * 0.19
                    long montoTotal = montoIva + montoNeto

                    logger.warn("codRef:" + codRef +", dteExenta:" +dteExenta);
                    // Si la razon es modifica texto (2) no van los montos
                    // Notas de débito son siempre afectas
                    if(codRef != 2 && codRef != 1) {
                        if(!dteExenta) {
                            logger.warn("Else 4")
                            tot.setTasaIVA(BigDecimal.valueOf(19));
                            tot.setMntExe(montoExe);
                            tot.setIVA(montoIva);
                            tot.setMntNeto(montoNeto);
                            tot.setMntTotal(montoTotal);
                            montoExento = montoExe;
                            montoNeto = montoNeto;
                            montoIvaRecuperable = montoIva;
                            amount = montoTotal;
                        } else { // Cod con factura exenta en la NC
                            tot.setMntExe(montoNeto);
                            tot.setMntTotal(montoNeto);
                            tot.setMntNeto(0);
                            tot.setIVA(0);
                            //tot.setTasaIVA(BigDecimal.valueOf(19));
                            montoExento = montoNeto;
                            montoIVARecuperable = 0;
                            amount = montoNeto;
                        }
                    } else {
                        logger.warn("CodRef == 1, " + dteExenta);
                        if(!dteExenta) {
                            //tot.setMntExe(montoNeto);
                            tot.setMntTotal(0);
                            tot.setMntTotal(montoTotal);
                            amount = 0;
                        } else {
                            tot.setMntTotal(0);
                            tot.setMntTotal(montoTotal);
                            amount = 0;
                        }
                    }
                    i = 0

                    doc.getDTE().getDocumento().setReferenciaArray(ref);
                    ]]>
                </script>
            </if>
            <!-- Guías de Despacho -->
            <if condition="tipoFactura == 52">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <log message="Creando DTE tipo 52" level="warn"/>
                <script>

                    i = 0
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                        listSize = referenciaList.size();
                        ref = new Referencia[listSize];
                    } else {
                        listSize = 0;
                    }
                </script>
                <set field="dteExenta" value="false" type="Boolean"/>
                <!-- TODO: Si la referencia es tipo fe de erratas, Monto Item puede ser 0 -->
                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="String"/>

                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);

                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('Ftdt-0')) {
                        ref[i].setTpoDocRef('SET');
                        //ref[i].setCodRef(codRef);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        } else {
                    </script>
                    <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                    <set field="tpoDocRef" from="codeOut.siiCode"/>

                    <script>
                        //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                        ref[i].setTpoDocRef(tpoDocRef);
                        //ref[i].setCodRef(codRef);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals("Ftdt-34")) {
                        dteExenta = true;
                        }
                        // Valor Opcional
                        //ref[i].xsetIndGlobal('0');
                        //ref[i].setRUTOtr(rutReceptor);

                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        //ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    i = 0;
                </script>
                <iterate list="detailList" entry="detailEntry">
                    <entity-find-one entity-name="mantle.product.Product" value-field="productField" cache="false">
                        <field-map field-name="productId" from="detailEntry.productId"/></entity-find-one>
                    <set field="nombreItem" from="productField.productName"/>

                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>



                    <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                    <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>

                    <entity-find-one entity-name="mantle.product.ProductPrice" value-field="productPriceField" cache="false">
                        <field-map field-name="productId" from="detailEntry.productId"/>
                        <!--field-map field-name="priceTypeEnumId" value="PptCurrent"/-->
                    </entity-find-one>
                    <set field="priceItem" type="Integer" value="0"/>

                    <if condition="productPriceField"><then>
                        <if condition="productPriceField.price">
                            <set field="priceItem" from="productPriceField.price"/>
                        </if>
                    </then></if>

                    <set field="totalItem" type="Long"/>
                    <script>
                        totalItem = Math.round(BigDecimal.valueOf(qtyItem) * BigDecimal.valueOf(priceItem))
                    </script>
                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->

                    <script><![CDATA[
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);

                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        logger.warn("priceInclude = " + priceInclude);
                        if(!indTraslado.equals("5")) {
                            if(Math.round(priceItem) > 0) {
                                det[i].setPrcItem(BigDecimal.valueOf(Math.round(priceItem)));
                            }
                            det[i].setMontoItem(totalItem);
                            totalInvoice = totalInvoice + totalItem
                            //if(itemAfecto.equals("true")) {
                                totalNeto = totalNeto + totalItem
                            //} else {
                            //    totalExento = totalExento + totalItem
                                //det[i].setIndExe(1);
                            //}
                        } else {
                            det[i].setMontoItem(0);
                        }


                        i = i + 1
                    ]]></script>
                </iterate>
                <script>
                    doc.getDTE().getDocumento().setReferenciaArray(ref);

                    doc.getDTE().getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales();

                    long montoExe = 0;
                    montoNeto = Long.valueOf(Math.round(totalNeto))
                    long montoIva = Math.round(montoNeto * 0.19)
                    long montoTotal = montoIva + montoNeto + totalExento
                    long montoIvaExento = 0
                    // Si la razon es modifica texto (2) no van los montos
                    logger.warn("Codref: " + codRef + ", dteExenta: " + dteExenta);
                    tot.setTasaIVA(BigDecimal.valueOf(19));
                    tot.setMntExe(totalExento);
                    tot.setIVA(montoIva);
                    tot.setMntNeto(montoNeto);
                    tot.setMntTotal(montoTotal);
                    montoExento = montoExe;
                    //montoIvaRecuperable = montoIva;

                    amount = montoTotal;

                </script>

            </if>

            <script>
                // Timbro

                doc.getDTE().timbrar(caf.getCAF(), caf.getPrivateKey(null));

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);

                // releo el doc para que se reflejen los cambios de formato
                doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts);

                logger.warn("Documento: " + doc);

                // Guardo
                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                String uri = "";
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                if (doc.getDTE().isSetDocumento()) {
                    uri = doc.getDTE().getDocumento().getID();
                    doc.getDTE().getDocumento().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetLiquidacion()) {
                    uri = doc.getDTE().getLiquidacion().getID();
                    doc.getDTE().getLiquidacion().xsetTmstFirma(now);
                } else if (doc.getDTE().isSetExportaciones()) {
                    uri = doc.getDTE().getExportaciones().getID();
                    doc.getDTE().getExportaciones().xsetTmstFirma(now);
                }

                uri = "#" + uri;

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                //doc.save(new File(resultS + "DTE" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts);
                doc.save(out, opts);
                Document doc2 = XMLUtil.parseDocument(out.toByteArray());
                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "Documento");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "Documento")) {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml");
                    Files.write(path, salida);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar factura folio "+folio);
                }
            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, activeOrgId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversión a arreglo de bytes de PDF temporal -->
            <script>
                File file = new File(pdf);
                FileInputStream fis = null;
                byte[] bArray = new byte[(int) file.length()];
                try {
                    fis = new FileInputStream(file);
                    fis.read(bArray);
                    fis.close();
                } catch (IOException ioExp) {
                    ioExp.printStackTrace();
                }
                logger.warn("pdf largo: " + file.length());
                bArray2 = bArray;

                File fileCedible = new File(pdfCedible);
                FileInputStream fisCedible = null;
                byte[] bArrayCedible = new byte[(int) fileCedible.length()];
                try {
                    fisCedible = new FileInputStream(fileCedible);
                    fisCedible.read(bArrayCedible);
                    fisCedible.close();
                } catch (IOException ioExp) {
                    ioExp.printStackTrace();
                }
            </script>

            <!-- Creación de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>

            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                Date date = new Date();
                Timestamp ts = new Timestamp(date.getTime());
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creación de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>

            <!-- Eliminacion de XML temporal -->
            <script>
                File XMLfile = new File(xml);
                XMLfile.delete();
            </script>

            <!-- Eliminacion de PDF temporal -->
            <script>
                file.delete();
                fileCedible.delete();
            </script>
        </actions>
    </service>

    <service verb="generaEnvio" noun="Documentos">
        <description>
            Generación de envio documento a partir de facturas ya generadas.
        </description>
        <in-parameters>
            <parameter name="recepS" required="false"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="documentList" required="true" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="archivoEnvio"/>
        </out-parameters>
        <actions>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <!--set field="certS" from="pathCert"/-->
            <set field="certS" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="templateEnvio" from="templateEnvio"/>
            <set field="templateAceptaciones" from="templateAceptaciones"/>
            <set field="templateLibro" from="templateLibro"/>
            <set field="logo" from="logo"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>

            <if condition="!templateEnvio">
                <return error="true" message="Organizacion no tiene plantilla para envio al SII"/>
            </if>

            <set field="idS" value="Doc"/>

            <script>
                import java.text.SimpleDateFormat;
                import java.util.Date;

                Date dNow = new Date();
                SimpleDateFormat ft = new SimpleDateFormat("yyMMddhhmmssMs");
                String datetime = ft.format(dNow);
                idS = idS + datetime;

                javax.sql.rowset.serial.SerialBlob[] DTEList = new javax.sql.rowset.serial.SerialBlob[documentList.size()];
                int j = 0;
            </script>
           <iterate list="documentList" entry="docField">
               <set field="fiscalTaxDocument" from="docField"/>
               <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="dteField">
                   <field-map field-name="fiscalTaxDocumentId" from="docField"/>
                   <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
                   <select-field field-name="contentLocation"/>
                   <select-field field-name="contentData"/>
               </entity-find-one>
               <set field="xml" from="dteField.contentLocation"/>
               <set field="xmlData" from="dteField.contentData"/>
               <script>
                DTEList[j] = xmlData;
                logger.warn("Agregado: " + DTEList[j])
                j++;
               </script>
           </iterate>

            <!-- Validación rut -->
            <if condition="recepS">
                <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:recepS]"/>
            </if>

            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="pathResultS" from="pathResults"/>
            <set field="plantillaEnvio" from="templateEnvio"/>

            <!-- Variable para guardar nombre de archivo del envio -->
            <set field="archivoEnvio" value=""/>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Date;
                import java.util.HashMap;

                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula.SubTotDTE;

                // Construyo Envio
                EnvioDTEDocument envio = EnvioDTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaEnvio));

                // Debo agregar el schema location (Sino SII rechaza)
                XmlCursor cursor = envio.newCursor();
                if (cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioDTE_v10.xsd");
                }
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12");// + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                logger.warn("RUT envia: " + enviadorS);

                // Asigno un ID
                envio.getEnvioDTE().getSetDTE().setID(idS);

                cl.sii.siiDte.EnvioDTEDocument.EnvioDTE.SetDTE.Caratula car =
                envio.getEnvioDTE().getSetDTE().getCaratula();

                car.setRutReceptor('60803000-K'); // El receptor del envio es el SII
                car.setRutEnvia(enviadorS);

                // documentos a enviar
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // Cantidad de documentos a enviar

                DTEDefType[] dtes = new DTEDefType[DTEList.size()];

                HashMap&lt;Integer, Integer&gt; hashTot = new HashMap&lt;Integer, Integer&gt;();

                for (int i = 0; i &lt; DTEList.length; i++) {
                    dtes[i] = DTEDocument.Factory.parse(DTEList[i].getBinaryStream(), opts).getDTE();
                    // armar hash para totalizar por tipoDTE
                    if (hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) != null) {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(),
                        hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) + 1);
                    } else {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(), 1);
                    }
                }
                SubTotDTE[] subtDtes = new SubTotDTE[hashTot.size()];
                int i = 0;
                for (Integer tipo : hashTot.keySet()) {
                    SubTotDTE subt = SubTotDTE.Factory.newInstance();
                    subt.setTpoDTE(new BigInteger(tipo.toString()));
                    subt.setNroDTE(new BigInteger(hashTot.get(tipo).toString()));
                    subtDtes[i] = subt;
                    i++;
                }
                car.setSubTotDTEArray(subtDtes);
                // Le doy un formato bonito (debo hacerlo antes de firmar para no
                // afectar los DTE internos)
                opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);
                envio = EnvioDTEDocument.Factory.parse(envio.newInputStream(opts));


                envio.getEnvioDTE().getSetDTE().setDTEArray(dtes);

                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                envio.getEnvioDTE().getSetDTE().getCaratula().xsetTmstFirmaEnv(now);

                // firmo
                //envio.sign(pKey, x509);

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                envio.save(new File(pathResults + "ENV" + idS + "-sinfirma.xml"), opts);
                envio.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, "#" + idS, pKey, x509, "#" + idS,"SetDTE");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "SetDTE")) {
                    archivoEnvio = pathResults + "ENV" + idS + ".xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + ".xml");
                    Files.write(path, salida);
                    logger.warn("Envio generado OK");
                } else {
                    archivoEnvio = pathResults + "ENV" + idS + "-mala.xml"
                    Path path = Paths.get(pathResults + "ENV" + idS + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar envio");
                }
            </script>
            <!-- Se guarda referencia a XML de envío en BD -->
            <iterate list="documentList" entry="docField">
                <set field="createMap" from="[fiscalTaxDocumentId:docField, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Misc', contentLocation:archivoEnvio, contentDate:ts]"/>
                <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

                <!-- Se marca DTE como enviada -->
                <set field="idDte" from="docField"/>
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                    <field-map field-name="fiscalTaxDocumentId" from="idDte"/>
                </entity-find-one>

                <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-Sent"/>
                <entity-update value-field="dteField"/>
            </iterate>
        </actions>
    </service>

    <service verb="generaEnvio" noun="Boletas">
        <description>
            Generación de envio documento a partir de facturas ya generadas.
        </description>
        <in-parameters>
            <parameter name="recepS" required="false"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="documentList" required="true" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="archivoEnvio"/>
        </out-parameters>
        <actions>
            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <!--set field="certS" from="pathCert"/-->
            <set field="certS" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="templateAceptaciones" from="templateAceptaciones"/>
            <set field="templateLibro" from="templateLibro"/>
            <set field="logo" from="logo"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>

            <if condition="!templateEnvio">
                <return error="true" message="Organizacion no tiene plantilla para envio al SII"/>
            </if>

            <set field="idS" value="Doc"/>

            <script>
                import java.text.SimpleDateFormat;
                import java.util.Date;

                Date dNow = new Date();
                SimpleDateFormat ft = new SimpleDateFormat("yyMMddhhmmssMs");
                String datetime = ft.format(dNow);
                idS = idS + datetime;

                javax.sql.rowset.serial.SerialBlob[] DTEList = new javax.sql.rowset.serial.SerialBlob[documentList.size()];
                int j = 0;
            </script>
            <iterate list="documentList" entry="docField">
                <set field="fiscalTaxDocument" from="docField"/>
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="dteField">
                    <field-map field-name="fiscalTaxDocumentId" from="docField"/>
                    <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
                    <select-field field-name="contentLocation"/>
                    <select-field field-name="contentData"/>
                </entity-find-one>
                <set field="xml" from="dteField.contentLocation"/>
                <set field="xmlData" from="dteField.contentData"/>
                <script>
                    DTEList[j] = xmlData;
                    j++;
                </script>
            </iterate>

            <!-- Validación rut -->
            <if condition="recepS">
                <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:recepS]"/>
            </if>

            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="pathResultS" from="pathResults"/>
            <set field="plantillaEnvio" from="templateEnvioBoleta"/>
            <!-- Variable para guardar nombre de archivo del envio -->
            <set field="archivoEnvio" value=""/>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Date;
                import java.util.HashMap;

                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.FechaHoraType;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia;
                import cl.sii.siiDte.boletas.BOLETADefType;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula.SubTotDTE;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                // Construyo Envio
                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.parse(ec.resource.getLocationStream(templateEnvioBoleta));
                System.out.println("Plantilla leida: "+templateEnvioBoleta);
                System.out.println("XML: "+envioBoletaDocument.toString());

                // Debo agregar el schema location (Sino SII rechaza)
                //XmlCursor cursor = envioBoletaDocument.newCursor();
                //cursor.toNextToken();
                //cursor.insertNamespace("xmlns", "http://www.sii.cl/SiiDte");
                //cursor.dispose();

                //if (cursor.toFirstChild()) {
                //    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioBOLETA_v11.xsd");
                //}
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12");// + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                logger.warn("RUT envia: " + enviadorS);

                EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte = SetDTE.Factory.newInstance();
                sdte.setID("EB" + System.nanoTime());

                Caratula caratula = sdte.addNewCaratula();
                caratula.setVersion(new BigDecimal("1.0"));
                caratula.setRutEmisor(rutEmisor);
                caratula.setRutEnvia(enviadorS);
                caratula.setRutReceptor('60803000-K');

                Calendar cal = Calendar.getInstance();
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2018'));
                cal.set(Calendar.MONTH, Integer.valueOf('09'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('24'));
                caratula.setFchResol(cal);

                caratula.setNroResol(Integer.valueOf(nroResol));
                caratula.xsetTmstFirmaEnv(now);

                // documentos a enviar
                //HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                //namespaces.put("", "http://www.sii.cl/SiiDte");
                //XmlOptions opts = new XmlOptions();
                //opts.setLoadSubstituteNamespaces(namespaces);

                // Cantidad de documentos a enviar

                BOLETADefType[] dtes = new BOLETADefType[DTEList.size()];

                HashMap&lt;Integer, Integer&gt; hashTot = new HashMap&lt;Integer, Integer&gt;();

                for (int i = 0; i &lt; DTEList.length; i++) {
                    cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA envioBoletaOld = EnvioBOLETADocument.Factory.parse(DTEList[i].getBinaryStream()).getEnvioBOLETA();
                    cl.sii.siiDte.boletas.BOLETADefType[] boletaArray = envioBoletaOld.setDTE.getDTEArray();
                    dtes[i] = boletaArray[0];
                    // armar hash para totalizar por tipoDTE
                    if (hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) != null) {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(),
                        hashTot.get(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue()) + 1);
                    } else {
                        hashTot.put(dtes[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().intValue(), 1);
                    }
                }
                System.out.println("Tamanno arreglo:" + hashTot.size());
                SubTotDTE[] subtDtes = new SubTotDTE[hashTot.size()];
                int i = 0;
                for (Integer tipo : hashTot.keySet()) {
                    SubTotDTE subt = SubTotDTE.Factory.newInstance();
                    subt.setTpoDTE(new BigInteger(tipo.toString()));
                    subt.setNroDTE(new BigInteger(hashTot.get(tipo).toString()));
                    subtDtes[i] = subt;
                    i++;
                }
                caratula.setSubTotDTEArray(subtDtes);
                // Le doy un formato bonito (debo hacerlo antes de firmar para no afectar los DTE internos)
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                XmlOptions opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);
                envioBoletaDocument = EnvioBOLETADocument.Factory.parse(envioBoletaDocument.newInputStream(opts));

                eb.setSetDTE(sdte);
                eb.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument.setEnvioBOLETA(eb);

                envioBoletaDocument.getEnvioBOLETA().getSetDTE().setDTEArray(dtes);
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                envioBoletaDocument.getEnvioBOLETA().getSetDTE().getCaratula().xsetTmstFirmaEnv(now);

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");

                HashMap&lt;String, String&gt; namespaces2 = new HashMap&lt;String, String&gt;();
                namespaces2.put("", "http://www.sii.cl/SiiDte");
                namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                namespaces2.put("xsi:schemaLocation", "http://www.sii.cl/SiiDte EnvioBOLETA_v11.xsd");

                XmlCursor cursor2 = envioBoletaDocument.newCursor();
                if (cursor2.toFirstChild()) {
                    cursor2.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "xsi", "xmlns"), "http://www.w3.org/2001/XMLSchema-instance");
                    //cursor2.setAttributeText(new QName("", "xmlns"), "http://www.sii.cl/SiiDte");
                    cursor2.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioBOLETA_v11.xsd");
                }
                cursor2.dispose();

                XmlOptions opts2 = new XmlOptions();
                opts2.setSaveSuggestedPrefixes(namespaces2); // deja el ssid solamente
                opts2.setUseDefaultNamespace();
                opts2.setSavePrettyPrint();
                opts2.setSavePrettyPrintIndent(0);

                String uri = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getID();
                logger.warn("URI: " + uri);

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                envioBoletaDocument.save(new File(pathResults + "ENVBOL" + idS + "-sinfirma.xml"), opts2);

                envioBoletaDocument.sign(pKey, x509);
                envioBoletaDocument.save(out, opts2);

                envioBoletaDocument.save(new File(pathResults + "ENVBOL" + idS + ".xml"), opts2);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                archivoEnvio = pathResults + "ENVBOL" + idS + ".xml";

                //byte[] salida = Signer.sign(doc2, uri, pKey, x509, uri, "Documento");
                //doc2 = XMLUtil.parseDocument(salida);

                /*if (Signer.verify(doc2, "Documento")) {
                    archivoEnvio = pathResults + "ENVBOL" + idS + ".xml";
                    Path path = Paths.get(pathResults + "ENVBOL" + idS + ".xml");
                    Files.write(path, salida);
                    logger.warn("Envio generado OK");
                } else {
                    archivoEnvio = pathResults + "ENVBOL" + idS + "-mala.xml";
                    Path path = Paths.get(pathResults + "ENVBOL" + idS + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar envio");
                }*/

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                envio.save(new File(pathResults + "ENV" + idS + "-sinfirma.xml"), opts);
                envio.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, "#" + idS, pKey, x509, "#" + idS,"SetDTE");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "SetDTE")) {
                archivoEnvio = pathResults + "ENV" + idS + ".xml"
                Path path = Paths.get(pathResults + "ENV" + idS + ".xml");
                Files.write(path, salida);
                logger.warn("Envio generado OK");
                } else {
                archivoEnvio = pathResults + "ENV" + idS + "-mala.xml"
                Path path = Paths.get(pathResults + "ENV" + idS + "-mala.xml");
                Files.write(path, salida);
                logger.warn("Error al generar envio");
                }

            </script>
            <!-- Se guarda referencia a XML de envío en BD -->
            <iterate list="documentList" entry="docField">
                <set field="createMap" from="[fiscalTaxDocumentId:docField, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Misc', contentLocation:archivoEnvio, contentDate:ts]"/>
                <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

                <!-- Se marca DTE como enviada -->
                <set field="idDte" from="docField"/>
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                    <field-map field-name="fiscalTaxDocumentId" from="idDte"/>
                </entity-find-one>

                <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-Sent"/>
                <entity-update value-field="dteField"/>
            </iterate>
        </actions>
    </service>

    <service verb="enviaSII" noun="Documento">
        <description>
            Envio documento a partir de documento envio ya generado
            compaS: rut de compañía que envía
            enviadorS: rut de persona que envía
            documentoS: nombre de documento a enviar (que puede contener varios)
        </description>
        <in-parameters>
            <parameter name="compaS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="documentoS" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
        <actions>
            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]"/>


            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>

            <set field="trackId" value=""/>

            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;


                ConexionSii con = new ConexionSii();
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);

                String enviadorS = Utilities.getRutFromCertificate(x509);

                logger.warn("Archivo enviado: " + documentoS);

                // Cambiar en produccion
                RECEPCIONDTEDocument recp = con.uploadEnvioCertificacion(enviadorS, compaS, new File(documentoS), token);
                logger.warn("-----------------");
                logger.warn(recp.xmlText());

                // Se verifica si el status es 0

                String statusXML = recp.xmlText();
                int inicio = statusXML.indexOf("&lt;siid:STATUS&gt;");
                int fin = statusXML.indexOf("&lt;/siid:STATUS&gt;");

                statusXML = statusXML.substring(inicio+1,fin);
                statusXML = statusXML.replaceAll("siid:STATUS&gt;","");
                logger.warn("STATUS: " + statusXML);

                if(statusXML.equals("0")) {
                    trackId = recp.xmlText();
                    inicio = trackId.indexOf("&lt;siid:TRACKID&gt;");
                    fin = trackId.indexOf("&lt;/siid:TRACKID&gt;");
                    trackId = trackId.substring(inicio+1,fin);
                    trackId = trackId.replaceAll("siid:TRACKID&gt;","");
                    logger.warn("DTE Enviada correctamente con trackId " + trackId);
                } else {
                    logger.warn("Error "+ statusXML + " al enviar DTE");
                }

            </script>

        </actions>
    </service>

    <service verb="enviarDirecto" noun="SII">
        <description>
            Servicio para enviar boleta de forma directa al SII, sin armar un envio nuevo
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="pathTemp" from="pathTemp"/>

            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="dataField">
                <select-field field-name="contentData"/>
                <select-field field-name="contentLocation"/>
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
            </entity-find-one>

            <set field="contentData" from="dataField.contentData"/>
            <set field="contentLocation" from="dataField.contentLocation"/>

            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="enviadorS" value="${rutEnvia}"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="enviadorS" value="${rutEnvia}"/>

            <!-- Se escribe archivo temporal para crear documentoS -->
            <script>
                int largo = contentData.length()
                long inicio = 1
                byte[] bytes = contentData.getBytes(inicio, largo)
                FileOutputStream fout = new FileOutputStream(contentLocation);
                fout.write(bytes);
                fout.flush();
                fout.close();
                // Useful for testing
                //contentLocation = '/home/cherrera/git/moqui-moit/moqui-framework/runtime/component/MoquiChile/DTE/TEMP/TESTBO.xml';
            </script>
            <service-call name="mchile.DTEServices.enviaSII#Boleta" in-map="[compaS:emisorS, enviadorS:enviadorS, documentoS:contentLocation, activeOrgId:activeOrgId]" out-map="context"/>
            <!-- TODO: Eliminar archivo temporal -->
            <!-- Marcar boleta como enviada -->
                <!-- Se marca DTE como enviada -->
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                    <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                </entity-find-one>
                <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-Sent"/>
                <set field="dteField.trackId" from="trackId"/>
                <entity-update value-field="dteField"/>
        </actions>
    </service>

    <service verb="enviaSII" noun="Boleta">
        <description>
            Envio boleta a partir de documento envio ya generado
            compaS: rut de compañía que envía
            enviadorS: rut de persona que envía
            documentoS: nombre de documento a enviar (que puede contener varios)
        </description>
        <in-parameters>
            <parameter name="compaS" required="true"/>
            <parameter name="enviadorS" required="true"/>
            <parameter name="documentoS" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
        <actions>
            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:enviadorS]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>

            <set field="trackId" value=""/>
            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import cl.nic.dte.net.ConexionSiiBoleta;
                import cl.nic.dte.util.Utilities;
                import org.json.simple.JSONObject;

                ConexionSiiBoleta con = new ConexionSiiBoleta();
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);

                String enviadorS = Utilities.getRutFromCertificate(x509);

                JSONObject recp = con.uploadEnvioCertificacion(enviadorS, compaS, new File(documentoS), token);

                String estado = (String) recp.get("estado");
                trackId = String.valueOf(recp.get("trackid"));

                if(estado.equals("REC")) {
                    logger.warn("Boleta rechazada: " + recp.toString());
                } else if(estado.equals("RPR")) {
                    logger.warn("Boleta aceptada con reparos");
                } else if(estado.equals(RFR)) {
                    logger.warn("Boleta con error en firma");
                } else {
                    logger.warn("Boleta recibida con trackid" + trackId);
                }

            </script>
            <if condition="estado.equals('REC')"><then>
                <return error="false" message="Error al enviar al SII"/>
            </then><else-if condition="estado.equals('RFR')">
                <return error="false" message="Error en Firma"/>
            </else-if><else>
                <return error="false" message="Recibo con exito"/>
            </else>
            </if>
        </actions>
    </service>

    <service verb="marcarEnviados" noun="Documentos">
        <description>
            Marca lista de documentos como enviados, usando el trackid devuelto por el SII
        </description>
        <in-parameters>
            <parameter name="trackId"/>
            <parameter name="documentList" required="true" type="List"/>
        </in-parameters>
        <actions>
            <iterate list="documentList" entry="docField">
                <!-- Se marca DTE como enviada -->
                <set field="idDte" from="docField"/>
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                    <field-map field-name="fiscalTaxDocumentId" from="idDte"/>
                </entity-find-one>
                <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-Sent"/>
                <set field="dteField.trackId" from="trackId"/>
                <entity-update value-field="dteField"/>
            </iterate>
        </actions>
    </service>


    <service verb="load" noun="DTEConfig">
        <description>
            Carga parametros desde archivo resources
        </description>
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="templateFactura"/>
            <parameter name="templateBoleta"/>
            <parameter name="pdfTemplate"/>
            <parameter name="pdfTemplateCedible"/>
            <parameter name="pdfTemplateBoleta"/>
            <parameter name="pdfTemplateBoletaContinua"/>
            <parameter name="templateEnvio"/>
            <parameter name="templateEnvioBoleta"/>
            <parameter name="templateAceptaciones"/>
            <parameter name="templateLibro"/>
            <parameter name="templateLibroGuia"/>
            <parameter name="templateLibroBoletas"/>
            <parameter name="templateRcof"/>
            <parameter name="logo"/>
            <parameter name="fchResol"/>
            <parameter name="nroResol"/>
            <parameter name="rutEmisor"/>
            <parameter name="rutEnvia"/>
            <parameter name="rznSocEmisor"/>
            <parameter name="giroEmisor"/>
            <parameter name="cdgSIISucur"/>
            <parameter name="dirOrigen"/>
            <parameter name="cmnaOrigen"/>
            <parameter name="ciudadOrigen"/>
            <parameter name="pathCert"/>
            <parameter name="pathResults"/>
            <parameter name="pathAceptaciones"/>
            <parameter name="pathRecibidas"/>
            <parameter name="pathPdf"/>
            <parameter name="pathTemp"/>
            <parameter name="pathCaf"/>
            <parameter name="certData"/>
            <parameter name="passCert"/>
            <parameter name="nmbContacto"/>
            <parameter name="mailContacto"/>
            <parameter name="fonoContacto"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.PartyDteParams" value-field="orgField">
                <field-map field-name="partyId" from="partyId"/>
                <select-field field-name="templateFactura"/>
                <select-field field-name="templateBoleta"/>
                <select-field field-name="pdfTemplate"/>
                <select-field field-name="pdfTemplateCedible"/>
                <select-field field-name="pdfTemplateBoleta"/>
                <select-field field-name="pdfTemplateBoletaContinua"/>
                <select-field field-name="templateEnvio"/>
                <select-field field-name="templateEnvioBoleta"/>
                <select-field field-name="templateAceptaciones"/>
                <select-field field-name="templateLibro"/>
                <select-field field-name="templateLibroGuia"/>
                <select-field field-name="templateLibroBoletas"/>
                <select-field field-name="templateRcof"/>
                <select-field field-name="logo"/>
                <select-field field-name="fchResol"/>
                <select-field field-name="nroResol"/>
                <select-field field-name="rutEmisor"/>
                <select-field field-name="rutEnvia"/>
                <select-field field-name="rznSocEmisor"/>
                <select-field field-name="cdgSIISucur"/>
                <select-field field-name="dirOrigen"/>
                <select-field field-name="cmnaOrigen"/>
                <select-field field-name="ciudadOrigen"/>
                <select-field field-name="pathCert"/>
                <select-field field-name="certData"/>
                <select-field field-name="pathTemp"/>
                <select-field field-name="passCert"/>
                <select-field field-name="nmbContacto"/>
                <select-field field-name="mailContacto"/>
                <select-field field-name="fonoContacto"/>
            </entity-find-one>

            <if condition="!orgField">
                <return error="true" message="Organización no tiene datos para generar DTE"/>
            </if>

            <set field="templateFactura" from="orgField.templateFactura"/>
            <set field="templateBoleta" from="orgField.templateBoleta"/>
            <set field="pdfTemplate" from="orgField.pdfTemplate"/>
            <set field="pdfTemplateCedible" from="orgField.pdfTemplateCedible"/>
            <set field="pdfTemplateBoleta" from="orgField.pdfTemplateBoleta"/>
            <set field="pdfTemplateBoletaContinua" from="orgField.pdfTemplateBoletaContinua"/>
            <set field="templateEnvio" from="orgField.templateEnvio"/>
            <set field="templateEnvioBoleta" from="orgField.templateEnvioBoleta"/>
            <set field="templateAceptaciones" from="orgField.templateAceptaciones"/>
            <set field="templateLibro" from="orgField.templateLibro"/>
            <set field="templateLibroGuia" from="orgField.templateLibroGuia"/>
            <set field="templateLibroBoletas" from="orgField.templateLibroBoletas"/>
            <set field="templateRcof" from="orgField.templateRcof"/>
            <set field="logo" from="orgField.logo"/>
            <set field="fchResol" from="orgField.fchResol"/>
            <set field="nroResol" from="orgField.nroResol"/>
            <set field="rutEmisor" from="orgField.rutEmisor"/>
            <set field="rutEnvia" from="orgField.rutEnvia"/>
            <set field="rznSocEmisor" from="orgField.rznSocEmisor"/>
            <set field="cdgSIISucur" from="orgField.cdgSIISucur"/>
            <set field="dirOrigen" from="orgField.dirOrigen"/>
            <set field="cmnaOrigen" from="orgField.cmnaOrigen"/>
            <set field="ciudadOrigen" from="orgField.ciudadOrigen"/>
            <set field="pathCert" from="orgField.pathCert"/>
            <set field="pathResults" from="orgField.pathTemp"/>
            <set field="pathAceptaciones" from="orgField.pathTemp"/>
            <set field="pathRecibidas" from="orgField.pathTemp"/>
            <set field="pathPdf" from="orgField.pathTemp"/>
            <set field="pathTemp" from="orgField.pathTemp"/>
            <set field="pathCaf" from="orgField.pathTemp"/>
            <set field="certData" from="orgField.certData"/>
            <set field="passCert" from="orgField.passCert"/>
            <set field="nmbContacto" from="orgField.nmbContacto"/>
            <set field="mailContacto" from="orgField.mailContacto"/>
            <set field="fonoContacto" from="orgField.fonoContacto"/>
        </actions>
    </service>

    <service verb="get" noun="DTEFilename">
        <description>
            Retorna nombre de archivo de DTE
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentContentTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="filename"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="pathResults" from="pathResults"/>

            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="document"/>
            <set field="filename" value="${document.contentLocation}"/>
        </actions>
    </service>

    <service verb="get" noun="AceptacionFilename">
        <description>
            Retorna nombre de archivo de acuse recibo DTE Terceros
        </description>
        <in-parameters>
            <parameter name="aceptacionDteId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="filename"/>
            <parameter name="path"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="pathResults" from="pathAceptaciones"/>

            <entity-find-one entity-name="mchile.dte.AceptacionDte" value-field="document"/>
                <set field="filename" value="${document.xml}"/>
            <set field="path" value="${pathResults}"/>
        </actions>
    </service>

    <service verb="genera" noun="PDF">
        <description>
            Genera archivo PDF de Factura/Boleta (envio).
        </description>
        <in-parameters>
            <parameter name="pdf" required="true"/>
            <parameter name="pdfCedible"/>
            <parameter name="dte" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="boleta"/>
            <parameter name="continua"/>
        </in-parameters>
        <actions>
            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="passS" from="passCert"/>
            <set field="pathResults" from="pathResults"/>
            <set field="template" from="pdfTemplate"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="giro" from="giroEmisor"/>
            <set field="templateFactura" from="templateFactura"/>
            <set field="pdfTemplate" from="pdfTemplate"/>
            <set field="pdfTemplateCedible" from="pdfTemplateCedible"/>
            <set field="pdfTemplateBoleta" from="pdfTemplateBoleta"/>
            <set field="pdfTemplateBoletaContinua" from="pdfTemplateBoletaContinua"/>
            <set field="templateEnvio" from="templateEnvio"/>
            <set field="templateAceptaciones" from="templateAceptaciones"/>
            <set field="templateLibro" from="templateLibro"/>
            <set field="logo" from="logo"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>



            <if condition="boleta">
                <set field="template" from="pdfTemplateBoleta"/>
                <if condition="continua">
                    <set field="template" from="pdfTemplateBoletaContinua"/>
                </if>
            </if>

            <if condition="!pdfTemplate">
                <return error="true" message="Organización emisora no tiene definida plantilla para generar PDF"/>
            </if>
            <if condition="!pdfTemplateCedible">
                <return error="true" message="Organización emisora no tiene definida plantilla para generar PDF Cedible"/>
            </if>
            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import javax.sql.rowset.serial.SerialBlob;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                //Utilities.generatePDF(new FileInputStream(dte), ec.resource.getLocationStream(template), new FileOutputStream(pdf));
                Utilities.generatePDF(new FileInputStream(dte), template.getBinaryStream(), new FileOutputStream(pdf));
            </script>
            <if condition="!boleta">
                <script>
                    //Utilities.generatePDF(new FileInputStream(dte), ec.resource.getLocationStream(templatePdfCedible), new FileOutputStream(pdfCedible));
                    Utilities.generatePDF(new FileInputStream(dte), pdfTemplateCedible.getBinaryStream(), new FileOutputStream(pdfCedible));
                </script>
            </if>
            <script>

                logger.warn("---------------");
                logger.warn("PDF Generado: " + pdf);
                logger.warn("PDF Cedible Generado: " + pdfCedible);
                logger.warn("---------------");
            </script>
        </actions>
    </service>

    <service verb="load" noun="Caf">
        <description>
            Carga CAF en Sistema
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Carga de RUT de empresa -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rut" from="partyIdentificationList.idValue[0]"/>


            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rut]" out-map="salidaRut"/>
            <set field="rutNoDv" from="salidaRut.rut"/>

            <set field="archivo" from="filename.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="fileRoot" from="pathCaf"/>

            <set field="contentLocation" value="${fileRoot}/${archivo}"/>

            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>

            <set field="desde" value=""/>
            <set field="hasta" value=""/>
            <set field="fechaAutorizacion" value=""/>
            <set field="fiscalTaxDocumentTypeEnumId" value=""/>
            <set field="rutCaf" value=""/>

            <script>
                fileStream = filename.getInputStream()
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDefType.Documento.Referencia;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                AutorizacionType caf;
                caf = AUTORIZACIONDocument.Factory.parse(filename.getInputStream(), opts).getAUTORIZACION();
                desde = caf.getCAF().getDA().getRNG().getD().toString();
                hasta = caf.getCAF().getDA().getRNG().getH().toString();
                fechaAutorizacion = caf.getCAF().getDA().getFA().toString();
                fiscalTaxDocumentTypeEnumId = "Ftdt-${caf.getCAF().getDA().getTD().toString()}"
                rutCaf = caf.getCAF().getDA().getRE();
                logger.warn("===>" + caf.toString());

            </script>

            <if condition="!rutCaf.equals(rut.trim())">
                <return error="true" message="RUT de archivo CAF no corresponde al registrado en el sistema como emisor: $rutCaf :: $rut"/>
            </if>

            <set field="updateMap" from="[filename:archivo,desde:desde, hasta:hasta, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, fechaAutorizacion:fechaAutorizacion,rut:rut, ultimoFolio:desde, issuerPartyId:activeOrgId, cafData:filename.get()]"/>
            <service-call name="create#mchile.dte.Caf" out-map="context" in-map="updateMap"/>

            <!-- Creación de registros para reservar folios -->
            <script><![CDATA[
                int inicio = Integer.parseInt(desde);
                int fin = Integer.parseInt(hasta);
                for (int folio = inicio; folio <= fin; folio++) {]]></script>
                    <set field="fiscalTaxDocumentId" value="$fiscalTaxDocumentTypeEnumId$folio$rutNoDv"/>
                    <!--log message="Creando: $fiscalTaxDocumentId, $dteTypeEnumId, $folio, $rut"/-->
                    <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, fiscalTaxDocumentNumber:folio, issuerPartyId:activeOrgId,
                        issuerPartyIdTypeEnumId:'PtidNationalTaxId', fiscalTaxDocumentStatusEnumId:'Ftdt-NotIssued', fiscalTaxDocumentSentStatusEnumId:'Ftdt-NotSent']"/>
                    <service-call name="create#mchile.dte.FiscalTaxDocument" out-map="context" in-map="createMap"/>
                <script><![CDATA[
                }
            ]]></script>

        </actions>
    </service>

    <service verb="get" noun="Folio">
        <description>
            Obtiene folio para el tipo de DTE especificado.
            Busca el folio más bajo disponible
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
            <parameter name="caf"/>
            <parameter name="cafData"/>
        </out-parameters>
        <actions>


            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>

            <!-- Se filtra por CAF activo (PK) para el tipo de DTE -->
            <set field="activo" value="true"/>
            <entity-find-one entity-name="mchile.dte.Caf" value-field="cafEntry" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
                <field-map field-name="activo" value="true"/>
            </entity-find-one>

            <if condition="!cafEntry">
                <return error="true" message="No existe CAF activo para DTE tipo ${fiscalTaxDocumentTypeEnumId}"/>
            </if>

            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="reservedList">
                <econdition field-name="fiscalTaxDocumentTypeEnumId" value="${fiscalTaxDocumentTypeEnumId}"/>
                <econdition field-name="issuerPartyId" from="activeOrgId"/>
                <econdition field-name="fiscalTaxDocumentNumber" operator="greater-equals" from="cafEntry.desde"/>
                <econdition field-name="fiscalTaxDocumentNumber" operator="less-equals" from="cafEntry.hasta"/>
                <econdition field-name="fiscalTaxDocumentStatusEnumId" operator="equals" value="Ftdt-NotIssued"/>
                <select-field field-name="fiscalTaxDocumentNumber"/>
                <order-by field-name="fiscalTaxDocumentNumber"/>
            </entity-find>
            <if condition="!reservedList">
                <return error="true" message="No hay folios disponibles para DTE tipo ${fiscalTaxDocumentTypeEnumId} ${cafEntry.desde}-${cafEntry.hasta} - ${cafEntry.filename}"/>
            </if>
           
            <set field="folio" from="reservedList.first().fiscalTaxDocumentNumber"/>

            <set field="caf" from="cafEntry.filename"/>
            <set field="cafData" from="cafEntry.cafData"/>

        </actions>
    </service>

    <service verb="facturar" noun="Invoice">
        <description>
            Obtiene datos para llamar a método generar#Factura
        </description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="items" type="String"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <if condition="!items">
                <!-- Si no viene lista de items se intenta crearla -->
                <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                    <econdition field-name="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>
                <log level="warn" message="Lista: $invoiceItemList"/>
                <iterate list="invoiceItemList" entry="itemEntry">
                    <log level="warn" message="Item: $itemEntry"/>
                    <script>
                        discount = 0;
                        if(itemEntry.pctDiscount != null)
                            discount = itemEntry.pctDiscount;
                        if(items == null) {
                            items = itemEntry.invoiceItemSeqId+"-"+itemEntry.quantity+"-"+itemEntry.amount+"-" +discount+"-"+itemEntry.description;
                        } else {
                            items = items + "," + itemEntry.invoiceItemSeqId+"-"+itemEntry.quantity+"-"+itemEntry.amount+"-" +discount+"-"+itemEntry.description;
                        }
                    </script>
                </iterate>
            </if>

            <!-- Obtención de descuento global, si es > 0 se aplica -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoiceField">
                <field-map field-name="invoiceId" from="invoiceId"/>
            </entity-find-one>
            <set field="globalDiscount" from="invoiceField.globalDiscount"/>
            <set field="glosaDr" from="invoiceField.glosaDr"/>

            <set field="listItems" type="List"/>
            <if condition="items">
                <set field="listItems" from="items instanceof List ? items : items.split(',') as List"/>
            </if>

            <iterate list="listItems" entry="detailItem">
                <set field="listProduct" from="detailItem instanceof List ? detailItem : detailItem.split('-') as List"/>
                <log message="Leyendo: $listProduct" level="warn"/>
                <!-- Con invoiceId se busca en invoiceItem y se actualiza porcentaje de descuento -->
                <entity-find-one entity-name="mantle.account.invoice.InvoiceItem" value-field="invoiceItemField">
                    <field-map field-name="invoiceId" from="invoiceId"/>
                    <field-map field-name="invoiceItemSeqId" value="${listProduct[0]}"/>
                </entity-find-one>
                <script>
                    long discount = Long.valueOf(listProduct[3]);
                </script>
                <set field="invoiceItemField.pctDiscount" from="discount" />
                <entity-update value-field="invoiceItemField"/>
            </iterate>

            <service-call name="mantle.account.InvoiceServices.get#InvoiceDisplayInfo" in-map="[invoiceId:invoiceId]" out-map="context"/>

            <set field="paymentId" from="paymentApplicationList.paymentId[0]"/>

            <if condition="paymentId">
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <!-- Ajuste de forma de pago -->
                <set field="medioPago" value="OT"/>
                <set field="formaPago" value="3"/>
                <if condition="payment.paymentInstrumentEnumId == 'PiCreditCard'">
                    <set field="medioPago" value="TC"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheck'">
                    <set field="medioPago" value="CH"/>
                    <set field="formaPago" value="1"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheck'">
                    <set field="medioPago" value="CH"/>
                    <set field="formaPago" value="1"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheckDate'">
                    <set field="medioPago" value="CF"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheckDate'">
                    <set field="medioPago" value="CF"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiCash'">
                    <set field="medioPago" value="EF"/>
                    <set field="formaPago" value="1"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiLetra'">
                    <set field="medioPago" value="LT"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiBillingAccount'">
                    <set field="medioPago" value="PE"/>
                    <set field="formaPago" value="1"/>
                </if>
            </if>
            <if condition="!paymentId">
                <set field="medioPago" value="CH"/>
                <set field="formaPago" value="1"/>
            </if>

            <!-- Datos principales de invoice -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="invoice == null"><return error="true" message="Invoice not found with ID ${invoiceId}"/></if>
            <set field="partyId" from="invoice.toPartyId"/>
            <set field="toPartyId" from="invoice.toPartyId"/>

            <!-- Items de invoice -->
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <!-- email receptor -->
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:toPartyId]" out-map="context"/>

            <if condition="!emailAddress">
                <if condition="fiscalTaxDocumentTypeEnumId != 'Ftdt-39' &amp;&amp; fiscalTaxDocumentTypeEnumId != 'Ftdt-41'">
                    <return error="true" message="Receptor no tiene dirección de correo, sólo se puede emitir boleta"/>
                </if>
            </if>
            <set field="username" from="emailAddress"/>
            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <!-- Datos para encontrar contacto -->
            <entity-find entity-name="mantle.party.contact.PartyContactMech" list="postalPcmList">
                <date-filter/><econdition field-name="partyId"/>
                <econdition field-name="contactMechPurposeId" value="PostalTax"/>
                <order-by field-name="-fromDate"/>
            </entity-find>

            <if condition="!postalPcmList">
                <return error="true" message="Receptor ${partyId} no tiene dirección postal para impuestos"/>
            </if>
            <set field="contactMechId" from="postalPcmList[0].contactMechId"/>


            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <if condition="!contactPostalAddressField">
                 <return message="Receptor ${partyId} no tiene dirección postal para impuestos" error="true"/>
            </if>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <!-- Comuna -->
            <entity-find-one entity-name="moqui.basic.Geo" value-field="geoField">
                <field-map field-name="geoId" from="contactPostalAddressField.stateProvinceGeoId"/>
            </entity-find-one>

            <set field="cmnaReceptor" from="geoField.geoName"/>

            <set field="ciudadReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <!-- TODO: party puede ser Organization o Persona -->
            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- email -->
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="contactMechList">
                    <econdition field-name="partyId" from="partyId"/>
                    <econdition field-name="contactMechPurposeId" value="PostalTax"/>
                    <econdition field-name="fromDate" operator="less-equals" from="ec.user.nowTimestamp"/>
                    <econdition field-name="thruDate" from="null"/>
                </entity-find>

                <if condition="!contactMechList">
                    <return error="true" message="Receptor no tiene dirección para impuestos"/>
                </if>
                <set field="contactMechId" from="contactMechList.contactMechId.first()"/>


                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>

                <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:toPartyId]" out-map="giroOutMap"/>
                <set field="giroReceptor" from="giroOutMap.description"/>

                <!-- Obtención de contacto para impuestos en organización -->

                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                              in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
                <if condition="!contactOut.postalContactMechId">
                    <return error="true" message="Receptor no tiene contacto tributario asignado"/>
                </if>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                    <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
                </entity-find-one>
                <!-- Obtención de contacto en organización -->
                <if condition="!postalAddressField">
                    <return error="true" message="Nombre receptor no encontrado"/>
                </if>

                <set field="contactoReceptor" from="postalAddressField.toName"/>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- email -->
                <!--service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:fromPartyId]" out-map="context"/>
                <set field="contactMechId" from="emailAddress"/-->

                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>

            <!-- Para generar factura se elimina item de IVA: no tienen productId -->
            <set field="correctedInvoiceItemList" from="[]"/>
            <iterate list="invoiceItemList" entry="itemField">
                <if condition="itemField.productId">
                    <log message="Item con productId: $itemField" level="warn"/>
                    <script>
                        correctedInvoiceItemList.add(itemField);
                    </script>
                </if>
            </iterate>


            <!-- Recuperación de referencias -->
            <entity-find entity-name="mchile.dte.ReferenciaInvoiceAndFiscalCode" list="referenciaList">
                <econdition field-name="invoiceId" from="invoiceId"/>
                <order-by field-name="fiscalTaxDocumentTypeEnumId"/>
            </entity-find>
            <if condition="(fiscalTaxDocumentTypeEnumId == 'Ftdt-39') || (fiscalTaxDocumentTypeEnumId == 'Ftdt-41')"><then>
                <!-- Generacion de boletas -->
                <service-call name="mchile.DTEServices.genera#Boleta" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, activeOrgId:activeOrgId, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                           contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:correctedInvoiceItemList,
                           invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList, receiverPartyId:toPartyId]" out-map="context"/>
            </then><else>
                <!-- Generacion de factura -->
                <service-call name="mchile.DTEServices.genera#Factura" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, activeOrgId:activeOrgId, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                      contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:correctedInvoiceItemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList, receiverPartyId:toPartyId, globalDiscount:globalDiscount, glosaDr:glosaDr]" out-map="context"/>
            </else></if>
        </actions>
    </service>

    <service verb="boletear" noun="Invoice">
        <description>
            Obtiene datos para llamar a método generar#Factura
        </description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="items"/>
            <parameter name="continua"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <!-- Obtención de descuento global, si es > 0 se aplica -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoiceField">
                <field-map field-name="invoiceId" from="invoiceId"/>
            </entity-find-one>
            <set field="globalDiscount" from="invoiceField.globalDiscount"/>
            <set field="glosaDr" from="invoiceField.glosaDr"/>

            <set field="listItems" type="List"/>
            <if condition="items">
                <set field="listItems" from="items instanceof List ? items : items.split(',') as List"/>
            </if>
            <iterate list="listItems" entry="detailItem">
                <set field="listProduct" from="detailItem instanceof List ? detailItem : detailItem.split('-') as List"/>
                <log message="Leyendo: $listProduct" level="warn"/>
                <!-- Con invoiceId se busca en invoiceItem y se actualiza porcentaje de descuento -->
                <entity-find-one entity-name="mantle.account.invoice.InvoiceItem" value-field="invoiceItemField">
                    <field-map field-name="invoiceId" from="invoiceId"/>
                    <field-map field-name="invoiceItemSeqId" value="${listProduct[0]}"/>
                </entity-find-one>
                <script>
                    long discount = Long.valueOf(listProduct[3]);
                </script>
                <set field="invoiceItemField.pctDiscount" from="discount"/>
                <entity-update value-field="invoiceItemField"/>
            </iterate>

            <service-call name="mantle.account.InvoiceServices.get#InvoiceDisplayInfo" in-map="[invoiceId:invoiceId]" out-map="context"/>

            <set field="paymentId" from="paymentApplicationList.paymentId[0]"/>

            <if condition="paymentId">
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <!-- Ajuste de forma de pago -->
                <set field="medioPago" value="OT"/>
                <set field="formaPago" value="3"/>
                <if condition="payment.paymentInstrumentEnumId == 'PiCreditCard'">
                    <set field="medioPago" value="TC"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheck'">
                    <set field="medioPago" value="CH"/>
                    <set field="formaPago" value="1"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheck'">
                    <set field="medioPago" value="CH"/>
                    <set field="formaPago" value="1"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiCompanyCheckDate'">
                    <set field="medioPago" value="CF"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiPersonalCheckDate'">
                    <set field="medioPago" value="CF"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiCash'">
                    <set field="medioPago" value="EF"/>
                    <set field="formaPago" value="1"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiLetra'">
                    <set field="medioPago" value="LT"/>
                    <set field="formaPago" value="2"/>
                </if>
                <if condition="payment.paymentInstrumentEnumId == 'PiBillingAccount'">
                    <set field="medioPago" value="PE"/>
                    <set field="formaPago" value="1"/>
                </if>
            </if>
            <if condition="!paymentId">
                <set field="medioPago" value="CH"/>
                <set field="formaPago" value="1"/>
            </if>

            <!-- Datos principales de invoice -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="invoice == null"><return error="true" message="Invoice not found with ID ${invoiceId}"/></if>
            <set field="partyId" from="invoice.toPartyId"/>
            <set field="toPartyId" from="invoice.toPartyId"/>

            <!-- Items de invoice -->
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <!-- email receptor -->
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:toPartyId]" out-map="context"/>

            <if condition="!emailAddress">
                    <log level="warn" message="Receptor no tiene dirección de correo"/>
            </if>
            <set field="username" from="emailAddress"/>
            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <set field="rutReceptor" value="66666666-6"/>
            <if condition="!partyField"><then>
                    <!--return error="true" message="Receptor no tiene RUT"/-->
                    <log level="warn" message="Receptor de boleta para invoice $invoiceId sin RUT"/>
                </then>
            <else>
                <set field="rutReceptor" from="partyField.idValue"/>
            </else></if>

            <!-- Datos para encontrar contacto -->
            <entity-find entity-name="mantle.party.contact.PartyContactMech" list="postalPcmList">
                <date-filter/><econdition field-name="partyId"/>
                <econdition field-name="contactMechPurposeId" value="PostalTax"/>
                <order-by field-name="-fromDate"/>
            </entity-find>

            <if condition="!postalPcmList">
                <return error="true" message="Receptor ${partyId} no tiene dirección postal para impuestos"/>
            </if>
            <set field="contactMechId" from="postalPcmList[0].contactMechId"/>


            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <if condition="!contactPostalAddressField">
                <log level="warn" message="Receptor no tiene dirección postal"/>
            </if>
            <set field="dirReceptor"/>
            <if condition="contactPostalAddressField">
                <set field="dirReceptor" from="contactPostalAddressField.address1"/>
                <script>
                    dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
                </script>
            </if>


            <set field="cmnaReceptor"/>
            <set field="ciudadReceptor"/>
            <set field="receptorContactId"/>
            <!-- Comuna -->
            <if condition="contactPostalAddressField">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="geoField">
                    <field-map field-name="geoId" from="contactPostalAddressField.stateProvinceGeoId"/>
                </entity-find-one>

                <set field="cmnaReceptor" from="geoField.geoName"/>
                <set field="ciudadReceptor" from="contactPostalAddressField.city"/>
                <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>
            </if>


            <!-- Party puede ser Organization o Persona -->
            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>

            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- email -->
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="contactMechList">
                    <econdition field-name="partyId" from="partyId"/>
                    <econdition field-name="contactMechPurposeId" value="PostalTax"/>
                    <econdition field-name="fromDate" operator="less-equals" from="ec.user.nowTimestamp"/>
                    <econdition field-name="thruDate" from="null"/>
                </entity-find>

                <if condition="!contactMechList">
                    <return error="true" message="Receptor no tiene dirección para impuestos"/>
                </if>
                <set field="contactMechId" from="contactMechList.contactMechId.first()"/>



                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <!-- Giro no es necesario en boleta -->
                <set field="giroReceptor" value=""/>
                <!-- Obtención de contacto para impuestos en organización -->
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                              in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
                <if condition="!contactOut.postalContactMechId">
                    <return error="true" message="Receptor no tiene contacto tributario asignado"/>
                </if>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                    <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
                </entity-find-one>
                <!-- Obtención de contacto en organización -->
                <if condition="!postalAddressField">
                    <return error="true" message="Nombre receptor no encontrado"/>
                </if>

                <set field="contactoReceptor" from="postalAddressField.toName"/>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- email -->
                <!--service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:fromPartyId]" out-map="context"/>
                <set field="contactMechId" from="emailAddress"/-->

                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>
            <!-- Recuperación de referencias -->
            <entity-find entity-name="mchile.dte.ReferenciaInvoiceAndFiscalCode" list="referenciaList">
                <econdition field-name="invoiceId" from="invoiceId"/>
                <order-by field-name="fiscalTaxDocumentTypeEnumId"/>
            </entity-find>

            !-- Para generar boleta se elimina item de IVA: no tienen productId -->
            <set field="correctedInvoiceItemList" from="[]"/>
            <iterate list="invoiceItemList" entry="itemField">
                <if condition="itemField.productId">
                    <log message="Item con productId: $itemField" level="warn"/>
                    <script>
                        correctedInvoiceItemList.add(itemField);
                    </script>
                </if>
            </iterate>

            <!-- TODO: Generación de Boletas -->
                <!-- Generacion de boletas -->
                <service-call name="mchile.DTEServices.genera#Boleta" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, activeOrgId:activeOrgId, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:correctedInvoiceItemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList, receiverPartyId:toPartyId, continua:continua]" out-map="context"/>
        </actions>
    </service>

    <service verb="activar" noun="Caf">
        <description>
            Activa CAF para ser usado
        </description>
        <in-parameters>
            <parameter name="cafId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.Caf" value-field="cafField" for-update="true"/>

            <if condition="!cafField">
                <return error="true" message="No existe CAF"/>
            </if>

            <set field="cafField.activo" value="true"/>
            <entity-update value-field="cafField"/>
        </actions>
    </service>

    <service verb="desactivar" noun="Caf">
        <description>
            Desactiva CAF para no ser usado
        </description>
        <in-parameters>
            <parameter name="cafId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.Caf" value-field="cafField" for-update="true"/>

            <if condition="!cafField">
                <return error="true" message="No existe CAF"/>
            </if>

            <set field="cafField.activo" value="" type="String"/>
            <entity-update value-field="cafField"/>
        </actions>
    </service>


    <service verb="preparaEnvio" noun="Documentos">
        <description>
            Obtiene datos para llamar a servicio enviar#Documento
        </description>
        <in-parameters>
            <parameter name="documentIds" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="libro" />
            <parameter name="boleta" />
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="enviadorS" value="${rutEnvia}"/>

            <set field="documentList" from="documentIds instanceof List ? documentIds : documentIds.split(',') as List"/>

            <if condition="!libro &amp;&amp; !boleta"><then>
                <service-call name="mchile.DTEServices.generaEnvio#Documentos" in-map="[recepS:recepS, activeOrgId:activeOrgId, enviadorS:enviadorS, documentList:documentList ]" out-map="context"/>
                <set field="documentoS" from="archivoEnvio"/>
                <service-call name="mchile.DTEServices.enviaSII#Documento" in-map="[compaS:emisorS, enviadorS:enviadorS , documentoS:documentoS, activeOrgId:activeOrgId]" out-map="context"/>
                <service-call name="mchile.DTEServices.marcarEnviados#Documentos" in-map="[trackId:trackId, documentList:documentList]"/>
            </then><else-if condition="boleta">
                <service-call name="mchile.DTEServices.generaEnvio#Boletas" in-map="[recepS:recepS, activeOrgId:activeOrgId, enviadorS:enviadorS, documentList:documentList ]" out-map="context"/>
                <set field="documentoS" from="archivoEnvio"/>
                <service-call name="mchile.DTEServices.enviaSII#Boleta" in-map="[compaS:emisorS, enviadorS:enviadorS , documentoS:documentoS, activeOrgId:activeOrgId]" out-map="context"/>
                <service-call name="mchile.DTEServices.marcarEnviados#Boletas" in-map="[trackId:trackId, documentList:documentList]"/>
            </else-if>
            </if>

            <if condition="libro">
                <iterate list="documentList" entry="libroEntry">
                    <set field="detailLibro" from="libroEntry instanceof List ? libroEntry : libroEntry.split('-') as List"/>
                    <set field="fiscalTaxDocumentId" from="detailLibro[0]"/>
                    <log level="warn" message="fiscalTaxDocumentId: $fiscalTaxDocumentId"/>
                    <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="libroField">
                        <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                    </entity-find-one>
                    <set field="xml" from="libroField.xml"/>

                    <service-call name="mchile.DTEServices.generaEnvio#Libro" in-map="[enviadorS:enviadorS, activeOrgId:activeOrgId, idS:'ID178', xml:xml ]" out-map="context"/>
                    <set field="documentoS" from="archivoEnvio"/>

                    <service-call name="mchile.DTEServices.enviaSII#Documento" in-map="[compaS:emisorS, enviadorS:enviadorS , documentoS:xml, activeOrgId:activeOrgId]" out-map="context"/>
                </iterate>
            </if>
        </actions>
    </service>


    <service verb="verificaEnSII" noun="Documento">
        <description>
            Verificación en el SII de DTE ya enviado
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="statusSii" required="true"/>
            <parameter name="salida" required="true"/>
        </out-parameters>
        <actions>

            <set field="statusSii" value=""/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>

            <service-call name="mchile.DTEServices.get#DteContent"
                          in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml']" out-map="context"/>

            <if condition="!content">
                <return error="true" message="DTE no existe"/>
            </if>
            <set field="envio" from="content" type="String"/>



            <set field="salida" value=""/>
            <set field="statusXML" value=""/>

            <script>
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.HashMap;


                import org.apache.xmlbeans.XmlOptions;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.xmlSchema.RESPUESTADocument;

                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                //DTEDocument doc = DTEDocument.Factory.parse(new FileInputStream(envio), opts);
                DTEDocument doc = DTEDocument.Factory.parse(contentData.getBinaryStream(), opts);
                ConexionSii con = new ConexionSii();

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                System.out.println("Usando certificado " + alias + " del archivo PKCS12 ");// + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);
                String enviadorS = Utilities.getRutFromCertificate(x509);

                System.out.println("Enviador: " + enviadorS + ", token: " + token);

                RESPUESTADocument resp = con.getEstadoDTECertificacion(enviadorS, doc.getDTE().getDocumento(), token);
                opts.setSavePrettyPrintIndent(2);
                opts.setSavePrettyPrint();
                resp.save(System.out, opts);

                logger.warn("------" + resp.toString())

                salida = resp.toString();
                statusXML = salida
                String status = "0"

                int inicio = statusXML.indexOf("&lt;SII:ESTADO&gt;");
                int fin = statusXML.indexOf("&lt;/SII:ESTADO&gt;");

                statusXML = statusXML.substring(inicio+12,fin);
                logger.warn("STATUS: " + statusXML);
                statusSii = statusXML

                inicio = salida.indexOf("&lt;SII:GLOSA_ERR&gt;");
                fin = salida.indexOf("&lt;/SII:GLOSA_ERR&gt;");
                salida = salida.substring(inicio+15, fin);

            </script>
            <set field="statusSii" from="statusXML"/>
        </actions>
    </service>

    <service verb="verificaEnSII" noun="Boleta">
        <description>
            Verificación en el SII de boleta usando rut empresa, tipo y folio
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="salida" required="true"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>

            <service-call name="mchile.DTEServices.get#DteContent"
                          in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml']" out-map="context"/>

            <if condition="!content">
                <return error="true" message="DTE no existe"/>
            </if>
            <set field="envio" from="content" type="String"/>

            <set field="salida" value=""/>
            <set field="statusXML" value=""/>

            <set field="tipo" value="39"/>
            <if condition="fiscalTaxDocumentTypeEnumId.equals('Ftdt-41')">
                <set field="tipo" value="41"/>
            </if>

            <!-- Recuperar folio -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="boletaField">
                <select-field field-name="fiscalTaxDocumentNumber"/>
                <select-field field-name="receiverPartyId"/>
                <select-field field-name="receiverPartyIdTypeEnumId"/>
            </entity-find-one>
            <set field="folio" from="boletaField.fiscalTaxDocumentNumber" type="String"/>
            <set field="receiverPartyId" from="boletaField.receiverPartyId"/>
            <set field="receiverPartyIdTypeEnumId" from="boletaField.receiverPartyIdTypeEnumId"/>
            <set field="invoiceId" from="boletaField.invoiceId"/>


            <!-- Recuperacion de rut receptor -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="receiverPartyId"/>
                <econdition field-name="partyIdTypeEnumId" from="receiverPartyIdTypeEnumId"/>
            </entity-find>
            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="No existe organización receptora definida en el sistema"/>
            </if>
            <set field="rutReceptor" from="partyIdentificationList.idValue[0]"/>

            <!-- Obtencion de monto desde invoiceId -->
            <set field="monto" value="0" type="String"/>
            <set field="fechaEmision" value="23-11-2020" type="String"/>

            <!-- Recuperacion de xml para parsear -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="contentField">
                <select-field field-name="contentData"/>
            </entity-find-one>
            <if condition="!contentField">
                <return error="true" message="Boleta no tiene XML generado"/>
            </if>
            <set field="xmlData" from="contentField.contentData"/>
            <script>
                import javax.xml.parsers.*;
                import org.w3c.dom.*;
                import java.text.DateFormat;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = null;
                Document document = null;

                builder = factory.newDocumentBuilder();
                document = builder.parse(xmlData.getBinaryStream());
                document.getDocumentElement().normalize();
                Element root = document.getDocumentElement();

                NodeList nList = document.getElementsByTagName("MntTotal");
                monto = nList.item(0).getTextContent();

                nList = document.getElementsByTagName("FchEmis");
                fechaEmision = nList.item(0).getTextContent();

                // Formateo de fecha desde YYYY-MM-DD a DD-MM-YYYY
                SimpleDateFormat sourceFmt = new SimpleDateFormat("yyyy-MM-dd");
                SimpleDateFormat targetFmt = new SimpleDateFormat("dd-MM-yyyy");

                Date date1 = sourceFmt.parse(fechaEmision);
                fechaEmision = targetFmt.format(date1);

            </script>

            <script>
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.HashMap;
                import org.apache.xmlbeans.XmlOptions;
                import cl.nic.dte.net.ConexionSiiBoleta;
                import cl.nic.dte.util.Utilities;
                import org.json.simple.JSONObject;

                ConexionSiiBoleta con = new ConexionSiiBoleta();

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                System.out.println("Usando certificado " + alias + " del archivo PKCS12 ");

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);
                String enviadorS = Utilities.getRutFromCertificate(x509);

                System.out.println("Folio: " + folio + ", token: " + token);

                // Ejecutar GET https://apicert.sii.cl/boleta.electronica.envio/{rut}-{dv}-{trackid}
                // Se obtiene objeto JSON
                JSONObject resp = con.getEstadoBOLETACertificacion(rutEmisor, rutReceptor, monto, fechaEmision, folio, tipo, token);

                //String estado = (String) recp.get("estado");

                salida = resp.toString();
                logger.warn("Salida JSON: " + salida);
            </script>
        </actions>
    </service>

    <service verb="verificaEnvioSII" noun="Boleta">
        <description>
            <!-- TODO -->
            Verificación en el SII de envio con rut y trackid
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="trackId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="salida" required="true"/>
        </out-parameters>
        <actions>
            <set field="statusSii" value=""/>

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>

            <service-call name="mchile.DTEServices.get#DteContent"
                          in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml']" out-map="context"/>

            <if condition="!content">
                <return error="true" message="DTE no existe"/>
            </if>
            <set field="envio" from="content" type="String"/>

            <set field="salida" value=""/>
            <set field="statusXML" value=""/>

            <script>
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.HashMap;
                import org.apache.xmlbeans.XmlOptions;
                import cl.nic.dte.net.ConexionSiiBoleta;
                import cl.nic.dte.util.Utilities;
                import org.json.simple.JSONObject;

                ConexionSiiBoleta con = new ConexionSiiBoleta();

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                System.out.println("Usando certificado " + alias + " del archivo PKCS12 ");

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                String token = con.getToken(pKey, x509);
                String enviadorS = Utilities.getRutFromCertificate(x509);

                System.out.println("Enviador: " + enviadorS + ", token: " + token);

                // Ejecutar GET https://apicert.sii.cl/boleta.electronica.envio/{rut}-{dv}-{trackid}
                // Se obtiene objeto JSON
                JSONObject resp = con.getEstadoEnvioBOLETACertificacion(rutEmisor, trackId, token);

                //String estado = (String) recp.get("estado");
                //trackId = String.valueOf(recp.get("trackid"));

                salida = resp.toString();
                logger.warn("Salida JSON: " + salida);
            </script>
        </actions>
    </service>

    <service verb="preLoad" noun="Dte">
        <description>
            Servicio para simplificar carga de Facturas vs Boletas discriminando por los dos grandes tipos antes de parsear el XML
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="invoiceId"/>
            <parameter name="xml" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="productMatch" default-value="false"/>
            <parameter name="fiscalTaxDocumentAggrEnumId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <actions>
            <if condition="fiscalTaxDocumentAggrEnumId == 'Ftdt-Boletas'"><then>
                <service-call name="mchile.DTEServices.load#Boleta" in-map="[xml:xml, pdf:pdf, activeOrgId:activeOrgId, productMatch:productMatch, organizationPartyId:organizationPartyId]"/>
            </then><else>
                <service-call name="mchile.DTEServices.load#Dte" in-map="[xml:xml, pdf:pdf, activeOrgId:activeOrgId, productMatch:productMatch, organizationPartyId:organizationPartyId, invoiceId:invoiceId]"/>
            </else>
            </if>
        </actions>
    </service>

    <service verb="load" noun="Boleta">
        <description>
            Carga boleta en XML recibida por la organización
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="invoiceId"/>
            <parameter name="xml" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="productMatch" default-value="false"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Carga de RUT de empresa -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rut" from="partyIdentificationList.idValue[0]"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rut]" out-map="salidaRut"/>
            <set field="rutNoDv" from="salidaRut.rut"/>

            <!-- Carga XML -->
            <set field="archivoXml" from="xml.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="fileRoot" from="pathRecibidas"/>

            <set field="contentLocationXml" value="${fileRoot}/${archivoXml}"/>
            <set field="docRrXml" from="ec.resource.getLocationReference(contentLocationXml)"/>
            <script>
                // Se guardan ambos archivos
                fileStream = xml.getInputStream()
                try { docRrXml.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <!-- Carga PDF -->
            <set field="archivoPdf" from="pdf.getName()"/>
            <if condition="archivoPdf">
                <set field="contentLocationPdf" value="${fileRoot}/${archivoPdf}"/>
                <set field="docRrPdf" from="ec.resource.getLocationReference(contentLocationPdf)"/>
                <script>
                    // Se guardan ambos archivos
                    fileStream = pdf.getInputStream()
                    try { docRrPdf.putStream(fileStream) } finally { fileStream.close() }
                </script>
            </if>

            <set field="rutEmisor" value=""/>
            <set field="rutReceptor" value=""/>
            <set field="razonSocialEmisor" value=""/>
            <set field="montoNeto" value="0"/>
            <set field="tipoDte" value=""/>
            <set field="folioDte" value=""/>
            <set field="fechaEmision" value=""/>
            <set field="totalIva" value="0" type="Long"/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.text.DateFormat;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia;
                import cl.sii.siiDte.boletas.BOLETADefType;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:siid", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                //namespaces.put("xsi:schemaLocation","http://www.sii.cl/SiiDte EnvioDTE_v10.xsd");
                //XmlOptions opts = new XmlOptions();
                //opts.setLoadSubstituteNamespaces(namespaces);

                XmlOptions opts = new XmlOptions();
                //opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);


                cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA boleta = EnvioBOLETADocument.Factory.parse(xml.getInputStream()).getEnvioBOLETA();
                // Caratula
                rutEmisor = boleta.setDTE.getCaratula().getRutEmisor().toString();
                rutReceptor = boleta.setDTE.getCaratula().getRutReceptor().toString();

                logger.warn("Emisor: " + rutEmisor + ", receptor: " + rutReceptor);


                //montoNeto = envio.setDTE.getDTEArray().toString();
                //cl.sii.siiDte.boletas.BOLETADefType[] boletaArray = envio.setDTE.getDTEArray();
                cl.sii.siiDte.boletas.BOLETADefType[] boletaArray = boleta.setDTE.getDTEArray();

                for (int i = 0; i &lt; boletaArray.size(); i++) {
                    // tipo de DTE
                    tipoDte = boletaArray[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().toString();
                    folioDte = boletaArray[i].getDocumento().getEncabezado().getIdDoc().getFolio().toString();
                    fechaEmision = boletaArray[i].getDocumento().getEncabezado().getIdDoc().getFchEmis().toString();
                    razonSocialEmisor = boletaArray[i].getDocumento().getEncabezado().getEmisor().getRznSocEmisor().toString();
                    // Totales
                    montoNeto = boletaArray[i].getDocumento().getEncabezado().getTotales().getMntNeto().toString();
                    montoTotal = boletaArray[i].getDocumento().getEncabezado().getTotales().getMntTotal().toString();
                    montoExento = boletaArray[i].getDocumento().getEncabezado().getTotales().getMntExe().toString();
                    //tasaIva = boletaArray[i].getDocumento().getEncabezado().getTotales().getTasaIVA().toString();
                    iva = boletaArray[i].getDocumento().getEncabezado().getTotales().getIVA().toString();

                    logger.warn("Leído: " + tipoDte + " - " + folioDte + " - " + fechaEmision + " - " + montoNeto + " - " + iva);
                    logger.warn("MontoExe: " + montoExento + "- Razon social: " + razonSocialEmisor);
                    DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = formatter.parse(fechaEmision);
                    logger.warn("Date: " + date);
                    Timestamp ts = new Timestamp(date.getTime());

            </script>
                    <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="receiverField">
                        <field-map field-name="idValue" from="rutReceptor"/>
                    </entity-find-one>
                    <set field="receiverPartyId" from="receiverField.partyId"/>

                    <if condition="receiverPartyId != organizationPartyId">
                        <return error="true" message="Receptor en Boleta no corresponde a receptor especificado ($receiverPartyId != $organizationPartyId)"/>
                    </if>

                    <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                    <econdition field-name="idValue" from="rutEmisor"/></entity-find>
                    <!-- TODO: Verificar caso en que emisor tenga varias razones sociales -->
                    <if condition="!partyIdentificationList.idValue[0]">
                        <return error="true" message="Organización no tiene RUT definido"/>
                    </if>
                    <set field="issuerPartyId" from="partyIdentificationList.partyId[0]"/>

                    <!-- Verificación de Razón Social en XML vs lo guardado en Moqui -->
                    <entity-find-one entity-name="mantle.party.Party" value-field="partyField">
                        <field-map field-name="partyId" from="issuerPartyId"/>
                    </entity-find-one>
                    <if condition="!partyField">
                        <return error="true" message="Receptor no existe"/>
                    </if>

                    <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

                    <set field="razonSocialMoqui"/>
                    <if condition="partyTypeEnumId == 'PtyOrganization'"><then>
                        <entity-find-one entity-name="mantle.party.Organization" value-field="partyOrgField">
                            <field-map field-name="partyId" from="issuerPartyId"/>
                        </entity-find-one>
                        <if condition="partyOrgField">
                            <set field="razonSocialMoqui" from="partyOrgField.organizationName"/>
                        </if>
                    </then><else>
                        <entity-find-one entity-name="mantle.party.Person" value-field="partyPersonField">
                            <field-map field-name="partyId" from="issuerPartyId"/>
                        </entity-find-one>
                        <script>
                            razonSocialMoqui = partyPersonField.firstName + " " + partyPersonField.lastName;
                        </script>
                    </else></if>

                    <if condition="(razonSocialEmisor != razonSocialMoqui) &amp;&amp; (partyTypeEnumId == 'PtyOrganization')" >
                        <return error="true" message="Razón social en XML no coindice con la registrada: $razonSocialEmisor != $razonSocialMoqui"/>
                    </if>

                    <service-call name="mchile.DTEServices.get#MoquiSIICode" in-map="[siiCode:tipoDte]" out-map="mapOut"/>
                    <set field="tipoDteEnumId" from="mapOut.fiscalTaxDocumentTypeEnumId"/>

                    <!-- Creación de orden de compra -->
                    <service-call name="mchile.PurchaseServices.create#Purchase" in-map="[vendorPartyId:issuerPartyId]" out-map="purchaseOutMap"/>
                    <set field="itemDescription" type="String"/>
                    <set field="quantity"/>
                    <set field="price"/>
                    <set field="indExe"/> <!-- 1 exento, 2 no facturable, 3 garantía dep. envases, 4 item no venta (guia despacho), 5 guia despacho, 6 no facturable) -->
                    <set field="productId"/>
                    <set field="pseudoId"/>
                    <set field="montoItem" value="0" type="Long"/>
                    <script>
                Detalle[] detalleArray = boletaArray[i].getDocumento().getDetalleArray();
                logger.warn("Recorriendo detalles:" + detalleArray.size());
                for (int j = 0; j &lt; detalleArray.size(); j++) {
                    // Adición de items a orden
                    logger.warn("-----------------------------------");
                    logger.warn("Leyendo línea detalle " + j + ",");
                    logger.warn("Indicador exento: " + detalleArray[j].getIndExe());
                    logger.warn("Nombre item: " + detalleArray[j].getNmbItem());
                    logger.warn("Cantidad: " + detalleArray[j].getQtyItem());
                    logger.warn("Precio: " + detalleArray[j].getPrcItem());
                    logger.warn("Monto: " + detalleArray[j].getMontoItem());
                    itemDescription = detalleArray[j].getNmbItem();
                    quantity = detalleArray[j].getQtyItem();
                    price = detalleArray[j].getPrcItem();

                    montoItem = detalleArray[j].getMontoItem();
                    // Si el indicador es no exento hay que agregar IVA como item aparte
                    // Se puede ir sumando el IVA y si es mayor que 0 crear el item
                    if(detalleArray[j].getIndExe() == null &amp;&amp; (tipoDte != '34') ) { // Item y documento afecto
                        logger.warn("Item afecto");
                        indExe = null;
                    } else { // Item exento o documento exento
                        logger.warn("Item exento");
                        indExe = 1;
                    }

                    </script>
                    <if condition="!indExe">
                        <set field="totalIva" from="(montoItem*0.19) + totalIva"/>
                    </if>
                    <if condition="!invoiceId">
                        <if condition="productMatch == 'false'"><then>
                            <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                            orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:itemDescription, quantity:quantity, unitAmount:price,
                                            itemTypeEnumId:'ItemExpOther']"/>
                        </then><else>
                            <!-- Se especificó buscar productos preexistentes, pueden haber hasta 5 códigos -->
                            <log message="Buscando código item" level="warn"/>
                            <script>
                                cl.sii.siiDte.DTEDefType.Documento.Detalle.CdgItem[] cdgItem = detalleArray[j].getCdgItemArray();
                                for (int k = 0; k &lt; cdgItem.size(); k++) {
                                logger.warn("Leyendo codigo "+k+", valor: " + cdgItem[k].getVlrCodigo());
                                pseudoId = cdgItem[k].getVlrCodigo();
                            </script>
                            <entity-find-one entity-name="mantle.product.Product" value-field="productField">
                                <field-map field-name="pseudoId" from="pseudoId"/>
                            </entity-find-one>
                            <if condition="productField"><then>
                                <set field="productId" from="productField.productId"/>
                                <log message="Agregando producto preexistente $productId, cantidad $quantity ***************"/>
                                <service-call name="mantle.order.OrderServices.add#OrderProductQuantity" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                            orderPartSeqId:purchaseOutMap.orderPartSeqId, productId:productId, description:itemDescription, quantity:quantity, unitAmount:price]"/>
                            </then><else>
                                <log level="warn" message="Producto $itemDescription no existe en el sistema, se creará como genérico"/>
                                <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                                orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:itemDescription, quantity:quantity, unitAmount:price,
                                                            itemTypeEnumId:'ItemExpOther']"/>
                            </else>
                            </if>
                        <script>
                            }
                        </script>
                        </else>
                        </if>
                    </if>
                <script>
                }

            </script>
            <log message="Total IVA: $totalIva" level="warn"/>
            <if condition="!invoiceId">
                <if condition="totalIva > 0">
                    <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                        orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:'Monto IVA Total', quantity:1, unitAmount:totalIva,
                                                        itemTypeEnumId:'ItemVatTax']"/>
                </if>
                <!-- Cierre de orden de compra -->
                <service-call name="mchile.PurchaseServices.place#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId,]" out-map="placePurchaseOut"/>

                <!-- Creación de Invoice -->
                <service-call name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice" in-map="[orderId:purchaseOutMap.orderId, orderPartSeqId:purchaseOutMap.orderPartSeqId]" out-map="invoiceOutMap"/>

                <service-call name="mchile.PurchaseServices.receive#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId,]" out-map="receiveOrderOut"/>
                <set field="invoiceId" from="invoiceOutMap.invoiceId"/>
            </if>

            <!-- Se guarda DTE recibido en la base de datos -->
            <set field="createMap" from="[issuerPartyId:issuerPartyId, issuerPartyIdTypeEnumId:'PtidNationalTaxId', fiscalTaxDocumentTypeEnumId:tipoDteEnumId, fiscalTaxDocumentNumber:folioDte,
                        receiverPartyId:activeOrgId, receiverPartyIdTypeEnumId:'PtidNationalTaxId', date:ts, invoiceId:invoiceId]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocument" out-map="mapOut" in-map="createMap"/>
            <!-- Se guarda contenido asociado a la DTE, todas las DTE que vienen en el mismo envío comparten el mismo XML -->
            <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:contentLocationXml, contentDate:ts, , contentData:xml.get()]]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <if condition="contentLocationPdf">
                <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:contentLocationPdf, contentDate:ts, , contentData:pdf.get()]]"/>
                <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            </if>
            <script>
                }
            </script>

        </actions>
    </service>

    <service verb="load" noun="Dte">
        <description>
            Carga DTE recibida al sistema y llama a servicio que crea orden de compra + invoice correspondiente
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="invoiceId"/>
            <parameter name="xml" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="productMatch" default-value="false"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Carga de RUT de empresa -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="organizationPartyId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización $organizationPartyId no tiene RUT definido"/>
            </if>
            <set field="rut" from="partyIdentificationList.idValue[0]"/>



            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rut]" out-map="salidaRut"/>
            <set field="rutNoDv" from="salidaRut.rut"/>

            <!-- Carga XML -->
            <set field="archivoXml" from="xml.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="fileRoot" from="pathRecibidas"/>


            <set field="contentLocationXml" value="${fileRoot}/${archivoXml}"/>
            <set field="docRrXml" from="ec.resource.getLocationReference(contentLocationXml)"/>
            <set field="bArrayXml"/>

            <script>
                fileStream = xml.getInputStream()
                try { docRrXml.putStream(fileStream) } finally { fileStream.close() }
            </script>
            <!--script>

                FileInputStream fisXml = null;
                byte[] bArrayXmlTmp = new byte[(int) xml.getSize()];
                try {
                    fisXml = xml.getInputStream();
                    fisXml.read(bArrayXmlTmp);
                    fisXml.close();
                } catch (IOException ioExp) {
                    ioExp.printStackTrace();
                }
                bArrayXml = bArrayXmlTmp;
            </script-->

            <!-- Carga PDF -->
            <set field="archivoPdf" from="pdf.getName()"/>
            <set field="bArray2"/>
            <if condition="archivoPdf">
                <set field="contentLocationPdf" value="${fileRoot}/${archivoPdf}"/>
                <set field="docRrPdf" from="ec.resource.getLocationReference(contentLocationPdf)"/>
                <script>
                    fileStream = pdf.getInputStream()
                    try { docRrPdf.putStream(fileStream) } finally { fileStream.close() }
                </script>
                <!-- Lectura y conversión a arreglo de bytes de PDF temporal -->
                <!--script>
                    FileInputStream fis = null;
                    byte[] bArray = new byte[(int) pdf.getSize()];
                    try {
                        fis = pdf.getInputStream();
                        fis.read(bArray);
                        fis.close();
                    } catch (IOException ioExp) {
                        ioExp.printStackTrace();
                    }
                    bArray2 = bArray;
                </script-->
            </if>
            <set field="rutEmisor" value=""/>
            <set field="rutReceptor" value=""/>
            <set field="razonSocialEmisor" value=""/>
            <set field="montoNeto" value="0"/>
            <set field="tipoDte" value=""/>
            <set field="folioDte" value=""/>
            <set field="fechaEmision" value=""/>
            <set field="totalIva" value="0" type="Long"/>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.text.DateFormat;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument.EnvioDTE;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDefType.Documento.Referencia;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:siid", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");

                XmlOptions opts = new XmlOptions();
                //opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setLoadAdditionalNamespaces(namespaces);


                EnvioDTE envio = EnvioDTEDocument.Factory.parse(xml.getInputStream()).getEnvioDTE();

                // Caratula
                rutEmisor = envio.setDTE.getCaratula().getRutEmisor().toString();
                rutReceptor = envio.setDTE.getCaratula().getRutReceptor().toString();

                // DTE
                montoNeto = envio.setDTE.getDTEArray().toString();
                cl.sii.siiDte.DTEDefType[] dteArray = envio.setDTE.getDTEArray();
                for (int i = 0; i &lt; dteArray.size(); i++) {
                    // tipo de DTE
                    tipoDte = dteArray[i].getDocumento().getEncabezado().getIdDoc().getTipoDTE().toString();
                    folioDte = dteArray[i].getDocumento().getEncabezado().getIdDoc().getFolio().toString();

                    logger.warn("folio: " + folioDte);

                    fechaEmision = dteArray[i].getDocumento().getEncabezado().getIdDoc().getFchEmis().toString();
                    razonSocialEmisor = dteArray[i].getDocumento().getEncabezado().getEmisor().getRznSoc().toString();
                    // Totales
                    montoNeto = dteArray[i].getDocumento().getEncabezado().getTotales().getMntNeto().toString();
                    montoTotal = dteArray[i].getDocumento().getEncabezado().getTotales().getMntTotal().toString();
                    montoExento = dteArray[i].getDocumento().getEncabezado().getTotales().getMntExe().toString();
                    tasaIva = dteArray[i].getDocumento().getEncabezado().getTotales().getTasaIVA().toString();
                    iva = dteArray[i].getDocumento().getEncabezado().getTotales().getIVA().toString();

                    // Datos receptor
                    rutReceptor = dteArray[i].getDocumento().getEncabezado().getReceptor().getRUTRecep().toString();

                    logger.warn("RUT Receptor: " + rutReceptor);

                    DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = formatter.parse(fechaEmision);
                    Timestamp ts = new Timestamp(date.getTime());

            </script>
                    <set field="receiveDte" value="true"/>

                    <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="receiverField">
                        <field-map field-name="idValue" from="rutReceptor"/>
                    </entity-find-one>
                    <if condition="!receiverField">
                        <log level="warn" message="RUT receptor ${rutReceptor} de folio folioDte no corresponde a org. activa"/>
                        <set field="receiveDte" value="false"/>
                    </if>


                    <if condition="receiveDte == 'true'">
                        <set field="receiverPartyId" from="receiverField.partyId"/>
                    <!--if condition="receiverPartyId != organizationPartyId">
                        <return error="true" message="Receptor en DTE no corresponde a receptor especificado ($receiverPartyId != $organizationPartyId)"/>
                    </if-->

                    <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                        <econdition field-name="idValue" from="rutEmisor"/>
                    </entity-find>
                    <!-- TODO: Verificar caso en que emisor tenga varias razones sociales -->
                    <if condition="!partyIdentificationList.idValue[0]">
                        <return error="true" message="No existe organización con RUT ${rutEmisor} definida en el sistema"/>
                    </if>
                    <set field="issuerPartyId" from="partyIdentificationList.partyId[0]"/>

                    <!-- Verificación de Razón Social en XML vs lo guardado en Moqui -->
                    <entity-find-one entity-name="mantle.party.Party" value-field="partyField">
                        <field-map field-name="partyId" from="issuerPartyId"/>
                    </entity-find-one>
                    <if condition="!partyField">
                        <return error="true" message="Receptor no existe"/>
                    </if>

                    <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

                    <set field="razonSocialMoqui"/>
                    <if condition="partyTypeEnumId == 'PtyOrganization'"><then>
                        <entity-find-one entity-name="mantle.party.Organization" value-field="partyOrgField">
                            <field-map field-name="partyId" from="issuerPartyId"/>
                        </entity-find-one>
                        <if condition="partyOrgField">
                            <set field="razonSocialMoqui" from="partyOrgField.organizationName"/>
                        </if>
                    </then><else>
                    <entity-find-one entity-name="mantle.party.Person" value-field="partyPersonField">
                        <field-map field-name="partyId" from="issuerPartyId"/>
                    </entity-find-one>
                        <script>
                            razonSocialMoqui = partyPersonField.firstName + " " + partyPersonField.lastName;
                        </script>
                    </else></if>

                    <if condition="(razonSocialEmisor != razonSocialMoqui) &amp;&amp; (partyTypeEnumId == 'PtyOrganization')" >
                        <return error="true" message="Razón social en XML no coincide con la registrada: $razonSocialEmisor != $razonSocialMoqui"/>
                    </if>

                    <service-call name="mchile.DTEServices.get#MoquiSIICode" in-map="[siiCode:tipoDte]" out-map="mapOut"/>
                    <set field="tipoDteEnumId" from="mapOut.fiscalTaxDocumentTypeEnumId"/>

                    <!-- Creación de orden de compra -->
                    <service-call name="mchile.PurchaseServices.create#Purchase" in-map="[vendorPartyId:issuerPartyId]" out-map="purchaseOutMap"/>
                    <set field="itemDescription" type="String"/>
                    <set field="quantity"/>
                    <set field="price"/>
                    <set field="indExe"/> <!-- 1 exento, 2 no facturable, 3 garantía dep. envases, 4 item no venta (guia despacho), 5 guia despacho, 6 no facturable) -->
                    <set field="productId"/>
                    <set field="pseudoId"/>
                    <set field="montoItem" value="0" type="Long"/>
                    <script>
                        Detalle[] detalleArray = dteArray[i].getDocumento().getDetalleArray();
                        logger.warn("Recorriendo detalles:" + detalleArray.size());
                        for (int j = 0; j &lt; detalleArray.size(); j++) {
                            // Adición de items a orden
                            logger.warn("-----------------------------------");
                            logger.warn("Leyendo línea detalle " + j + ",");
                            logger.warn("Indicador exento: " + detalleArray[j].getIndExe());
                            logger.warn("Nombre item: " + detalleArray[j].getNmbItem());
                            logger.warn("Cantidad: " + detalleArray[j].getQtyItem());
                            logger.warn("Precio: " + detalleArray[j].getPrcItem());
                            logger.warn("Monto: " + detalleArray[j].getMontoItem());
                            itemDescription = detalleArray[j].getNmbItem();
                            quantity = detalleArray[j].getQtyItem();
                            price = detalleArray[j].getPrcItem();

                            montoItem = detalleArray[j].getMontoItem();
                            // Si el indicador es no exento hay que agregar IVA como item aparte
                            // Se puede ir sumando el IVA y si es mayor que 0 crear el item
                            if(detalleArray[j].getIndExe() == null &amp;&amp; (tipoDte != '34') ) { // Item y documento afecto
                                logger.warn("Item afecto");
                                indExe = null;
                            } else { // Item exento o documento exento
                                logger.warn("Item exento");
                                indExe = 1;
                            }

                            </script>
                                <if condition="!indExe">
                                    <set field="totalIva" from="(montoItem*0.19) + totalIva"/>
                                </if>
                                <if condition="!invoiceId">
                                    <if condition="productMatch == 'false'"><then>
                                        <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                            orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:itemDescription, quantity:quantity, unitAmount:price,
                                            itemTypeEnumId:'ItemExpOther']"/>
                                    </then><else>
                                       <!-- Se especificó buscar productos preexistentes, pueden haber hasta 5 códigos -->
                                        <log message="Buscando código item" level="warn"/>
                                        <script>
                                            cl.sii.siiDte.DTEDefType.Documento.Detalle.CdgItem[] cdgItem = detalleArray[j].getCdgItemArray();
                                            for (int k = 0; k &lt; cdgItem.size(); k++) {
                                                logger.warn("Leyendo codigo "+k+", valor: " + cdgItem[k].getVlrCodigo());
                                                pseudoId = cdgItem[k].getVlrCodigo();
                                                </script>
                                                    <entity-find-one entity-name="mantle.product.Product" value-field="productField">
                                                        <field-map field-name="pseudoId" from="pseudoId"/>
                                                    </entity-find-one>
                                                    <if condition="productField"><then>
                                                        <set field="productId" from="productField.productId"/>
                                                        <service-call name="mantle.order.OrderServices.add#OrderProductQuantity" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                            orderPartSeqId:purchaseOutMap.orderPartSeqId, productId:productId, description:itemDescription, quantity:quantity, unitAmount:price]"/>
                                                        <log message="Agregando producto preexistente $productId, cantidad $quantity *************** orderId: $orderId"/>
                                                    </then><else>
                                                        <log level="warn" message="Producto $itemDescription no existe en el sistema, se creará como genérico"/>
                                                        <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                                orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:itemDescription, quantity:quantity, unitAmount:price,
                                                            itemTypeEnumId:'ItemExpOther']"/>
                                                    </else>
                                                    </if>
                                                <script>
                                            }
                                        </script>
                                    </else>
                                    </if>
                                </if>
                            <script>
                        }

                    </script>
                    <log message="Total IVA: $totalIva" level="warn"/>
                    <if condition="!invoiceId">
                        <if condition="totalIva > 0">
                            <service-call name="mantle.order.OrderServices.create#OrderItem" out-map="context" in-map="[orderId:purchaseOutMap.orderId,
                                                        orderPartSeqId:purchaseOutMap.orderPartSeqId, itemDescription:'Monto IVA Total', quantity:1, unitAmount:totalIva,
                                                        itemTypeEnumId:'ItemVatTax']"/>
                        </if>
                        <!-- Cierre de orden de compra -->

                        <service-call name="mchile.PurchaseServices.place#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId]" out-map="placePurchaseOut"/>

                        <service-call name="mantle.order.OrderServices.autoApprove#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId]" out-map="approveMap"/>

                        <!-- Creación de Invoice -->
                        <service-call name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice" in-map="[orderId:purchaseOutMap.orderId, orderPartSeqId:purchaseOutMap.orderPartSeqId]" out-map="invoiceOutMap"/>
                        <log level="warn" message="Invoice $invoiceOutMap.invoiceId creada para factura XML"/>


                        <service-call name="mchile.PurchaseServices.receive#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId,facilityId:facilityId, activeOrgId:activeOrgId]" out-map="receiveOrderOut"/>

                        <set field="invoiceId" from="invoiceOutMap.invoiceId"/>
                    </if>

                    <!-- Se guarda DTE recibido en la base de datos -->
                    <set field="createMap" from="[issuerPartyId:issuerPartyId, issuerPartyIdTypeEnumId:'PtidNationalTaxId', fiscalTaxDocumentTypeEnumId:tipoDteEnumId, fiscalTaxDocumentNumber:folioDte,
                        receiverPartyId:activeOrgId, receiverPartyIdTypeEnumId:'PtidNationalTaxId', date:ts, invoiceId:invoiceId]"/>
                    <service-call name="create#mchile.dte.FiscalTaxDocument" out-map="mapOut" in-map="createMap"/>
                    <!-- Se guarda contenido asociado a la DTE, todas las DTE que vienen en el mismo envío comparten el mismo XML -->
                    <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:contentLocationXml, contentDate:ts, contentData:xml.get()]"/>
                    <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
                    <if condition="contentLocationPdf">
                        <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:contentLocationPdf, contentDate:ts, contentData:pdf.get()]"/>
                        <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
                    </if>
                    </if>
            <script>
                }
            </script>

        </actions>
    </service>

    <service verb="marcarNoEnviado" noun="Documento">
        <description>
            Marca una DTE como no enviada al SII
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteField">
                <return error="true" message="No existe DTE especificada"/>
            </if>

            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>
            <entity-update value-field="dteField"/>
        </actions>
    </service>

    <service verb="marcarEnviado" noun="Documento">
        <description>
            Marca una DTE como ya enviada al SII
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteField">
                <return error="true" message="No existe DTE especificada"/>
            </if>

            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-Sent"/>
            <entity-update value-field="dteField"/>
        </actions>
    </service>

    <service verb="load" noun="Dt">
        <description>
            Carga documento tributario en papel recibido de tercero
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentNumber" required="true"/>
            <parameter name="invoiceId"/>
            <parameter name="pdf" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="issuerPartyId" required="true"/>
            <parameter name="amount" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="montoNeto"/>
            <parameter name="tasaImpuesto"/>
            <parameter name="tipoImpuesto"/>
            <!--parameter name="razonSocial"/-->
            <parameter name="fechaEmision" required="true"/>
            <parameter name="documentoAnulado"/>
            <parameter name="montoExento"/>
            <parameter name="montoIVARecuperable"/>
            <parameter name="codigoIVANoRecuperable"/>
            <parameter name="montoIVANoRecuperable"/>
            <parameter name="montoIVAUsoComun"/>
            <parameter name="codigoOtroImpuestoORetencion"/>
            <parameter name="tasaOtroImpuestoORetencion"/>
            <parameter name="montoOtroImpuestoORetencionConCredito"/>
            <parameter name="montoOtroImpuestoORetencionSinCredito"/>
            <parameter name="montoNetoActivoFijo"/>
            <parameter name="montoIVAActivoFijo"/>
            <parameter name="montoIVANoRetenido"/>
            <parameter name="codigoSucursal"/>
            <parameter name="notasDebitoCreditoFacturasCompra"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <set field="archivoPdf" from="pdf.getName()"/>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="mapOut"/>
            <set field="fileRoot" from="mapOut.pathRecibidas"/>

            <set field="contentLocationPdf" value="${fileRoot}/${archivoPdf}"/>

            <set field="docRrPdf" from="ec.resource.getLocationReference(contentLocationPdf)"/>

            <log message="directorio Pdf: $docRrPdf" level="warn"/>
            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.text.DateFormat;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;

                fileStream = pdf.getInputStream()
                try { docRrPdf.putStream(fileStream) } finally { fileStream.close() }

                DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                Date date = formatter.parse(fechaEmision);
                logger.warn("Date: " + date);
                Timestamp ts = new Timestamp(date.getTime());

            </script>

            <set field="purchaseOutMap" type="Map"/>
            <set field="invoiceOutMap" type="Map"/>

            <if condition="!invoiceId">
                <service-call name="mchile.PurchaseServices.create#Purchase" in-map="[vendorPartyId:issuerPartyId]" out-map="purchaseOutMap"/>
                <!-- TODO: ¿Faltan items? -->

                <!--service-call name="mchile.PurchaseServices.place#Order" in-map="[orderId:purchaseOutMap.orderId,
                                    orderPartSeqId:purchaseOutMap.orderPartSeqId,]" out-map="placePurchaseOut"/-->
                <service-call name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice" in-map="[orderId:purchaseOutMap.orderId, orderPartSeqId:purchaseOutMap.orderPartSeqId]" out-map="invoiceOutMap"/>
                <set field="invoiceId" from="invoiceOutMap.invoiceId"/>
            </if>

            <!-- Creación de FiscalTaxDocument -->
            <set field="createMap" from="[issuerPartyId:issuerPartyId, issuerPartyIdTypeEnumId:'PtidNationalTaxId', fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, fiscalTaxDocumentNumber:fiscalTaxDocumentNumber,
                        receiverPartyId:activeOrgId, receiverPartyIdTypeEnumId:'PtidNationalTaxId', date:ts, invoiceId:invoiceId]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocument" out-map="mapOut" in-map="createMap"/>

            <!-- Creación de contenido (PDF) -->
            <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:contentLocationXml, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <set field="createMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:contentLocationPdf, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Entrada en atributos -->
            <set field="updateMap" from="[fiscalTaxDocumentId:mapOut.fiscalTaxDocumentId, emailEmisor:emailEmisor, amount:amount,
                                         montoNeto:montoNeto, tasaImpuesto:tasaImpuesto, tipoImpuesto:tipoImpuesto, razonSocial:razonSocial, fechaEmision:fechaEmision, documentoAnulado:documentoAnulado,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable, codigoIVANoRecuperable:codigoIVANoRecuperable, montoIVANoRecuperable:montoIVANoRecuperable,
                                         montoIVAUsoComun:montoIVAUsoComun, codigoOtroImpuestoORetencion:codigoOtroImpuestoORetencion, tasaOtroImpuestoORetencion:tasaOtroImpuestoORetencion,
                                         montoOtroImpuestoORetencionConCredito:montoOtroImpuestoORetencionConCredito, montoOtroImpuestoORetencionSinCredito:montoOtroImpuestoORetencionSinCredito,
                                         montoNetoActivoFijo:montoNetoActivoFijo, montoIVAActivoFijo:montoIVAActivoFijo, montoIVANoRetenido:montoIVANoRetenido, codigoSucursal:codigoSucursal,
                                         notasDebitoCreditoFacturasCompra:notasDebitoCreditoFacturasCompra]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="updateMap"/>
            <!--return message="Orden de cobro ${purchaseOutMap.orderId} creada" error="false"/-->
        </actions>
    </service>

    <service verb="eliminar" noun="DTE">
        <description>
           Elimina registro de una DTE de cualquier tipo
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <script>
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.nio.file.Files;
            </script>

            <!-- Borrado de atributos -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentAttributes" value-field="attributesToDelete">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>
            <if condition="attributesToDelete">
                <entity-delete value-field="attributesToDelete"/>
            </if>
            <!-- Borrado de XML -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="xmlContentToDelete">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
            </entity-find-one>
            <if condition="xmlContentToDelete">
                <entity-delete value-field="xmlContentToDelete"/>
            </if>
            <!-- Borrado de PDF -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="pdfContentToDelete">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Pdf"/>
            </entity-find-one>
            <if condition="pdfContentToDelete">
                <entity-delete value-field="pdfContentToDelete"/>
            </if>
            <!-- Borrado de PDF Cedible -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="pdfContentToDelete">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-PdfCedible"/>
            </entity-find-one>
            <if condition="pdfContentToDelete">
                <entity-delete value-field="pdfContentToDelete"/>
            </if>
            <!-- Se verifica si la DTE es de un tercero -->

            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>



            <set field="issuerId" from="dteField.issuerPartyId"/>
            <if condition="issuerId == activeOrgId"><then>
                <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-NotIssued"/>
                <!-- TODO: Revisar que dejar receiverPartyID tal cual no afecte -->
                <!--set field="dteField.receiverPartyId" value=""/-->
                <entity-update value-field="dteField"/>
            </then><else><!-- DTE de tercero -->
                <!-- Si hay una aceptación creada debe borrarse -->
                <entity-find entity-name="mchile.dte.AceptacionDte" list="aceptacionList" for-update="true">
                    <econdition field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                </entity-find>
                <iterate list="aceptacionList" entry="aceptacionEntry">
                   <entity-find-one entity-name="mchile.dte.AceptacionDte" value-field="aceptacionToDelete">
                       <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                       <field-map field-name="aceptacionDteId" from="aceptacionEntry.aceptacionDteId"/>
                   </entity-find-one>
                    <entity-delete value-field="aceptacionToDelete"/>
                </iterate>
                <entity-delete value-field="dteField"/>
            </else></if>

        </actions>
    </service>

    <service verb="anular" noun="DTE">
        <description>
            Marca una DTE (inicialmente boleta) como anulada
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteField">
                <return error="true" message="Boleta a anular no existe"/>
            </if>

            <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-Cancelled"/>
            <entity-update value-field="dteField"/>
        </actions>
    </service>

    <service verb="get" noun="InvoiceFromReturn">
        <description>
            Obtiene datos para llamar a método generar#Factura para Nota de Crédito
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>
        </out-parameters>
        <actions>
            <!-- Se busca el orderId de la devolución -->
            <entity-find entity-name="mantle.order.return.ReturnHeaderDetail" list="returnHeaderList">
                <search-form-inputs/><select-field field-name="returnId,statusId,entryDate,facilityId,vendorPartyId,customerPartyId"/>
                <econditions combine="or">
                </econditions>
            </entity-find>

            <entity-find-one entity-name="mantle.order.return.ReturnItem" value-field="returnItemField">
                <select-field field-name="orderId"/>
                <select-field field-name="returnItemSeqId"/>
                <field-map field-name="returnId" from="returnId"/>
            </entity-find-one>

            <set field="orderId" from="returnItemField.orderId"/>
            <set field="returnItemSeqId" from="returnItemField.returnItemSeqId"/>

            <service-call name="mantle.order.OrderInfoServices.get#OrderDisplayInfo" in-map="[orderId:orderId]" out-map="invoiceList"/>

            <iterate list="invoiceList.invoiceIdSet" entry="invoiceEntry">
                <log message="Leyendo: ${invoiceEntry}" level="warn"/>
                <set field="invoiceId" from="invoiceEntry"/>
            </iterate>

        </actions>
    </service>

    <service verb="generar" noun="NotaCredito">
        <description>
            Obtiene datos para llamar a método generar#Factura para Nota de Crédito
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="items" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <if condition="!items">
                <return error="true" message="Deben existir items a corregir en Nota de Crédito"/>
            </if>
            <set field="listItems" from="items instanceof List ? items : items.split(',') as List" default-value="null"/>

            <iterate list="listItems" entry="detailItem">
                <set field="listProduct" from="detailItem instanceof List ? detailItem : detailItem.split('-') as List"/>
                <log message="Leyendo: $listProduct" level="warn"/>
                <entity-find-one entity-name="mantle.order.return.ReturnItem" value-field="returnItemField">
                    <field-map field-name="returnId" from="returnId"/>
                    <field-map field-name="returnItemSeqId" value="${listProduct[0]}"/>
                </entity-find-one>
                <script>
                    long discount = Long.valueOf(listProduct[3]);
                </script>
                <set field="returnItemField.pctDiscount" from="discount"/>
                <entity-update value-field="returnItemField"/>
            </iterate>

            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización emisora no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Datos de devolución, para armar nota de crédito -->
            <service-call name="mantle.order.ReturnServices.get#ReturnDisplayInfo" in-map="[returnId:returnId]" out-map="context"/>

            <!-- Recuperación de referencias -->
            <entity-find entity-name="mchile.dte.ReferenciaReturnAndFiscalCode" list="referenciaList">
                <econdition field-name="returnId" from="returnId"/>
                <order-by field-name="fiscalTaxDocumentTypeEnumId"/>
            </entity-find>

            <!-- Items de la devolución -->
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="returnId"/>
                <order-by field-name="returnItemSeqId"/>
            </entity-find>

            <!-- email receptor -->
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnField"/>

            <if condition="!returnField">
                <return error="true" message="No existe devolución"/>
            </if>
            <if condition="!returnField.customerPartyId">
                <return error="true" message="No existe tercero asociado a devolución"/>
            </if>

            <set field="partyId" from="returnField.customerPartyId"/>

            <set field="username"/>
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:returnField.customerPartyId]" out-map="context"/>
            <if condition="!emailAddress"><then>
                <!--return error="true" message="Receptor no tiene dirección de correo"/-->
                <log level="warn" message="Receptor no tiene dirección de correo"/>
            </then><else>
                <set field="username" from="emailAddress"/>
            </else></if>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>
            <set field="rutReceptor"/>
            <if condition="!partyField"><then>
                <log message="Receptor no tiene RUT" level="warn"/>
                <set field="rutReceptor" from="'66666666-6'"/>
            </then><else>
                <set field="rutReceptor" from="partyField.idValue"/>
            </else>
            </if>



            <!-- Datos para encontrar contacto -->

            <set field="contactMechId"/>

            <!-- Modificado para quedarse con la dirección válida a la fecha actual -->
            <!--entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="contactMechField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="contactMechPurposeId" value="PostalTax"/>
            </ientity-find-one-->

            <entity-find entity-name="mantle.party.contact.PartyContactMech" list="contactMechList">
                <econdition field-name="partyId" from="partyId"/>
                <econdition field-name="contactMechPurposeId" value="PostalTax"/>
                <econdition field-name="fromDate" operator="less-equals" from="ec.user.nowTimestamp"/>
                <econdition field-name="thruDate" from="null"/>
            </entity-find>

            <if condition="!contactMechList">
                <return error="true" message="Receptor no tiene dirección activa para impuestos"/>
            </if>

            <!--set field="contactMechId" from="contactMechField.contactMechId"/-->
            <set field="contactMechId" from="contactMechList.contactMechId.first()"/>


            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>

            <service-call name="mchile.GeoServices.get#ComunaFromGeoId" in-map="[stateProvinceGeoId:contactPostalAddressField.stateProvinceGeoId]" out-map="comunaOut"/>

            <set field="cmnaReceptor" from="comunaOut.comuna"/>

            <if condition="!cmnaReceptor">
                <return error="true" message="Receptor no tiene comuna/ciudad definida $contactMechId"/>
            </if>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <if condition="!partyField">
                <return error="true" message="Receptor no existe"/>
            </if>

            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>


            <set field="rznSocReceptor" value=""/>
            <set field="contactoReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>



            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>

                <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:partyId]" out-map="giroOutMap"/>
                <set field="giroReceptor" from="giroOutMap.description"/>
                <!--set field="giroReceptor" from="organizationField.giro"/-->

                <!-- Obtención de contacto para impuestos en organización -->
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                              in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
                <if condition="!contactOut.postalContactMechId">
                    <return error="true" message="Receptor no tiene contacto tributario asignado"/>
                </if>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                    <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
                </entity-find-one>
                <!-- Obtención de contacto en organización -->
                <if condition="!postalAddressField">
                    <return error="true" message="Nombre receptor no encontrado"/>
                </if>

                <set field="contactoReceptor" from="postalAddressField.toName"/>

            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>


            <!-- Generacion de nota de crédito -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, emisorS:emisorS, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:returnItemList,
                          invoiceId:invoiceId, returnId:returnId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList, activeOrgId:activeOrgId, receiverPartyId:partyId]" out-map="factMapOut"/>
            <set field="fiscalTaxDocumentId" from="factMapOut.fiscalTaxDocumentId"/>
        </actions>
    </service>

    <service verb="generar" noun="NotaDebito">
        <description>
            Obtiene datos para llamar a método generar#Factura para Nota de Debito
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="items" required="false"/>
            <parameter name="fiscalTaxDocumentTypeEnumId"/>
            <parameter name="codRef"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentIdNotaDebito"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>


            <service-call name="mantle.account.InvoiceServices.get#InvoiceDisplayInfo" in-map="[invoiceId:invoiceId]" out-map="context"/>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="factField"/>

            <if condition="!factField">
                <return error="true" message="No se encontró folio para factura ${fiscalTaxDocumentId}"/>
            </if>
            <set field="folioFact" from="factField.fiscalTaxDocumentNumber"/>

            <!-- TODO: Items a modificar a partir de lista de parámetros en referenciaList -->
            <if condition="items.length() != 0">
                <set field="itemList" from="items instanceof List ? items : items.split(',') as List" default-value="null"/>
            </if>

            <!-- email receptor -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoiceField"/>

            <if condition="!invoiceField">
                <return error="true" message="No existe invoice original"/>
            </if>
            <if condition="!invoiceField.toPartyId">
                <return error="true" message="No existe tercero asociado a invoice"/>
            </if>

            <set field="partyId" from="invoiceField.toPartyId"/>

            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:partyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo party: $partyId"/>
            </if>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfoList" out-map="contactOut"
            in-map="[partyId:partyId, getAll:true]"/>
            <set field="contactMechId"/>
            <iterate list="contactOut.postalAddressList" entry="postalAddList">
                <if condition="postalAddList.postalContactMechPurposeId == 'PostalTax'">
                    <set field="contactMechId" from="postalAddList.postalContactMechId"/>
                    <log message="Obteniendo dirección postal para impuestos: $contactMechId"/>
                </if>
            </iterate>

            <if condition="!contactMechId">
                <return error="true" message="Receptor no tiene dirección para impuestos"/>
            </if>

            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>
            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <!-- Comuna -->
            <entity-find-one entity-name="moqui.basic.Geo" value-field="geoField">
                <field-map field-name="geoId" from="contactPostalAddressField.stateProvinceGeoId"/>
            </entity-find-one>

            <if condition="!geoField">
                <return error="true" message="No existe comuna"/>
            </if>

            <set field="cmnaReceptor" from="geoField.geoName"/>
            <!-- Ciudad -->
            <set field="ciudadReceptor" from="contactPostalAddressField.city"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <if condition="!partyField">
                <return error="true" message="Receptor no existe"/>
            </if>

            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>

            <set field="rznSocReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>

            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <!--if condition="!organizationField.giro">
                    <return error="true" message="Receptor no tiene giro"/>
                </if-->
                <!--set field="giroReceptor" from="organizationField.giro"/-->
                <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:partyId]" out-map="giroOutMap"/>
                <set field="giroReceptor" from="giroOutMap.description"/>
                <!-- Obtención de contacto para impuestos en organización -->
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                              in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
                <if condition="!contactOut.postalContactMechId">
                    <return error="true" message="Receptor no tiene contacto tributario asignado"/>
                </if>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                    <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
                </entity-find-one>
                <!-- Obtención de contacto en organización -->
                <if condition="!postalAddressField">
                    <return error="true" message="Nombre receptor no encontrado"/>
                </if>

                <set field="contactoReceptor" from="postalAddressField.toName"/>


            </if>
            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>

            <!-- Recuperación de referencias para obtener folio -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="fiscalTaxField">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <entity-find entity-name="mchile.dte.ReferenciaNotaDebito" list="referenciaListOld">
                <econdition field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <order-by field-name="fiscalTaxDocumentTypeEnumId"/>
            </entity-find>


            <set field="referenciaList" type="NewMap" from="[]"/>
            <script>
                referenciaList.add(referenciaListOld);
            </script>

            <!-- Generacion de nota de crédito -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-56', emisorS:emisorS, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:itemList,
                          invoiceId:invoiceId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaListOld, activeOrgId:activeOrgId, receiverPartyId:partyId]" out-map="factMapOut"/>

            <set field="fiscalTaxDocumentIdNotaDebito" from="factMapOut.fiscalTaxDocumentId"/>

            <!-- TODO: Crear invoice para nuevo cargo o escribir en asiento contable? -->
            <!--auto-parameters entity-name="mantle.account.invoice.Invoice" include="nonpk"

                description
                currencyUomId
                acctgTransResultEnumId (AtrSuccess)
                invoiceTotal
                appliedPayment (debería ser 0)
                unpaidTotal
                productStoreId (WEB001)
                <service verb="create" noun="InvoiceItem">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <auto-parameters entity-name="mantle.account.invoice.InvoiceItem" include="nonpk">
                <exclude field-name="invoiceItemSeqId"/></auto-parameters>
        </in-parameters>
        <out-parameters><parameter name="invoiceItemSeqId"/></out-parameters>
        <actions>

                o usar adjust#Invoice?

            -->

            <!--service-call name="mantle.account.invoice.InvoiceServices.create#Invoice" in-map="context + [fromPartyId:fromPartyId, toPartyId:partyId]" out-map="context"/-->

        </actions>
    </service>

    <service verb="agregar" noun="Referencia">
        <description>
            Agrega una referencia para DTE (excepto Nota de Débito)
        </description>
        <in-parameters>
            <parameter name="returnId"/>
            <parameter name="invoiceId"/>
            <parameter name="shipmentId"/>
            <parameter name="folio" required="true"/>
            <parameter name="rutOtroContribuyente" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="idAdicional"/>
            <parameter name="fecha" required="true"/>
            <parameter name="codigoReferenciaEnumId" required="true"/>
            <parameter name="razonReferencia"/>
            <parameter name="esFactura" default-value="false"/>
        </in-parameters>
        <actions>
            <!-- Verificación de RUT -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutOtroContribuyente]"/>

            <!-- Inserción en tabla referenceReturn -->
            <if condition="esFactura == 'false'">
                <set field="createMap" from="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, returnId:returnId, razonReferencia:razonReferencia]"/>
                <service-call name="create#mchile.dte.ReferenciaReturn" out-map="context" in-map="createMap"/>
            </if>
            <if condition="esFactura == 'true'">
                <set field="createMap" from="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, invoiceId:invoiceId, razonReferencia:razonReferencia]"/>
                <service-call name="create#mchile.dte.ReferenciaInvoice" out-map="context" in-map="createMap"/>
            </if>
        </actions>
    </service>

    <service verb="agregar" noun="RefNotaDebito">
        <description>
            Agrega una referencia para asociar DTE con nota de débito
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId"/>
            <parameter name="folio" required="true"/>
            <parameter name="rutOtroContribuyente" required="true"/>
            <parameter name="idAdicional"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fecha" required="true"/>
            <parameter name="codigoReferenciaEnumId" required="true"/>
            <parameter name="razonReferencia"/>
        </in-parameters>
        <actions>
            <!-- Verificación de RUT -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutOtroContribuyente]"/>

            <!-- Inserción en tabla referenciaFactura -->
            <set field="createMap" from="[codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, fiscalTaxDocumentId:fiscalTaxDocumentId, razonReferencia:razonReferencia, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]"/>
            <service-call name="create#mchile.dte.ReferenciaNotaDebito" out-map="context" in-map="createMap"/>
        </actions>
    </service>

    <service verb="agregar" noun="RefShipment">
        <description>
            Agrega una referencia para asociar DTE shipment/guía de despacho
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId"/>
            <parameter name="folio" required="true"/>
            <parameter name="rutOtroContribuyente" required="true"/>
            <parameter name="idAdicional"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fecha" required="true"/>
            <parameter name="codigoReferenciaEnumId" required="true"/>
            <parameter name="razonReferencia"/>
            <parameter name="shipmentId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Verificación de RUT -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutOtroContribuyente]"/>

            <!-- Inserción en tabla referenciaShipment -->
            <set field="createMap" from="[shipmentId:shipmentId, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, rut:rutOtroContribuyente, idAdicional:idAdicional,
                                          folio:folio, fiscalTaxDocumentId:fiscalTaxDocumentId, razonReferencia:razonReferencia, fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]"/>
            <service-call name="create#mchile.dte.ReferenciaShipment" out-map="context" in-map="createMap"/>
        </actions>
    </service>

    <service verb="eliminar" noun="Referencia">
        <description>
            Eliminar referencia de una DTE
        </description>
        <in-parameters>
            <parameter name="referenciaReturnId"/>
            <parameter name="referenciaInvoiceId"/>
            <parameter name="referenciaFacturaId"/>
            <parameter name="referenciaNotaDebitoId"/>
            <parameter name="referenciaShipmentId"/>
        </in-parameters>
        <actions>
            <if condition="referenciaReturnId">
                <entity-find-one entity-name="mchile.dte.ReferenciaReturn" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
            <if condition="referenciaInvoiceId">
                <entity-find-one entity-name="mchile.dte.ReferenciaInvoice" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
            <if condition="referenciaFacturaId">
                <entity-find-one entity-name="mchile.dte.ReferenciaFactura" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
            <if condition="referenciaNotaDebitoId">
                <entity-find-one entity-name="mchile.dte.ReferenciaNotaDebito" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
            <if condition="referenciaShipmentId">
                <entity-find-one entity-name="mchile.dte.ReferenciaShipment" value-field="referenciaField" for-update="true"/>
                <entity-delete value-field="referenciaField"/>
            </if>
        </actions>
    </service>

    <service verb="enviar" noun="Aceptacion">
        <description>
            Envío de respuesta a emisor DTE.

            Esta implementación inicialmente responde a un solo envío
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fiscalTaxDocumentNumber" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <!-- No se envían aceptaciones por boletas -->
            <if condition="(fiscalTaxDocumentTypeEnumId == 'Ftdt-39') || (fiscalTaxDocumentTypeEnumId == 'Ftdt-41') || (fiscalTaxDocumentTypeEnumId == 'PvtBoleta')">
                 <return message="Boletas no requieren envío de aceptación" type="warning"/>
            </if>

            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="rutResponde" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperacion de parametros de la organizacion -->

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateAceptaciones"/>
            <set field="rutEnviador" from="rutEnviador"/>
            <set field="dirS" from="pathRecibidas"/>
            <set field="nmbContacto" from="nmbContacto"/>
            <set field="mailContacto" from="mailContacto"/>
            <set field="fonoContacto" from="fonoContacto"/>
            <set field="giro" from="giroEmisor"/>
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templateEnvio" from="templateEnvio"/>
            <set field="templateAceptaciones" from="templateAceptaciones"/>
            <set field="templateLibro" from="templateLibro"/>
            <set field="logo" from="logo"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>


            <!-- Se guarda aceptacion para obtener el aceptacionDteId -->
            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto, issuerPartyId:activeOrgId]"/>
            <service-call name="create#mchile.dte.AceptacionDte" out-map="context" in-map="createMap"/>

            <!-- Recuperación de datos para emitir aceptación -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="dteField">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
                <select-field field-name="contentLocation"/>
            </entity-find-one>

            <set field="envioRecibido" from="dteField.contentLocation"/>
            <set field="idS" value="" type="String"/>
            <script>
               idS =  (int) (System.currentTimeMillis() / 1000L)
            </script>
            <set field="nmbEnvio" value=""/>
            <set field="fchRecep" value=""/>
            <set field="rutEmisor" value=""/>

            <set field="rutReceptor" value=""/>
            <set field="estadoRecepEnvEnumId" value=""/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.io.FileOutputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;
                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlOptions;
                import org.apache.xmlbeans.XmlCursor;
                import org.w3c.dom.Document;
                import org.w3c.dom.Element;
                import org.w3c.dom.NodeList;
                import javax.xml.crypto.dsig.*;
                import javax.xml.transform.*;
                import javax.xml.crypto.dsig.dom.DOMValidateContext;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.RespuestaDTEDocument;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.Caratula;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.RecepcionEnvio;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.RecepcionEnvio.RecepcionDTE;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.ResultadoDTE;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                import javax.xml.parsers.DocumentBuilder;
                import javax.xml.parsers.DocumentBuilderFactory;
                import javax.xml.parsers.ParserConfigurationException;
                javax.xml.crypto.dsig.dom.DOMValidateContext;
                javax.xml.crypto.dsig.XMLSignatureException;
                import org.xml.sax.SAXException;

                DTEDocument doc;
                X509Certificate cert;
                PrivateKey key;

                EnvioDTEDocument envio = null;
                try {
                    envio = EnvioDTEDocument.Factory.parse(new FileInputStream(envioRecibido));
                } catch (Exception e) {
                    logger.warn("Error al cargar archivo de envio recepcionado: " + envioRecibido, e);
                    return;
                }
                VerifyResult resl = envio.verifyXML();
                boolean envioEsquemaOK = true;
                boolean envioFirmaOK = true;
                String errorEsquema = "";
                String errorFirma = "";

                if( !resl.isOk()) {
                    logger.error("Envio recibido: Estructura XML incorrecta: " + resl.getMessage());
                    errorEsquema = resl.getMessage();
                    envioEsquemaOK = false;
                } else {
                    logger.warn("Envio recibido: Estructura XML OK");
                }
                // Revisar
                resl = envio.verifySignature();
                if( !resl.isOk()) {
                    logger.error("Envio recibido: firma XML incorrecta");
                } else {
                    logger.debug("Envio recibido: firma XML OK");
                }
                boolean envioRutOK = true;

                String rutContribuyente = rutResponde;

                if(!rutContribuyente.equals(envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor())) {
                    logger.error("Error: carátula de envioDTE recibido dice que rut de receptor es: " + envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor() +
                                " el cual es distinto al de nuestra empresa: " + rutContribuyente);
                    envioRutOK = false;
                }

                //Certificado cert = new Certificado();
                //CertificadoLlave certLlave = cert.getCertificado(certS, passS);
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                ArrayList&lt;RecepcionDTE&gt; arrRecepcionDTE = new ArrayList&lt;RecepcionDTE&gt;();
                ArrayList&lt;ResultadoDTE&gt; resultados = new ArrayList&lt;ResultadoDTE&gt;();
                RecepcionEnvio rre = RecepcionEnvio.Factory.newInstance();

                File f = new File(envioRecibido);
                rre.setNmbEnvio(f.getName());
                rre.xsetFchRecep(FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date())));
                rre.setCodEnvio(idS);
                rre.setEnvioDTEID(envio.getEnvioDTE().getSetDTE().getID());
                rre.setEstadoRecepEnv(0);
                rre.setRecepEnvGlosa("Envio Recibido Conforme");

                fchRecep = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date())).toString()
                envioDteId = envio.getEnvioDTE().getSetDTE().getID()
                estadoRecepEnvEnumId = 0

                if (envioFirmaOK &amp;&amp; envioEsquemaOK &amp;&amp; envioRutOK ) {
                    X509Certificate x509 = XMLUtil.getCertificate(envio.getEnvioDTE().getSignature());
                    logger.warn("Firmado por: " + x509.getSubjectX500Principal().getName());

                    for (DTEDefType dte : envio.getEnvioDTE().getSetDTE().getDTEArray()) {

                        x509 = XMLUtil.getCertificate(dte.getSignature());
                        logger.warn("DTE ID " + dte.getDocumento().getID() + " Firmado por: " + x509.getSubjectX500Principal().getName());
                        logger.warn("Por almacenar en " + dirS);
                        String nombreDTE = dirS + "dte-"+dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor()+"-"+dte.getDocumento().getEncabezado().getIdDoc().getFolio()+".xml";
                        rutEmisor = dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor()
                        try {
                            FileOutputStream fout = new FileOutputStream(nombreDTE);
                            fout.write(dte.getBytes());
                            fout.flush();
                            fout.close();
                        } catch (FileNotFoundException e) {
                            logger.warn("Error al guardar DTE en path " + nombreDTE, e);
                            return
                        } catch (IOException e) {
                            logger.warn("Error al escribir DTE en path " + nombreDTE, e);
                            return
                        }
                        logger.warn("Grabado DTE recibido en PATH: " + nombreDTE);

                        boolean firmaOKDTE = true;
                        if(!resl.isOk()) {
                            logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML Incorrecta: " + resl.getMessage());
                            firmaOKDTE = false;
                        } else {
                            logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML OK");
                        }
                        boolean rutDTEOK = true;

                        if(!rutContribuyente.equals(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep())) {
                            logger.warn("Error, DTE id: " + dte.getDocumento().getID() + " folio: " + dte.getDocumento().getEncabezado().getIdDoc().getFolio()
                                        + " tipo: " + dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE().toString() + " contiene RUT de receptor ["
                                        + dte.getDocumento().getEncabezado().getReceptor().getRUTRecep() + "] que no corresponde a nuestra empresa [" + rutContribuyente + "]");
                            rutDTEOK = false;
                        }
                        // RecepcionDTE
                        RecepcionDTE rDTE = RecepcionDTE.Factory.newInstance();
                        rDTE.setFolio(dte.getDocumento().getEncabezado().getIdDoc().getFolio());
                        rDTE.setTipoDTE(dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE());
                        rDTE.setFchEmis(dte.getDocumento().getEncabezado().getIdDoc().getFchEmis());
                        rDTE.setRUTEmisor(dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor());
                        rDTE.setRUTRecep(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep());
                        rDTE.setMntTotal(dte.getDocumento().getEncabezado().getTotales().getMntTotal());
                        /*
                            0 - Envío recibido conforme
                            1 - Rechazado, error de schema
                            2 - Rechazado, error de firma
                            3 - Rechazado, RUT receptor no corresponde
                            90 - Rechazado, archivo repetido
                            91 - Rechazado, archivo ilegible
                            99 - Rechazado, otros
                        */
                        //rDTE.setEstadoRecepDTE(0);
                        //rDTE.setRecepDTEGlosa("Documentos recibidos");

                        ResultadoDTE resDTE = ResultadoDTE.Factory.newInstance();
                        resDTE.setFolio(dte.getDocumento().getEncabezado().getIdDoc().getFolio());
                        resDTE.setTipoDTE(dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE());
                        resDTE.setFchEmis(dte.getDocumento().getEncabezado().getIdDoc().getFchEmis());
                        resDTE.setRUTEmisor(dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor());
                        resDTE.setRUTRecep(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep());
                        resDTE.setMntTotal(dte.getDocumento().getEncabezado().getTotales().getMntTotal());
                        // se asocia el ID del envio recepcionado en nuestra BD
                        resDTE.setCodEnvio(new Long(idS));

                        if( firmaOKDTE &amp;&amp; rutDTEOK) {
                            estadoDTE = "DOK";
                            rDTE.setEstadoRecepDTE(0);
                            rDTE.setRecepDTEGlosa("DTE Recibido");
                        } else {
                            if( !firmaOKDTE) {
                                resDTE.setEstadoDTE(new Integer(2));
                                resDTE.setEstadoDTEGlosa("DTE rechazado - Error de Firma");
                                estadoRecepEnvEnumId = 2
                                logger.warn("DTE Rechazado - Error de Firma");
                                rDTE.setEstadoRecepDTE(new Integer(1));
                                rDTE.setRecepDTEGlosa("DTE No Recibido - Error de Firma");
                                logger.warn("DTE No Recibido - Error de Firma");
                            } else if(!rutDTEK) {
                                resDTE.setEstadoDTE(new Integer(2));
                                resDTE.setEstadoDTEGlosa("DTE rechazado - Error en RUT Receptor");
                                logger.warn("DTE rechazado - Error en RUT Receptor");

                                rDTE.setEstadoRecepDTE(new Integer(3));
                                rDTE.setRecepDTEGlosa("DTE No Recibido - Error en RUT Receptor");
                                logger.warn("DTE No Recibido - Error en RUT Receptor");
                            }
                        }
                        resultados.add(resDTE);
                        arrRecepcionDTE.add(rDTE);
                    }
                } else {
                    logger.warn("Envio no cumple con la firma o con esquema XML");

                    // Revisar si es problema de esquema o de firma
                    if(!envioEsquemaOK) {
                        rre.setEstadoRecepEnv(1);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - Error de schema: " + errorEsquema);
                    } else if (!envioFirmaOK) {
                        rre.setEstadoRecepEnv(2);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - Error de Firma: " + errorFirma);
                    } else if (!envioRutOK) {
                        rre.setEstadoRecepEnv(3);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - RUT receptor no corresponde");
                    }
                    logger.warn("Glosa respuesta envío: " + rre.getRecepEnvGlosa());
                }
                Caratula caratula = Caratula.Factory.newInstance();
                Resultado resultado = Resultado.Factory.newInstance();

                if (arrRecepcionDTE.size > 0) {
                    RecepcionDTE[] resultadoDTE = new RecepcionDTE[arrRecepcionDTE.size()];
                    for(int i = 0; i &lt; arrRecepcionDTE.size(); i++)
                        resultadoDTE[i] = arrRecepcionDTE.get(i);
                    rre.setRecepcionDTEArray(resultadoDTE);
                    caratula.setNroDetalles(arrRecepcionDTE.size());
                } else {
                    if (resultados.size() > 0) {
                        ResultadoDTE[] resultadoDTE = new ResultadoDTE[resultados.size()];
                        for (int i = 0; i &lt; resultados.size(); i++)
                            resultadoDTE[i] = resultados.get(i);
                        resultado.setResultadoDTEArray(resultadoDTE);
                    } else {
                        caratula.setNroDetalles(1);
                    }
                }
                caratula.setRutResponde(rutContribuyente);
                caratula.setRutRecibe(rutEmisor);
                caratula.setIdRespuesta(new Long(idS));
                caratula.setVersion(new BigDecimal("1.0"));
                // Datos en plantilla?
                caratula.setNmbContacto(nmbContacto);
                caratula.setMailContacto(mailContacto);
                caratula.setFonoContacto(fonoContacto);

                resultado.setCaratula(caratula);
                resultado.setID("RESP-" + idS);

                if(!rre.isNil()) {
                    logger.warn("Se responde aceptacion");
                    RecepcionEnvio[] reArray = new RecepcionEnvio[1];
                    reArray[0] = rre;
                    resultado.setRecepcionEnvioArray(reArray);
                }
                RespuestaDTE respDTE = RespuestaDTE.Factory.newInstance();
                respDTE.setResultado(resultado);
                respDTE.setVersion(new BigDecimal("1.0"));

                RespuestaDTEDocument respuesta = RespuestaDTEDocument.Factory.newInstance();
                respuesta.setRespuestaDTE(respDTE);

                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("http://www.sii.cl/SiiDte","");

                XmlOptions opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);
                opts.setSaveSuggestedPrefixes(namespaces);
                opts.setCharacterEncoding("ISO-8859-1");

                // leo certificado y llave privada del archivo pkcs12
                ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias2 = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias2 + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                XmlCursor cursor = respuesta.newCursor();
                if(cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte RespuestaEnvioDTE_v10.xsd");
                }
                try {
                    respuesta = RespuestaDTEDocument.Factory.parse(respuesta.newInputStream(opts));
                } catch (Exception e) {
                    logger.warn("Error al obtener respuesta con formato antes de firmar", e);
                }
                uri = "#RESP-10000";
                try {
                    logger.warn("Respuesta antes de firmar: " + new String(respuesta.getBytes()));
                    //respuesta.sign(certLlave.getPkey(), certLlave.getX509());
                    respuesta.sign(pKey, x509);
                    //respDTE.sign(pKey, x509);
                } catch (Exception e) {
                    logger.error("Error al firmar respuesta" + e.printStackTrace());
                    return
                }

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                uri = "";

                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = "#" + uri;

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out2 = new ByteArrayOutputStream();
                //doc.save(new File(resultS + "RESP-sinfirma.xml"), opts);
                //doc.save(out2, opts);
                logger.warn("Escribiendo " + resultS + "RESP-" + idS + ".xml");
                respuesta.save(new File(resultS + "RESP-" + idS + ".xml"), opts);
                respuesta.save(out2, opts);
                logger.warn("Escribiendo archivo temporal para attachment" + resultS + "RESP.xml");
                respuesta.save(new File(resultS + "RESP.xml"), opts);
                ByteArrayOutputStream outTemp = new ByteArrayOutputStream();
                respuesta.save(outTemp, opts);
            </script>

            <!-- Recuperación del email de destinatario de aceptación -->
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyAceptacionField">
                <field-map field-name="idValue" from="rutEmisor"/>
            </entity-find-one>

            <if condition="!partyAceptacionField">
                <return error="true" message="Organización a enviar aceptación no tiene RUT definido"/>
            </if>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                          in-map="[partyId:partyAceptacionField.partyId, postalContactMechPurposeId:'PostalTax']"/>
            <if condition="!contactOut.postalContactMechId">
                <return error="true" message="Receptor de aceptación no tiene contacto tributario asignado"/>
            </if>

            <!--return error="true" message="PPP: $rutEmisor, partyId: $partyAceptacionField.partyId - $contactOut.emailAddress"/-->

            <set field="emailAceptacion" from="contactOut.emailAddress"/>

            <!-- Recuperación de algunos datos desde FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="fiscalTaxDocumentField">
                <field-map field-name="fiscalTaxDocumentId"/>
            </entity-find-one>
            <set field="folioAceptacion" from="fiscalTaxDocumentField.fiscalTaxDocumentNumber"/>


            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto]"/>
            <service-call name="create#mchile.dte.AceptacionDte" out-map="context" in-map="createMap"/>

            <entity-find-one entity-name="mchile.dte.AceptacionDte" value-field="aceptacionField" for-update="true"/>
            <!--set field="aceptacionField.nmbEnvio" from="fiscalTaxDocumentField.razonSocial" type="String"/-->
            <set field="aceptacionField.fchRecep" from="fchRecep" type="String"/>
            <set field="aceptacionField.codEnvio" from="idS" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.envioDteId" value="RESP-${idS}" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.rutReceptor" from="rutResponde" type="String"/>
            <set field="aceptacionField.estadoRecepEnvEnumId" from="estadoRecepEnvEnumId" type="String"/>
            <set field="aceptacionField.nroDetalles" value="1" type="Integer"/>
            <set field="aceptacionField.xml" value="${resultS}RESP-${idS}.xml" type="String"/>
            <entity-update value-field="aceptacionField"/>

            <!--set field="bodyParameters" from="[fiscalTaxDocumentId:folioAceptacion, nmbContacto:nmbContacto, mailContacto:mailContacto, fonoContacto:fonoContacto]"/>
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="fiscalTaxDocumentId" from="folioAceptacion"/>
                <field-map field-name="emailTypeEnumId" from="emailTypeEnumId"/>
                <field-map field-name="toAddresses" value="cherrera@moit.cl"/--><!-- Prueba, no usar en produccion -->
                <!--field-map field-name="toAddresses" from="emailAceptacion"/>
                <field-map field-name="emailTemplateId" value="Aceptacion"/>
                <field-map field-name="bodyParameters" from="bodyParameters"/>
            </service-call-->

        </actions>
    </service>

    <service verb="recibir" noun="Mercaderia">
        <description>
            Envío de recepción mercaderia DTE.

            Esta implementación inicialmente responde a un solo envío
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fiscalTaxDocumentNumber" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <!-- No se envían aceptaciones por boletas -->
            <if condition="(fiscalTaxDocumentTypeEnumId == 'Ftdt-39') || (fiscalTaxDocumentTypeEnumId == 'Ftdt-41') || (fiscalTaxDocumentTypeEnumId == 'PvtBoleta')">
                <return message="Boletas no requieren envío de aceptación" type="warning"/>
            </if>


            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="rutResponde" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperacion de parametros de la organizacion -->

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateAceptaciones"/>
            <set field="rutEnviador" from="rutEnvia"/>
            <set field="dirS" from="pathRecibidas"/>
            <set field="nmbContacto" from="nmbContacto"/>
            <set field="mailContacto" from="mailContacto"/>
            <set field="fonoContacto" from="fonoContacto"/>
            <set field="giro" from="giroEmisor"/>
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templateEnvio" from="templateEnvio"/>
            <set field="templateAceptaciones" from="templateAceptaciones"/>
            <set field="templateLibro" from="templateLibro"/>
            <set field="logo" from="logo"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>


            <!-- Se guarda aceptacion para obtener el aceptacionDteId -->
            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto, issuerPartyId:activeOrgId]"/>
            <service-call name="create#mchile.dte.AceptacionDte" out-map="context" in-map="createMap"/>

            <!-- Recuperación de datos para emitir aceptación -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="dteField">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
                <select-field field-name="contentLocation"/>
            </entity-find-one>

            <set field="envioRecibido" from="dteField.contentLocation"/>
            <set field="idS" value="" type="String"/>
            <script>
                idS =  (int) (System.currentTimeMillis() / 1000L)
            </script>
            <set field="nmbEnvio" value=""/>
            <set field="fchRecep" value=""/>
            <set field="rutEmisor" value=""/>

            <set field="rutReceptor" value=""/>
            <set field="estadoRecepEnvEnumId" value=""/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.io.FileOutputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;
                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlOptions;
                import org.apache.xmlbeans.XmlCursor;
                import org.w3c.dom.Document;
                import org.w3c.dom.Element;
                import org.w3c.dom.NodeList;
                import javax.xml.crypto.dsig.*;
                import javax.xml.transform.*;
                import javax.xml.crypto.dsig.dom.DOMValidateContext;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.EnvioRecibosDocument;
                import cl.sii.siiDte.ReciboDefType;
                import cl.sii.siiDte.ReciboDocument;
                import cl.sii.siiDte.EnvioRecibosDocument.EnvioRecibos;
                import cl.sii.siiDte.EnvioRecibosDocument.EnvioRecibos.SetRecibos;
                import cl.sii.siiDte.ReciboDefType.DocumentoRecibo;


                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                import javax.xml.parsers.DocumentBuilder;
                import javax.xml.parsers.DocumentBuilderFactory;
                import javax.xml.parsers.ParserConfigurationException;
                javax.xml.crypto.dsig.dom.DOMValidateContext;
                javax.xml.crypto.dsig.XMLSignatureException;
                import org.xml.sax.SAXException;

                DTEDocument doc;
                X509Certificate cert;
                PrivateKey key;

                EnvioDTEDocument envio = null;
                try {
                    envio = EnvioDTEDocument.Factory.parse(new FileInputStream(envioRecibido));
                } catch (Exception e) {
                    logger.warn("Error al cargar archivo de envio recepcionado: " + envioRecibido, e);
                    return;
                }
                VerifyResult resl = envio.verifyXML();
                boolean envioEsquemaOK = true;
                boolean envioFirmaOK = true;
                String errorEsquema = "";
                String errorFirma = "";

                if( !resl.isOk()) {
                    logger.error("Envio recibido: Estructura XML incorrecta: " + resl.getMessage());
                    errorEsquema = resl.getMessage();
                    envioEsquemaOK = false;
                } else {
                    logger.warn("Envio recibido: Estructura XML OK");
                }
                // Revisar
                resl = envio.verifySignature();
                if( !resl.isOk()) {
                    logger.error("Envio recibido: firma XML incorrecta");
                    firmaOKDTE = false;
                } else {
                    logger.debug("Envio recibido: firma XML OK");
                }
                boolean envioRutOK = true;

                String rutContribuyente = rutResponde;
                rutEmisor = envio.getEnvioDTE().getSetDTE().getCaratula().getRutEmisor();

                if(!rutContribuyente.equals(envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor())) {
                    logger.error("Error: carátula de envioDTE recibido dice que rut de receptor es: " + envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor() +
                    " el cual es distinto al de nuestra empresa: " + rutContribuyente);
                    envioRutOK = false;
                }

                //Certificado cert = new Certificado();
                //CertificadoLlave certLlave = cert.getCertificado(certS, passS);
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                ReciboDocument recibo = ReciboDocument.Factory.newInstance();
                ReciboDefType rec = recibo.addNewRecibo();

                EnvioRecibosDocument erd = EnvioRecibosDocument.Factory.newInstance();
                EnvioRecibos er = EnvioRecibos.Factory.newInstance();
                er.setVersion(new BigDecimal("1.0"));

                cl.sii.siiDte.EnvioRecibosDocument.EnvioRecibos.SetRecibos.Caratula caratula = cl.sii.siiDte.EnvioRecibosDocument.EnvioRecibos.SetRecibos.Caratula.Factory
                .newInstance();
                caratula.setRutResponde(rutContribuyente);
                caratula.setRutRecibe(rutEmisor);
                //caratula.setIdRespuesta(new Long(idS));
                caratula.setVersion(new BigDecimal("1.0"));
                // Datos en plantilla?
                caratula.setNmbContacto(nmbContacto);
                caratula.setMailContacto(mailContacto);
                caratula.setFonoContacto(fonoContacto);

                Calendar cal = Calendar.getInstance();
                caratula.setTmstFirmaEnv(cal);


                SetRecibos sr = SetRecibos.Factory.newInstance();
                sr.setCaratula(caratula);
                sr.setID("SRM-33-1234-60910000-1");
                ReciboDefType[] recArray = new ReciboDefType[envio.getEnvioDTE().getSetDTE().getDTEArray().size()];
                int i = 0;

                // Se recorre lista de DTE en el envio

                for (DTEDefType dte : envio.getEnvioDTE().getSetDTE().getDTEArray()) {
                    logger.warn("Recorriendo dte: " + dte);



                    boolean firmaOKDTE = true;
                    if(!resl.isOk()) {
                        logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML Incorrecta: " + resl.getMessage());
                        firmaOKDTE = false;
                    } else {
                        logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML OK");
                    }
                    boolean rutDTEOK = true;

                    if(!rutContribuyente.equals(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep())) {
                        logger.warn("Error, DTE id: " + dte.getDocumento().getID() + " folio: " + dte.getDocumento().getEncabezado().getIdDoc().getFolio()
                        + " tipo: " + dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE().toString() + " contiene RUT de receptor ["
                        + dte.getDocumento().getEncabezado().getReceptor().getRUTRecep() + "] que no corresponde a nuestra empresa [" + rutContribuyente + "]");
                        rutDTEOK = false;
                    }
                    DocumentoRecibo dr;
                    if( firmaOKDTE &amp;&amp; rutDTEOK) {
                        dr = rec.addNewDocumentoRecibo();
                        estadoDTE = "DOK";
                        dr.setFolio(dte.getDocumento().getEncabezado().getIdDoc().getFolio());
                        dr.setTipoDoc(dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE());
                        dr.setFchEmis(dte.getDocumento().getEncabezado().getIdDoc().getFchEmis());
                        dr.setRUTEmisor(dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor());
                        dr.setRUTRecep(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep());
                        dr.setMntTotal(dte.getDocumento().getEncabezado().getTotales().getMntTotal());
                        dr.setRecinto("No especificado");
                        dr.setRutFirma(rutEnviador);
                        dr.setID(dte.getDocumento().getID());
                        dr.setTmstFirmaRecibo(cal);
                        dr.setDeclaracion("El acuse de recibo que se declara en este acto, de acuerdo a lo dispuesto en la letra b) del Art. 4, y la letra c) del Art. 5 de la Ley 19.983, acredita que la entrega de mercaderias o servicio(s) prestado(s) ha(n) sido recibido(s).");
                        i++;
                    } else {
                        if( !firmaOKDTE) {
                            //resDTE.setEstadoDTE(new Integer(2));
                            //resDTE.setEstadoDTEGlosa("DTE rechazado - Error de Firma");
                            //estadoRecepEnvEnumId = 2
                            logger.warn("DTE Rechazado - Error de Firma");
                            //rDTE.setEstadoRecepDTE(new Integer(1));
                            //rDTE.setRecepDTEGlosa("DTE No Recibido - Error de Firma");
                            logger.warn("DTE No Recibido - Error de Firma");
                        } else if(!rutDTEK) {
                            //resDTE.setEstadoDTE(new Integer(2));
                            //resDTE.setEstadoDTEGlosa("DTE rechazado - Error en RUT Receptor");
                            logger.warn("DTE rechazado - Error en RUT Receptor");
                            //rDTE.setEstadoRecepDTE(new Integer(3));
                            //rDTE.setRecepDTEGlosa("DTE No Recibido - Error en RUT Receptor");
                            logger.warn("DTE No Recibido - Error en RUT Receptor");
                        }
                    }
                    //recArray[i] = recibo.getRecibo();
                }
                recArray = recibo.getRecibo();
                rec.setVersion(new BigDecimal("1.0"));

                namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                    recibo = ReciboDocument.Factory.parse(recibo.newInputStream(opts), opts);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                // firma del recibo
                //recibo.getRecibo().sign(key, cert);


                // leo certificado y llave privada del archivo pkcs12
                ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias2 = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias2 + " del archivo PKCS12: " + certS);

                //rec.setDocumentoRecibo(dr);
                rec.setVersion(new BigDecimal("1.0"));
                rec.sign(key, cert);


                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                XmlOptions opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                    recibo = ReciboDocument.Factory.parse(recibo.newInputStream(opts), opts);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                // Se firma esto?
                recibo.getRecibo().sign(key, cert);

                sr.setReciboArray(recArray);

                er.setSetRecibos(sr);
                erd.setEnvioRecibos(er);
                XmlCursor cursor = erd.newCursor();
                if (cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName( "http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioRecibos_v10.xsd");
                }

                opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);
                opts.setUseDefaultNamespace();
                opts.setSaveSuggestedPrefixes(namespaces);
                try {
                    erd = EnvioRecibosDocument.Factory.parse(erd.newInputStream(opts));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                erd.sign(key, cert);

                resl = erd.verifyXML();
                if (!resl.isOk()) {
                    System.out.println("Documento: Estructura XML Incorrecta: "+ resl.getMessage());
                } else {
                    System.out.println("Documento: Estructura XML OK");
                }
                //resl = erd.verifySignature();
                //if (!resl.isOk()) {
                //    System.out.println("Documento: Firma Incorrecta: " + resl.getMessage());
                //} else {
                //    System.out.println("Documento: Firma OK");
                //}

                logger.warn("XML: " + erd);

                logger.warn("Escribiendo " + resultS + "RESP-" + idS + ".xml");
                erd.save(new File(resultS + "RECIBO-MERC-" + idS + ".xml"), opts);
                //erd.save(out2, opts);
                //logger.warn("Escribiendo archivo temporal para attachment" + resultS + "RECIBO-MERC.xml");
                //erd.save(new File(resultS + "RECIBO-MERC.xml"), opts);
                ByteArrayOutputStream outTemp = new ByteArrayOutputStream();
                erd.save(outTemp, opts);

return
            </script>

            <!-- Recuperación del email de destinatario de aceptación -->
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyAceptacionField">
                <field-map field-name="idValue" from="rutEmisor"/>
            </entity-find-one>

            <if condition="!partyAceptacionField">
                <return error="true" message="Organización a enviar aceptación no tiene RUT definido"/>
            </if>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                          in-map="[partyId:partyAceptacionField.partyId, postalContactMechPurposeId:'PostalTax']"/>
            <if condition="!contactOut.postalContactMechId">
                <return error="true" message="Receptor de aceptación no tiene contacto tributario asignado"/>
            </if>

            <set field="emailAceptacion" from="contactOut.emailAddress"/>

            <!-- Recuperación de algunos datos desde FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="fiscalTaxDocumentField">
                <field-map field-name="fiscalTaxDocumentId"/>
            </entity-find-one>
            <set field="folioAceptacion" from="fiscalTaxDocumentField.fiscalTaxDocumentNumber"/>


            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto]"/>
            <service-call name="create#mchile.dte.AceptacionDte" out-map="context" in-map="createMap"/>

            <entity-find-one entity-name="mchile.dte.AceptacionDte" value-field="aceptacionField" for-update="true"/>
            <!--set field="aceptacionField.nmbEnvio" from="fiscalTaxDocumentField.razonSocial" type="String"/-->
            <set field="aceptacionField.fchRecep" from="fchRecep" type="String"/>
            <set field="aceptacionField.codEnvio" from="idS" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.envioDteId" value="RESP-${idS}" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.rutReceptor" from="rutResponde" type="String"/>
            <set field="aceptacionField.estadoRecepEnvEnumId" from="estadoRecepEnvEnumId" type="String"/>
            <set field="aceptacionField.nroDetalles" value="1" type="Integer"/>
            <set field="aceptacionField.xml" value="${resultS}RESP-${idS}.xml" type="String"/>
            <entity-update value-field="aceptacionField"/>

            <set field="bodyParameters" from="[fiscalTaxDocumentId:folioAceptacion, nmbContacto:nmbContacto, mailContacto:mailContacto, fonoContacto:fonoContacto]"/>
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="fiscalTaxDocumentId" from="folioAceptacion"/>
                <field-map field-name="emailTypeEnumId" from="emailTypeEnumId"/>
                <!--field-map field-name="toAddresses" value="cherrera@moit.cl"/-->
                <field-map field-name="toAddresses" from="emailAceptacion"/>
                <field-map field-name="emailTemplateId" value="Aceptacion"/>
                <field-map field-name="bodyParameters" from="bodyParameters"/>
            </service-call>

        </actions>
    </service>

    <service verb="enviar" noun="ResultadoAprobacionComercial">
        <description>
            Envío de respuesta a emisor DTE.

            Esta implementación inicialmente responde a un solo envío

            En un paso posterior se puede enviar Aceptación o Rechazo (no implementado)
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fiscalTaxDocumentNumber" required="true"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <!-- No se envían aceptaciones por boletas -->
            <if condition="(fiscalTaxDocumentTypeEnumId == 'Ftdt-39') || (fiscalTaxDocumentTypeEnumId == 'Ftdt-41') || (fiscalTaxDocumentTypeEnumId == 'PvtBoleta')">
                <return message="Boletas no requieren envío de aceptación" type="warning"/>
            </if>


            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="rutResponde" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperacion de parametros de la organizacion -->

            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateAceptaciones"/>
            <set field="rutEnviador" from="rutEnviador"/>
            <set field="dirS" from="pathRecibidas"/>
            <set field="nmbContacto" from="nmbContacto"/>
            <set field="mailContacto" from="mailContacto"/>
            <set field="fonoContacto" from="fonoContacto"/>
            <set field="giro" from="giroEmisor"/>
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templateEnvio" from="templateEnvio"/>
            <set field="templateAceptaciones" from="templateAceptaciones"/>
            <set field="templateLibro" from="templateLibro"/>
            <set field="logo" from="logo"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>


            <!-- Se guarda aceptacion para obtener el aceptacionDteId -->
            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto, issuerPartyId:activeOrgId]"/>
            <service-call name="create#mchile.dte.AceptacionDte" out-map="context" in-map="createMap"/>

            <!-- Recuperación de datos para emitir aceptación -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="dteField">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <field-map field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
                <select-field field-name="contentLocation"/>
            </entity-find-one>

            <set field="envioRecibido" from="dteField.contentLocation"/>
            <set field="idS" value="" type="String"/>
            <script>
                idS =  (int) (System.currentTimeMillis() / 1000L)
            </script>
            <set field="nmbEnvio" value=""/>
            <set field="fchRecep" value=""/>
            <set field="rutEmisor" value=""/>

            <set field="rutReceptor" value=""/>
            <set field="estadoRecepEnvEnumId" value=""/>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.File;
                import java.io.FileInputStream;
                import java.io.FileOutputStream;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;
                import java.util.Calendar;
                import java.util.Date;
                import java.util.HashMap;
                import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;
                import javax.xml.namespace.QName;

                import org.apache.xmlbeans.XmlOptions;
                import org.apache.xmlbeans.XmlCursor;
                import org.w3c.dom.Document;
                import org.w3c.dom.Element;
                import org.w3c.dom.NodeList;
                import javax.xml.crypto.dsig.*;
                import javax.xml.transform.*;
                import javax.xml.crypto.dsig.dom.DOMValidateContext;

                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.DTEDefType;
                import cl.sii.siiDte.DTEDefType.Documento.Detalle;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.DTEDocument;
                import cl.sii.siiDte.EnvioDTEDocument;
                import cl.sii.siiDte.RespuestaDTEDocument;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.Caratula;
                //import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.RecepcionEnvio;
                //import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.RecepcionEnvio.RecepcionDTE;
                import cl.sii.siiDte.RespuestaDTEDocument.RespuestaDTE.Resultado.ResultadoDTE;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;

                import javax.xml.parsers.DocumentBuilder;
                import javax.xml.parsers.DocumentBuilderFactory;
                import javax.xml.parsers.ParserConfigurationException;
                javax.xml.crypto.dsig.dom.DOMValidateContext;
                javax.xml.crypto.dsig.XMLSignatureException;
                import org.xml.sax.SAXException;

                DTEDocument doc;
                X509Certificate cert;
                PrivateKey key;

                EnvioDTEDocument envio = null;
                try {
                    envio = EnvioDTEDocument.Factory.parse(new FileInputStream(envioRecibido));
                } catch (Exception e) {
                    logger.warn("Error al cargar archivo de envio recepcionado: " + envioRecibido, e);
                    return;
                }
                VerifyResult resl = envio.verifyXML();
                boolean envioEsquemaOK = true;
                boolean envioFirmaOK = true;
                String errorEsquema = "";
                String errorFirma = "";

                if( !resl.isOk()) {
                    logger.error("Envio recibido: Estructura XML incorrecta: " + resl.getMessage());
                    errorEsquema = resl.getMessage();
                    envioEsquemaOK = false;
                } else {
                    logger.warn("Envio recibido: Estructura XML OK");
                }
                // Revisar
                resl = envio.verifySignature();
                if( !resl.isOk()) {
                    logger.error("Envio recibido: firma XML incorrecta");
                } else {
                    logger.debug("Envio recibido: firma XML OK");
                }
                boolean envioRutOK = true;

                String rutContribuyente = rutResponde;

                if(!rutContribuyente.equals(envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor())) {
                    logger.error("Error: carátula de envioDTE recibido dice que rut de receptor es: " + envio.getEnvioDTE().getSetDTE().getCaratula().getRutReceptor() + " el cual es distinto al de nuestra empresa: " + rutContribuyente);
                    envioRutOK = false;
                }
                //Certificado cert = new Certificado();
                //CertificadoLlave certLlave = cert.getCertificado(certS, passS);
                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                //ArrayList&lt;RecepcionDTE&gt; arrRecepcionDTE = new ArrayList&lt;RecepcionDTE&gt;();
                ArrayList&lt;ResultadoDTE&gt; resultados = new ArrayList&lt;ResultadoDTE&gt;();
                //RecepcionEnvio rre = RecepcionEnvio.Factory.newInstance();

                /*File f = new File(envioRecibido);
                rre.setNmbEnvio(f.getName());
                rre.xsetFchRecep(FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date())));
                rre.setCodEnvio(idS);
                rre.setEnvioDTEID(envio.getEnvioDTE().getSetDTE().getID());
                rre.setEstadoRecepEnv(0);
                rre.setRecepEnvGlosa("Envio Recibido Conforme");*/

                fchRecep = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date())).toString()
                envioDteId = envio.getEnvioDTE().getSetDTE().getID()
                estadoRecepEnvEnumId = 0
                int nroDetalles = 0;

                if (envioFirmaOK &amp;&amp; envioEsquemaOK &amp;&amp; envioRutOK ) {
                    X509Certificate x509 = XMLUtil.getCertificate(envio.getEnvioDTE().getSignature());
                    logger.warn("Firmado por: " + x509.getSubjectX500Principal().getName());

                    for (DTEDefType dte : envio.getEnvioDTE().getSetDTE().getDTEArray()) {

                        x509 = XMLUtil.getCertificate(dte.getSignature());
                        logger.warn("DTE ID " + dte.getDocumento().getID() + " Firmado por: " + x509.getSubjectX500Principal().getName());
                        logger.warn("Por almacenar en " + dirS);
                        String nombreDTE = dirS + "dte-"+dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor()+"-"+dte.getDocumento().getEncabezado().getIdDoc().getFolio()+".xml";
                        rutEmisor = dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor()


                        boolean firmaOKDTE = true;
                        if(!resl.isOk()) {
                            logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML Incorrecta: " + resl.getMessage());
                            firmaOKDTE = false;
                        } else {
                            logger.warn("Validando DTE ID " + dte.getDocumento().getID() + " : Firma XML OK");
                        }
                        boolean rutDTEOK = true;

                        if(!rutContribuyente.equals(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep())) {
                            logger.warn("Error, DTE id: " + dte.getDocumento().getID() + " folio: " + dte.getDocumento().getEncabezado().getIdDoc().getFolio() + " tipo: " + dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE().toString() + " contiene RUT de receptor [" + dte.getDocumento().getEncabezado().getReceptor().getRUTRecep() + "] que no corresponde a nuestra empresa [" + rutContribuyente + "]");
                            rutDTEOK = false;
                        }
                        nroDetalles++;
                        ResultadoDTE resDTE = ResultadoDTE.Factory.newInstance();
                        resDTE.setFolio(dte.getDocumento().getEncabezado().getIdDoc().getFolio());
                        resDTE.setTipoDTE(dte.getDocumento().getEncabezado().getIdDoc().getTipoDTE());
                        resDTE.setFchEmis(dte.getDocumento().getEncabezado().getIdDoc().getFchEmis());
                        resDTE.setRUTEmisor(dte.getDocumento().getEncabezado().getEmisor().getRUTEmisor());
                        resDTE.setRUTRecep(dte.getDocumento().getEncabezado().getReceptor().getRUTRecep());
                        resDTE.setMntTotal(dte.getDocumento().getEncabezado().getTotales().getMntTotal());
                        /*
                            0 - Envío recibido conforme
                            1 - Rechazado, error de schema
                            2 - Rechazado, error de firma
                            3 - Rechazado, RUT receptor no corresponde
                            90 - Rechazado, archivo repetido
                            91 - Rechazado, archivo ilegible
                            99 - Rechazado, otros
                        */

                        // se asocia el ID del envio recepcionado en nuestra BD
                        resDTE.setCodEnvio(new Long(idS));

                        if( firmaOKDTE &amp;&amp; rutDTEOK) {
                            estadoDTE = "DOK";
                            //rDTE.setEstadoRecepDTE(0);
                            //rDTE.setRecepDTEGlosa("DTE Recibido");
                            resDTE.setEstadoDTE(0);
                            resDTE.setEstadoDTEGlosa("Envio recibido conforme");
                        } else {
                            if( !firmaOKDTE) {
                                resDTE.setEstadoDTE(new Integer(2));
                                resDTE.setEstadoDTEGlosa("DTE rechazado - Error de Firma");
                                estadoRecepEnvEnumId = 2
                                logger.warn("DTE Rechazado - Error de Firma");
                            } else if(!rutDTEK) {
                                resDTE.setEstadoDTE(new Integer(2));
                                resDTE.setEstadoDTEGlosa("DTE rechazado - Error en RUT Receptor");
                                logger.warn("DTE rechazado - Error en RUT Receptor");
                            }
                        }
                        resultados.add(resDTE);
                        //arrRecepcionDTE.add(rDTE);
                    }
                } else {
                    logger.warn("Envio no cumple con la firma o con esquema XML");
                    // Revisar si es problema de esquema o de firma
                    if(!envioEsquemaOK) {
                        rre.setEstadoRecepEnv(1);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - Error de schema: " + errorEsquema);
                    } else if (!envioFirmaOK) {
                        rre.setEstadoRecepEnv(2);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - Error de Firma: " + errorFirma);
                    } else if (!envioRutOK) {
                        rre.setEstadoRecepEnv(3);
                        estadoRecepEnvEnumId = 1
                        rre.setRecepEnvGlosa("Envio Rechazado - RUT receptor no corresponde");
                    }
                    logger.warn("Glosa respuesta envío: " + rre.getRecepEnvGlosa());
                }
                Caratula caratula = Caratula.Factory.newInstance();
                Resultado resultado = Resultado.Factory.newInstance();

                /*if (arrRecepcionDTE.size > 0) {
                    RecepcionDTE[] resultadoDTE = new RecepcionDTE[arrRecepcionDTE.size()];
                    for(int i = 0; i &lt; arrRecepcionDTE.size(); i++)
                        resultadoDTE[i] = arrRecepcionDTE.get(i);
                    rre.setRecepcionDTEArray(resultadoDTE);
                    caratula.setNroDetalles(arrRecepcionDTE.size());
                } else {*/
                    if (resultados.size() > 0) {
                        ResultadoDTE[] resultadoDTE = new ResultadoDTE[resultados.size()];
                        for (int i = 0; i &lt; resultados.size(); i++)
                            resultadoDTE[i] = resultados.get(i);
                        resultado.setResultadoDTEArray(resultadoDTE);
                    } else {
                        caratula.setNroDetalles(1);
                    }
                //}
                caratula.setRutResponde(rutContribuyente);
                caratula.setRutRecibe(rutEmisor);
                caratula.setIdRespuesta(new Long(idS));
                caratula.setVersion(new BigDecimal("1.0"));
                // Datos en plantilla?
                caratula.setNmbContacto(nmbContacto);
                caratula.setMailContacto(mailContacto);
                caratula.setFonoContacto(fonoContacto);
                caratula.setNroDetalles(nroDetalles);

                resultado.setCaratula(caratula);
                resultado.setID("RESP-" + idS);

                /*if(!rre.isNil()) {
                    logger.warn("Se responde aceptacion");
                    RecepcionEnvio[] reArray = new RecepcionEnvio[1];
                    reArray[0] = rre;
                    resultado.setRecepcionEnvioArray(reArray);
                }*/
                RespuestaDTE respDTE = RespuestaDTE.Factory.newInstance();
                respDTE.setResultado(resultado);
                respDTE.setVersion(new BigDecimal("1.0"));

                RespuestaDTEDocument respuesta = RespuestaDTEDocument.Factory.newInstance();
                respuesta.setRespuestaDTE(respDTE);

                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("http://www.sii.cl/SiiDte","");

                XmlOptions opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);
                opts.setSaveSuggestedPrefixes(namespaces);
                opts.setCharacterEncoding("ISO-8859-1");

                // leo certificado y llave privada del archivo pkcs12
                ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias2 = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias2 + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                XmlCursor cursor = respuesta.newCursor();
                if(cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte RespuestaEnvioDTE_v10.xsd");
                }
                try {
                    respuesta = RespuestaDTEDocument.Factory.parse(respuesta.newInputStream(opts));
                } catch (Exception e) {
                    logger.warn("Error al obtener respuesta con formato antes de firmar", e);
                }
                uri = "#RESP-10000";
                try {
                    logger.warn("Respuesta antes de firmar: " + new String(respuesta.getBytes()));
                    //respuesta.sign(certLlave.getPkey(), certLlave.getX509());
                    respuesta.sign(pKey, x509);
                    //respDTE.sign(pKey, x509);
                } catch (Exception e) {
                    logger.error("Error al firmar respuesta" + e.printStackTrace());
                    return
                }

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                opts.setSaveImplicitNamespaces(namespaces);

                uri = "";

                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = "#" + uri;

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out2 = new ByteArrayOutputStream();
                //doc.save(new File(resultS + "APROBCOM-sinfirma.xml"), opts);
                //doc.save(out2, opts);
                logger.warn("Escribiendo " + resultS + "APROBCOM-" + idS + ".xml");
                respuesta.save(new File(resultS + "APROBCOM-" + idS + ".xml"), opts);
                respuesta.save(out2, opts);
                logger.warn("Escribiendo archivo temporal para attachment" + resultS + "APROBCOM.xml");
                respuesta.save(new File(resultS + "APROBCOM.xml"), opts);
                ByteArrayOutputStream outTemp = new ByteArrayOutputStream();
                respuesta.save(outTemp, opts);

                return
            </script>

            <!-- Recuperación del email de destinatario de aceptación -->
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyAceptacionField">
                <field-map field-name="idValue" from="rutEmisor"/>
            </entity-find-one>

            <if condition="!partyAceptacionField">
                <return error="true" message="Organización a enviar aceptación no tiene RUT definido"/>
            </if>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                          in-map="[partyId:partyAceptacionField.partyId, postalContactMechPurposeId:'PostalTax']"/>
            <if condition="!contactOut.postalContactMechId">
                <return error="true" message="Receptor de aceptación no tiene contacto tributario asignado"/>
            </if>

            <!--return error="true" message="PPP: $rutEmisor, partyId: $partyAceptacionField.partyId - $contactOut.emailAddress"/-->

            <set field="emailAceptacion" from="contactOut.emailAddress"/>

            <!-- Recuperación de algunos datos desde FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="fiscalTaxDocumentField">
                <field-map field-name="fiscalTaxDocumentId"/>
            </entity-find-one>
            <set field="folioAceptacion" from="fiscalTaxDocumentField.fiscalTaxDocumentNumber"/>


            <set field="createMap" from="[fiscalTaxDocumentId:fiscalTaxDocumentId, rutResponde:rutResponde, rutRecibe:rutRecibe, nmbContacto:nmbContacto,
                                        fonoContacto:fonoContacto, mailContacto:mailContacto]"/>
            <service-call name="create#mchile.dte.AceptacionDte" out-map="context" in-map="createMap"/>

            <entity-find-one entity-name="mchile.dte.AceptacionDte" value-field="aceptacionField" for-update="true"/>
            <!--set field="aceptacionField.nmbEnvio" from="fiscalTaxDocumentField.razonSocial" type="String"/-->
            <set field="aceptacionField.fchRecep" from="fchRecep" type="String"/>
            <set field="aceptacionField.codEnvio" from="idS" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.envioDteId" value="RESP-${idS}" type="String"/>
            <set field="aceptacionField.rutEmisor" from="rutEmisor" type="String"/>
            <set field="aceptacionField.rutReceptor" from="rutResponde" type="String"/>
            <set field="aceptacionField.estadoRecepEnvEnumId" from="estadoRecepEnvEnumId" type="String"/>
            <set field="aceptacionField.nroDetalles" value="1" type="Integer"/>
            <set field="aceptacionField.xml" value="${resultS}RESP-${idS}.xml" type="String"/>
            <entity-update value-field="aceptacionField"/>

            <set field="bodyParameters" from="[fiscalTaxDocumentId:folioAceptacion, nmbContacto:nmbContacto, mailContacto:mailContacto, fonoContacto:fonoContacto]"/>
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="fiscalTaxDocumentId" from="folioAceptacion"/>
                <field-map field-name="emailTypeEnumId" from="emailTypeEnumId"/>
                <!--field-map field-name="toAddresses" value="cherrera@moit.cl"/-->
                <field-map field-name="toAddresses" from="emailAceptacion"/>
                <field-map field-name="emailTemplateId" value="Aceptacion"/>
                <field-map field-name="bodyParameters" from="bodyParameters"/>
            </service-call>

        </actions>
    </service>

    <service verb="get" noun="DteContent">
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentContentTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="content"/>
            <parameter name="contentData"/>
        </out-parameters>
        <actions>
            <set field="content" from="null"/>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="contentField"/>
            <if condition="contentField">
                <set field="content" from="contentField.contentLocation"/>
                <set field="contentData" from="contentField.contentData"/>
            </if>
        </actions>
    </service>

    <service verb="get" noun="SIICode">
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="siiCode"/>
        </out-parameters>
        <actions>
            <set field="siiCode" from="null"/>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumField">
                <field-map field-name="enumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="enumTypeId" value="FiscalTaxDocumentType"/>
            </entity-find-one>
            <set field="siiCode" from="enumField.enumCode"/>
        </actions>
    </service>

    <service verb="get" noun="MoquiSIICode">
        <in-parameters>
            <parameter name="siiCode" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId"/>
        </out-parameters>
        <actions>
            <set field="fiscalTaxDocumentTypeEnumId" from="null"/>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumField">
                <field-map field-name="enumCode" from="siiCode"/>
                <field-map field-name="enumTypeId" value="FiscalTaxDocumentType"/>
            </entity-find-one>
            <set field="fiscalTaxDocumentTypeEnumId" from="enumField.enumId"/>
        </actions>
    </service>

    <service verb="check" noun="Afecto">
        <in-parameters>
            <parameter name="productId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="afecto" type="String"/>
        </out-parameters>
        <actions>
            <set field="afecto" value="true"/>

            <entity-find entity-name="mantle.product.category.ProductCategoryMember" list="categoryMemberList">
                <econdition field-name="productId" from="productId"/>
                <econdition field-name="productCategoryId" value="ClVatTaxExento"/>
                <econdition field-name="thruDate" operator="greater-equals" from="ec.user.nowTimestamp" or-null="true"/>
            </entity-find>

            <log level="warn" message="Verificando si item $productId es AFECTO o EXENTO"/>
            <if condition="categoryMemberList"><then>
                <log message="Item EXENTO encontrado $productId" level="warn"/>
                <set field="afecto" value="true"/>
            </then>
            <else>
                <log level="warn" message="Item AFECTO $productId"/>
            </else></if>
        </actions>
    </service>

    <service verb="genera" noun="Boleta">
        <description>
            Generación de Boleta acuerdo a plantilla
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="rutReceptor"/>
            <parameter name="receiverPartyId" required="true"/>
            <parameter name="rznSocReceptor"/>
            <parameter name="giroReceptor"/>
            <parameter name="contactoReceptor"/>
            <parameter name="dirReceptor"/>
            <parameter name="cmnaReceptor"/>
            <parameter name="ciudadReceptor" default-value="${cmnaReceptor}"/>
            <parameter name="detailList" type="List" required="false"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="medioPago" required="false"/>
            <parameter name="formaPago" required="false" type="String"/>
            <parameter name="referenciaList" type="List"/>
            <parameter name="continua"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateBoleta"/>
            <set field="enviadorS" from="rutEnviador"/>
            <set field="emisorS" from="rutEmisor"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="rutEnvia" from="rutEnvia"/>
            <set field="rznSocEmisor" from="rznSocEmisor"/>
            <set field="cdgSIISucur" from="cdgSIISucur"/>

            <!-- REVISAR -->
            <if condition="cdgSIISucur == 'LOCAL'">
                <set field="cdgSIISucur" value="0"/>
            </if>

            <set field="dirOrigen" from="dirOrigen"/>
            <set field="cmnaOrigen" from="cmnaOrigen"/>
            <set field="ciudadOrigen" from="ciudadOrigen"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="pdfTemplateBoleta" from="pdfTemplateBoleta"/>
            <if condition="continua">
                <set field="pdfTemplateBoleta" from="pdfTemplateBoletaContinua"/>
            </if>

            <if condition="!pdfTemplateBoleta">
                <return error="true" message="Emisor no tiene plantilla para PDF de boletas"/>
            </if>

            <!-- Giro del emisor -->
            <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giroEmisor" from="giroOutMap.description"/>


            <!-- Recuperación del código SII de DTE -->
            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
            <set field="tipoFactura" from="codeOut.siiCode"/>
            <set field="tipoFacturaS" from="codeOut.siiCode"/>

            <set field="fechaEmision"/>

            <!-- Obtención de folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:fiscalTaxDocumentTypeEnumId, activeOrgId:activeOrgId]" out-map="context"/>

            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>

            <script>
                import java.text.SimpleDateFormat;
                import java.util.Date;

                Date dNow = new Date();
                SimpleDateFormat ft = new SimpleDateFormat("yyMMddhhmmssMs");
                String datetime = ft.format(dNow);
                idS = idS + datetime;
                String uriBoleta = "#"+idS;

            </script>

            <script>
                import java.io.ByteArrayOutputStream;
                import java.io.IOException;
                import java.io.StringReader;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.sql.Connection;
                import java.sql.SQLException;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Calendar;
                import java.util.Collection;
                import java.util.Date;
                import java.util.HashMap;
                import java.nio.file.Path;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;
                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.BoletaSigner;
                import cl.nic.dte.util.BoletaSigner2;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;

                import org.apache.log4j.Logger;
                import org.apache.xmlbeans.XmlDate;
                import org.apache.xmlbeans.XmlException;
                import org.apache.xmlbeans.XmlOptions;
                import javax.xml.namespace.QName;
                import org.apache.xmlbeans.XmlCursor;
                import java.security.cert.X509Certificate;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import org.w3c.dom.*;

                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.boletas.BOLETADefType;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.SubTotInfo;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle.CdgItem;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoMov;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoValor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Emisor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula.SubTotDTE;
                import org.apache.commons.io.IOUtils;

                int folio;
                AutorizacionType caf;
                X509Certificate cert;
                PrivateKey key;
                int tipoFactura;
                int frmPago = 1;
                int listSize = 0;

                // Leo el folio
                folio = Integer.valueOf(folioS);
                tipoFactura = Integer.valueOf(tipoFacturaS);
                if(formaPago != null)
                    frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                //opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                //opts.setLoadAdditionalNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                // Recuperación de archivo CAF desde BD
                caf = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts).getAUTORIZACION();

                BOLETADefType boleta; // boleta tiene cargada toda la información correspondiente

                // (emisor, receptor, detalle, totales, etc)
                opts = new XmlOptions();
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);
                boleta = BOLETADefType.Factory.newInstance(opts);

                System.out.println("BOLETA1:"+boleta.toString());

                boleta.addNewDocumento();
                boleta.getDocumento().addNewEncabezado();
                // IdDoc
                boleta.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta.getDocumento().addNewDetalle();

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + cert);

                // Se recorre lista de productos para armar documento (detailList)
                //doc.addNewDocumento();
                //doc.getDocumento().addNewEncabezado();

                //IdDoc iddoc = doc.getDocumento().getEncabezado().addNewIdDoc();
                boleta.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta.getDocumento().setID(idS);
                boleta.setVersion(new BigDecimal("1.0"));

                // Para boleta
                //XmlCursor cursor2 = boleta.newCursor();
                //cursor2.toFirstChild();
                //cursor2.setAttributeText(new QName("", "xmlns"), "http://www.sii.cl/SiiDte");
                //cursor2.dispose();
                System.out.println("BOLETA2:"+boleta.xmlText());

                // Tipo de DTE
                boleta.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios (soportado)
                //boleta.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);
                //boleta.getDocumento().getEncabezado().getIdDoc().xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                // Medio y forma de pago
                //if (medioPago != null ) {
                //    iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago));
                //} else {
                //    iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"));
                //}
                //iddoc.setFmaPago(BigInteger.valueOf(frmPago));

            </script>
            <if condition="rutReceptor == '66666666-6'"><then>
                <script>
                    // Receptor
                    Receptor recp = boleta.getDocumento().getEncabezado().addNewReceptor();
                    recp.setRUTRecep(rutReceptor.trim());
                    recp.setRznSocRecep("Venta a publico sin nombre receptor");
                    // Campo giro receptor no existe en esquema BOLETADefType
                </script>
            </then><else>
                <script>
                    // Receptor
                    Receptor recp = boleta.getDocumento().getEncabezado().addNewReceptor();
                    recp.setRUTRecep(rutReceptor.trim());
                    recp.setRznSocRecep(rznSocReceptor);
                    // Campo giro receptor no existe en esquema BOLETADefType
                    recp.setContacto(contactoReceptor);
                    recp.setDirRecep(dirReceptor);
                    recp.setCmnaRecep(cmnaReceptor);
                    recp.setCiudadRecep(ciudadReceptor);
                </script>
            </else></if>
            <script>

                // Emisor
                Emisor emisor = boleta.getDocumento().getEncabezado().addNewEmisor();
                emisor.setRUTEmisor(rutEmisor);
                emisor.setRznSocEmisor(rznSocEmisor);
                emisor.setGiroEmisor(giroEmisor);
                emisor.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor.setDirOrigen(dirOrigen);
                emisor.setCmnaOrigen(cmnaOrigen);
                emisor.setCiudadOrigen(ciudadOrigen);

            </script>
            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <if condition="tipoFactura == 39">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>
                <iterate list="detailList" entry="detailEntry">
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- Obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <set field="unmdItem"/>
                    <if condition="detailEntry.quantityUomId">
                        <set field="unmdItem" from="detailEntry.quantityUomId"/>
                    </if>
                    <!-- Verificar si item es afecto o exento -->
                    <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                    <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                    <log message="Item afecto: $itemAfecto, $totalItem" level="warn"/>

                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        if(itemAfecto.equals("true")) {
                            //totalNeto = totalNeto + totalItem
                            long neto = Math.round(totalItem/1.19)
                            montoNeto = montoNeto + neto
                            montoIVARecuperable = montoIVARecuperable + (totalItem - neto );
                        } else {
                            //totalExento = totalExento + totalItem
                            montoExento = montoExento + totalItem
                            det[i].setIndExe(1);
                        }

                        // TODO: Unidad de medida en última caso de prueba (UnmdItem, antes de precio)

                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        if(unmdItem.equals("WT_kg"))
                            det[i].setUnmdItem("Kg.");
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    i = 0
                    listSize = referenciaList.size()
                    Referencia[] ref = new Referencia[listSize]
                </script>

                <iterate list="referenciaList" entry="referenciaEntry">
                    <set field="folioRef" from="referenciaEntry.folio" type="Integer"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('Ftdt-0')) { // Used for Set de Pruebas SII
                        //ref[i].setTpoDocRef('SET');
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        } else {
                    </script>
                    <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                    <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                        //ref[i].setTpoDocRef(tpoDocRef);
                        ref[i].setRUTOtr(rutReceptor);
                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }

                        i = i + 1
                    </script>
                </iterate>
                <script>
                    boleta.getDocumento().setReferenciaArray(ref);

                    boleta.getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = boleta.getDocumento().getEncabezado().addNewTotales();
                    //montoNeto = totalInvoice;
                    logger.warn("monto neto:" + montoNeto);
                    logger.warn("Total: " + totalInvoice);
                    tot.setMntTotal(totalInvoice)
                    amount=totalInvoice;
                </script>
            </if>

            <if condition="tipoFactura == 41">
                <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
                </script>
                <set field="totalInvoice" value="0" type="Integer"/>

                <iterate list="detailList" entry="detailEntry">
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <set field="unmdItem"/>
                    <if condition="detailEntry.quantityUomId">
                        <set field="unmdItem" from="detailEntry.quantityUomId"/>
                    </if>

                    <!--service-call name="mchile.DTEServices.escape#Characters" in-map="[cadenaString:nombreItem]" out-map="context"/>
                    <set field="nombreItem" from="outString"/-->

                    <script><![CDATA[

                        logger.warn("String: " + nombreItem);

                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        det[i].setIndExe(1);
                        //if(unm != null)
                        //    det[i].setUnmdItem(uom);
                        if(unmdItem.equals("WT_kg"))
                            det[i].setUnmdItem("Kg.");
                        totalInvoice = totalInvoice + totalItem
                        montoNeto = 0
                        montoExento = totalInvoice

                        i = i + 1
                    ]]></script>
                </iterate>
                <script>
                    i = 0
                    Referencia[] ref = null;
                    if(referenciaList.size() != 0) {
                        listSize = referenciaList.size();
                        ref = new Referencia[listSize];
                    } else {
                        listSize = 0;
                    }
                    //Referencia[] ref = new Referencia[listSize]

                </script>

                <iterate list="referenciaList" entry="referenciaEntry">
                    <log message="Agregando referencia $referenciaEntry" level="warn"/>
                    <set field="folioRef" from="referenciaEntry.folio" type="String"/>
                    <set field="codRef" from="referenciaEntry.codigoReferenciaEnumId" type="Integer"/>
                    <set field="fechaRef" from="referenciaEntry.fecha" type="String"/>
                    <script>
                        // Agrego referencias
                        ref[i] = Referencia.Factory.newInstance();
                        ref[i].setNroLinRef(i+1);
                        if(referenciaEntry.fiscalTaxDocumentTypeEnumId.equals('Ftdt-0')) { // Used for Set de Pruebas SII
                        ref[i].setTpoDocRef('SET');
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        } else {
                    </script>
                    <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:referenciaEntry.fiscalTaxDocumentTypeEnumId]" out-map="codeOut"/>
                    <set field="tpoDocRef" from="codeOut.siiCode"/>
                    <script>
                        //ref[i].setTpoDocRef(referenciaEntry.fiscalTaxDocumentTypeEnumId);
                        ref[i].setTpoDocRef(tpoDocRef);
                        ref[i].setRUTOtr(rutReceptor);
                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
                        Date date = formatter.parse(fechaRef);
                        ref[i].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(referenciaEntry.fecha)));
                        ref[i].setCodRef(codRef);
                        ref[i].setRazonRef(referenciaEntry.razonReferencia);
                        ref[i].setFolioRef(referenciaEntry.folio.toString());
                        }
                        i = i + 1
                    </script>
                </iterate>

                <script>
                    boleta.getDocumento().setReferenciaArray(ref);
                    boleta.getDocumento().setDetalleArray(det);
                    // Totales
                    Totales tot = boleta.getDocumento().getEncabezado().addNewTotales();
                    tot.setMntExe(totalInvoice);
                    tot.setMntTotal(totalInvoice);
                    montoTotal = totalInvoice;
                    montoExento = totalInvoice;
                    amount = totalInvoice;

                </script>
            </if>
            <script>
                // Timbro
                //boleta.timbrar(caf.getCAF(), caf.getPrivateKey(null));

                // Se puede parsear de nuevo antes de firmar?

                //cursor2 = boleta.newCursor();
                //cursor2.setAttributeText(new QName("", "xmlns"), "http://www.sii.cl/SiiDte");
                //cursor2.dispose();

                // Firma de boleta
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                // formatear?

                HashMap&lt;String, String&gt; namespaces4 = new HashMap&lt;String, String&gt;();
                namespaces4.put("", "http://www.sii.cl/SiiDte");
                opts = new XmlOptions();
                opts.setUseDefaultNamespace();
                //opts.setSaveImplicitNamespaces(namespaces4);
                //opts.setLoadSubstituteNamespaces(namespaces4);
                //opts.setLoadAdditionalNamespaces(namespaces4);
                //opts.setSavePrettyPrint();
                //opts.setSavePrettyPrintIndent(0);
                //boleta = BOLETADefType.Factory.parse(boleta.newInputStream(opts));

                boleta.timbrar(caf.getCAF(), caf.getPrivateKey(null));
                boleta.getDocumento().xsetTmstFirma(now);
                //boleta.sign(key, cert);
                //boleta.verifySignature(BOLETADefType.Factory.parse(boleta.newInputStream(opts)));


                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.parse(ec.resource.getLocationStream(templateEnvioBoleta));
                EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr = new BOLETADefType[1];
                bolArr[0] = boleta;
                sdte.setDTEArray(bolArr);
                sdte.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula = sdte.addNewCaratula();
                caratula.setRutEmisor(rutEmisor);
                caratula.setRutEnvia(rutEnvia);
                caratula.setRutReceptor('60803000-K');// El receptor debe ser el SII
                caratula.setVersion(new BigDecimal("1.0"));

                Date dateFchResol = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol)));

                caratula.setNroResol(Integer.valueOf(nroResol));
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes = new SubTotDTE[1];
                SubTotDTE subt = SubTotDTE.Factory.newInstance();
                subt.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt.setNroDTE(new BigInteger(1));
                subtDtes[0] = subt;
                caratula.setSubTotDTEArray(subtDtes);

                // Le doy un formato bonito (debo hacerlo antes de firmar para no afectar los DTE internos)
                HashMap&lt;String, String&gt; namespaces3 = new HashMap&lt;String, String&gt;();
                XmlOptions opts3 = new XmlOptions();
                //opts3.setSavePrettyPrint();
                ////opts3.setSavePrettyPrintIndent(4);
                //opts3.setSavePrettyPrintIndent(0);
                //envioBoletaDocument = EnvioBOLETADocument.Factory.parse(envioBoletaDocument.newInputStream(opts3));

                eb.setSetDTE(sdte);
                eb.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument.setEnvioBOLETA(eb);

                //XmlCursor cursor = envioBoletaDocument.newCursor();
                //if (cursor.toFirstChild()) {
                //cursor.setAttributeText(new QName("", "xmlns"), "http://www.sii.cl/SiiDte");
                //cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "xsi", "xmlns"), "http://www.w3.org/2001/XMLSchema-instance");
                //cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioBOLETA_v11.xsd");
                //}
                //cursor.dispose();


                HashMap&lt;String, String&gt; namespaces2 = new HashMap&lt;String, String&gt;();
                namespaces2.put("", "http://www.sii.cl/SiiDte");
                //namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                //namespaces2.put("xsi:schemaLocation", "http://www.sii.cl/SiiDte EnvioBOLETA_v11.xsd");

                XmlOptions opts2 = new XmlOptions();
                opts2.setSaveImplicitNamespaces(namespaces2);
                opts2.setLoadSubstituteNamespaces(namespaces2);
                opts2.setLoadAdditionalNamespaces(namespaces2);
                opts2.setSavePrettyPrint();
                opts2.setSavePrettyPrintIndent(0);

                try {
                    envioBoletaDocument = EnvioBOLETADocument.Factory.parse(envioBoletaDocument.newInputStream(opts2), opts2);
                } catch (Exception e) {
                    logger.warn("Error al parsear XML:"+e.printStackTrace());
                    return
                }

                // Debo agregar el schema location (Sino SII rechaza)
                XmlCursor cursor = envioBoletaDocument.newCursor();
                if (cursor.toFirstChild()) {
                    cursor.setAttributeText(new QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation"), "http://www.sii.cl/SiiDte EnvioBOLETA_v11.xsd");
                }
                cursor.dispose();

                //boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0);



                // remover namespace de boleta
                namespaces2 = new HashMap&lt;String, String&gt;();
                namespaces2.put("", "http://www.sii.cl/SiiDte");
                //namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                //namespaces2.put("xsi:schemaLocation", "http://www.sii.cl/SiiDte EnvioBOLETA_v11.xsd");
                opts2 = new XmlOptions();
                opts2.setUseDefaultNamespace();
                opts2.setSaveImplicitNamespaces(namespaces2);
                //boleta = BOLETADefType.Factory.parse(boleta.newInputStream(opts2));


                //boleta.timbrar(caf.getCAF(), caf.getPrivateKey(null));
                //boleta.getDocumento().xsetTmstFirma(now);
                //boleta.sign(key, cert);

                //envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0).timbrar(caf.getCAF(), caf.getPrivateKey(null));
                //envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0).getDocumento().xsetTmstFirma(now);
                //envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0).sign(key, cert);


                String uri = "";
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = sdte.getID();

                // Firma de boleta
                //boleta.getDocumento().xsetTmstFirma(now);
                //boleta.sign(key, cert);

                uri = "#" + uri;
                logger.warn("URI: " + uri);

                opts = new XmlOptions();
                opts.setCharacterEncoding("ISO-8859-1");
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                envioBoletaDocument.save(new File(resultS + "BOL" + tipoFactura + "-" + folio + "-sinfirma.xml"),opts);

                archivoEnvio = pathResults + "BOL" + tipoFactura + "-"+folio+ ".xml";// ppppppppxxxx

                //byte[] salida = Files.readAllBytes(Paths.get(archivoEnvio));


                //cursor1 = envioBoletaDocument.newCursor();
                cl.sii.siiDte.boletas.BOLETADefType pp = envioBoletaDocument.envioBOLETA.getSetDTE().getDTEArray(0);
                cursor1 = pp.newCursor();
                //cursor1.toFirstChild();
                //cursor1.toChild(3);
                //cursor1.toNextToken();
                //while(cursor1.hasNextToken()) {
                    //System.out.println("********************** Token type: " + cursor1.currentTokenType() + " / " + cursor1.xmlText());
                    //cursor1.setAttributeText(new QName("", "xmlns"), "http://www.sii.cl/SiiDte");
                    //cursor1.toNextToken();
                //}
                //cursor1.dispose();
                envioBoletaDocument.save(out, opts);
                System.out.println("BOLETA7:"+out);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                // Firma de BOLETA
                envioBoletaDocument.envioBOLETA.getSetDTE().getDTEArray(0).getDocumento().xsetTmstFirma(now);
                // Deja segunda firma mal ubicada
                //byte[] salidaBoleta = Signer.sign(doc2, uriBoleta, key, cert, uriBoleta, "Documento");
                // Deja firma de boleta en lugar correcto, con URI correcta
                //byte[] salidaBoleta = Signer.sign2(doc2, uriBoleta, key, cert, uriBoleta, "Documento");
                // Firma con metodo alterno (xpath)
                byte[] salidaBoleta = BoletaSigner.signBoleta(doc2, key, cert);
                //byte[] salidaBoleta = BoletaSigner2.signBoleta(doc2, key, cert, uriBoleta);
                //byte[] salidaBoleta = Signer.signEmbededBoleta(doc2, uriBoleta, key, cert);
                //doc2 = XMLUtil.parseDocument(salidaBoleta);
                // Firma de EnvioBOLETA
                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "SetDTE");
                doc2 = XMLUtil.parseDocument(salida);


                if (Signer.verify(doc2, "SetDTE")) {
                    Path path = Paths.get(resultS + "BOL" + tipoFactura + "-" + folio + ".xml");
                    Files.write(path, salida);

                    File file = new File(resultS + "BOLOK" + tipoFactura + "-" + folio + ".xml");
                    FileOutputStream fos = null;
                    fos = new FileOutputStream(file);
                    // Writes bytes from the specified byte array to this file output stream
                    fos.write(salida);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "BOL" + tipoFactura + "-" + folio + "-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar boleta folio "+folio);
                }


            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}BOL${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}BOL${tipoFactura}-${folio}.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf, dte:xml, activeOrgId:activeOrgId, boleta:true, continua:continua]" out-map="context"/>

            <set field="bArray2"/>
            <!-- Lectura y conversión a arreglo de bytes de PDF temporal -->
            <script>
                File file = new File(pdf);
                FileInputStream fis = null;
                byte[] bArray = new byte[(int) file.length()];
                try {
                    fis = new FileInputStream(file);
                    fis.read(bArray);
                    fis.close();
                } catch (IOException ioExp) {
                    ioExp.printStackTrace();
                }
                logger.warn("pdf largo: " + file.length());
                bArray2 = bArray;
            </script>

            <!-- Creación de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
            </entity-find-one>

            <set field="dteField.issuerPartyId" from="activeOrgId"/>
            <if condition="rutReceptor != '66666666-6'"><then>
                <set field="dteField.receiverPartyId" from="receiverPartyId"/>
                <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            </then></if>
            <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>
            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                Date date = new Date();
                Timestamp ts = new Timestamp(date.getTime());
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creación de registro en FiscalTaxDocumentAttributes -->
            <!-- montoNeto -->
            <!-- montoIVARecuperable -->
            <!-- montoExento -->
            <!-- Amount -->
            <set field="updateMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, emailEmisor:emailEmisor, amount:amount,
                                         montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable
                                         ]"/>

            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="updateMap"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>

        </actions>
    </service>


    <service verb="genera" noun="RCOF">
        <description>
            Generación de Registro de Consumo de Folios
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="fechaInicio" required="false"/>
            <parameter name="fechaFin" required="false"/>
        </in-parameters>
        <actions>

            <if condition="fechaInicio > fechaFin">
                <return error="true" message="Fecha fin debe ser mayor o igual a fecha inicio"/>
            </if>

            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Validación rut -->
            <!--service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/-->


            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateRcof"/>
            <set field="enviadorS" from="rutEnviador"/>
            <set field="emisorS" from="rutEmisor"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="rutEnvia" from="rutEnvia"/>
            <set field="rznSocEmisor" from="rznSocEmisor"/>
            <set field="cdgSIISucur" from="cdgSIISucur"/>
            <set field="dirOrigen" from="dirOrigen"/>
            <set field="cmnaOrigen" from="cmnaOrigen"/>
            <set field="ciudadOrigen" from="ciudadOrigen"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="templatePdfBoleta" from="templatePdfBoleta"/>
            <!-- Giro del emisor -->
            <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giroEmisor" from="giroOutMap.description"/>

            <set field="fechaEmision"/>
            <set field="resultadoFirmado" from="resultS"/>


            <!-- Buscar lista de DTE 39 que se hayan emitido/anulado-->
            <service-call name="mchile.DTEServices.get#ResumenRcof" in-map="[fechaInicio:fechaInicio, fechaFin:fechaFin, fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="mapBoleta"/>
            <!-- Buscar lista de DTE 41 -->
            <service-call name="mchile.DTEServices.get#ResumenRcof" in-map="[fechaInicio:fechaInicio, fechaFin:fechaFin, fiscalTaxDocumentTypeEnumId:'Ftdt-41', activeOrgId:activeOrgId]" out-map="mapBoletaExenta"/>
            <!-- Buscar lista de DTE 61 que anulen boletas -->
            <service-call name="mchile.DTEServices.get#ResumenRcofNC" in-map="[fechaInicio:fechaInicio, fechaFin:fechaFin, fiscalTaxDocumentTypeEnumId:'Ftdt-61', activeOrgId:activeOrgId]" out-map="mapNotaCredito"/>

            <set field="idS" value=""/>

            <script>
                import java.text.SimpleDateFormat;
                import java.util.Date;

                Date dNow = new Date();
                SimpleDateFormat ft = new SimpleDateFormat("yyMMddhhmmssMs");
                String datetime = ft.format(dNow);
                idS = idS + datetime;

                import java.io.ByteArrayOutputStream;
                import java.io.IOException;
                import java.io.StringReader;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.sql.Connection;
                import java.sql.SQLException;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Calendar;
                import java.util.Collection;
                import java.util.Date;
                import java.util.HashMap;
                import java.nio.file.Path;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;
                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;

                import org.apache.log4j.Logger;
                import org.apache.xmlbeans.XmlDate;
                import org.apache.xmlbeans.XmlException;
                import org.apache.xmlbeans.XmlOptions;
                import javax.xml.namespace.QName;
                import org.apache.xmlbeans.XmlCursor;
                import java.security.cert.X509Certificate;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import org.w3c.dom.Document;

                import cl.helpcom.dte.util.FirmaRcof;
                import cl.helpcom.recursos.LectorFichero;

                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.consumofolios.ConsumoFoliosDocument;
                import cl.sii.siiDte.consumofolios.ConsumoFoliosDocument.ConsumoFolios;
                import cl.sii.siiDte.consumofolios.ConsumoFoliosDocument.ConsumoFolios.DocumentoConsumoFolios;
                import cl.sii.siiDte.consumofolios.ConsumoFoliosDocument.ConsumoFolios.DocumentoConsumoFolios.Caratula;
                import cl.sii.siiDte.consumofolios.ConsumoFoliosDocument.ConsumoFolios.DocumentoConsumoFolios.Resumen;
                import cl.sii.siiDte.consumofolios.ConsumoFoliosDocument.ConsumoFolios.DocumentoConsumoFolios.Resumen.RangoUtilizados;
                import cl.sii.siiDte.consumofolios.ConsumoFoliosDocument.ConsumoFolios.DocumentoConsumoFolios.Resumen.RangoAnulados;

                LectorFichero lectorFichero = new LectorFichero();

                PrivateKey key;
                int tipoFactura;
                int frmPago = 1;
                int listSize = 0;

                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                //namespaces.put("http://www.sii.cl/SiiDte","");

                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                namespaces.put("xsi:schemaLocation","http://www.sii.cl/SiiDte ConsumoFolio_v10.xsd");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

            </script>

            <script>

                logger.warn("Generando RCOF\n");

                cl.sii.siiDte.consumofolios.ConsumoFoliosDocument consumoFoliosDocument = ConsumoFoliosDocument.Factory.newInstance();

                consumoFoliosDocument = ConsumoFoliosDocument.Factory.parse(new FileInputStream(plantillaS));


                ConsumoFolios cf = consumoFoliosDocument.getConsumoFolios();


                // Datos de carátula

                DocumentoConsumoFolios dcf = cf.addNewDocumentoConsumoFolios();
                dcf.setID("RCOF"+idS);
                //DocumentoConsumoFolios dcf = consumoFoliosDocument.addNewDocumentoConsumoFolios();

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();
                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS);

                X509Certificate x509 = (X509Certificate) ks.getCertificate(alias);
                String enviadorS = Utilities.getRutFromCertificate(x509);
                PrivateKey pKey = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                //dcf.setVersion("1.0");

                Caratula caratula = dcf.addNewCaratula();

                //caratula.setVersion(BigDecimal.valueOf(1.0));
                caratula.setRutEmisor(rutEmisor);
                caratula.setRutEnvia(rutEnvia);
                //caratula.setRutReceptor(rutReceptor);


                Date dateFchResol = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);

                //iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));
                caratula.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol)));

                caratula.setVersion(new BigDecimal("1.0"));

                caratula.setNroResol(0);
                // Fecha de Inicio del Resumen
                caratula.setFchInicio(calendar);
                caratula.xsetFchInicio(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol)));

                // Fecha Final del Resumen
                caratula.setFchFinal(calendar);
                caratula.xsetFchFinal(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol)));

                caratula.setCorrelativo(1);
                // Secuencia de envío
                caratula.setSecEnvio(1);

                caratula.setNroResol(Integer.valueOf(nroResol));
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula.xsetTmstFirmaEnv(now);
                Resumen[] resumenArray = new Resumen[3];
                // *****************************************************************
                // Resumen de Boleta (39)
                // *****************************************************************

                Resumen resumen = Resumen.Factory.newInstance();

                resumen.setTipoDocumento(39);
                resumen.setMntNeto(mapBoleta.totalMontoNeto);
                resumen.setMntIva(mapBoleta.totalMontoIva);
                resumen.setTasaIVA(19);
                resumen.setMntExento(mapBoleta.totalMontoExento);
                resumen.setMntTotal(mapBoleta.totalMontoTotal);
                resumen.setFoliosEmitidos(mapBoleta.cantDocEmitidos);
                resumen.setFoliosAnulados(mapBoleta.cantFoliosAnulados);
                resumen.setFoliosUtilizados(mapBoleta.cantDocUtilizados);

                // Rango de folios emitidos

                RangoUtilizados[] rangoUtilizadosArray;

                if(mapBoleta.rangosFoliosUtilizados != null)
                   rangoUtilizadosArray = new RangoUtilizados[mapBoleta.rangosFoliosUtilizados.size()];
                int i = 0;
            </script>
               <iterate list="mapBoleta.rangosFoliosUtilizados" entry="rangoField">
                   <script>
                       RangoUtilizados rangoUtilizados = RangoUtilizados.Factory.newInstance();
                       rangoUtilizados.setInicial(rangoField[0]);
                       rangoUtilizados.setFinal(rangoField[1]);
                       rangoUtilizadosArray[i] = rangoUtilizados;
                       i++;
                   </script>
               </iterate>
            
            <script>
                resumen.setRangoUtilizadosArray(rangoUtilizadosArray);

                // Rango de folios anulados
                RangoAnulados[] rangoAnuladosArray;
                if(mapBoleta.rangosFoliosAnulados != null)
                    rangoAnuladosArray = new RangoAnulados[mapBoleta.rangosFoliosAnulados.size()];
                i = 0;
            </script>
            <iterate list="mapBoleta.rangosFoliosAnulados" entry="rangoField">
                <script>
                    RangoAnulados rangoAnulados = RangoAnulados.Factory.newInstance();
                    rangoAnulados.setInicial(rangoField[0]);
                    rangoAnulados.setFinal(rangoField[1]);
                    rangoAnuladosArray[i] = rangoAnulados;
                    i++;
                </script>
            </iterate>
            <script>
                resumen.setRangoAnuladosArray(rangoAnuladosArray);

                resumenArray[0] = resumen; // Resumen de Boleta

                // *****************************************************************
                // Resumen de Boleta Exenta Electrónica (41)
                // *****************************************************************
                resumen = Resumen.Factory.newInstance();

                resumen.setTipoDocumento(41);
                resumen.setMntNeto(0);
                resumen.setMntIva(0);
                //resumen.setTasaIVA(19); // No usado
                resumen.setMntExento(mapBoletaExenta.totalMontoTotal);
                resumen.setMntTotal(mapBoletaExenta.totalMontoTotal);
                resumen.setFoliosEmitidos(mapBoletaExenta.cantDocEmitidos);
                resumen.setFoliosAnulados(mapBoletaExenta.cantFoliosAnulados);
                resumen.setFoliosUtilizados(mapBoletaExenta.cantDocUtilizados);

                // Rango de folios emitidos
                if(mapBoletaExenta.rangosFoliosUtilizados != null)
                    rangoUtilizadosArray = new RangoUtilizados[mapBoletaExenta.rangosFoliosUtilizados.size()];
                i = 0;
            </script>
            <iterate list="mapBoletaExenta.rangosFoliosUtilizados" entry="rangoField">
                <script>
                    RangoUtilizados rangoUtilizados = RangoUtilizados.Factory.newInstance();
                    rangoUtilizados.setInicial(rangoField[0]);
                    rangoUtilizados.setFinal(rangoField[1]);
                    rangoUtilizadosArray[i] = rangoUtilizados;
                    i++;
                </script>
            </iterate>

            <script>
                resumen.setRangoUtilizadosArray(rangoUtilizadosArray);

                // Rango de folios anulados
                //RangoAnulados[] rangoAnuladosArray;

                if(mapBoletaExenta.rangosFoliosAnulados != null)
                    rangoAnuladosArray = new RangoAnulados[mapBoletaExenta.rangosFoliosAnulados.size()];
                i = 0;
            </script>
            <iterate list="mapBoletaExenta.rangosFoliosAnulados" entry="rangoField">
                <script>
                    RangoAnulados rangoAnulados = RangoAnulados.Factory.newInstance();
                    rangoAnulados.setInicial(rangoField[0]);
                    rangoAnulados.setFinal(rangoField[1]);
                    rangoAnuladosArray[i] = rangoAnulados;
                    i++;
                </script>
            </iterate>

            <script>

                resumen.setRangoAnuladosArray(rangoAnuladosArray);

                resumenArray[1] = resumen; // Resumen de Boleta Exenta Electrónica

                // *****************************************************************
                // Resumen de Notas de Crédito (61)
                // *****************************************************************
                resumen = Resumen.Factory.newInstance();

                resumen.setTipoDocumento(61);
                resumen.setMntNeto(mapNotaCredito.totalMontoNeto);
                resumen.setMntIva(mapNotaCredito.totalMontoIva);
                resumen.setTasaIVA(19);
                resumen.setMntExento(mapNotaCredito.totalMontoExento);
                resumen.setMntTotal(mapNotaCredito.totalMontoTotal);
                resumen.setFoliosEmitidos(mapNotaCredito.cantDocEmitidos);
                resumen.setFoliosAnulados(mapNotaCredito.cantFoliosAnulados);
                resumen.setFoliosUtilizados(mapNotaCredito.cantDocUtilizados);

                // Rango de folios emitidos

                if(mapNotaCredito.rangosFoliosUtilizados != null)
                    rangoUtilizadosArray = new RangoUtilizados[mapNotaCredito.rangosFoliosUtilizados.size()];
                i = 0;
            </script>
            <iterate list="mapNotaCredito.rangosFoliosUtilizados" entry="rangoField">
                <script>
                    RangoUtilizados rangoUtilizados = RangoUtilizados.Factory.newInstance();
                    rangoUtilizados.setInicial(rangoField[0]);
                    rangoUtilizados.setFinal(rangoField[1]);
                    rangoUtilizadosArray[i] = rangoUtilizados;
                    i++;
                </script>
            </iterate>

            <script>
                resumen.setRangoUtilizadosArray(rangoUtilizadosArray);

                // Rango de folios anulados
                if(mapNotaCredito.rangosFoliosAnulados != null)
                    rangoAnuladosArray = new RangoAnulados[mapNotaCredito.rangosFoliosAnulados.size()];
                i = 0;
            </script>
            <iterate list="mapNotaCredito.rangosFoliosAnulados" entry="rangoField">
                <script>
                    RangoAnulados rangoAnulados = RangoAnulados.Factory.newInstance();
                    rangoAnulados.setInicial(rangoField[0]);
                    rangoAnulados.setFinal(rangoField[1]);
                    rangoAnuladosArray[i] = rangoAnulados;
                    i++;
                </script>
            </iterate>

            <script>
                resumen.setRangoAnuladosArray(rangoAnuladosArray);

                resumenArray[2] = resumen; // Resumen de Notas de Crédito

                dcf.setResumenArray(resumenArray);


                // antes de firmar le doy formato a los datos
                //opts = new XmlOptions();
                //opts.setSaveImplicitNamespaces(namespaces);
                //opts.setLoadSubstituteNamespaces(namespaces);
                //opts.setLoadAdditionalNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(4);

                // releo el doc para que se reflejen los cambios de formato
                logger.warn("XML:" + consumoFoliosDocument);

                consumoFoliosDocument = ConsumoFoliosDocument.Factory.parse(consumoFoliosDocument.newInputStream(opts), opts);


                // Guardo
                //opts = new XmlOptions();
                //opts.setCharacterEncoding("ISO-8859-1");
                //opts.setSaveImplicitNamespaces(namespaces);

                String uri = "";
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = cf.getDocumentoConsumoFolios().getID();
                //cf.getDocumentoConsumoFolios().xsetTmstFirma(now);


                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                consumoFoliosDocument.save(new File(resultS + "RCOF-" + uri + "-sinfirma.xml"), opts);
                consumoFoliosDocument.save(out, opts);

                logger.warn("XML2:" + consumoFoliosDocument);


                //Document doc2 = XMLUtil.parseDocument(out.toByteArray());
                //byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "DocumentoConsumoFolios");
                //doc2 = XMLUtil.parseDocument(salida);

                FirmaRcof firmaLibro = new FirmaRcof();

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                //logger.warn("cert:" + certS + " passS: " + passS);
                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, fchResol);
                outPDF+="/RCOF-firmado-"+uri+".xml";

                String mensaje=firmaLibro.firmarRcof(certS, passS, resultS + "RCOF-" + uri + "-sinfirma.xml",outPDF,10,"ENVIADO","qq","pp","xmlasdas","ESPECIAL");

                return


            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->

            <!--set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}BOL${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}BOL${tipoFactura}-${folio}.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf, dte:xml, activeOrgId:activeOrgId, boleta:true]" out-map="context"/-->

            <!-- Creación de registro en FiscalTaxDocument -->
            <!--entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
            </entity-find-one>

            <set field="dteField.issuerPartyId" from="activeOrgId"/>
            <if condition="rutReceptor != '66666666-6'"><then>
                <set field="dteField.receiverPartyId" from="receiverPartyId"/>
                <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            </then></if>
            <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>
            <set field="dteField.invoiceId" from="invoiceId"/-->

            <!--script>
                Date date = new Date();
                Timestamp ts = new Timestamp(date.getTime());
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/-->

        </actions>
    </service>


    <service verb="update" noun="InvoiceGlobalDiscount">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="globalDiscount" type="Integer" default-value="0"/>
            <parameter name="glosaDr"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoiceField">
                <field-map field-name="invoiceId" from="invoiceId"/>
            </entity-find-one>
            <set field="invoiceField.globalDiscount" from="globalDiscount"/>
            <set field="invoiceField.glosaDr" from="glosaDr"/>
            <entity-update value-field="invoiceField"/>
        </actions>
    </service>

    <service verb="update" noun="ShipmentIndTraslado">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="indTrasladoEnumId" required="true"/>
            <parameter name="tipoDespachoEnumId"/>
            <parameter name="priceInclude"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipmentField">
                <field-map field-name="shipmentId" from="shipmentId"/>
            </entity-find-one>
            <set field="shipmentField.indTrasladoEnumId" from="indTrasladoEnumId"/>
            <if condition="tipoDespachoEnumId">
                <set field="shipmentField.tipoDespachoEnumId" from="tipoDespachoEnumId"/>
            </if>
            <set field="shipmentField.priceInclude" from="priceInclude"/>
            <entity-update value-field="shipmentField"/>
        </actions>
    </service>

    <service verb="generar" noun="GuiaDespacho">
        <description>
            Obtiene datos para generar Guía de Despacho a partir de un shipment
        </description>
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="indTrasladoEnumId" required="true"/>
            <parameter name="tipoDespachoEnumId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.shipment.ShipmentItemDetail" list="shipmentItemDetailList">
                <econdition field-name="shipmentId"/><order-by field-name="productId"/></entity-find>


            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperación de referencias -->
            <entity-find entity-name="mchile.dte.ReferenciaShipment" list="referenciaList">
                <econdition field-name="shipmentId" from="shipmentId"/>
            </entity-find>

            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipmentField"/>

            <if condition="!shipmentField">
                <return error="true" message="No existe despacho"/>
            </if>
            <if condition="!shipmentField.toPartyId">
                <return error="true" message="No existe tercero asociado a despacho"/>
            </if>
            <set field="partyId" from="shipmentField.toPartyId"/>
            <set field="indTrasladoEnumId" from="shipmentField.indTrasladoEnumId"/>
            <set field="tipoDespachoEnumId" from="shipmentField.tipoDespachoEnumId"/>

            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:shipmentField.toPartyId]" out-map="context"/>
            <if condition="!emailAddress">
                <return error="true" message="Receptor no tiene dirección de correo"/>
            </if>
            <set field="username" from="emailAddress"/>

            <!-- rut receptor -->
            <set field="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField"/>

            <if condition="!partyField">
                <return error="true" message="Receptor no tiene RUT"/>
            </if>

            <set field="rutReceptor" from="partyField.idValue"/>


            <!-- Datos para encontrar contacto -->

            <entity-find entity-name="mantle.party.contact.PartyContactMech" list="contactMechList">
                <econdition field-name="partyId" from="partyId"/>
                <econdition field-name="contactMechPurposeId" value="PostalTax"/>
                <econdition field-name="fromDate" operator="less-equals" from="ec.user.nowTimestamp"/>
                <econdition field-name="thruDate" from="null"/>
            </entity-find>

            <if condition="!contactMechList">
                <return error="true" message="Receptor no tiene dirección para impuestos"/>
            </if>
            <set field="contactMechId" from="contactMechList.contactMechId.first()"/>

            <!-- Datos de contacto -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="contactPostalAddressField"/>

            <if condition="!contactPostalAddressField">
                <return error="true" message="Receptor no tiene dirección postal"/>
            </if>

            <set field="dirReceptor" from="contactPostalAddressField.address1"/>
            <script>
                dirReceptor = dirReceptor + " " + contactPostalAddressField.unitNumber
            </script>
            <set field="cmnaReceptor" from="contactPostalAddressField.city"/>

            <!-- Obtención de contacto para impuestos en organización -->
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                          in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
            <if condition="!contactOut.postalContactMechId">
            </if>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
            </entity-find-one>

            <set field="cmnaReceptor" from="postalAddressField.stateProvinceGeoId"/>

            <service-call name="mchile.GeoServices.get#ComunaFromGeoId" in-map="[stateProvinceGeoId:postalAddressField.stateProvinceGeoId]" out-map="comunaOut"/>



            <set field="cmnaReceptor" from="comunaOut.comuna"/>
            <!-- ID Contacto receptor -->
            <set field="receptorContactId" from="contactPostalAddressField.telecomContactMechId"/>


            <entity-find-one entity-name="mantle.party.Party" value-field="partyField"/>
            <if condition="!partyField">
                <return error="true" message="Receptor no existe"/>
            </if>

            <set field="partyTypeEnumId" from="partyField.partyTypeEnumId"/>


            <set field="rznSocReceptor" value=""/>
            <set field="contactoReceptor" value=""/>
            <set field="giroReceptor" value="Sin Giro"/>


            <if condition="partyTypeEnumId == 'PtyOrganization'">
                <!-- Organizacion -->
                <entity-find-one entity-name="mantle.party.Organization" value-field="organizationField"/>
                <set field="rznSocReceptor" from="organizationField.organizationName"/>
                <!--set field="giroReceptor" from="organizationField.giro"/!>
                <if condition="!giroReceptor">
                    <return error="true" message="Organización no tiene giro ingresado"/>
                </if-->
                <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:partyId]" out-map="giroOutMap"/>
                <set field="giroReceptor" from="giroOutMap.description"/>
                <!-- Obtención de contacto para impuestos en organización -->
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactOut"
                              in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax']"/>
                <if condition="!contactOut.postalContactMechId">
                    <return error="true" message="Receptor no tiene contacto tributario asignado"/>
                </if>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddressField">
                    <field-map field-name="contactMechId" from="contactOut.postalContactMechId"/>
                </entity-find-one>
                <!-- Obtención de contacto en organización -->
                <if condition="!postalAddressField">
                    <return error="true" message="Nombre receptor no encontrado"/>
                </if>

                <set field="contactoReceptor" from="postalAddressField.toName"/>

            </if>

            <if condition="partyTypeEnumId == 'PtyPerson'">
                <!-- Persona Natural -->
                <entity-find-one entity-name="mantle.party.Person" value-field="personField"/>
                <if condition="!personField">
                    <return error="true" message="No existe persona para facturar"/>
                </if>

                <set field="rznSocReceptor" from="personField.firstName"/>
                <script>
                    rznSocReceptor = rznSocReceptor + " " + personField.lastName
                </script>
                <set field="contactoReceptor" from="rznSocReceptor"/>
            </if>

            <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:indTrasladoEnumId]" out-map="codeOut"/>
            <set field="indTraslado" from="codeOut.siiCode"/>
            <set field="tipoDespacho" type="String"/>

            <if condition="tipoDespachoEnumId">
                <service-call name="mchile.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:tipoDespachoEnumId]" out-map="codeOut"/>
                <set field="tipoDespacho" from="codeOut.siiCode"/>
            </if>


            <!-- Generacion de guía de despacho -->
            <service-call name="mchile.DTEServices.genera#Factura" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-52', emisorS:emisorS, rutReceptor:rutReceptor, rznSocReceptor:rznSocReceptor, giroReceptor:giroReceptor,
                          contactoReceptor:contactoReceptor, dirReceptor:dirReceptor, cmnaReceptor:cmnaReceptor, ciudadReceptor:ciudadReceptor, detailList:shipmentItemDetailList,
                          invoiceId:invoiceId, returnId:returnId, formaPago:formaPago, medioPago:medioPago, referenciaList:referenciaList, activeOrgId:activeOrgId, receiverPartyId:partyId,
                          indTraslado:indTraslado, tipoDespacho:tipoDespacho]" out-map="factMapOut"/>
            <set field="fiscalTaxDocumentId" from="factMapOut.fiscalTaxDocumentId"/>
        </actions>
    </service>

    <service verb="get" noun="GiroPrimario">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="giroId"/>
            <parameter name="description"/>
        </out-parameters>
        <actions>

            <entity-find-one entity-name="mchile.dte.PartyGiro" value-field="giroField">
                <field-map field-name="partyId" from="partyId"/>
                <field-map field-name="isPrimary" value="Primario"/>
            </entity-find-one>
            <if condition="giroField == null"><then>

                <entity-find-one entity-name="mchile.dte.PartyGiro" value-field="giroField">
                    <field-map field-name="partyId" from="partyId"/>
                </entity-find-one>
                <if condition="!giroField">
                    <return error="true" message="Empresa de ID ${partyId} no tiene giro primario o giro registrado"/>
                </if>
                </then>
            </if>
            <set field="giroId" from="giroField.giroId"/>
            <set field="description" from="giroField.description"/>
        </actions>
    </service>

    <service verb="validar" noun="DTE" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="rutEmisor" required="true"/>
            <parameter name="folio" required="true" type="Integer"/>
            <parameter name="fechaEmision" required="true"/>
            <parameter name="monto" required="true" type="Integer"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <!-- Se busca partyId de acuerdo a emisor -->
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyField">
                <field-map field-name="idValue" from="rutEmisor"/>
            </entity-find-one>
            <if condition="!partyField">
                <message>No se encontró documento con los parámetros ingresados</message>
                <set field="fiscalTaxDocumentId"/>
                <return/>
            </if>
            <set field="issuerPartyId" from="partyField.partyId"/>

            <!-- Se verifica en tabla principal -->
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="ftdtList">
                <econdition field-name="fiscalTaxDocumentNumber" from="folio"/>
                <econdition field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
                <econdition field-name="issuerPartyId" from="issuerPartyId"/>
            </entity-find>
            <set field="ftdtField" from="ftdtList.first"/>
            <if condition="!ftdtField">
                <message>No se encontró documento con los parámetros ingresados</message>
                <set field="fiscalTaxDocumentId"/>
                <return/>
            </if>

            <set field="fiscalTaxDocumentId" from="ftdtField.fiscalTaxDocumentId"/>
            <log level="warn" message="DTE Encontrada: $fiscalTaxDocumentId"/>
            <!-- Se buscan atributos en mchile.dte.FiscalTaxDocumentAttributes -->
            <entity-find entity-name="mchile.dte.FiscalTaxDocumentAttributes" list="ftdtAttList">
                <econdition field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <econdition field-name="amount" from="monto"/>
                <econdition field-name="fechaEmision" from="fechaEmision"/>
            </entity-find>

            <if condition="!ftdtAttList">
                <message>No se encontró documento con los parámetros ingresados</message>
                <set field="fiscalTaxDocumentId"/>
                <return/>
            </if>

        </actions>
    </service>

    <service verb="get" noun="ResumenRcof">
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true" type="String"/>
            <parameter name="fechaInicio" required="true" type="Timestamp"/>
            <parameter name="fechaFin" required="true" type="Timestamp"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="totalMontoNeto" type="BigDecimal"/>
            <parameter name="totalMontoIva" type="BigDecimal"/><!-- Se toma monto IVA Recuperable -->
            <parameter name="tasaIva"/>
            <parameter name="totalMontoExento"/>
            <parameter name="totalMontoTotal"/>
            <parameter name="cantDocEmitidos"/>
            <parameter name="cantFoliosAnulados"/>
            <parameter name="cantDocUtilizados"/>
            <parameter name="rangosFoliosUtilizados" type="List"/>
            <parameter name="rangosFoliosAnulados" type="List"/>
        </out-parameters>
        <actions>
            <set field="totalMontoNeto" from="0"/>
            <set field="totalMontoIva" from="0"/>
            <set field="totalMontoExento" from="0"/>
            <set field="totalMontoTotal" from="0"/>
            <set field="cantDocEmitidos" from="0"/>
            <set field="cantFoliosAnulados" from="0"/>
            <set field="cantDocUtilizados" from="0"/>
            <set field="tasaIva" from="19"/>
            <set field="rangosFoliosUtilizados" type="List"/>
            <set field="rangosFoliosAnulados" type="List"/>
            <script>
                Calendar cal = Calendar.getInstance();
                cal.setTimeInMillis(fechaFin.getTime());
                // add x hours
                cal.add(Calendar.HOUR, 24);
                fechaFin = new Timestamp(cal.getTime().getTime());
            </script>

            <entity-find entity-name="mchile.dte.FtdtAttributesView" list="dteList">
                <econdition field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <!--econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/-->
                <econditions combine="or">
                    <econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
                    <econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Cancelled"/>
                </econditions>
                <econdition field-name="issuerPartyId" from="activeOrgId"/>
                <econdition field-name="date" operator="greater-equals" from="fechaInicio"/>
                <econdition field-name="date" operator="less-equals" from="fechaFin"/>
                <order-by field-name="fiscalTaxDocumentId"/>
            </entity-find>



            <iterate list="dteList" entry="dteField">
                <!--log level="warn" message="Atributos encontrados: $dteField.fiscalTaxDocumentId, Monto Neto: $dteField.montoNeto, monto IVA: $dteField.montoIVARecuperable, tipo: $dteField.fiscalTaxDocumentStatusEnumId"/-->
                <if condition="!dteField.fiscalTaxDocumentStatusEnumId.equals('Ftdt-Cancelled')"><then>
                    <script>
                        if(dteField.montoNeto != null) {
                            long montoNeto = (long) dteField.montoNeto
                            totalMontoNeto = totalMontoNeto + montoNeto
                        }
                        if(dteField.montoIVARecuperable != null) {
                            long montoIva = (long) dteField.montoIVARecuperable
                            totalMontoIva = totalMontoIva + montoIva
                        }
                        if(dteField.montoExento != null) {
                            long montoExento = (long) dteField.montoExento
                            totalMontoExento = totalMontoExento + montoExento
                        }
                        cantDocEmitidos = cantDocEmitidos + 1
                    </script>
                </then>
                <else><!-- Documento cancelado -->
                    <!--log message="DTE Cancelada" level="warn"/-->
                    <script>
                        cantFoliosAnulados = cantFoliosAnulados + 1
                    </script>
                </else>
                </if>
            </iterate>
            <set field="cantDocUtilizados" from="cantFoliosAnulados + cantDocEmitidos"/>
            <set field="totalMontoTotal" from="totalMontoNeto + totalMontoExento + totalMontoIva"/>


            <!-- TODO: Consulta para ver todos los folios usados -->
            <entity-find entity-name="mchile.dte.FtdtAttributesView" list="dteList">
                <econdition field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
                <econdition field-name="issuerPartyId" from="activeOrgId"/>
                <econdition field-name="date" operator="greater-equals" from="fechaInicio"/>
                <econdition field-name="date" operator="less-equals" from="fechaFin"/>
                <order-by field-name="fiscalTaxDocumentId"/>
            </entity-find>
            <script>
                List&lt;Integer&gt; list;
                List&lt;List&lt;Integer&gt;&gt; lList = new ArrayList&lt;List&lt;Integer&gt;&gt;();
                int i = 0;
                int start = 0;
                List&lt;Integer&gt; sList = new ArrayList&lt;Integer&gt;(2);
                int listSize = 0;

                for (i = 1; i &lt; dteList.size(); i++) {

                    if(dteList.get(i-1).fiscalTaxDocumentNumber + 1 != dteList.get(i).fiscalTaxDocumentNumber) {
                        sList.add(dteList.get(start).fiscalTaxDocumentNumber);
                        sList.add(dteList.get(i-1).fiscalTaxDocumentNumber);
                        lList.add(sList);
                        sList = new ArrayList&lt;Integer&gt;(2);
                        start = i;

                    }

                }
                if(dteList.size() &gt; 0) {
                    sList.add(dteList.get(start).fiscalTaxDocumentNumber);
                    sList.add(dteList.get(dteList.size()-1).fiscalTaxDocumentNumber);
                    lList.add(sList);
                }
                logger.warn("Lista de rangos emitidos: " + lList);

            </script>

            <!-- TODO: Consulta para ver todos los folios anulados -->
            <entity-find entity-name="mchile.dte.FtdtAttributesView" list="dteList">
                <econdition field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Cancelled"/>
                <econdition field-name="issuerPartyId" from="activeOrgId"/>
                <econdition field-name="date" operator="greater-equals" from="fechaInicio"/>
                <econdition field-name="date" operator="less-equals" from="fechaFin"/>
                <order-by field-name="fiscalTaxDocumentId"/>
            </entity-find>


            <script>
                List&lt;Integer&gt; listc;
                List&lt;List&lt;Integer&gt;&gt; lListc = new ArrayList&lt;List&lt;Integer&gt;&gt;();
                i = 0;
                start = 0;
                List&lt;Integer&gt; sListc = new ArrayList&lt;Integer&gt;(2);
                for (i = 1; i &lt; dteList.size(); i++) {
                    if(dteList.get(i-1).fiscalTaxDocumentNumber + 1 != dteList.get(i).fiscalTaxDocumentNumber) {
                        sListc.add(dteList.get(start).fiscalTaxDocumentNumber);
                        sListc.add(dteList.get(i-1).fiscalTaxDocumentNumber);
                        lListc.add(sList);
                        sListc = new ArrayList&lt;Integer&gt;(2);
                        start = i;
                    }
                }
                if(dteList.size() &gt; 0) {
                    sListc.add(dteList.get(start).fiscalTaxDocumentNumber);
                    sListc.add(dteList.get(dteList.size()-1).fiscalTaxDocumentNumber);
                    lListc.add(sListc);
                }
                logger.warn("Lista de rangos anulados: " + lListc);
            </script>
            <set field="rangosFoliosUtilizados" from="lList"/>
            <set field="rangosFoliosAnulados" from="lListc"/>
        </actions>
    </service>

    <service verb="get" noun="ResumenRcofNC">
        <description>
            Servicio que devuelve resumen de NC emitidas que refieren a boletas (39, 41)
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true" type="String"/>
            <parameter name="fechaInicio" required="true" type="Timestamp"/>
            <parameter name="fechaFin" required="true" type="Timestamp"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="totalMontoNeto" type="BigDecimal"/>
            <parameter name="totalMontoIva" type="BigDecimal"/><!-- Se toma monto IVA Recuperable -->
            <parameter name="tasaIva"/>
            <parameter name="totalMontoExento"/>
            <parameter name="totalMontoTotal"/>
            <parameter name="cantDocEmitidos"/>
            <parameter name="cantFoliosAnulados"/>
            <parameter name="cantDocUtilizados"/>
            <parameter name="rangosFoliosUtilizados" type="List"/>
            <parameter name="rangosFoliosAnulados" type="List"/>
        </out-parameters>
        <actions>
            <set field="totalMontoNeto" from="0"/>
            <set field="totalMontoIva" from="0"/>
            <set field="totalMontoExento" from="0"/>
            <set field="totalMontoTotal" from="0"/>
            <set field="cantDocEmitidos" from="0"/>
            <set field="cantFoliosAnulados" from="0"/>
            <set field="cantDocUtilizados" from="0"/>
            <set field="tasaIva" from="19"/>
            <set field="rangosFoliosUtilizados" type="List"/>
            <set field="rangosFoliosAnulados" type="List"/>
            <script>
                Calendar cal = Calendar.getInstance();
                cal.setTimeInMillis(fechaFin.getTime());
                // add x hours
                cal.add(Calendar.HOUR, 24);
                fechaFin = new Timestamp(cal.getTime().getTime());
            </script>

            <entity-find entity-name="mchile.dte.FtdtAttributesView" list="dteList">
                <econdition field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <!--econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/-->
                <econditions combine="or">
                    <econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
                    <econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Cancelled"/>
                </econditions>
                <econdition field-name="issuerPartyId" from="activeOrgId"/>
                <econdition field-name="date" operator="greater-equals" from="fechaInicio"/>
                <econdition field-name="date" operator="less-equals" from="fechaFin"/>
                <order-by field-name="fiscalTaxDocumentId"/>
            </entity-find>



            <iterate list="dteList" entry="dteField">
                <!--log level="warn" message="Atributos encontrados: $dteField.fiscalTaxDocumentId, Monto Neto: $dteField.montoNeto, monto IVA: $dteField.montoIVARecuperable, tipo: $dteField.fiscalTaxDocumentStatusEnumId"/-->
                <if condition="!dteField.fiscalTaxDocumentStatusEnumId.equals('Ftdt-Cancelled')"><then>
                    <script>
                        if(dteField.montoNeto != null) {
                        long montoNeto = (long) dteField.montoNeto
                        totalMontoNeto = totalMontoNeto + montoNeto
                        }
                        if(dteField.montoIVARecuperable != null) {
                        long montoIva = (long) dteField.montoIVARecuperable
                        totalMontoIva = totalMontoIva + montoIva
                        }
                        if(dteField.montoExento != null) {
                        long montoExento = (long) dteField.montoExento
                        totalMontoExento = totalMontoExento + montoExento
                        }
                        cantDocEmitidos = cantDocEmitidos + 1
                    </script>
                </then>
                    <else><!-- Documento cancelado -->
                        <!--log message="DTE Cancelada" level="warn"/-->
                        <script>
                            cantFoliosAnulados = cantFoliosAnulados + 1
                        </script>
                    </else>
                </if>
            </iterate>
            <set field="cantDocUtilizados" from="cantFoliosAnulados + cantDocEmitidos"/>
            <set field="totalMontoTotal" from="totalMontoNeto + totalMontoExento + totalMontoIva"/>
            <!--return error="true" message="NC: $cantDocUtilizados - $totalMontoTotal"/-->

            <!-- TODO: Consulta para ver todos los folios usados -->
            <entity-find entity-name="mchile.dte.FtdtAttributesView" list="dteList">
                <econdition field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
                <econdition field-name="issuerPartyId" from="activeOrgId"/>
                <econdition field-name="date" operator="greater-equals" from="fechaInicio"/>
                <econdition field-name="date" operator="less-equals" from="fechaFin"/>
                <order-by field-name="fiscalTaxDocumentId"/>
            </entity-find>
            <script>
                List&lt;Integer&gt; list;
                List&lt;List&lt;Integer&gt;&gt; lList = new ArrayList&lt;List&lt;Integer&gt;&gt;();
                int i = 0;
                int start = 0;
                List&lt;Integer&gt; sList = new ArrayList&lt;Integer&gt;(2);
                int listSize = 0;

                for (i = 1; i &lt; dteList.size(); i++) {

                if(dteList.get(i-1).fiscalTaxDocumentNumber + 1 != dteList.get(i).fiscalTaxDocumentNumber) {
                sList.add(dteList.get(start).fiscalTaxDocumentNumber);
                sList.add(dteList.get(i-1).fiscalTaxDocumentNumber);
                lList.add(sList);
                sList = new ArrayList&lt;Integer&gt;(2);
                start = i;

                }

                }
                if(dteList.size() &gt; 0) {
                sList.add(dteList.get(start).fiscalTaxDocumentNumber);
                sList.add(dteList.get(dteList.size()-1).fiscalTaxDocumentNumber);
                lList.add(sList);
                }
                logger.warn("Lista de rangos emitidos: " + lList);

            </script>

            <!-- TODO: Consulta para ver todos los folios anulados -->
            <entity-find entity-name="mchile.dte.FtdtAttributesView" list="dteList">
                <econdition field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <econdition field-name="fiscalTaxDocumentStatusEnumId" value="Ftdt-Cancelled"/>
                <econdition field-name="issuerPartyId" from="activeOrgId"/>
                <econdition field-name="date" operator="greater-equals" from="fechaInicio"/>
                <econdition field-name="date" operator="less-equals" from="fechaFin"/>
                <order-by field-name="fiscalTaxDocumentId"/>
            </entity-find>


            <script>
                List&lt;Integer&gt; listc;
                List&lt;List&lt;Integer&gt;&gt; lListc = new ArrayList&lt;List&lt;Integer&gt;&gt;();
                i = 0;
                start = 0;
                List&lt;Integer&gt; sListc = new ArrayList&lt;Integer&gt;(2);
                for (i = 1; i &lt; dteList.size(); i++) {
                if(dteList.get(i-1).fiscalTaxDocumentNumber + 1 != dteList.get(i).fiscalTaxDocumentNumber) {
                sListc.add(dteList.get(start).fiscalTaxDocumentNumber);
                sListc.add(dteList.get(i-1).fiscalTaxDocumentNumber);
                lListc.add(sList);
                sListc = new ArrayList&lt;Integer&gt;(2);
                start = i;
                }
                }
                if(dteList.size() &gt; 0) {
                sListc.add(dteList.get(start).fiscalTaxDocumentNumber);
                sListc.add(dteList.get(dteList.size()-1).fiscalTaxDocumentNumber);
                lListc.add(sListc);
                }
                logger.warn("Lista de rangos anulados: " + lListc);
            </script>
            <set field="rangosFoliosUtilizados" from="lList"/>
            <set field="rangosFoliosAnulados" from="lListc"/>
        </actions>
    </service>

    <service verb="load" noun="DteContent">
        <description>
            Carga XML/PDF/PDF Cedible directo en la BD
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentContentTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <set field="archivo" from="filename.getName()"/>

            <entity-find entity-name="mchile.dte.FiscalTaxDocumentContent" list="ftdtList">
                <econdition field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <econdition field-name="fiscalTaxDocumentContentTypeEnumId" from="fiscalTaxDocumentContentTypeEnumId"/>
            </entity-find>

            <iterate list="ftdtList" entry="ftdtEntry">
                <set field="ftdtEntry.contentData" from="filename.get()"/>
                <entity-update value-field="ftdtEntry"/>
            </iterate>
        </actions>
    </service>

    <service verb="update" noun="PartyDteParameters">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="templateFactura"/>
            <parameter name="templateBoleta"/>
            <parameter name="templatePdf"/>
            <parameter name="templatePdfCedible"/>
            <parameter name="templatePdfBoleta"/>
            <parameter name="templatePdfBoletaContinua"/>
            <parameter name="templateEnvio"/>
            <parameter name="templateEnvioBoleta"/>
            <parameter name="templateAceptaciones"/>
            <parameter name="templateRcof"/>
            <parameter name="logo"/>
            <parameter name="fchResol"/>
            <parameter name="nroResol"/>
            <parameter name="rutEmisor"/>
            <parameter name="rutEnvia"/>
            <parameter name="rznSocEmisor"/>
            <parameter name="cdgSIISucur"/>
            <parameter name="dirOrigen"/>
            <parameter name="cmnaOrigen"/>
            <parameter name="ciudadOrigen"/>
            <parameter name="pathResults"/>
            <parameter name="pathAceptaciones"/>
            <parameter name="pathRecibidas"/>
            <parameter name="pathPdf"/>
            <parameter name="pathTemp"/>
            <parameter name="pathCaf"/>
            <parameter name="pathCert"/>
            <parameter name="passCert"/>
            <parameter name="nmbContacto"/>
            <parameter name="mailContacto"/>
            <parameter name="fonoContacto"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.PartyDteParams" list="paramsList">
                <econdition field-name="partyId"/></entity-find>


            <if condition="paramsList"><then>
                    <service-call name="update#mchile.dte.PartyDteParams" in-map="context"/>
                </then>
                <else>
                    <service-call name="create#mchile.dte.PartyDteParams"
                                  in-map="[partyId:partyId, templateFactura:templateFactura, templateBoleta:templateBoleta,  templatePdf:templatePdf, templatePdfCedible:templatePdfCedible, templatePdfBoleta:templatePdfBoleta,
                                  templatePdfBoletaContinua:templatePdfBoletaContinua,
                    templateEnvio:templateEnvio, templateEnvioBoleta:templateEnvioBoleta, templateAceptaciones:templateAceptaciones, templateRcof:templateRcof, logo:logo, fchResol:fechResol, nroResol:nroResol, rutEmisor:rutEmisor,
                    rutEnvia:rutEnvia, rznSocEmisor:rznSocEmisor, cdgSIISucur:cdgSIISucur, dirOrigen:dirOrigen, cmnaOrigen:cmnaOrigen, ciudadOrigen:ciudadOrigen, pathResults:pathResults, pathAceptaciones:pathAceptaciones,
                    pathRecibidas:pathRecibidas, pathPdf:pathPdf, pathTemp:pathTemp, pathCaf:pathCaf, pathCert:pathCert, passCert:passCert, nmbContacto:nmbContacto, mailContacto:mailContacto, fonoContacto:fonoContacto]"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="load" noun="Certificate">
        <description>
            Carga Certificado Digital para firmar DTE
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="passCert" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.PartyDteParams" value-field="dteParams" for-update="true">
                <field-map field-name="partyId" from="activeOrgId"/>
            </entity-find-one>
            <if condition="!dteParams">
                <return error="true" message="Primero complete parametros de organizacion"/>
            </if>
            <set field="dteParams.passCert" from="passCert"/>
            <set field="dteParams.certData" from="filename.get()"/>
            
            <entity-update value-field="dteParams"/>
        </actions>
    </service>

    <service verb="load" noun="PDFTemplate">
        <description>
            Carga Plantilla para generar PDF
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="type" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.PartyDteParams" value-field="dteParams" for-update="true">
                <field-map field-name="partyId" from="activeOrgId"/>
            </entity-find-one>


            <if condition="type == 'PDF'">
                <set field="dteParams.pdfTemplate" from="filename.get()"/>
                <set field="dteParams.pdfTemplateFilename" from="filename.getName()"/>
            </if>

            <if condition="type == 'PDFCedible'">
                <set field="dteParams.pdfTemplateCedible" from="filename.get()"/>
                <set field="dteParams.pdfTemplateCedibleFilename" from="filename.getName()"/>
            </if>

            <if condition="type == 'Boleta'">
                <set field="dteParams.pdfTemplateBoleta" from="filename.get()"/>
                <set field="dteParams.pdfTemplateBoletaFilename" from="filename.getName()"/>
            </if>

            <if condition="type == 'BoletaContinua'">
                <set field="dteParams.pdfTemplateBoletaContinua" from="filename.get()"/>
                <set field="dteParams.pdfTemplateBoletaContinuaFilename" from="filename.getName()"/>
            </if>

            <set field="logFile"/>
            <script>
                logFile = filename.getName();
            </script>
            <log level="error" message="Subiendo plantilla PDF $logFile"/>

            <entity-update value-field="dteParams"/>
        </actions>
    </service>

    <service verb="set" noun="PreferredDTE">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="preferredDteTypeEnumId"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.PartyDteParams" value-field="dteParams" for-update="true">
                <field-map field-name="partyId" from="partyId"/>
            </entity-find-one>
            <if condition="!dteParams">
            <then>
                <!-- Hay que crear entrada para partyId -->
                <set field="createMap" from="[partyId:partyId, preferredDteTypeEnumId:preferredDteTypeEnumId]"/>
                <service-call name="create#mchile.dte.PartyDteParams" out-map="context" in-map="createMap"/>
            </then><else>
                <set field="dteParams.preferredDteTypeEnumId" from="preferredDteTypeEnumId"/>
                <entity-update value-field="dteParams"/>
            </else></if>
        </actions>
    </service>

    <service verb="get" noun="PreferredDTE">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="preferredDteTypeEnumId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.PartyDteParams" value-field="dteParams">
                <field-map field-name="partyId" from="partyId"/>
            </entity-find-one>
            <if condition="!dteParams">
                <return error="true" message="Receptor no tiene datos tributarios"/>
            </if>
            <if condition="dteParams.preferredDteTypeEnumId">
                <set field="preferredDteTypeEnumId" from="dteParams.preferredDteTypeEnumId"/>
            </if>
        </actions>
    </service>

    <service verb="add" noun="ReferenceToInvoice">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="referenceText" default-value=" - "/>
            <parameter name="folioRef"/>
            <parameter name="tipoDocRef"/>
            <parameter name="fecha"/>
        </in-parameters>
        <actions>

            <entity-find-one entity-name="mchile.dte.ReferenciaInvoice" value-field="refField" for-update="true">
                <field-map field-name="invoiceId" from="invoiceId"/>
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="tipoDocRef"/>
            </entity-find-one>

            <if condition="!refField">
                <then>
                    <!-- Hay que crear entrada para referencia de invoiceId -->
                    <set field="createMap" from="[fiscalTaxDocumentTypeEnumId:tipoDocRef, codigoReferenciaEnumId:codigoReferenciaEnumId, fecha:fecha, folio:folioRef, invoiceId:invoiceId]"/>
                    <service-call name="create#mchile.dte.ReferenciaInvoice" out-map="context" in-map="createMap"/>
                </then><else>
                   <!-- Ya existe la referencia -->
                    <set field="refField.folio" from="folioRef"/>
                    <set field="refField.fiscalTaxDocumentTypeEnumId" from="tipoDocRef"/>
                    <set field="refField.fecha" from="fecha"/>
            </else></if>

        </actions>
    </service>

</services>