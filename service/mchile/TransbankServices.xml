<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">


    <service verb="initTransaction" noun="Webpay">
        <!-- Llamado a initTransaction de Webpay -->
        <in-parameters>
            <parameter name="wSTransactionType" required="true" default-value="TR_NORMAL_WS"/>
            <parameter name="sessionId"/>
            <parameter name="wPMDetail"/>
            <parameter name="commerceId"/>
            <parameter name="buyOrder"/>
            <parameter name="commerceCode" default-value="12345678"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token"/>
            <parameter name="urlTbk"/>
        </out-parameters>
        <actions>

            <set field="orderId" value="${buyOrder}"/>
            <script>
                int amount = 0
            </script>

            <service-call name="mantle.order.OrderServices.place#Order" in-map="[orderId:orderId]"/>

            <entity-find entity-name="mantle.order.OrderItem" list="orderList">
                <econdition field-name="orderId" value="${orderId}"/>
            </entity-find>
            <iterate list="orderList" entry="order">
                <set field="quantity" from="order.quantity" type="BigDecimal"/>
                <set field="amountQuantity" from="order.unitAmount" type="BigDecimal"/>
                <script>
                    amount = (quantity*amountQuantity) + amount
                </script>
            </iterate>

            <service-call name="mchile.TransbankServices.initConfiguration#Webpay" out-map="context"/>

            <set field="publicCert" value="${publicCert}"/>
            <set field="privateKey" value="${privateKey}"/>
            <set field="ambient" value="${environ}"/>
            <set field="commerceCode" value="${commerceCode}"/>
            <set field="webpayCert" value="${webpayCert}"/>
            <script>
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityCondition
                import org.moqui.entity.EntityFind
                import org.moqui.entity.EntityList
                import org.moqui.entity.EntityValue
                // imports para webpay
                import java.util.Random
                import com.transbank.webpay.wswebpay.service.NullificationOutput
                import com.transbank.webpay.wswebpay.service.TransactionResultOutput
                import com.transbank.webpay.wswebpay.service.WsInitTransactionOutput
                import java.math.BigDecimal
                import cl.transbank.webpay.configuration.Configuration
                import java.util.ListIterator
                import java.lang.reflect.Field
                import java.util.ArrayList
                import cl.transbank.webpay.Webpay
                import cl.transbank.webpay.security.SoapSignature

                String webpay_cert = webpayCert

                String private_key = privateKey

                String environment = ambient

                String commerce_code = commerceCode

                String public_cert = publicCert

                Configuration configuration = new Configuration()

                configuration.setWebpayCert(webpay_cert)
                configuration.setPrivateKey(private_key)
                configuration.setCommerceCode(commerce_code)
                configuration.setPublicCert(public_cert)
                configuration.setEnvironment(environment)
                Webpay webpay = new Webpay(configuration)
                WsInitTransactionOutput result = new WsInitTransactionOutput();

                // URL para marcar como pagado
                urlReturn = "http://localhost:8080/popc/Customer/OrderDetailTbk?orderId=" + buyOrder;
                // URL para mostrar resultado
                //urlFinal = "http://localhost:8080/popc/Customer/OrderDetail?orderId=" + buyOrder + "&amp;cancelled=true";
                urlFinal = "http://localhost:8080/popc/Customer/OrderDetail?orderId=" + buyOrder;

                String idSession = "aj2h4kj3";

                result = webpay.getNormalTransaction().initTransaction(amount, idSession, buyOrder, urlReturn, urlFinal )

            </script>

            <set field="token" value="${result.getToken()}"/>
            <set field="urlTbk" value="${result.getUrl()}"/>


        </actions>
    </service>

    <service verb="getTransactionResult" noun="Webpay">
        <!-- Llamado a getTransactionResult de Webpay -->
        <in-parameters>
            <parameter name="tokenInput" required="true"/>
            <parameter name="productStoreId" required="true"/>
            <parameter name="defaultCurrencyUomId" required="true"/>
            <parameter name="customerPartyId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="buyOrder"/>
            <parameter name="sessionId"/>
            <parameter name="cardNumber"/>
            <parameter name="cardExpirationDate"/>
            <parameter name="accountingDate"/>
            <parameter name="transactionDate"/>
            <parameter name="vCI"/>
            <parameter name="urlRedirection"/>
            <parameter name="authorizationCode"/>
            <parameter name="paymentTypeCode"/>
            <parameter name="responseCode"/>
            <parameter name="amount" type="BigDecimal"/>
            <parameter name="sharesNumber"/>
            <parameter name="commerceCode"/>
        </out-parameters>
        <actions>
            <!-- Se deben guardar los datos -->
            <set field="token" value="${tokenInput}"/>
            <service-call name="mchile.TransbankServices.initConfiguration#Webpay" out-map="context"/>
            <set field="publicCert" value="${publicCert}"/>
            <set field="privateKey" value="${privateKey}"/>
            <set field="ambient" value="${environ}"/>
            <set field="commerceCode" value="${commerceCode}"/>
            <set field="webpayCert" value="$webpayCert"/>
            <script>
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityCondition
                import org.moqui.entity.EntityFind
                 import org.moqui.entity.EntityList
                import org.moqui.entity.EntityValue
                // imports para webpay
                import java.util.Random
                import com.transbank.webpay.wswebpay.service.NullificationOutput
                import com.transbank.webpay.wswebpay.service.TransactionResultOutput
                import com.transbank.webpay.wswebpay.service.WsInitTransactionOutput
                import java.math.BigDecimal
                import cl.transbank.webpay.configuration.Configuration
                import java.util.ListIterator
                import java.lang.reflect.Field
                import java.util.ArrayList
                import cl.transbank.webpay.Webpay
                import cl.transbank.webpay.security.SoapSignature

                String webpay_cert = webpayCert

                String private_key = privateKey

                String environment = environ

                String commerce_code = commerceCode

                String public_cert = publicCert


                Configuration configuration = new Configuration()

                configuration.setCommerceCode(commerce_code)
                configuration.setPrivateKey(private_key)
                configuration.setPublicCert(public_cert)
                configuration.setWebpayCert(webpay_cert)
                configuration.setEnvironment(environment)

                Webpay webpay = new Webpay(configuration)

                TransactionResultOutput result = new TransactionResultOutput();
                String token = tokenInput;

                result = webpay.getNormalTransaction().getTransactionResult(token);


                // Datos de compra a guardar
                if(!result.getDetailOutput().isEmpty()){
                    authorizationCode = result.getDetailOutput().get(0).getAuthorizationCode();
                    authorizedAmount = result.getDetailOutput().get(0).getAmount().toString();
                    paymentTypeCode = result.getDetailOutput().get(0).getPaymentTypeCode().toString();
                    buyOrder = result.getDetailOutput().get(0).getBuyOrder();
                    responseCode = result.getDetailOutput().get(0).getResponseCode();
                    cardNumber = result.getCardDetail().getCardNumber();
                }
                urlRedirection = result.getUrlRedirection();

            </script>
            <set field="orderId" value="${buyOrder}"/>
            <set field="authorizationCode" value="${authorizationCode}"/>
            <set field="authorizedAmount" value="${authorizedAmount}"/>
            <set field="paymentTypeCode" value="${paymentTypeCode}"/>
            <set field="responseCode" value="${responseCode}" type="BigDecimal"/>


            <!-- update de payment -->
            <!-- Si paymentTypeCode = VD es débito, en caso contrario, es tarjeta de crédito -->
            <if condition="paymentTypeCode in ['VD']">
                <then>
                    <set field="paymentInstrumentId" value="PiDebitCard"/>
                </then>
                <else>
                    <set field="paymentInstrumentId" value="PiCreditCard"/>
                </else>
            </if>

            <set field="updateMap" from="[paymentTypeEnumId:'PtInvoicePayment', fromPartyId:customerPartyId, toPartyId:organizationPartyId, paymentInstrumentId:paymentInstrumentId,
            statusId:'PmntConfirmed', amount:authorizedAmount, reconcileStatusId:'PmtrNot', orderPartSeqId:'01', effectiveDate:ec.user.nowTimestamp,
            orderId:orderId, tbkAuthorizationCode:authorizationCode, tbkAuthorizedAmount:authorizedAmount, paymentInstrumentEnumId:paymentInstrumentId,
            paymentAuthCode:authorizationCode, amountUomId:defaultCurrencyUomId]"/>
            <service-call name="create#mantle.account.payment.Payment" out-map="context" in-map="updateMap"/>

            <!-- Acknowledge de transacción no es necesario, se llama implicitamente -->
            <!--service-call name="mchile.TransbankServices.acknowledgeTransaction#Webpay" in-map="token:token"/-->
            <set field="urlRedirection" value="${urlRedirection}"/>
        </actions>
    </service>

    <service verb="acknowledgeTransaction" noun="Webpay">
        <!-- Llamado a acknowledgeTransaction de Webpay -->
        <in-parameters>
            <parameter name="token" required="true"/>
        </in-parameters>
        <actions>
            <set field="token" value="${tokenInput}"/>
            <service-call name="mchile.TransbankServices.initConfiguration#Webpay" out-map="context"/>
            <set field="publicCert" value="${publicCert}"/>
            <set field="privateKey" value="${privateKey}"/>
            <set field="ambient" value="${environ}"/>
            <set field="commerceCode" value="${commerceCode}"/>
            <set field="webpayCert" value="$webpayCert"/>
            <script>
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityCondition
                import org.moqui.entity.EntityFind
                import org.moqui.entity.EntityList
                import org.moqui.entity.EntityValue
                // imports para webpay
                import java.util.Random
                import com.transbank.webpay.wswebpay.service.NullificationOutput
                import com.transbank.webpay.wswebpay.service.TransactionResultOutput
                import com.transbank.webpay.wswebpay.service.WsInitTransactionOutput
                import java.math.BigDecimal
                import cl.transbank.webpay.configuration.Configuration
                import java.util.ListIterator
                import java.lang.reflect.Field
                import java.util.ArrayList
                import cl.transbank.webpay.Webpay
                import cl.transbank.webpay.security.SoapSignature
                // org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("findParty")

                String webpay_cert = webpayCert

                String private_key = privateKey

                String environment = environ

                String commerce_code = commerceCode

                String public_cert = publicCert

                Configuration configuration = new Configuration()

                configuration.setCommerceCode(commerce_code)
                configuration.setPrivateKey(private_key)
                configuration.setPublicCert(public_cert)
                configuration.setWebpayCert(webpay_cert)
                configuration.setEnvironment(environment)

                Webpay webpay = new Webpay(configuration)

                TransactionResultOutput result = new TransactionResultOutput();

                result = webpay.getNormalTransaction().acknowledgeTransaction(token)

            </script>
        </actions>
    </service>


    <service verb="cancel" noun="Order">
        <in-parameters>
            <parameter name="buyOrder" required="true"/>
            <parameter name="authorizedAmount" required="true"/>
            <parameter name="authorizationCode" required="true"/>
            <parameter name="nullifyAmount" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="tbkError" default-value="OK"/>
        </out-parameters>
        <actions>

            <service-call name="mchile.TransbankServices.initConfiguration#Webpay" out-map="context"/>
            <set field="publicCert" value="${publicCert}"/>
            <set field="privateKey" value="${privateKey}"/>
            <set field="ambient" value="${environ}"/>
            <set field="commerceCode" value="${commerceCode}"/>
            <set field="webpayCert" value="$webpayCert"/>

            <script>
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityCondition
                import org.moqui.entity.EntityFind
                import org.moqui.entity.EntityList
                import org.moqui.entity.EntityValue
                // imports para webpay
                import java.util.Random
                import com.transbank.webpay.wswebpay.service.NullificationOutput
                import com.transbank.webpay.wswebpay.service.TransactionResultOutput
                import com.transbank.webpay.wswebpay.service.WsInitTransactionOutput
                import java.math.BigDecimal
                import cl.transbank.webpay.configuration.Configuration
                import java.util.ListIterator
                import java.lang.reflect.Field
                import java.util.ArrayList
                import cl.transbank.webpay.Webpay
                import cl.transbank.webpay.security.SoapSignature

                String webpay_cert = webpayCert

                String private_key = privateKey

                String environment = environ

                String commerce_code = commerceCode

                String public_cert = publicCert


                Configuration configuration = new Configuration()

                configuration.setCommerceCode(commerce_code)
                configuration.setPrivateKey(private_key)
                configuration.setPublicCert(public_cert)
                configuration.setWebpayCert(webpay_cert)
                configuration.setEnvironment(environment)

                Webpay webpay = new Webpay(configuration)

                WsInitTransactionOutput resultInit = new WsInitTransactionOutput();

                NullificationOutput result = new NullificationOutput();
                BigDecimal authAmount = new BigDecimal(authorizedAmount.trim());
                BigDecimal nullAmount = new BigDecimal(nullifyAmount.trim());
                Long commCode = new Long(commerce_code.trim());

                result = webpay.getNullifyTransaction().nullify(authorizationCode, authAmount, buyOrder, nullAmount, commCode);

                String tbkError = "Error"

                if(result.getToken()!=null){
                    logger.warn("Order cancelled")
                    tbkError = "OK"
                }else{
                    logger.warn("Error canceling order")
                }

            </script>
            <!-- Llamado a cancel#Order de mantle -->
            <if condition="$tbkError == OK">
                <service-call name="mantle.order.OrderServices.cancel#Order" in-map="orderId:buyOrder"/>
            </if>

        </actions>
    </service>

    <service verb="initConfiguration" noun="Webpay">
        <out-parameters>
            <parameter name="webpayCert"/>
            <parameter name="privateKey"/>
            <parameter name="publicCert"/>
            <parameter name="environ"/>
            <parameter name="commerceCode"/>
        </out-parameters>
        <actions>
            <script>
                String webpay_cert = "";
                String private_key = "";
                String environ_code = "INTEGRACION";
                String commerce_code = "597020000541";
                String public_cert = "";

            </script>

            <set field="webpayCert" from="ec.resource.getLocationText('/home/cherrera/git/moqui-framework/runtime/component/moqui-chile/resources/tbk.pem', true)"/>
            <set field="privateKey" from="ec.resource.getLocationText('/home/cherrera/git/moqui-framework/runtime/component/moqui-chile/resources/597020000541.key', true)"/>
            <!--set field="commerceCode" from="ec.resource.getLocationText('/home/cherrera/git/moqui-framework/runtime/component/moqui-chile/resources/commerceCode', true)" type="String"/-->
            <set field="publicCert" from="ec.resource.getLocationText('/home/cherrera/git/moqui-framework/runtime/component/moqui-chile/resources/597020000541.crt', true)"/>
            <!--set field="environ" from="ec.resource.getLocationText('/home/cherrera/git/moqui-framework/runtime/component/moqui-chile/resources/environment', true)"/-->

            <set field="environ" value="${environ_code}"/>
            <set field="commerceCode" value="${commerce_code}"/>
        </actions>
    </service>

    <service verb="initConfiguration2" noun="Webpay">
        <out-parameters>
             <parameter name="webpayCert"/>
             <parameter name="privateKey"/>
             <parameter name="publicCert"/>
             <parameter name="environ"/>
             <parameter name="commerceCode"/>
        </out-parameters>
        <actions>
            <script>
                                String webpay_cert = "-----BEGIN CERTIFICATE-----\n" +
                                "MIIDKTCCAhECBFZl7uIwDQYJKoZIhvcNAQEFBQAwWTELMAkGA1UEBhMCQ0wxDjAMBgNVBAgMBUNo\n" +
                                "aWxlMREwDwYDVQQHDAhTYW50aWFnbzEMMAoGA1UECgwDa2R1MQwwCgYDVQQLDANrZHUxCzAJBgNV\n" +
                                "BAMMAjEwMB4XDTE1MTIwNzIwNDEwNloXDTE4MDkwMjIwNDEwNlowWTELMAkGA1UEBhMCQ0wxDjAM\n" +
                                "BgNVBAgMBUNoaWxlMREwDwYDVQQHDAhTYW50aWFnbzEMMAoGA1UECgwDa2R1MQwwCgYDVQQLDANr\n" +
                                "ZHUxCzAJBgNVBAMMAjEwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAizJUWTDC7nfP\n" +
                                "3jmZpWXFdG9oKyBrU0Bdl6fKif9a1GrwevThsU5Dq3wiRfYvomStNjFDYFXOs9pRIxqX2AWDybjA\n" +
                                "X/+bdDTVbM+xXllA9stJY8s7hxAvwwO7IEuOmYDpmLKP7J+4KkNH7yxsKZyLL9trG3iSjV6Y6SO5\n" +
                                "EEhUsdxoJFAow/h7qizJW0kOaWRcljf7kpqJAL3AadIuqV+hlf+Ts/64aMsfSJJA6xdbdp9ddgVF\n" +
                                "oqUl1M8vpmd4glxlSrYmEkbYwdI9uF2d6bAeaneBPJFZr6KQqlbbrVyeJZqmMlEPy0qPco1TIxrd\n" +
                                "EHlXgIFJLyyMRAyjX9i4l70xjwIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQBn3tUPS6e2USgMrPKp\n" +
                                "sxU4OTfW64+mfD6QrVeBOh81f6aGHa67sMJn8FE/cG6jrUmX/FP1/Cpbpvkm5UUlFKpgaFfHv+Kg\n" +
                                "CpEvgcRIv/OeIi6Jbuu3NrPdGPwzYkzlOQnmgio5RGb6GSs+OQ0mUWZ9J1+YtdZc+xTga0x7nsCT\n" +
                                "5xNcUXsZKhyjoKhXtxJm3eyB3ysLNyuL/RHy/EyNEWiUhvt1SIePnW+Y4/cjQWYwNqSqMzTSW9TP\n" +
                                "2QR2bX/W2H6ktRcLsgBK9mq7lE36p3q6c9DtZJE+xfA4NGCYWM9hd8pbusnoNO7AFxJZOuuvLZI7\n" +
                                "JvD7YLhPvCYKry7N6x3l\n" +
                                "-----END CERTIFICATE-----";


                              String private_key = "-----BEGIN RSA PRIVATE KEY-----\n" +
                              "MIIEpQIBAAKCAQEA0ClVcH8RC1u+KpCPUnzYSIcmyXI87REsBkQzaA1QJe4w/B7g\n" +
                               "6KvKV9DaqfnNhMvd9/ypmGf0RDQPhlBbGlzymKz1xh0lQBD+9MZrg8Ju8/d1k0pI\n" +
                                "b1QLQDnhRgR2T14ngXpP4PIQKtq7DsdHBybFU5vvAKVqdHvImZFzqexbZjXWxxhT\n" +
                                "+/sGcD4Vs673fc6B+Xj2UrKF7QyV5pMDq0HCCLTMmafWAmNrHyl6imQM+bqC12gn\n" +
                                "EEAEkrJiSO6P/21m9iDJs5KQanpJby0aGW8mocYRHDMHZjtTiIP0+JAJgL9KsH+r\n" +
                                "Xdk2bT7aere7TzOK/bEwhkYEXnMMt/65vV6AfwIDAQABAoIBAHnIlOn6DTi99eXl\n" +
                                "KVSzIb5dA747jZWMxFruL70ifM+UKSh30FGPoBP8ZtGnCiw1ManSMk6uEuSMKMEF\n" +
                                "5iboVi4okqnTh2WSC/ec1m4BpPQqxKjlfrdTTjnHIxrZpXYNucMwkeci93569ZFR\n" +
                                "2SY/8pZV1mBkZoG7ocLmq+qwE1EaBEL/sXMvuF/h08nJ71I4zcclpB8kN0yFrBCW\n" +
                                "7scqOwTLiob2mmU2bFHOyyjTkGOlEsBQxhtVwVEt/0AFH/ucmMTP0vrKOA0HkhxM\n" +
                                "oeR4k2z0qwTzZKXuEZtsau8a/9B3S3YcgoSOhRP/VdY1WL5hWDHeK8q1Nfq2eETX\n" +
                                "jnQ4zjECgYEA7z2/biWe9nDyYDZM7SfHy1xF5Q3ocmv14NhTbt8iDlz2LsZ2JcPn\n" +
                                "EMV++m88F3PYdFUOp4Zuw+eLJSrBqfuPYrTVNH0v/HdTqTS70R2YZCFb9g0ryaHV\n" +
                                "TRwYovu/oQMV4LBSzrwdtCrcfUZDtqMYmmZfEkdjCWCEpEi36nlG0JMCgYEA3r49\n" +
                                "o+soFIpDqLMei1tF+Ah/rm8oY5f4Wc82kmSgoPFCWnQEIW36i/GRaoQYsBp4loue\n" +
                                "vyPuW+BzoZpVcJDuBmHY3UOLKr4ZldOn2KIj6sCQZ1mNKo5WuZ4YFeL5uyp9Hvio\n" +
                                "TCPGeXghG0uIk4emSwolJVSbKSRi6SPsiANff+UCgYEAvNMRmlAbLQtsYb+565xw\n" +
                                "NvO3PthBVL4dLL/Q6js21/tLWxPNAHWklDosxGCzHxeSCg9wJ40VM4425rjebdld\n" +
                                "DF0Jwgnkq/FKmMxESQKA2tbxjDxNCTGv9tJsJ4dnch/LTrIcSYt0LlV9/WpN24LS\n" +
                                "0lpmQzkQ07/YMQosDuZ1m/0CgYEAu9oHlEHTmJcO/qypmu/ML6XDQPKARpY5Hkzy\n" +
                                "gj4ZdgJianSjsynUfsepUwK663I3twdjR2JfON8vxd+qJPgltf45bknziYWvgDtz\n" +
                                "t/Duh6IFZxQQSQ6oN30MZRD6eo4X3dHp5eTaE0Fr8mAefAWQCoMw1q3m+ai1PlhM\n" +
                                "uFzX4r0CgYEArx4TAq+Z4crVCdABBzAZ7GvvAXdxvBo0AhD9IddSWVTCza972wta\n" +
                                "5J2rrS/ye9Tfu5j2IbTHaLDz14mwMXr1S4L39UX/NifLc93KHie/yjycCuu4uqNo\n" +
                                "MtdweTnQt73lN2cnYedRUhw9UTfPzYu7jdXCUAyAD4IEjFQrswk2x04=\n" +
                                "-----END RSA PRIVATE KEY-----";


                String environ_code = "INTEGRACION";
                String commerce_code = "597020000541";
                                String public_cert = "-----BEGIN CERTIFICATE-----\n" +
                                "MIIDujCCAqICCQCZ42cY33KRTzANBgkqhkiG9w0BAQsFADCBnjELMAkGA1UEBhMC\n" +
                                "Q0wxETAPBgNVBAgMCFNhbnRpYWdvMRIwEAYDVQQKDAlUcmFuc2JhbmsxETAPBgNV\n" +
                                "BAcMCFNhbnRpYWdvMRUwEwYDVQQDDAw1OTcwMjAwMDA1NDExFzAVBgNVBAsMDkNh\n" +
                                "bmFsZXNSZW1vdG9zMSUwIwYJKoZIhvcNAQkBFhZpbnRlZ3JhZG9yZXNAdmFyaW9z\n" +
                                "LmNsMB4XDTE2MDYyMjIxMDkyN1oXDTI0MDYyMDIxMDkyN1owgZ4xCzAJBgNVBAYT\n" +
                                "AkNMMREwDwYDVQQIDAhTYW50aWFnbzESMBAGA1UECgwJVHJhbnNiYW5rMREwDwYD\n" +
                                "VQQHDAhTYW50aWFnbzEVMBMGA1UEAwwMNTk3MDIwMDAwNTQxMRcwFQYDVQQLDA5D\n" +
                                "YW5hbGVzUmVtb3RvczElMCMGCSqGSIb3DQEJARYWaW50ZWdyYWRvcmVzQHZhcmlv\n" +
                                "cy5jbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANApVXB/EQtbviqQ\n" +
                                "j1J82EiHJslyPO0RLAZEM2gNUCXuMPwe4OirylfQ2qn5zYTL3ff8qZhn9EQ0D4ZQ\n" +
                                "Wxpc8pis9cYdJUAQ/vTGa4PCbvP3dZNKSG9UC0A54UYEdk9eJ4F6T+DyECrauw7H\n" +
                                "RwcmxVOb7wClanR7yJmRc6nsW2Y11scYU/v7BnA+FbOu933Ogfl49lKyhe0MleaT\n" +
                                "A6tBwgi0zJmn1gJjax8peopkDPm6gtdoJxBABJKyYkjuj/9tZvYgybOSkGp6SW8t\n" +
                                "GhlvJqHGERwzB2Y7U4iD9PiQCYC/SrB/q13ZNm0+2nq3u08ziv2xMIZGBF5zDLf+\n" +
                                "ub1egH8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAdgNpIS2NZFx5PoYwJZf8faze\n" +
                                "NmKQg73seDGuP8d8w/CZf1Py/gsJFNbh4CEySWZRCzlOKxzmtPTmyPdyhObjMA8E\n" +
                                "Adps9DtgiN2ITSF1HUFmhMjI5V7U2L9LyEdpUaieYyPBfxiicdWz2YULVuOYDJHR\n" +
                                "n05jlj/EjYa5bLKs/yggYiqMkZdIX8NiLL6ZTERIvBa6azDKs6yDsCsnE1M5tzQI\n" +
                                "VVEkZtEfil6E1tz8v3yLZapLt+8jmPq1RCSx3Zh4fUkxBTpUW/9SWUNEXbKK7bB3\n" +
                                "zfB3kGE55K5nxHKfQlrqdHLcIo+vdShATwYnmhUkGxUnM9qoCDlB8lYu3rFi9w==\n" +
                                "-----END CERTIFICATE-----";
                            </script>

                    <set field="publicCert" value="${public_cert}"/>
                    <set field="environ" value="${environ_code}"/>
                    <set field="privateKey" value="${private_key}"/>
                    <set field="webpayCert" value="${webpay_cert}"/>
        <set field="commerceCode" value="${commerce_code}"/>
        </actions>
    </service>
</services>