<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="send" noun="PendingEnvioDte" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="envioIdList" type="List"/>
            <parameter name="envioTypeEnumIdList" type="List"/>
            <parameter name="maxFail" type="Integer" default="3"/>
            <parameter name="secondsBeforeRetry" type="Long" default="3*60*60"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList">
                <econdition field-name="envioId" operator="in" from="envioIdList" ignore-if-empty="true"/>
                <econdition field-name="envioTypeEnumId" operator="in" from="envioTypeEnumIdList" ignore-if-empty="true"/>
                <econdition field-name="statusId" value="Ftde-Created" ignore="envioIdList"/>
                <econdition field-name="statusId" operator="in" value="Ftde-Created,Ftde-Failed"/>
                <econdition field-name="lastAttempt" operator="less-equals" from="ec.user.nowTimestamp.time-(secondsBeforeRetry*1000)" ignore="secondsBeforeRetry == null" ignore-if-empty="true" or-null="true"/>
            </entity-find>
            <iterate list="envioList" entry="envio">
                <if condition="envio.envioTypeEnumId == 'Ftde-EnvioBoleta'"><then>
                    <if condition="envio.rutReceptor == '60803000-K'"><then>
                        <service-call name="mchile.sii.dte.DteCommServices.enviaSII#EnvioBoleta" in-map="[envioId:envio.envioId, maxFail:maxFail]" out-map="resultadoEnvio"/>
                    </then><else>
                        <message type="danger">Not sending EnvioBoleta ${envio.envioId} with rut not matching SII</message>
                    </else></if>
                </then><else>
                    <if condition="envio.rutReceptor == '60803000-K'"><then>
                        <service-call name="mchile.sii.dte.DteCommServices.enviaSII#EnvioDte" in-map="[envioId:envio.envioId, maxFail:maxFail]" out-map="resultadoEnvio"/>
                    </then><else>
                        <service-call name="mchile.sii.dte.DteCommServices.send#PendingEnvioDteReceiver" in-map="[envioId:envio.envioId, maxFail:maxFail]" out-map="resultadoEnvio"/>
                    </else></if>
                </else></if>
            </iterate>
        </actions>
    </service>

    <service verb="send" noun="PendingEnvioDteReceiver" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="maxFail" type="Integer" default="3"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList" for-update="true">
                <econdition field-name="envioId"/>
                <econdition field-name="rutReceptor" operator="not-equals" value="60803000-K"/>
                <econdition field-name="statusId" operator="in" value="Ftde-Created,Ftde-Failed"/>
            </entity-find>
            <set field="envio" from="envioList.first"/>
            <if condition="envio">
                <if condition="envio.envioTypeEnumId == 'Ftde-EnvioDte'"><then>
                    <entity-find entity-name="mchile.dte.DteEnvioFiscalTaxDocument" list="dteList" for-update="true">
                        <econdition field-name="envioId" from="envio.envioId"/>
                    </entity-find>
                    <if condition="dteList.size() == 0">
                        <log message="No FiscalTaxDocument found for envio ${envio.envioId}"/>
                        <return/>
                    </if>
                    <set field="rutReceptor" from="null"/>
                    <set field="rutEmisor" from="null"/>
                    <set field="folio" value=""/>
                    <set field="receptorPartyId" from="null"/>
                    <set field="issuerPartyId" from="null"/>
                    <iterate list="dteList" entry="envioDte">
                        <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" auto-field-map="envioDte"/>
                        <if condition="rutReceptor == null"><set field="rutReceptor" from="dte.receiverPartyIdValue"/></if>
                        <if condition="dte.receiverPartyIdValue != rutReceptor"><return error="true" message="No se puede incluir más de un receptor en un envío (envío ${envio.envioId})"/></if>
                        <if condition="rutEmisor == null"><set field="rutEmisor" from="dte.issuerPartyIdValue"/></if>
                        <if condition="dte.issuerPartyIdValue != rutEmisor"><return error="true" message="No se puede incluir más de un emisor en un envío (envío ${envio.envioId})"/></if>
                        <set field="folio" value="${folio.length() > 0? ', ': ''}${dte.fiscalTaxDocumentNumber}"/>
                        <if condition="issuerPartyId != null &amp;&amp; issuerPartyId != dte.issuerPartyId"><then>
                            <return error="true" message="No se puede crear envío con más de un origen"/>
                        </then><else>
                            <set field="issuerPartyId" from="dte.issuerPartyId"/>
                        </else>
                        </if>
                        <if condition="receptorPartyId &amp;&amp; receptorPartyId != dte.receiverPartyId"><then>
                            <message type="warning">Found more than one receptorPartyId for envio ${envio.envioId}: ${receptorPartyId} and ${dte.receiverPartyId}</message>
                        </then><else>
                            <set field="receptorPartyId" from="dte.receiverPartyId"/>
                        </else></if>
                    </iterate>
                    <service-call name="mchile.sii.dte.DteInfoServices.get#DteInfo" in-map="[fiscalTaxDocumentId:dte.fiscalTaxDocumentId]" out-map="dteInfo"/>
                    <set field="envioMessageText" value="Adjunto encontrará el documento tributario ${dteInfo.doctypeName} con folio${dteList.size() > 1? 's':''} ${folio} emitido por ${dteInfo.issuerName} (Rut ${rutEmisor})."/>
                    <set field="subject" value="${dteInfo.doctypeName} ${folio} emitida${dteList.size() > 1? 's':''} por ${dteInfo.issuerName} (Rut ${rutEmisor})"/>
                    <set field="emailTypeEnumId" value="Ftdemt-SendXmlReceiverMandatory"/>
                </then><else-if condition="envio.envioTypeEnumId == 'Ftde-RespuestaDte'">
                    <set field="envioMessageText" value="Adjunto encontrará el resultado del proceso de revision y validación de un envío de Documentos Tributarios Electrónicos que Usted realizó."/>
                    <set field="subject" value="Acuse de Recibo Nro. ${envio.internalId} - Receptor: ${envio.rutEmisor}"/>
                    <set field="emailTypeEnumId" value="Ftdemt-XmlReceptionResponse"/>
                    <service-call name="mchile.GeneralServicesServices.get#PartyIdByRut" in-map="[idValue:envio.rutReceptor]" out-map="receptorMap" out-map-add-to-existing="false"/>
                    <set field="receptorPartyId" from="receptorMap?.partyId"/>
                </else-if><else-if condition="envio.envioTypeEnumId == 'Ftde-EnvioRecibos'">
                    <!-- Aceptación / Acuse de Recibo que da pie a título ejecutivo de factura -->
                    <set field="emailTypeEnumId" value="Ftdemt-XmlCommercialAcceptance"/>
                    <set field="envioMessageText" value="Adjunto encontrará la Aceptación del Documento Tributario Electrónico que Usted envió."/>
                    <set field="subject" value="Aceptación Nro. ${envio.internalId} - Receptor: ${envio.rutEmisor}"/>
                    <service-call name="mchile.GeneralServicesServices.get#PartyIdByRut" in-map="[idValue:envio.rutReceptor]" out-map="receptorMap" out-map-add-to-existing="false"/>
                    <set field="receptorPartyId" from="receptorMap?.partyId"/>
                </else-if><else>
                    <return error="true" message="Unsupported envioTypeEnumId ${envio.envioTypeEnumId}"/>
                </else></if>
                <entity-find-one entity-name="mantle.party.PartyRole" value-field="issuerRoleInternal" auto-field-map="[partyId:issuerPartyId, roleId:'OrgInternal']"/>
                <entity-find-one entity-name="mantle.party.PartyRole" value-field="receiverRoleInternal" auto-field-map="[partyId:receiverPartyId, roleId:'OrgInternal']"/>
                <if condition="envio.rutEmisor == envio.rutReceptor &amp;&amp; envio.rutEmisor != null"><then>
                    <set field="sent" from="true"/>
                </then><else>
                    <set field="envioContent" from="ec.resource.getLocationReference(envio.documentLocation)"/>
                    <set field="xmlAttachment" from="[attachmentLocation:envioContent.location, fileName:envioContent.fileName, contentType:envioContent.contentType]"/>
                    <service-call name="mchile.GeneralServicesServices.get#PartyIdByRut" in-map="[idValue:envio.rutEmisor]" out-map="emisorMap" out-map-add-to-existing="false"/>
                    <set field="xmlReceptionEmailAddress" from="null"/>
                    <service-call name="mchile.sii.dte.DteCommServices.get#XmlReceptionEmail" in-map="[partyId:receptorPartyId, partyIdValue:envio.rutReceptor, dtePartyId:emisorMap.partyId]" out-map="context"
                                  ignore-error="true" transaction="force-new"/>
                    <entity-find-one entity-name="moqui.basic.Enumeration" value-field="tipoEnvioEv" auto-field-map="[enumId:envio.envioTypeEnumId]"/>
                    <if condition="xmlReceptionEmailAddress"><then>
                        <entity-find-one entity-name="mantle.party.PartyDetail" value-field="receiverDetail" auto-field-map="[partyId:receptorPartyId]"/>
                        <set field="receiverName" from="ec.resource.expand('PartyNameOnlyTemplate', null, receiverDetail)"/>
                        <set field="bodyParameters" from="[title:subject, subject:subject, receiverName:receiverName, receiverRut:envio.rutReceptor, envioMessageText:envioMessageText]"/>
                        <entity-find-one entity-name="moqui.basic.email.EmailTemplate" value-field="emailTemplate" auto-field-map="[emailTemplateId:'MchDteSendEnvio']"/>
                        <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[toAddresses:xmlReceptionEmailAddress, emailTemplateId:'MchDteSendEnvio', emailTypeEnumId:emailTypeEnumId,
                    attachments:[xmlAttachment], bodyParameters:bodyParameters, subject:subject]" out-map="context"/>
                        <set field="sent" from="emailMessageId != null"/>
                    </then><else>
                        <log level="error" message="No se encuentra dirección de mail para envío tipo ${tipoEnvioEv.description}: ${envio.envioId}"/>
                        <set field="sent" from="false"/>
                    </else></if>
                </else></if>
                <if condition="sent"><then>
                    <entity-find entity-name="mchile.dte.DteEnvioFiscalTaxDocument" list="envioDteList">
                        <econdition field-name="envioId" from="envio.envioId"/>
                    </entity-find>
                    <iterate list="envioDteList" entry="envioDte">
                        <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" auto-field-map="envioDte" for-update="true"/>
                        <service-call name="create#mchile.dte.FiscalTaxDocumentEmailMessage" in-map="[fiscalTaxDocumentId:dte.fiscalTaxDocumentId, emailMessageId:emailMessageId]"/>
                        <set field="dte.sentRecStatusId" value="Ftd-SentRec"/>
                        <entity-update value-field="dte"/>
                    </iterate>
                    <set field="envio.statusId" value="Ftde-Sent"/>
                    <set field="envio.emailMessageId" from="emailMessageId"/>
                </then><else>
                    <if condition="envio.attemptCount >= maxFail">
                        <set field="envio.statusId" value="Ftde-Failed"/>
                    </if>
                </else></if>
                <set field="envio.attemptCount" from="(envio.attemptCount?:0)+1"/>
                <set field="envio.lastAttempt" from="ec.user.nowTimestamp"/>
                <entity-update value-field="envio"/>
            </if>
        </actions>
    </service>

    <service verb="process" noun="IncomingDteMessage">
        <implements service="org.moqui.EmailServices.process#EmailEca"/>
        <actions>
            <script>
                import cl.moit.dte.MoquiDTEUtils
                import org.moqui.context.ExecutionContext
            </script>
            <set field="messageId" from="headers.get('message-id')"/>
            <!-- Save Message -->
            <if condition="messageId">
                <entity-find entity-name="moqui.basic.email.EmailMessage" list="emailMessageList">
                    <econdition field-name="emailServerId" ignore-if-empty="true"/>
                    <econdition field-name="messageId"/>
                </entity-find>
                <if condition="emailMessageList"><then>
                    <set field="emailMessageId" from="emailMessageList.first.emailMessageId"/>
                    <log message="Found duplicate message with Message-ID [${messageId}] from server [${emailServerId}]"/>
                </then><else>
                    <service-call name="create#moqui.basic.email.EmailMessage" out-map="context"
                                  in-map="[sentDate:fields.sentDate, receivedDate:fields.receivedDate, statusId:statusId,
                    subject:fields.subject, body:body, bodyText:bodyText,
                    fromAddress:fields.from, toAddresses:fields.toList?.toString(),
                    ccAddresses:fields.ccList?.toString(), bccAddresses:fields.bccList?.toString(),
                    messageId:messageId, emailServerId:emailServerId]"/>
                </else></if>
            </if>
            <log level="warn" message="Processing email ${messageId}"/>
            <set field="envioIdsToProcess" from="[]"/>
            <iterate list="bodyPartList" entry="bodyPart">
                <if condition="(bodyPart.contentType.contains('text/plain') || bodyPart.contentType.contains('text/html')) &amp;&amp; bodyPart.filename == null"><then>
                    <if condition="body == null"><then>
                        <set field="body" from="bodyPart.contentText"/>
                    </then><else-if condition="bodyPart.contentType.contains('text/plain')">
                        <if condition="bodyText == null"><then>
                            <set field="bodyText" from="bodyPart.contentText"/>
                        </then><else>
                            <log level="warn" message="More than one bodyPart with type text/plain for mail ${messageId}"/>
                        </else></if>
                    </else-if><else>
                        <log level="warn" message="More than one bodyPart with type text/html for mail ${messageId}"/>
                    </else></if>
                </then><else-if condition="(bodyPart.contentType.contains('text/plain') || bodyPart.contentType.contains('text/html')) &amp;&amp; bodyPart.filename != null">
                    <log level="warn" message="Ignoring bodyPart of type ${bodyPart.contentType} and filename ${filename} for mail ${messageId}"/>
                </else-if><else-if condition="(bodyPart.disposition == 'attachment' || bodyPart.disposition == null) &amp;&amp; bodyPart.filename.toLowerCase().endsWith('.xml')">
                    <if condition="bodyPart.contentBytes == null &amp;&amp; bodyPart.contentText == null">
                        <log level="error" message="No contentBytes nor contentText for bodyPart of message ${messageId}"/>
                        <continue/>
                    </if>
                    <set field="contentBytes" from="bodyPart.contentBytes ?: bodyPart.contentText?.getBytes('ISO-8859-1')"/>
                    <if condition="contentBytes == null">
                        <log level="error" message="No contentBytes nor contentText for bodyPart of message ${messageId}"/>
                        <continue/>
                    </if>
                    <service-call name="mchile.sii.dte.DteEnvioServices.store#ReceivedEnvio" in-map="context + [contentBytes:contentBytes, fileName:bodyPart.filename ]" out-map="storeResult"/>
                    <script>
                        if (storeResult.envioId)
                            envioIdsToProcess.add(storeResult.envioId)
                    </script>
                </else-if><else>
                    <log level="warn" message="Ignoring bodyPart of type ${bodyPart.contentType} and filename ${bodyPart.filename}, disposition ${bodyPart.disposition} for mail ${messageId}"/>
                </else></if>
            </iterate>
            <script>
                if (envioIdsToProcess)
                    ec.service.special().name("mchile.sii.dte.DteCommServices.process#PendingEnvioDte").registerOnCommit()
            </script>
        </actions>
    </service>

    <service verb="start" noun="SendPendingEnvioDteJob" authenticate="anonymous-all">
        <actions>
            <script>ec.service.job("sii_dte_SendPendingEnvioDte").run()</script>
        </actions>
    </service>

    <service verb="start" noun="EnviaEnvioDteToSiiJob" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="envioIdList" type="List"/>
        </in-parameters>
        <actions>
            <script>
                job = ec.service.job("sii_dte_EnviaEnvioDteToSii")
                if (envioIdList) {
                    job.parameter("envioIdList", envioIdList)
                    job.run()
                }
            </script>
        </actions>
    </service>

    <service verb="start" noun="ValidaEnvioServiceJob" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="envioId"/>
            <parameter name="initialDelaySeconds"/>
            <parameter name="checkDelaySeconds"/>
            <parameter name="checkAttempts"/>
            <parameter name="minSecondsBetweenAttempts"/>
        </in-parameters>
        <actions>
            <script>
                job = ec.service.job("sii_dte_CheckEnviosEnviadosSii")
                if (envioId)
                    job.parameter("envioId", envioId)
                if (initialDelaySeconds)
                    job.parameter("initialDelaySeconds", initialDelaySeconds)
                if (checkDelaySeconds)
                    job.parameter("checkDelaySeconds", checkDelaySeconds)
                if (checkAttempts)
                    job.parameter("checkAttempts", checkAttempts)
                if (minSecondsBetweenAttempts)
                    job.parameter("minSecondsBetweenAttempts", minSecondsBetweenAttempts)
                job.run()
            </script>
        </actions>
    </service>

    <service verb="enviaSII" noun="Envio">
        <description>
            Envio al SII envio ya generado
            envioId: ID de envío
        </description>
        <in-parameters>
            <parameter name="envioIdList" type="List" required="true"/>
            <parameter name="maxFail" type="Integer" default="3"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackIdList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList">
                <econdition field-name="envioId" operator="in" from="envioIdList"/>
            </entity-find>
            <set field="trackIdList" from="[]"/>
            <log message="Found ${envioList.size()} envios to process"/>
            <iterate list="envioList" entry="envio">
                <set field="envioId" from="envio.envioId"/>
                <log message="Sending envio ${envioId} (${envio.envioTypeEnumId == 'Ftde-EnvioBoleta'? 'EnvioBoleta' : 'DTE'})"/>
                <if condition="envio.envioTypeEnumId == 'Ftde-EnvioBoleta'"><then>
                    <service-call name="mchile.sii.dte.DteCommServices.enviaSII#EnvioBoleta" in-map="context" out-map="envioResult" out-map-add-to-existing="false"/>
                    <script>trackIdList.add(envioResult.trackId)</script>
                </then><else>
                    <service-call name="mchile.sii.dte.DteCommServices.enviaSII#EnvioDte" in-map="context" out-map="envioResult" out-map-add-to-existing="false"/>
                    <script>trackIdList.add(envioResult.trackId)</script>
                </else></if>
            </iterate>
            <log message="Done sending."/>
        </actions>
    </service>

    <service verb="enviaSII" noun="EnvioDte"  type="script" location="component://MoquiChile/service/mchile/sii/dte/groovy/enviaSiiEnvioDte.groovy">
        <description>
            Envio al SII envio ya generado
            envioId: ID de envío
        </description>
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="maxFail" type="Integer" default="3"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
    </service>

    <service verb="enviaSII" noun="EnvioBoleta" type="script" location="component://MoquiChile/service/mchile/sii/dte/groovy/enviaSiiEnvioBoleta.groovy">
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="maxFail" type="Integer" default="3"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
    </service>

    <service verb="check" noun="EnviosEnviadosSii" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="initialDelaySeconds" type="Integer" default="5"/>
            <parameter name="checkDelaySeconds" type="Integer" default="30"/>
            <parameter name="checkAttempts" type="Integer" default="1"/>
            <parameter name="envioId"/>
            <parameter name="minSecondsBetweenAttempts" type="Integer" default="1800"/>
            <parameter name="maxAttempts" type="Integer" default="5"/>
            <parameter name="triggerEnvioToReceiver" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList">
                <econdition field-name="rutReceptor" value="60803000-K"/>
                <econdition field-name="statusId" value="Ftde-Sent"/>
                <econdition field-name="envioId" ignore-if-empty="true"/>
                <econdition field-name="lastAttempt" operator="less" from="ec.user.nowTimestamp.time - (minSecondsBetweenAttempts*1000)" or-null="true"/>
            </entity-find>
            <if condition="envioList.size() == 0">
                <log message="No envios found."/>
                <return/>
            </if>
            <script>if (initialDelaySeconds) Thread.sleep(initialDelaySeconds*1000L)</script>
            <set field="newStatusByEnvioId" from="[:]"/>
            <set field="totalAcceptedDocs" from="0"/>
            <set field="attempt" from="1"/>

            <while condition="envioList &amp;&amp; attempt &lt;= checkAttempts">
                <set field="reattemptList" from="[]"/>

                <script>Thread.sleep(initialDelaySeconds*1000L)</script>
                <log message="Starting attempt ${attempt}"/>
                <iterate list="envioList" entry="envio">
                    <if condition="envio.envioTypeEnumId == 'Ftde-EnvioBoleta'"><then>
                        <service-call name="mchile.sii.dte.DteCommServices.verifica#EnvioBoletaEnSii" in-map="[envioId:envio.envioId]" transaction="force-new" out-map="checkMap" ignore-error="true"/>
                    </then><else>
                        <service-call name="mchile.sii.dte.DteCommServices.verifica#EnvioEnSii" in-map="[envioId:envio.envioId]" transaction="force-new" out-map="checkMap" ignore-error="true"/>
                    </else></if>
                    <set field="totalAcceptedDocs" from="totalAcceptedDocs + (checkMap.documentosAceptados?:0)"/>
                    <if condition="checkMap.hasError != false"><then>
                        <script>reattemptList.add(envio)</script>
                    </then><else>
                        <service-call name="update#mchile.dte.DteEnvio" in-map="[envioId:envio.envioId, statusId:'Ftde-Processed', lastAttempt:ec.user.nowTimestamp, attemptCount:((envio.attemptCount?:0)+1)]" transaction="force-new" ignore-error="true"/>
                    </else></if>
                    <if condition="checkMap.newStatusId">
                        <set field="newStatusByEnvioId[envio.envioId]" from="checkMap.newStatusId"/>
                    </if>
                </iterate>
                <set field="envioList" from="reattemptList"/>
                <log message="Finishing attempt ${attempt}"/>
                <if condition="envioList &amp;&amp; (attempt &lt; checkAttempts)">
                    <log message="Waiting ${checkDelaySeconds} before next attempt"/>
                    <script>Thread.sleep(checkDelaySeconds*1000L)</script>
                </if>
                <set field="attempt" from="attempt + 1"/>
            </while>
            <iterate list="reattemptList" entry="envio">
                <set field="attemptCount" from="(envio.attemptCount?:0)+1"/>
                <set field="updateMap" from="[envioId:envio.envioId, attemptCount:attemptCount, lastAttempt:ec.user.nowTimestamp]"/>
                <set field="newStatusId" from="attemptCount >= maxAttempts ? 'Ftde-FailedAtReceiver' : newStatusByEnvioId[envio.envioId]"/>
                <if condition="newStatusId"><set field="updateMap.statusId" from="newStatusId"/></if>
                <service-call name="update#mchile.dte.DteEnvio" in-map="updateMap" transaction="force-new" ignore-error="true"/>
            </iterate>
            <if condition="triggerEnvioToReceiver &amp;&amp; totalAcceptedDocs &gt; 0">
                <script>ec.service.job("sii_dte_CreateEnvioDteReceiver").run()</script>
            </if>
        </actions>
    </service>

    <service verb="verifica" noun="DocumentoEnSii">
        <description>
            Verificación en el SII de DTE ya enviado
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="salida" required="true"/>
            <parameter name="errorCode" required="true"/>
            <parameter name="glosa"/>
            <parameter name="glosaError"/>
            <parameter name="status"/>
            <parameter name="numeroAtencion"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FtdtAttributesView" value-field="dte"/>
            <if condition="dte == null"><return error="true" message="No se encuentra DTE"/></if>
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:dte.issuerPartyId]" out-map="context"/>
            <if condition="certificate == null"><return error="true" message="No se encuentra configuración de facturación para sujeto ${dte.issuerPartyId}"/></if>
            <if condition="rutEmisor != dte.issuerPartyIdValue"><return error="true" message="Error de rut, DTE indica ${dte.issuerPartyIdValue}, en configuración aparece ${rutEmisor}"/></if>
            <set field="rutCertificado" from="cl.moit.dte.MoquiDTEUtils.getRutFromCertificate(certificate)"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutCertificado]" out-map="rutMap"/>
            <set field="RutConsultante" from="rutMap.rut"/>
            <set field="DvConsultante" from="rutMap.dv"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutEmisor]" out-map="rutMap"/>
            <set field="RutCompania" from="rutMap.rut"/>
            <set field="DvCompania" from="rutMap.dv"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:dte.receiverPartyIdValue]" out-map="rutMap"/>
            <set field="RutReceptor" from="rutMap.rut"/>
            <set field="DvReceptor" from="rutMap.dv"/>
            <service-call name="mchile.sii.dte.DteInternalServices.get#SiiCode" in-map="[fiscalTaxDocumentTypeEnumId:dte.fiscalTaxDocumentTypeEnumId]" out-map="siiCodeMap"/>
            <set field="TipoDte" from="siiCodeMap.siiCode"/>
            <set field="FolioDte" from="dte.fiscalTaxDocumentNumber"/>
            <set field="FechaEmisionDte" from="ec.l10n.format(dte.date, 'ddMMyyyy')"/>
            <set field="MontoDte" from="ec.l10n.format(dte.amount, '###')"/>
            <if condition="dte.fiscalTaxDocumentTypeEnumId in ['Ftdt-39', 'Ftdt-41']"><then>
                <service-call name="mchile.sii.dte.DteCommServices.verifica#BoletaEnSii" in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId]" out-map="boletaVer"/>
                <if condition="boletaVer.hasError == true"><then>
                    <set field="errorCode" value="0"/>
                    <set field="glosa" from="boletaVer.glosaError"/>
                </then><else>
                    <set field="errorCode" from="boletaVer.errorCode"/>
                    <set field="glosaError" from="boletaVer.glosaError"/>
                </else></if>
            </then><else>
                <service-call name="mchile.sii.dte.DteCommServices.get#Token" in-map="[dteIsProduction:dteIsProduction, partyId:dte.issuerPartyId]" out-map="tokenMap"/>
                <set field="Token" from="tokenMap.token"/>
                <if condition="dteIsProduction"><then>
                    <service-call name="mchile.sii.dte.DteCommServices.verifica#DocumentoEnSiiProduction" in-map="context" out-map="context"/>
                </then><else>
                    <service-call name="mchile.sii.dte.DteCommServices.verifica#DocumentoEnSiiCertification" in-map="context" out-map="context"/>
                </else></if>
                <script><![CDATA[
                    salida = getEstDteResponse.getEstDteReturn
                    ec.logger.info("salida: ${salida}")
                    xmlDoc = new groovy.xml.XmlParser(false, false).parseText(salida)
                    header = xmlDoc.'SII:RESP_HDR'
                    status = header.ESTADO.text()
                    glosa = header.GLOSA_ESTADO.text()
                    errorCode = header.ERR_CODE.text()
                    glosaError = header.GLOSA_ERR.text()
                    numeroAtencion = header.NUM_ATENCION.text()
                    ]]></script>
                <if condition="errorCode == '0'">
                    <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" for-update="true"/>
                    <if condition="dte.sentAuthStatusId == 'Ftd-SentAuthUnverified'">
                        <set field="dte.sentAuthStatusId" value="Ftd-SentAuthAccepted"/>
                        <entity-update value-field="dte"/>
                    </if>
                </if>
            </else></if>
        </actions>
    </service>

    <service verb="verifica" noun="DocumentoEnSiiProduction" type="remote-xml-soap" location="https://palena.sii.cl/DTEWS/QueryEstDte.jws?WSDL" method="getEstDte">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://maullin.sii.cl/DTEWS/QueryEstDte.jws?WSDL', methodNamespacePrefix:'m', parameterOrder:'RutConsultante DvConsultante RutCompania DvCompania RutReceptor DvReceptor TipoDte FolioDte FechaEmisionDte MontoDte Token']" type="Map"/>
            <parameter name="RutConsultante"/>
            <parameter name="DvConsultante"/>
            <parameter name="RutCompania"/>
            <parameter name="DvCompania"/>
            <parameter name="RutReceptor"/>
            <parameter name="DvReceptor"/>
            <parameter name="TipoDte"/>
            <parameter name="FolioDte"/>
            <parameter name="FechaEmisionDte"/>
            <parameter name="MontoDte"/>
            <parameter name="Token"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getEstDteResponse" type="Map">
                <parameter name="getEstDteReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="verifica" noun="DocumentoEnSiiCertification" type="remote-xml-soap" location="https://maullin.sii.cl/DTEWS/QueryEstDte.jws?WSDL" method="getEstDte">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://maullin.sii.cl/DTEWS/QueryEstDte.jws?WSDL', methodNamespacePrefix:'m', parameterOrder:'RutConsultante DvConsultante RutCompania DvCompania RutReceptor DvReceptor TipoDte FolioDte FechaEmisionDte MontoDte Token']" type="Map"/>
            <parameter name="RutConsultante"/>
            <parameter name="DvConsultante"/>
            <parameter name="RutCompania"/>
            <parameter name="DvCompania"/>
            <parameter name="RutReceptor"/>
            <parameter name="DvReceptor"/>
            <parameter name="TipoDte"/>
            <parameter name="FolioDte"/>
            <parameter name="FechaEmisionDte"/>
            <parameter name="MontoDte"/>
            <parameter name="Token"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getEstDteResponse" type="Map">
                <parameter name="getEstDteReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="verifica" noun="EnvioEnSii">
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="issuerPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="estado"/>
            <parameter name="glosaEstado"/>
            <parameter name="numeroAtencion"/>
            <parameter name="errorCode"/>
            <parameter name="errorCodeGlosa"/>
            <parameter name="sqlCode"/>
            <parameter name="sqlCodeGlosa"/>
            <parameter name="serverCode"/>
            <parameter name="serverCodeGlosa"/>
            <parameter name="tipoDte"/>
            <parameter name="documentosInformados" type="Integer"/>
            <parameter name="documentosAceptados" type="Integer"/>
            <parameter name="documentosRechazados" type="Integer"/>
            <parameter name="hasError" type="Boolean"/>
            <parameter name="newStatusId"/>
        </out-parameters>
        <actions>
            <set field="hasError" from="false" type="Boolean"/>
            <entity-find-one entity-name="mchile.dte.DteEnvio" value-field="envio" for-update="true"/>
            <if condition="envio.trackId == null">
                <set field="hasError" from="true"/>
                <set field="newStatusId" value="Ftde-FailedAtReceiver"/>
                <return error="true" message="No trackId, cannot verify"/>
            </if>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:envio.rutEmisor]" out-map="rutMap"/>
            <set field="RutCompania" from="rutMap.rut"/>
            <set field="DvCompania" from="rutMap.dv"/>
            <entity-find entity-name="mantle.party.PartyIdentification" list="idList">
                <econdition field-name="idValue" from="envio.rutEmisor"/>
                <econdition field-name="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            </entity-find>
            <set field="dbIssuerPartyId" from="idList.first?.partyId"/>
            <if condition="issuerPartyId == null || issuerPartyId == ''"><set field="issuerPartyId" from="dbIssuerPartyId"/></if>
            <if condition="issuerPartyId != null &amp;&amp; issuerPartyId != '' &amp;&amp; issuerPartyId != dbIssuerPartyId">
                <return error="true" message="No conincide Rut indicado en servicio (${issuerPartyId}) con el obtenido por el rut (${dbIssuerPartyId})"/>
            </if>
            <if condition="issuerPartyId == null"><return error="true" message="No se encuentra partyId para el rut ${envio.rutEmisor}"/></if>
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:issuerPartyId]" out-map="context"/>
            <service-call name="mchile.sii.dte.DteCommServices.get#Token" in-map="[dteIsProduction:dteIsProduction, partyId:issuerPartyId]" out-map="tokenMap"/>
            <set field="Token" from="tokenMap.token"/>
            <set field="TrackId" from="envio.trackId"/>
            <if condition="dteIsProduction"><then>
                <service-call name="mchile.sii.dte.DteCommServices.verifica#EnvioEnSiiProduction" in-map="context" out-map="context"/>
            </then><else>
                <service-call name="mchile.sii.dte.DteCommServices.verifica#EnvioEnSiiCertification" in-map="context" out-map="context"/>
            </else></if>
            <script><![CDATA[
                import org.moqui.entity.EntityCondition

                glosasServerCode = ['0': 'Todo OK', '1': 'Error en Entrada', '2': 'Error SQL']
                glosasSqlCode = ['0': 'Schema Validado']
                glosasErrorCode = ['0': 'Se retorna el estado', '1': 'El envío no es de la Empresa, faltan parámetros de entrada', '2': 'Error de Proceso']
                salida = getEstUpResponse.getEstUpReturn
                ec.logger.info("salida: ${salida}")
                xmlDoc = new groovy.xml.XmlParser(false, true).parseText(salida)
                header = xmlDoc.'SII:RESP_HDR'
                ec.logger.info("header: ${header}")
                estado = header.ESTADO.text()
                glosaEstado = header.GLOSA.text()
                numeroAtencion = header.NUM_ATENCION.text()
                errorCode = header.ERR_CODE.text()
                if (errorCode)
                    errorCodeGlosa = glosasErrorCode[errorCode]
                sqlCode = header.SQL_CODE.text()
                if (sqlCode) {
                    sqlCodeGlosa = glosasSqlCode[sqlCode] ?: 'Código de Oracle'
                }
                serverCode = header.SRV_CODE.text()
                if (serverCode)
                    serverCodeGlosa = glosasServerCode[serverCode]
                body = xmlDoc.'SII:RESP_BODY'
                tipoDte = body.TIPO_DOCTO.text()
                try {
                    documentosInformados = body.INFORMADOS.text() as Integer
                } catch (Exception e) {}
                try {
                    documentosAceptados = body.ACEPTADOS.text() as Integer
                } catch (Exception e) {}
                try {
                    documentosRechazados = body.RECHAZADOS.text() as Integer
                } catch (Exception e) {}
                if (estado in ['PDR', 'PRD', 'FOK', 'CRT', 'SOK']) {
                    ec.logger.info("Envío en proceso")
                    hasError = true
                } else if (estado == 'EPR') {
                    // Envío procesado
                    newStatusId = 'Ftde-Processed'
                    ec.logger.info("Envío procesado")
                    if (documentosAceptados == documentosInformados) {
                        dteIdList = ec.entity.find("mchile.dte.DteEnvioFiscalTaxDocument").condition("envioId", envioId).list().fiscalTaxDocumentId
                        dteList = ec.entity.find("mchile.dte.FiscalTaxDocument").condition("fiscalTaxDocumentId", EntityCondition.ComparisonOperator.IN, dteIdList).forUpdate(true).list()
                        docsAcInt = documentosAceptados as Integer
                        if (dteList.size() != docsAcInt) {
                            ec.message.addError("Documentos informados y aceptados en envío ${envioId} no calza con encontrados en BD por trackId ${envio.trackId}: ${documentosAceptados} vs ${dteList.size()}")
                            return;
                        }
                        // Se pueden asignar todos como aceptados
                        dteList.each { dte ->
                            if (dte.sentAuthStatusId in ['Ftd-SentAuthUnverified', 'Ftd-SendAuthFailed']) {
                                dte.sentAuthStatusId = 'Ftd-SentAuthAccepted'
                                dte.update()
                            }
                        }
                    } else {
                        // Se tienen que revisar caso a caso
                        dteList = ec.entity.find("mchile.dte.FiscalTaxDocument").condition("trackId", envio.trackId).list()
                        dteList.each { dte ->
                            ec.service.async().name("mchile.sii.dte.DteCommServices.verifica#DocumentoEnSii").parameter("fiscalTaxDocumentId", dte.fiscalTaxDocumentId).call()
                        }
                    }
                } else if (estado == 'RSC') {
                    ec.logger.info("Envío rechazado por Schema")
                    newStatusId = 'Ftde-ProcessRejectedSchema'
                } else if (estado == 'RFR') {
                    ec.logger.info("Envío rechazado por Firma")
                    newStatusId = 'Ftde-ProcessRejectedSignature'
                } else if (estado == 'RCT') {
                    ec.logger.info("Envío rechazado por Carátula")
                    newStatusId = 'Ftde-ProcessRejectedEnvelope'
                } else if (estado == '001') {
                    ec.logger.info("Error con token: ${glosaEstado}")
                    hasError = true
                } else if (errorCodeGlosa != null) {
                    ec.logger.info("Consulta con error: ${errorCodeGlosa}")
                    hasError = true
                } else if (sqlCodeGlosa != null) {
                    ec.logger.info("Consulta con error: ${errorCodeGlosa}")
                    hasError = true
                } else if (serverCodeGlosa != null) {
                    ec.logger.info("Consulta con error: ${errorCodeGlosa}")
                    hasError = true
                } else {
                    ec.logger.info("Estado no reconocido: ${estado}, errorCode ${errorCode} (${errorCodeGlosa}), sqlCode ${sqlCode} (${sqlCodeGlosa}), serverCode ${serverCode} (${serverCodeGlosa})")
                    if (errorEnvio != null && errorEnvio != '') {
                        newStatusId = 'Ftd-SentAuthRejected'
                    }
                }
                ]]></script>
        </actions>
    </service>

    <service verb="verifica" noun="EnvioEnSiiProduction" type="remote-xml-soap" location="https://palena.sii.cl/DTEWS/QueryEstUp.jws?WSDL" method="getEstUp">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'http://maullin.sii.cl/DTEWS/QueryEstDte.jws', methodNamespacePrefix:'m', parameterOrder:'RutCompania DvCompania
TrackId Token']" type="Map"/>
            <parameter name="RutCompania"/>
            <parameter name="DvCompania"/>
            <parameter name="TrackId"/>
            <parameter name="Token"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getEstUpResponse" type="Map">
                <parameter name="getEstUpReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="verifica" noun="EnvioEnSiiCertification" type="remote-xml-soap" location="https://maullin.sii.cl/DTEWS/QueryEstUp.jws?WSDL" method="getEstUp">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'http://maullin.sii.cl/DTEWS/QueryEstDte.jws', methodNamespacePrefix:'m', parameterOrder:'RutCompania DvCompania
TrackId Token']" type="Map"/>
            <parameter name="RutCompania"/>
            <parameter name="DvCompania"/>
            <parameter name="TrackId"/>
            <parameter name="Token"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getEstUpResponse" type="Map">
                <parameter name="getEstUpReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="verifica" noun="EnvioBoletaEnSii">
        <description>
            Verificación en el SII de envioBoleta con rut y trackid
        </description>
        <in-parameters>
            <parameter name="envioId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="errorCode" required="true"/>
            <parameter name="glosaError" required="true"/>
            <parameter name="hasError" type="Boolean"/>
            <parameter name="newStatusId"/>
        </out-parameters>
        <actions>
            <set field="hasError" from="true"/>
            <entity-find-one entity-name="mchile.dte.DteEnvio" value-field="envio"/>
            <if condition="envio?.trackId == null">
                <return error="true" message="Envio ${envioId} no tiene trackId, no se puede verificar"/>
            </if>
            <set field="trackId" from="envio.trackId"/>

            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:envio.issuerPartyId]" out-map="context"/>

            <service-call name="mchile.sii.dte.DteCommServices.get#TokenBoleta" in-map="[boletaIsProduction:boletaIsProduction,  partyId:envio.issuerPartyId]" out-map="tokenMap"/>
            <set field="token" from="tokenMap.token"/>
            <set field="urlSolicitud" from="boletaIsProduction? 'https://api.sii.cl/recursos/v1/boleta.electronica.envio': 'https://apicert.sii.cl/recursos/v1/boleta.electronica.envio'"/>

            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                import org.moqui.util.RestClient
                import org.eclipse.jetty.http.HttpHeader
                import org.eclipse.jetty.http.HttpField
                import groovy.json.JsonSlurper

                ExecutionContext ec = context.ec

                URI requestUrl = new URI(urlSolicitud + "/" +  rutEmisor + "-" + trackId)

                RestClient.RequestFactory requestFactory = new RestClient.SimpleRequestFactory(false, false)
                requestFactory.getHttpClient().setUserAgentField(new HttpField(HttpHeader.USER_AGENT, "Mozilla/4.0 (compatible; PROG 1.0; Windows NT 5.0; YComp 5.0.2.4)"))
                RestClient restClient = new RestClient().uri(requestUrl).method("GET").withRequestFactory(requestFactory)
                restClient.addHeader("Host", requestUrl.getHost())
                restClient.addHeader("Cookie", "TOKEN=${token}")
                if (proxyHost != null && proxyPort != 0) {
                    restClient.withRequestFactory(new cl.moit.net.ProxyRequestFactory(proxyHost, proxyPort))
                }
                restClient.acceptContentType("application/json")

                RestClient.RestResponse response = restClient.call()
                respSII = response.text()

                def jsonSlurper = new JsonSlurper()
                try {
                    respuesta = jsonSlurper.parseText(respSII)
                } catch (Exception e) {
                    ec.message.addError("Error parsing response from SII: ${e.getMessage()}\nrespuesta SII: ${respSII}")
                }
            ]]></script>
            <entity-find entity-name="mchile.dte.DteEnvioAndFiscalTaxDocument" list="dteAndEnvioList">
                <econdition field-name="envioId"/>
            </entity-find>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="dteList" for-update="true">
                <econdition field-name="fiscalTaxDocumentId" operator="in" from="dteAndEnvioList.fiscalTaxDocumentId"/>
            </entity-find>
            <set field="rechazoPorTipo" from="[:]"/>
            <set field="reparoPorTipo" from="[:]"/>
            <iterate list="respuesta.detalle_rep_rech" entry="reparoRechazo">
                <service-call name="mchile.sii.dte.DteInternalServices.get#MoquiCode" in-map="[siiCode:reparoRechazo.tipo]" out-map="moquiCode"/>
                <set field="fiscalTaxDocumentTypeEnumId" from="moquiCode.enumId"/>
                <set field="dte" from="dteList.find { it.fiscalTaxDocumentNumber == reparoRechazo.folio &amp;&amp; it.fiscalTaxDocumentTypeEnumId == fiscalTaxDocumentTypeEnumId
                    &amp;&amp; it.sentAuthStatusId in ['Ftd-SentAuthRejected', 'Ftd-SentAuthUnverified'] }"/>
                <if condition="dte"><then>
                    <if condition="reparoRechazo.estado == 'RCH'"><then>
                        <set field="dte.sentAuthStatusId" value="Ftd-SentAuthRejected"/>
                        <set field="rechazoPorTipo[reparoRechazo.tipo]" from="(rechazoPorTipo[reparoRechazo.tipo]?:0) + 1"/>
                    </then><else-if condition="reparoRechazo.estado == 'RPR'">
                        <set field="dte.sentAuthStatusId" value="Ftd-SentAuthAcceptedWithDiscrepancies"/>
                        <set field="reparoPorTipo[reparoRechazo.tipo]" from="(reparoPorTipo[reparoRechazo.tipo]?:0) + 1"/>
                    </else-if><else>
                        <message error="true">Unknown status for reparo o rechazo: ${reparoRechazo.estado}</message>
                    </else></if>
                    <set field="dte.authComment" from="groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(reparoRechazo.error))"/>
                    <entity-update value-field="dte"/>
                </then><else>
                    <message error="true">Did not find DTE for reparo o rechazo: ${reparoRechazo}</message>
                </else></if>
            </iterate>
            <iterate list="respuesta.estadistica" entry="tipoItem">
                <service-call name="mchile.sii.dte.DteInternalServices.get#MoquiCode" in-map="[siiCode:tipoItem.tipo]" out-map="moquiCode"/>
                <set field="fiscalTaxDocumentTypeEnumId" from="moquiCode.enumId"/>
                <set field="tipo" from="tipoItem.tipo"/>
                <set field="rechazosProcesados" from="rechazoPorTipo[tipo]?:0"/>
                <set field="reparosProcesados" from="reparoPorTipo[tipo]?:0"/>
                <set field="totalPorTipo" from="dteList.findAll { it.fiscalTaxDocumentTypeEnumId == fiscalTaxDocumentTypeEnumId }.size()"/>
                <if condition="tipoItem.informados != (tipoItem.aceptados + tipoItem.rechazados + tipoItem.reparos)">
                    <message error="true">Error in response (informados != aceptados + rechazados + reparos): ${tipoItem}</message>
                </if>
                <if condition="tipoItem.informados != totalPorTipo"><message error="true">Informados mismatch, response says ${tipoItem.informados}, DB has ${totalPorTipo}</message></if>
                <if condition="tipoItem.rechazados != rechazosProcesados"><message error="true">Rechazados mismatch, response says ${tipoItem.rechazados}, we processed ${rechazosProcesados}</message></if>
                <if condition="tipoItem.reparos != reparosProcesados"><message error="true">Reparos mismatch, response says ${tipoItem.reparos}, we processed ${reparosProcesados}</message></if>
                <set field="aceptadosList" from="dteList.findAll { it.fiscalTaxDocumentTypeEnumId == fiscalTaxDocumentTypeEnumId &amp;&amp; it.sentAuthStatusId in ['Ftd-SentAuthUnverified', 'Ftd-SentAuthAccepted'] }"/>
                <if condition="aceptadosList.size() == tipoItem.aceptados"><then>
                    <iterate list="aceptadosList" entry="dteAceptado">
                        <set field="dteAceptado.sentAuthStatusId" value="Ftd-SentAuthAccepted"/>
                        <entity-update value-field="dteAceptado"/>
                    </iterate>
                </then><else>
                    <message error="true">Aceptado mismatch for type ${tipo}, response says ${tipoItem.aceptados}, DB has ${aceptadosList.size()}</message>
                </else></if>
            </iterate>
            <set field="hasError" from="ec.message.hasError()"/>
        </actions>
    </service>

    <service verb="verifica" noun="BoletaEnSii">
        <description>
            Verificación en el SII de boleta específica usando rut empresa, tipo y folio
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="hasError" type="Boolean"/>
            <parameter name="errorCode" required="true"/>
            <parameter name="glosaError" required="true"/>
        </out-parameters>
        <actions>
            <set field="hasError" from="true"/>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentAndInvoice" value-field="boleta"/>
            <if condition="boleta == null"><return error="true" message="Could not find FiscalTaxDocument ${fiscalTaxDocumentId}"/></if>
            <if condition="!(boleta.sentAuthStatusId in ['Ftd-SentAuthUnverified', 'Ftd-SentAuthAccepted'])">
                <return error="true" message="Documento está en estado ${boleta.sentAuthStatusId}, no se puede validar"/>
            </if>
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:boleta.issuerPartyId]" out-map="context"/>

            <service-call name="mchile.sii.dte.DteInternalServices.get#SiiCode" in-map="[fiscalTaxDocumentTypeEnumId:boleta.fiscalTaxDocumentTypeEnumId]" out-map="siiCodeMap"/>
            <set field="tipo" from="siiCodeMap.siiCode"/>
            <set field="folio" from="boleta.fiscalTaxDocumentNumber"/>

            <set field="issuerPartyIdValue" from="boleta.issuerPartyIdValue"/>

            <set field="monto" from="boleta.dteAmount" type="String"/>
            <set field="fechaEmision" from="ec.l10n.format(boleta.date, 'dd-MM-yyyy')"/>

            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:boleta.receiverPartyIdValue]" out-map="rutMap"/>
            <set field="rutReceptor" from="rutMap.rut" type="String"/>
            <set field="dvReceptor" from="rutMap.dv" type="String"/>

            <service-call name="mchile.sii.dte.DteCommServices.get#TokenBoleta" in-map="[boletaIsProduction:boletaIsProduction,  partyId:boleta.issuerPartyId]" out-map="tokenMap"/>
            <set field="token" from="tokenMap.token"/>
            <set field="urlSolicitud" from="boletaIsProduction? 'https://api.sii.cl/recursos/v1/boleta.electronica': 'https://apicert.sii.cl/recursos/v1/boleta.electronica'"/>

            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                import org.moqui.util.RestClient
                import org.eclipse.jetty.http.HttpHeader
                import org.eclipse.jetty.http.HttpField
                import groovy.json.JsonSlurper

                ExecutionContext ec = context.ec

                URI requestUrl = new URI(urlSolicitud + "/" + issuerPartyIdValue + "-" + tipo + "-" + folio + "/estado")

                RestClient.RequestFactory requestFactory = new RestClient.SimpleRequestFactory(false, false)
                requestFactory.getHttpClient().setUserAgentField(new HttpField(HttpHeader.USER_AGENT, "Mozilla/4.0 (compatible; PROG 1.0; Windows NT 5.0; YComp 5.0.2.4)"))
                RestClient restClient = new RestClient().uri(requestUrl).method("GET").withRequestFactory(requestFactory)
                restClient.addHeader("Host", requestUrl.getHost())
                restClient.addHeader("Cookie", "TOKEN=${token}")
                restClient.addBodyParameters([rut_receptor:rutReceptor, dv_receptor:dvReceptor, monto:monto, fechaEmision:fechaEmision])
                if (proxyHost != null && proxyPort != 0) {
                    restClient.withRequestFactory(new cl.moit.net.ProxyRequestFactory(proxyHost, proxyPort))
                }
                restClient.acceptContentType("application/json")

                RestClient.RestResponse response = restClient.call()
                respSII = response.text()

                def jsonSlurper = new JsonSlurper()
                try {
                    respuesta = jsonSlurper.parseText(respSII)
                } catch (Exception e) {
                    ec.message.addError("Error parsing response from SII: ${e.getMessage()}\nrespuesta SII: ${respSII}")
                }
            ]]></script>

            <set field="errorCode" from="respuesta.codigo"/>
            <set field="glosaError" from="respuesta.descripcion"/>
            <if condition="respuesta.codigo in ['DOK', 'TMD', 'TMC', 'MMD', 'MMC', 'AND', 'ANC']"><then>
                <!-- OK -->
                <service-call name="update#mchile.dte.FiscalTaxDocument" in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId, sentAuthStatusId:'Ftd-SentAuthAccepted']"/>
                <set field="hasError" from="false"/>
            </then><else-if condition="respuesta.codigo == 'FAU'">
                <message type="warning">Documento no recibido (aún) en SII</message>
            </else-if><else>
                <return error="true" message="${respuesta}"/>
            </else></if>

        </actions>
    </service>

    <service verb="marcarEnviados" noun="Documentos">
        <description>
            Marca lista de documentos como enviados, usando el trackid devuelto por el SII
        </description>
        <in-parameters>
            <parameter name="trackId"/>
            <parameter name="documentIdList" required="true" type="List"/>
        </in-parameters>
        <actions>
            <iterate list="documentIdList" entry="documentId">
                <!-- Se marca DTE como enviada -->
                <set field="idDte" from="documentId"/>
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                    <field-map field-name="fiscalTaxDocumentId" from="idDte"/>
                </entity-find-one>
                <set field="dteEv.sentAuthStatusId" value="Ftd-SentAuthUnverified"/>
                <set field="dteEv.trackId" from="trackId"/>
                <entity-update value-field="dteEv"/>
            </iterate>
        </actions>
    </service>

    <service verb="marcarNoEnviado" noun="Documento">
        <description>
            Marca una DTE como no enviada al SII
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteEv">
                <return error="true" message="No existe DTE especificada"/>
            </if>

            <set field="dteEv.sentAuthStatusId" value="Ftd-NotSentAuth"/>
            <entity-update value-field="dteEv"/>
        </actions>
    </service>

    <service verb="marcarEnviado" noun="Documento">
        <description>
            Marca una DTE como ya enviada al SII
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteEv">
                <return error="true" message="No existe DTE especificada"/>
            </if>

            <set field="dteEv.sentAuthStatusId" value="Ftd-SentAuthAccepted"/>
            <entity-update value-field="dteEv"/>
        </actions>
    </service>
    
    <service verb="get" noun="Seed">
        <in-parameters>
            <parameter name="dteIsProduction" type="Boolean"/>
            <parameter name="boletaIsProduction" type="Boolean"/>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="estado"/>
            <parameter name="semilla"/>
        </out-parameters>
        <actions>
            <if condition="dteIsProduction == null">
                <service-call name="mchile.sii.dte.DteInternalServices.check#ProductionEnvironment" out-map="context"/>
                <set field="dteIsProduction" from="dteIsProductionByPartyId[partyId]"/>
            </if>
            <if condition="dteIsProduction"><then>
                <service-call name="mchile.sii.dte.DteCommServices.get#SeedProduction" out-map="context"/>
            </then><else>
                <service-call name="mchile.sii.dte.DteCommServices.get#SeedCertification" out-map="context"/>
            </else></if>
            <script><![CDATA[
                seedReturn = getSeedResponse?.getSeedReturn
                bais = new ByteArrayInputStream(seedReturn.getBytes())
                groovy.util.Node seedReturn = new groovy.xml.XmlParser(false, false).parse(bais)
                bais.close()
                semilla = seedReturn.'SII:RESP_BODY'.SEMILLA.text()
                estado = seedReturn.'SII:RESP_HDR'.ESTADO.text()
            ]]></script>
        </actions>
    </service>

    <service verb="get" noun="SeedCertification" type="remote-xml-soap" location="https://maullin.sii.cl/DTEWS/CrSeed.jws?WSDL" method="getSeed" reattemptAmount="1" reattemptPauseMilliseconds="1500">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://palena.sii.cl/DTEWS/CrSeed.jws', methodNamespacePrefix:'m']" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getSeedResponse" type="Map">
                <parameter name="getSeedReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="get" noun="SeedProduction" type="remote-xml-soap" location="https://palena.sii.cl/DTEWS/CrSeed.jws?WSDL" method="getSeed" reattemptAmount="1" reattemptPauseMilliseconds="1500">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://palena.sii.cl/DTEWS/CrSeed.jws', methodNamespacePrefix:'m']" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getSeedResponse" type="Map">
                <parameter name="getSeedReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="get" noun="Token">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="dteIsProduction" type="Boolean"/>
            <parameter name="boletaIsProduction" type="Boolean"/>
            <parameter name="boleta" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token"/>
            <parameter name="estado"/>
            <parameter name="glosa"/>
        </out-parameters>
        <actions>
            <if condition="boleta"><then>
                <if condition="boletaIsProduction == null">
                    <service-call name="mchile.sii.dte.DteInternalServices.check#ProductionEnvironment" out-map="context"/>
                    <set field="boletaIsProduction" from="boletaIsProductionByPartyId[partyId]"/>
                </if>
                <service-call name="mchile.sii.dte.DteCommServices.get#SeedBoleta" in-map="context" out-map="seed"/>
            </then><else>
                <if condition="dteIsProduction == null">
                    <service-call name="mchile.sii.dte.DteInternalServices.check#ProductionEnvironment" out-map="context"/>
                    <set field="dteIsProduction" from="dteIsProductionByPartyId[partyId]"/>
                </if>
                <service-call name="mchile.sii.dte.DteCommServices.get#Seed" in-map="context" out-map="seed"/>
            </else></if>
            <if condition="seed.estado != '00'">
                <return error="true" message="Estado inválido al obtener semilla: ${seed.estado}"/>
            </if>
            <script><![CDATA[
                import groovy.xml.MarkupBuilder
                import cl.moit.dte.MoquiDTEUtils

                StringWriter xmlWriter = new StringWriter()
                MarkupBuilder xmlBuilder = new MarkupBuilder(xmlWriter)
                xmlBuilder.getToken(xmlns: 'http://www.sii.cl/SiiDte') {
                    item() {
                        Semilla(seed.semilla)
                    }
                }
                String xmlString = xmlWriter.toString()
                xmlWriter.close()
                org.w3c.dom.Document doc = MoquiDTEUtils.parseDocument(xmlString.getBytes())
                ec.context.putAll(ec.service.sync().name("mchile.sii.dte.DteInternalServices.load#DteConfig").parameter("partyId", partyId).call())
                byte[] signedXmlBytes = MoquiDTEUtils.sign(doc, "", pkey, certificate, "", "")
                String signedXml = new String(signedXmlBytes)
            ]]></script>
            <if condition="boleta"><then>
                <return error="true" message="No soportado obtener token boleta vía DteCommServices.get#Token"/>
            </then><else>
                <if condition="dteIsProduction"><then>
                    <service-call name="mchile.sii.dte.DteCommServices.get#TokenProduction" in-map="[pszXml:signedXml]" out-map="context"/>
                </then><else>
                    <service-call name="mchile.sii.dte.DteCommServices.get#TokenCertification" in-map="[pszXml:signedXml]" out-map="context"/>
                </else></if>
            </else></if>
            <script><![CDATA[
                tokenReturn = getTokenResponse?.getTokenReturn
                bais = new ByteArrayInputStream(tokenReturn.getBytes())
                groovy.util.Node seedReturn = new groovy.xml.XmlParser(false, false).parse(bais)
                bais.close()
                token = seedReturn.'SII:RESP_BODY'.TOKEN.text()
                estado = seedReturn.'SII:RESP_HDR'.ESTADO.text()
                glosa = seedReturn.'SII:RESP_HDR'.GLOSA.text()
            ]]></script>
        </actions>
    </service>

    <service verb="get" noun="TokenProduction" type="remote-xml-soap" location="https://palena.sii.cl/DTEWS/GetTokenFromSeed.jws" method="getToken" reattemptAmount="1" reattemptPauseMilliseconds="1500">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://palena.sii.cl/DTEWS/CrSeed.jws', methodNamespacePrefix:'m']" type="Map"/>
            <parameter name="pszXml" required="true" allow-html="any"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getTokenResponse" type="Map">
                <parameter name="getTokenReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="get" noun="TokenCertification" type="remote-xml-soap" location="https://maullin.sii.cl/DTEWS/GetTokenFromSeed.jws" method="getToken" reattemptAmount="1" reattemptPauseMilliseconds="1500">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://palena.sii.cl/DTEWS/CrSeed.jws', methodNamespacePrefix:'m']" type="Map"/>
            <parameter name="pszXml" required="true" allow-html="any"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getTokenResponse" type="Map">
                <parameter name="getTokenReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="enviar" noun="AceptacionComercial">
        <description>Envío de respuesta con aprobación comercial a emisor DTE, chequeando que el usuario pueda representar al receptor.</description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fiscalTaxDocumentNumber" required="true" type="Integer"/>
        </in-parameters>
        <actions>
            <service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="dteList">
                <econdition field-name="fiscalTaxDocumentId"/>
                <econdition field-name="fiscalTaxDocumentTypeEnumId"/>
                <econdition field-name="fiscalTaxDocumentNumber"/>
                <econdition field-name="receiverPartyId" operator="in" from="userOrgIds"/>
            </entity-find>
            <if condition="!dteList">
                <return error="true" message="No se encuentra el DTE especificado para aprobación"/>
            </if>
            <service-call name="mchile.sii.dte.DteEnvioServices.genera#EnvioAceptacionComercial" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="SeedBoleta">
        <in-parameters>
            <parameter name="boletaIsProduction" type="Boolean"/>
            <parameter name="partyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="semilla"/>
        </out-parameters>
        <actions>
            <if condition="boletaIsProduction == null">
                <if condition="partyId == null">
                    <return error="true" message="Need to specify boletaIsProduction or partyId"/>
                </if>
                <service-call name="mchile.sii.dte.DteInternalServices.check#ProductionEnvironment" out-map="context"/>
                <set field="boletaIsProduction" from="boletaIsProductionByPartyId[partyId]"/>
            </if>
            <if condition="boletaIsProduction"><then>
                <service-call name="mchile.sii.dte.DteCommServices.get#SeedBoletaProduction" out-map="context"/>
            </then><else>
                <service-call name="mchile.sii.dte.DteCommServices.get#SeedBoletaCertification" out-map="context"/>
            </else></if>
        </actions>
    </service>

    <service verb="get" noun="SeedBoletaCertification" type="script" location="component://MoquiChile/service/mchile/sii/dte/groovy/getSeedBoleta.groovy">
        <in-parameters>
            <parameter name="urlSolicitud" required="true" default-value="https://apicert.sii.cl/recursos/v1/boleta.electronica.semilla"/>
            <parameter name="hostEnvio" required="true" default-value="apicert.sii.cl"/>
        </in-parameters>
        <out-parameters>
            <parameter name="semilla"/>
        </out-parameters>
    </service>

    <service verb="get" noun="SeedBoletaProduction" type="script" location="component://MoquiChile/service/mchile/sii/dte/groovy/getSeedBoleta.groovy">
        <in-parameters>
            <parameter name="urlSolicitud" required="true" default-value="https://api.sii.cl/recursos/v1/boleta.electronica.semilla"/>
            <parameter name="hostEnvio" required="true" default-value="api.sii.cl"/>
        </in-parameters>
        <out-parameters>
            <parameter name="semilla"/>
        </out-parameters>
    </service>

    <service verb="get" noun="TokenBoleta">
        <in-parameters>
            <parameter name="boletaIsProduction" type="Boolean"/>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token"/>
        </out-parameters>
        <actions>
            <if condition="boletaIsProduction == null">
                <service-call name="mchile.sii.dte.DteInternalServices.check#ProductionEnvironment" out-map="context"/>
                <set field="boletaIsProduction" from="boletaIsProductionByPartyId[partyId]"/>
            </if>
            <if condition="boletaIsProduction"><then>
                <set field="urlSolicitud" value="https://api.sii.cl/recursos/v1/boleta.electronica.token"/>
                <service-call name="mchile.sii.dte.DteCommServices.get#TokenBoletaInternal" out-map="context" in-map="[partyId:partyId, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]"/>
            </then><else>
                <set field="urlSolicitud" value="https://apicert.sii.cl/recursos/v1/boleta.electronica.token"/>
                <service-call name="mchile.sii.dte.DteCommServices.get#TokenBoletaInternal" out-map="context" in-map="[partyId:partyId, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]"/>
            </else></if>
        </actions>
    </service>

    <service verb="get" noun="TokenBoletaInternal" type="script" location="component://MoquiChile/service/mchile/sii/dte/groovy/getTokenBoleta.groovy">
        <in-parameters>
            <parameter name="urlSolicitud" required="true"/>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token"/>
        </out-parameters>
    </service>

    <service verb="reenable" noun="EnvioFailedToProcess">
        <in-parameters>
            <parameter name="envioId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList" for-update="true">
                <econdition field-name="envioId"/>
                <econdition field-name="statusId" value="Ftde-ProcessFailed"/>
            </entity-find>
            <if condition="!envioList">
                <return error="true" message="No se encuentra envío con fallas de procesamiento ${envioId}"/>
            </if>
            <set field="envio" from="envioList.first"/>
            <set field="envio.statusId" value="Ftde-Received"/>
            <entity-update value-field="envio"/>
        </actions>
    </service>

    <service verb="reenable" noun="EnvioFailedToSend">
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="toStatusId" default-value="Ftde-Created"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList" for-update="true">
                <econdition field-name="envioId"/>
                <econdition field-name="statusId" operator="in" value="Ftde-Failed,Ftde-FailedAtReceiver"/>
            </entity-find>
            <if condition="!envioList">
                <return error="true" message="No se encuentra envío con fallas de procesamiento ${envioId}"/>
            </if>
            <set field="envio" from="envioList.first"/>
            <set field="envio.statusId" from="toStatusId"/>
            <entity-update value-field="envio"/>
        </actions>
    </service>

    <service verb="inicia" noun="EnvioLibrosSii">
        <in-parameters>
            <parameter name="documentIds" type="List" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/>
            <if condition="!(issuerPartyId in userOrgIds)"><return error="true" message="Usuario no tiene autorización para enviar DTEs a nombre de partyId ${issuerPartyId}"/></if>

            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:issuerPartyId]" out-map="context"/>

            <iterate list="documentList" entry="libroEntry">
                <set field="detailLibro" from="libroEntry instanceof List ? libroEntry : libroEntry.split('-') as List"/>
                <set field="fiscalTaxDocumentId" from="detailLibro[0]"/>
                <log level="warn" message="fiscalTaxDocumentId: $fiscalTaxDocumentId"/>
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="libroField">
                    <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                </entity-find-one>
                <set field="xml" from="libroField.xml"/>

                <service-call name="mchile.sii.dte.DteInternalServices.genera#EnvioLibro" in-map="[rutEnviador:rutEnviador, organizationPartyId:issuerPartyId, idS:'ID178', xml:xml ]" out-map="context"/>

                <service-call name="mchile.sii.dte.DteCommServices.enviaSII#Envio" in-map="[envioId:envioId, organizationPartyId:issuerPartyId]" out-map="context"/>
            </iterate>
        </actions>
    </service>

    <service verb="inicia" noun="EnvioDocumentosSii">
        <description>
            Genera envíos para ser enviados al SII y/o gatilla el envío de un envío ya preparado
        </description>
        <in-parameters>
            <parameter name="documentIds" type="List" required="true"/>
        </in-parameters>
        <actions>

            <if condition="documentIds.size() &lt; 1"><return error="true" message="Debe seleccionar al menos 1 DTE para enviar"/></if>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="dteList">
                <econdition field-name="fiscalTaxDocumentId" operator="in" from="documentIds"/>
            </entity-find>
            <entity-find entity-name="mchile.dte.DteEnvioAndFiscalTaxDocument" list="envioFtdList">
                <econdition field-name="fiscalTaxDocumentId" operator="in" from="documentIds"/>
                <econdition field-name="rutReceptor" value="60803000-K"/>
                <econdition field-name="envioStatusId" value="Ftde-Created"/>
            </entity-find>
            <set field="documentosConEnvio" from="envioFtdList.fiscalTaxDocumentId"/>
            <set field="enviosAEnviar" from="new LinkedHashSet&lt;String&gt;()"/>
            <set field="dteIdList" from="[]"/>
            <set field="boletaIdList" from="[]"/>
            <iterate list="dteList" entry="dte">
                <if condition="issuerPartyId == null"><then>
                    <set field="issuerPartyId" from="dte.issuerPartyId"/>
                </then><else-if condition="dte.issuerPartyId != issuerPartyId">
                    <return error="true" message="No se pueden enviar simultáneamente DTEs de distintos emisores"/>
                </else-if></if>
                <if condition="dte.sentAuthStatusId != 'Ftd-NotSentAuth'"><then>
                    <log level="warn" message="Not sending FiscalTaxDocument ${dte.fiscalTaxDocumentId} with sentAuthStatus ${dte.sentAuthStatusId}"/>
                </then><else-if condition="dte.fiscalTaxDocumentId in documentosConEnvio">
                    <script>enviosAEnviar.addAll((envioFtdList.findAll { it -> it.fiscalTaxDocumentId == dte.fiscalTaxDocumentId }).collect { return it.envioId })</script>
                </else-if><else-if condition="dte.fiscalTaxDocumentTypeEnumId in ['Ftdt-39', 'Ftdt-41']">
                    <script>boletaIdList.add(dte.fiscalTaxDocumentId)</script>
                </else-if><else>
                    <script>dteIdList.add(dte.fiscalTaxDocumentId)</script>
                </else></if>
            </iterate>
            <service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/>
            <if condition="!(issuerPartyId in userOrgIds)"><return error="true" message="Usuario no tiene autorización para enviar DTEs a nombre de partyId ${issuerPartyId}"/></if>

            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:issuerPartyId]" out-map="context"/>

            <if condition="dteIdList">
                <service-call name="mchile.sii.dte.DteEnvioServices.genera#EnvioDte" in-map="[organizationPartyId:issuerPartyId, documentIdList:dteIdList]" out-map="envio" transaction="force-new" ignore-error="true"/>
                <if condition="(envio?.envioId) &amp;&amp; dteIsProduction">
                    <service-call name="mchile.sii.dte.DteCommServices.enviaSII#Envio" in-map="[envioId:envio.envioId, organizationPartyId:issuerPartyId]" out-map="context" transaction="force-new" ignore-error="true"/>
                </if>
            </if>
            <if condition="boletaIdList">
                <service-call name="mchile.sii.dte.DteEnvioServices.genera#EnvioBoleta" in-map="[organizationPartyId:issuerPartyId, documentIdList:boletaIdList]" out-map="envio" transaction="force-new" ignore-error="true"/>
                <if condition="(envio?.envioId) &amp;&amp; boletaIsProduction">
                    <service-call name="mchile.sii.dte.DteCommServices.enviaSII#EnvioBoleta" in-map="[envioId:envio.envioId, organizationPartyId:issuerPartyId]" out-map="context" transaction="force-new" ignore-error="true"/>
                </if>
            </if>
        </actions>
    </service>

    <service verb="get" noun="XmlReceptionEmail">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="partyIdValue" required="true"/>
            <parameter name="dtePartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="xmlReceptionEmailAddress"/>
        </out-parameters>
        <actions>
            <set field="maxDaysWithoutChecking" from="3"/>
            <service-call name="mchile.sii.dte.DteInternalServices.check#ProductionEnvironment" out-map="context"/>
            <set field="dteIsProduction" from="dteIsProductionByPartyId[dtePartyId]"/>
            <entity-find entity-name="mantle.party.contact.PartyContactMech" list="pcmList">
                <econdition field-name="partyId"/>
                <econdition field-name="contactMechPurposeId" value="EmailDteXmlRec" ignore="!dteIsProduction"/>
                <econdition field-name="contactMechPurposeId" operator="in" value="EmailDteXmlRec,EmailPrimary,EmailBilling" ignore="dteIsProduction"/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <set field="pcm" from="pcmList.first"/>
            <set field="cm" from="pcm?.contactMech"/>
            <service-call name="mchile.GeneralServices.get#RutForParty" in-map="[partyId:partyId]" out-map="rut"/>
            <if condition="rut.rutSinFormato == null || rut.rutSinFormato != partyIdValue"><return error="true" message="Rut mismatch for partyId ${partyId}, received ${partyIdValue}, found in DB ${rut.rutSinFormato}"/></if>
            <if condition="dteIsProduction"><then>
                <set field="refreshContact" type="Boolean" from="pcm == null || pcm.verifyCodeDate == null || (ec.user.nowTimestamp.time - pcm.verifyCodeDate.time) > 3*24*60*60*1000"/>
            </then><else>
                <set field="refreshContact" type="Boolean" from="ec.user.getPreference('mchile.dte.FetchEmailFromSiiInCert')"/>
            </else></if>
            <if condition="refreshContact"><then>
                <service-call name="mchile.sii.SIIServices.get#RutEspeciales" out-map="rutEspeciales"/>
                <if condition="partyIdValue in rutEspeciales.rutList">
                    <message>Rut ${partyIdValue} es un Rut especial, no se consulta en el SII</message>
                    <return/>
                </if>
                <service-call name="mchile.sii.SIIServices.consulta#ContribuyentesAutorizadosContacto" in-map="[rut:rut.rutSinDv, dv:rut.dv, dtePartyId:dtePartyId]" out-map="cac"/>
                <if condition="cac.mailContacto == null || cac.mailContacto.length() &lt; 5">
                    <return error="true" message="Error obteniendo mailContacto del SII, recibido: ${cac.mailContacto}"/>
                </if>
                <set field="xmlReceptionEmailAddress" from="cac.mailContacto"/>
                <if condition="cm == null"><then>
                    <service-call name="mantle.party.ContactServices.create#EmailAddress" in-map="[emailAddress:cac.mailContacto, partyId:partyId, contactMechPurposeId:'EmailDteXmlRec',
                            fromDate:ec.user.nowTimestamp, verifyCodeDate:ec.user.nowTimestamp]" out-map="context"/>
                </then><else>
                    <if condition="cm.infoString != cac.mailContacto"><then>
                        <service-call name="update#mantle.party.contact.PartyContactMech" in-map="[partyId:pcm.partyId, contactMechId:pcm.contactMechId, contactMechPurposeId:pcm.contactMechPurposeId,
                                fromDate:pcm.fromDate, thruDate:ec.user.nowTimestamp]"/>
                        <service-call name="mantle.party.ContactServices.create#EmailAddress" in-map="[emailAddress:cac.mailContacto, partyId:partyId, contactMechPurposeId:'EmailDteXmlRec',
                            fromDate:ec.user.nowTimestamp, verifyCodeDate:ec.user.nowTimestamp]" out-map="context"/>
                    </then><else>
                        <service-call name="update#mantle.party.contact.PartyContactMech" in-map="[partyId:pcm.partyId, contactMechId:pcm.contactMechId, contactMechPurposeId:pcm.contactMechPurposeId,
                                fromDate:pcm.fromDate, verifyCodeDate:ec.user.nowTimestamp]"/>
                    </else></if>
                </else></if>
            </then><else>
                <if condition="cm == null">
                    <return error="true" message="No existe mail para envío de documentos DTE en la BD y configuración impide consultar al SII"/>
                </if>
                <set field="xmlReceptionEmailAddress" from="cm.infoString"/>
            </else></if>
        </actions>
    </service>

</services>
