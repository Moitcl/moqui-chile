<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="create" noun="PendingEnvioDteForReceivers" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="triggerSend" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRole" list="internalPartyList">
                <econdition field-name="roleTypeId" value="OrgInternal"/>
            </entity-find>
            <set field="internalPartyIdList" from="internalPartyList.partyId"/>
            <service-call name="mchile.sii.SIIServices.get#RutEspeciales" out-map="reserved"/>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="ftdList">
                <econdition field-name="issuerPartyId" operator="in" from="internalPartyIdList"/>
                <econdition field-name="receiverPartyIdValue" operator="not-in" from="reserved.rutList"/>
                <econdition field-name="statusId" value="Ftd-Issued"/>
                <econdition field-name="sentAuthStatusId" value="Ftd-SentAuthAccepted"/>
                <econdition field-name="sentRecStatusId" value="Ftd-NotSentRec"/>
                <econdition field-name="fiscalTaxDocumentTypeEnumId" operator="not-in" value="Ftdt-41,Ftdt-39"/>
            </entity-find>
            <set field="ungeneratedDocumentIdsByIssuerPartyId" from="[:]"/>
            <set field="envioIdsToSend" from="new LinkedHashSet&lt;String&gt;()"/>
            <iterate list="ftdList" entry="dte">
                <entity-find entity-name="mchile.dte.DteEnvioAndFiscalTaxDocument" list="existingEnvioList">
                    <econdition field-name="fiscalTaxDocumentId" from="dte.fiscalTaxDocumentId"/>
                    <econdition field-name="envioStatusId" value="Ftde-Created"/>
                    <econdition field-name="rutReceptor" from="dte.receiverPartyIdValue"/>
                </entity-find>
                <if condition="existingEnvioList"><then>
                    <set field="envio" from="existingEnvioList.first"/>
                    <log message="Found existing envio ${envio.envioId}, not creating new one"/>
                    <if condition="triggerSend">
                        <script>envioIdsToSend.add(envio.envioId)</script>
                    </if>
                </then><else>
                    <set field="ungeneratedDocumentIdsByReceiverPartyId" from="ungeneratedDocumentIdsByIssuerPartyId[dte.issuerPartyId]"/>
                    <if condition="ungeneratedDocumentIdsByReceiverPartyId == null">
                        <set field="ungeneratedDocumentIdsByReceiverPartyId" from="[:]"/>
                        <set field="ungeneratedDocumentIdsByIssuerPartyId[dte.issuerPartyId]" from="ungeneratedDocumentIdsByReceiverPartyId"/>
                    </if>
                    <set field="ungeneratedDocumentIdMap" from="ungeneratedDocumentIdsByReceiverPartyId[dte.receiverPartyId]"/>
                    <if condition="ungeneratedDocumentIdMap == null">
                        <set field="ungeneratedDocumentIdMap" from="[:]"/>
                        <set field="ungeneratedDocumentIdMap.receiverPartyIdValue" from="dte.receiverPartyIdValue"/>
                        <set field="ungeneratedDocumentIdMap.list" from="[]"/>
                        <set field="ungeneratedDocumentIdsByReceiverPartyId[dte.receiverPartyIdValue]" from="ungeneratedDocumentIdMap"/>
                    </if>
                    <script>ungeneratedDocumentIdMap.list.add(dte.fiscalTaxDocumentId)</script>
                </else></if>
            </iterate>
            <iterate list="ungeneratedDocumentIdsByIssuerPartyId" entry="ungeneratedDocumentIdsByReceiverPartyId" key="issuerPartyId">
                <iterate list="ungeneratedDocumentIdsByReceiverPartyId" entry="ungeneratedDocumentIdMap" key="receiverPartyId">
                    <service-call name="mchile.sii.dte.DteEnvioServices.genera#EnvioDte" in-map="[rutReceptor:ungeneratedDocumentIdMap.receiverPartyIdValue, organizationPartyId:issuerPartyId, documentIdList:ungeneratedDocumentIdMap.list]" out-map="envio" transaction="force-new"/>
                    <script>envioIdsToSend.add(envio.envioId)</script>
                    <log message="Generated envio ${envio.envioId}"/>
                </iterate>
            </iterate>
            <if condition="envioIdsToSend &amp;&amp; triggerSend">
                <service-call name="mchile.sii.dte.DteCommServices.send#PendingEnvioDte" in-map="[envioIdList:envioIdsToSend]" transaction="force-new"/>
            </if>
        </actions>
    </service>

    <service verb="create" noun="PendingEnvioDteForSii" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="triggerSend" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRole" list="internalPartyList">
                <econdition field-name="roleTypeId" value="OrgInternal"/>
            </entity-find>
            <set field="internalPartyIdList" from="internalPartyList.partyId"/>
            <service-call name="mchile.sii.SIIServices.get#RutEspeciales" out-map="reserved"/>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="ftdList">
                <econdition field-name="issuerPartyId" operator="in" from="internalPartyIdList"/>
                <econdition field-name="receiverPartyIdValue" operator="not-in" from="reserved.rutList"/>
                <econdition field-name="statusId" value="Ftd-Issued"/>
                <econdition field-name="sentAuthStatusId" value="Ftd-NotSentAuth"/>
            </entity-find>
            <set field="ungeneratedDocumentIdsByIssuerPartyId" from="[:]"/>
            <set field="envioIdsToSend" from="new LinkedHashSet&lt;String&gt;()"/>
            <iterate list="ftdList" entry="dte">
                <entity-find entity-name="mchile.dte.DteEnvioAndFiscalTaxDocument" list="existingEnvioList">
                    <econdition field-name="fiscalTaxDocumentId" from="dte.fiscalTaxDocumentId"/>
                    <econdition field-name="envioStatusId" value="Ftde-Created"/>
                    <econdition field-name="rutReceptor" value="60803000-K"/>
                </entity-find>
                <if condition="existingEnvioList"><then>
                    <set field="envio" from="existingEnvioList.first"/>
                    <log message="Found existing envio ${envio.envioId}, not creating new one"/>
                    <if condition="triggerSend">
                        <script>envioIdsToSend.add(envio.envioId)</script>
                    </if>
                </then><else>
                    <set field="ungeneratedDocumentIdList" from="ungeneratedDocumentIdsByIssuerPartyId[dte.issuerPartyId]"/>
                    <if condition="ungeneratedDocumentIdList == null">
                        <set field="ungeneratedDocumentIdList" from="[]"/>
                        <set field="ungeneratedDocumentIdsByIssuerPartyId[dte.issuerPartyId]" from="ungeneratedDocumentIdList"/>
                    </if>
                    <script>ungeneratedDocumentIdList.add(dte.fiscalTaxDocumentId)</script>
                </else></if>
            </iterate>
            <iterate list="ungeneratedDocumentIdsByIssuerPartyId" entry="documentIdList" key="issuerPartyId">
                <log message="Creating envio for documentIdList ${documentIdList}"/>
                <service-call name="mchile.sii.dte.DteEnvioServices.genera#EnvioDte" in-map="[organizationPartyId:issuerPartyId, documentIdList:documentIdList]" out-map="envio" transaction="force-new" ignore-error="true"/>
                <script>envioIdsToSend.add(envio.envioId)</script>
            </iterate>
            <if condition="envioIdsToSend &amp;&amp; triggerSend">
                <log message="Sending envioIds: ${envioIdsToSend}"/>
                <service-call name="mchile.sii.dte.DteCommServices.send#PendingEnvioDte" in-map="[envioIdList:envioIdsToSend]"/>
            </if>
        </actions>
    </service>

    <service verb="create" noun="EnvioDteReceiver">
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="triggerSend" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.sii.dte.DteInternalServices.check#ProductionEnvironment" out-map="context"/>
            <log message="Creating envio for fiscalTaxDocumentId: ${fiscalTaxDocumentId}"/>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" for-update="true"/>
            <if condition="!dte"><return error="true" message="Could not find FiscalTaxDocument with id ${fiscalTaxDocumentId}"/></if>
            <entity-find entity-name="mchile.dte.FiscalTaxDocumentContent" list="contentList">
                <econdition field-name="fiscalTaxDocumentId"/>
                <econdition field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
            </entity-find>
            <if condition="contentList.size() != 1"><return error="true" message="Found ${contentList.size()} XML content for fiscalTaxDocumentId ${fiscalTaxDocumentId}, expected 1"/></if>
            <set field="content" from="ec.resource.getLocationReference(contentList.first.contentLocation)"/>
            <service-call name="mchile.sii.dte.DteEnvioServices.genera#EnvioDte" in-map="[rutReceptor:dte.receiverPartyIdValue, organizationPartyId:dte.issuerPartyId, documentIdList:[dte.fiscalTaxDocumentId]]" out-map="envio"/>

            <script><![CDATA[
                if (triggerSend && systemIsProduction)
                    ec.service.special().name("mchile.sii.dte.DteCommServices.send#PendingEnvioDteReceiver").parameter("envioId", envio.envioId).registerOnCommit()
                ]]></script>
        </actions>
    </service>

    <service verb="genera" noun="Envio">
        <in-parameters>
            <parameter name="rutReceptor" default-value="60803000-K"><description>El receptor del envio es el SII</description></parameter>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="documentIdList" required="true" type="List"/>
            <parameter name="saveSinFirma" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="envioIdList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="ftdList">
                <econdition field-name="fiscalTaxDocumentId" operator="in" from="documentIdList"/>
            </entity-find>
            <if condition="!ftdList"><return error="true" message="Could not find any FiscalTaxDocument"/></if>
            <set field="boletaIdList" from="[]"/>
            <set field="facturaIdList" from="[]"/>
            <iterate list="ftdList" entry="ftd">
                <if condition="ftd.fiscalTaxDocumentTypeEnumId in ['Ftdt-39', 'Ftdt-41']"><then>
                    <script>boletaIdList.add(ftd.fiscalTaxDocumentId)</script>
                </then><else>
                    <script>facturaIdList.add(ftd.fiscalTaxDocumentId)</script>
                </else></if>
            </iterate>
            <set field="envioIdList" from="[]"/>
            <if condition="boletaIdList">
                <service-call name="mchile.sii.dte.DteEnvioServices.genera#EnvioBoleta" in-map="context+[documentIdList:boletaIdList]" out-map="envioBoleta"/>
                <script>envioIdList.add(envioBoleta.envioId)</script>
            </if>
            <if condition="facturaIdList">
                <service-call name="mchile.sii.dte.DteEnvioServices.genera#EnvioDte" in-map="context+[documentIdList:facturaIdList]" out-map="envioFactura"/>
                <script>envioIdList.add(envioFactura.envioId)</script>
            </if>
        </actions>
    </service>

    <service verb="genera" noun="EnvioDte" type="script" location="component://MoquiChile/service/mchile/sii/dte/groovy/generaEnvioDte.groovy">
        <description>Generación de envio documento a partir de facturas ya generadas.</description>
        <in-parameters>
            <parameter name="rutReceptor" default-value="60803000-K"><description>El receptor del envio es el SII</description></parameter>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="documentIdList" required="true" type="List"/>
            <parameter name="saveSinFirma" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="envioId"/>
        </out-parameters>
    </service>

    <service verb="genera" noun="EnvioBoleta" type="script" location="component://MoquiChile/service/mchile/sii/dte/groovy/generaEnvioBoleta.groovy">
        <description>Generación de envio boletas a partir de facturas ya generadas.</description>
        <in-parameters>
            <parameter name="rutReceptor" default-value="60803000-K"><description>El receptor del envio es el SII</description></parameter>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="documentIdList" required="true" type="List"/>
            <parameter name="saveSinFirma" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="envioId"/>
        </out-parameters>
    </service>

    <service verb="genera" noun="EnvioAceptacionComercial" type="script" location="component://MoquiChile/service/mchile/sii/dte/groovy/generaEnvioAceptacionComercial.groovy">
        <description>Envío de respuesta con aprobación comercial a emisor DTE.</description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fiscalTaxDocumentNumber" required="true" type="Integer"/>
        </in-parameters>
    </service>

    <service verb="store" noun="ReceivedEnvio">
        <in-parameters>
            <parameter name="contentBytes" type="Object"/>
            <parameter name="fileName"/>
            <parameter name="emailMessageId"/>
            <parameter name="messageId" default-value="NO-ID" allow-html="any"/>
            <parameter name="createUnknownIssuer" default="true" type="Boolean"/>
            <parameter name="requireIssuerInternalOrg" default="false" type="Boolean"/>
            <parameter name="createUnknownReceiver" default="false" type="Boolean"/>
            <parameter name="requireReceiverInternalOrg" default="false" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="envioId"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                import cl.moit.dte.MoquiDTEUtils

                org.moqui.context.ExecutionContext ec = context.ec
                org.w3c.dom.Document doc = null
                try {
                    doc = MoquiDTEUtils.parseDocument(contentBytes)
                } catch (Exception e) {
                    ec.logger.error("Parsing document ${receivedFileName} of message ${messageId}: ${e.toString()}")
                    return
                }
                firstTag = doc.getDocumentElement().getNodeName()
                groovy.util.Node envio = MoquiDTEUtils.dom2GroovyNode(doc)
                generalSignedXPath = null
                internalSignedXPath = null
                generalDateXPath = null
                envioTypeEnumId = null
                internalId = null
                if (firstTag == 'EnvioDTE') {
                    /*
                    internalSignedXPath = "/sii:EnvioDTE/sii:SetDTE/sii:DTE/sii:Documento"
                    internalDateXPath = "./sii:Encabezado/sii:IdDoc/sii:FchEmis/text()"
                     */
                    envioTypeEnumId = 'Ftde-EnvioDte'
                    processingParameters = groovy.json.JsonOutput.toJson([createUnknownIssuer:createUnknownIssuer, requireIssuerInternalOrg:requireIssuerInternalOrg, createUnknownReceiver:createUnknownReceiver, requireReceiverInternalOrg:requireReceiverInternalOrg])
                    setDte = envio.SetDTE
                    caratula = setDte.Caratula
                    rutEmisorCaratula = caratula.RutEmisor.text()
                    rutReceptorCaratula = caratula.RutReceptor.text()
                    fechaEnvio = ec.l10n.parseTimestamp(caratula.TmstFirmaEnv.text(), "yyyy-MM-dd'T'HH:mm:ss")
                    internalId = setDte.'@ID'.text()
                } else if (firstTag == 'RESULTADO_ENVIO') {
                    // Envío recibido en SII
                    envioTypeEnumId = 'Ftde-ResultadoEnvio'
                    identificacion = envio.IDENTIFICACION
                    rutReceptorCaratula = identificacion.RUTEMISOR.text()
                    rutEmisorCaratula = "60803000-K" // Rut del SII
                    fechaEnvio = ec.l10n.parseTimestamp(identificacion.TMSTRECEPCION.text(), "dd/MM/yyyy HH:mm:ss")
                    internalId = identificacion.TRACKID.text()
                } else if (firstTag == 'EnvioRecibos') {
                    // Recibos: aceptacion de los servicios y/o mercaderia para efecto de merito ejecutivo
                    envioTypeEnumId = 'Ftde-EnvioRecibos'
                    setRecibos = envio.SetRecibos
                    caratula = setRecibos.Caratula
                    rutEmisorCaratula = caratula.RutResponde.text()
                    rutReceptorCaratula = caratula.RutRecibe.text()
                    fechaEnvio = ec.l10n.parseTimestamp(caratula.TmstFirmaEnv.text(), "yyyy-MM-dd'T'HH:mm:ss")
                    internalId = setRecibos.'@ID'.text()
                    /*
                    generalSignedXPath = "/sii:EnvioRecibos/sii:SetRecibos"
                    generalDateXPath = "./sii:Caratula/sii:TmstFirmaEnv/text()"
                     */
                } else if (firstTag == 'RespuestaDTE') {
                    // Recepción de los DTE
                    envioTypeEnumId = 'Ftde-RespuestaDte'
                    resultado = envio.Resultado
                    caratula = resultado.Caratula
                    rutEmisorCaratula = caratula.RutResponde.text()
                    rutReceptorCaratula = caratula.RutRecibe.text()
                    fechaEnvio = ec.l10n.parseTimestamp(caratula.TmstFirmaResp.text(), "yyyy-MM-dd'T'HH:mm:ss")
                    internalId = resultado.'@ID'.text()
                    // Si es respuesta a un envío: RespuestaDTE/Resultado/RecepcionEnvio
                    // Si es respuesta a un DTE en particular: RespuestaDTE/Resultado/ResultadoDTE
                    /*
                    generalSignedXPath = "/sii:RespuestaDTE/sii:Resultado"
                    generalDateXPath = "./sii:Caratula/sii:TmstFirmaResp/text()"
                     */
                } else if (firstTag == 'ResultadoConsumoFolios') {
                    // Consumo Folios recibido en SII
                    envioTypeEnumId = 'Ftde-ResultadoConsumoFolios'
                    identificacion = envio.IDENTIFICACION
                    rutReceptorCaratula = identificacion.RUTEMISOR.text()
                    rutEmisorCaratula = "60803000-K" // Rut del SII
                    fechaEnvio = ec.l10n.parseTimestamp(identificacion.TMSTRECEPCION.text(), "dd/MM/yyyy HH:mm:ss")
                    internalId = identificacion.TRACKID.text()
                } else {
                    ec.logger.error("Unrecognized content with filename ${fileName} for email ${messageId}, firstTag: ${firstTag}")
                    return
                }
                /*
                if (generalSignedXPath)
                    if (!MoquiDTEUtils.verifySignature(doc, generalSignedXPath, generalDateXPath))
                        ec.message.addError("No se verifica firma en ${generalSignedXPath}")
                if (internalSignedXPath)
                    if (!MoquiDTEUtils.verifySignature(doc, internalSignedXPath, internalDateXPath))
                        ec.message.addError("No se verifica firma en ${internalSignedXPath}")
                 */
                envioId = ec.service.sync().name("create#mchile.dte.DteEnvio").parameters([envioTypeEnumId:envioTypeEnumId, emailMessageId:emailMessageId, statusId:'Ftde-Received',
                                                                                           rutEmisor:rutEmisorCaratula, rutReceptor:rutReceptorCaratula, fechaEnvio:fechaEnvio, fechaRegistro:ec.user.nowTimestamp,
                                                                                           internalId:internalId, processingParameters:processingParameters]).call().envioId
                envEv = ec.entity.find("moqui.basic.Enumeration").condition("enumId", envioTypeEnumId).one()
                documentLocation ="dbresource://moit/erp/dte/${envEv.enumCode}/${rutEmisorCaratula}/${rutEmisorCaratula}-${envioId}.xml"
                ec.resource.getLocationReference(documentLocation).putBytes(contentBytes)
                ec.service.sync().name("update#mchile.dte.DteEnvio").parameters([envioId:envioId, documentLocation:documentLocation, fileName:fileName]).call().envioId
                ]]></script>
        </actions>
    </service>

</services>