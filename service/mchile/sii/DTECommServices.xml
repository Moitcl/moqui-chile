<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="create" noun="PendingEnvioDteForReceivers" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="triggerSend" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRole" list="internalPartyList">
                <econdition field-name="roleTypeId" value="OrgInternal"/>
            </entity-find>
            <set field="internalPartyIdList" from="internalPartyList.partyId"/>
            <service-call name="mchile.sii.SIIServices.get#RutEspeciales" out-map="reserved"/>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="ftdList">
                <econdition field-name="issuerPartyId" operator="in" from="internalPartyIdList"/>
                <econdition field-name="receiverPartyIdValue" operator="not-in" from="reserved.rutList"/>
                <econdition field-name="statusId" value="Ftd-Issued"/>
                <econdition field-name="sentAuthStatusId" value="Ftd-SentAuthAccepted"/>
                <econdition field-name="sentRecStatusId" value="Ftd-NotSentRec"/>
            </entity-find>
            <set field="ungeneratedDocumentIdsByIssuerPartyId" from="[:]"/>
            <set field="envioIdsToSend" from="new LinkedHashSet&lt;String&gt;()"/>
            <iterate list="ftdList" entry="dte">
                <entity-find entity-name="mchile.dte.DteEnvioAndFiscalTaxDocument" list="existingEnvioList">
                    <econdition field-name="fiscalTaxDocumentId" from="dte.fiscalTaxDocumentId"/>
                    <econdition field-name="envioStatusId" value="Ftde-Created"/>
                    <econdition field-name="rutReceptor" from="dte.receiverPartyIdValue"/>
                </entity-find>
                <if condition="existingEnvioList"><then>
                    <set field="envio" from="existingEnvioList.first"/>
                    <log message="Found existing envio ${envio.envioId}, not creating new one"/>
                    <if condition="triggerSend">
                        <script>envioIdsToSend.add(envio.envioId)</script>
                    </if>
                </then><else>
                    <set field="ungeneratedDocumentIdsByReceiverPartyId" from="ungeneratedDocumentIdsByIssuerPartyId[dte.issuerPartyId]"/>
                    <if condition="ungeneratedDocumentIdsByReceiverPartyId == null">
                        <set field="ungeneratedDocumentIdsByReceiverPartyId" from="[:]"/>
                        <set field="ungeneratedDocumentIdsByIssuerPartyId[dte.issuerPartyId]" from="ungeneratedDocumentIdsByReceiverPartyId"/>
                    </if>
                    <set field="ungeneratedDocumentIdMap" from="ungeneratedDocumentIdsByReceiverPartyId[dte.receiverPartyId]"/>
                    <if condition="ungeneratedDocumentIdMap == null">
                        <set field="ungeneratedDocumentIdMap" from="[:]"/>
                        <set field="ungeneratedDocumentIdMap.receiverPartyIdValue" from="dte.receiverPartyIdValue"/>
                        <set field="ungeneratedDocumentIdMap.list" from="[]"/>
                        <set field="ungeneratedDocumentIdsByReceiverPartyId[dte.receiverPartyIdValue]" from="ungeneratedDocumentIdMap"/>
                    </if>
                    <script>ungeneratedDocumentIdMap.list.add(dte.fiscalTaxDocumentId)</script>
                </else></if>
            </iterate>
            <iterate list="ungeneratedDocumentIdsByIssuerPartyId" entry="ungeneratedDocumentIdsByReceiverPartyId" key="issuerPartyId">
                <iterate list="ungeneratedDocumentIdsByReceiverPartyId" entry="ungeneratedDocumentIdMap" key="receiverPartyId">
                    <service-call name="mchile.sii.DTECommServices.genera#EnvioDte" in-map="[rutReceptor:ungeneratedDocumentIdMap.receiverPartyIdValue, organizationPartyId:issuerPartyId, documentIdList:ungeneratedDocumentIdMap.list]" out-map="envio" transaction="force-new"/>
                    <script>envioIdsToSend.add(envio.envioId)</script>
                    <log message="Generated envio ${envio.envioId}"/>
                </iterate>
            </iterate>
            <if condition="envioIdsToSend &amp;&amp; triggerSend">
                <service-call name="mchile.sii.DTECommServices.send#PendingEnvioDte" in-map="[envioIdList:envioIdsToSend]" transaction="force-new"/>
            </if>
        </actions>
    </service>
    
    <service verb="create" noun="PendingEnvioDteForSii" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="triggerSend" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRole" list="internalPartyList">
                <econdition field-name="roleTypeId" value="OrgInternal"/>
            </entity-find>
            <set field="internalPartyIdList" from="internalPartyList.partyId"/>
            <service-call name="mchile.sii.SIIServices.get#RutEspeciales" out-map="reserved"/>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="ftdList">
                <econdition field-name="issuerPartyId" operator="in" from="internalPartyIdList"/>
                <econdition field-name="receiverPartyIdValue" operator="not-in" from="reserved.rutList"/>
                <econdition field-name="statusId" value="Ftd-Issued"/>
                <econdition field-name="sentAuthStatusId" value="Ftd-NotSentAuth"/>
            </entity-find>
            <set field="ungeneratedDocumentIdsByIssuerPartyId" from="[:]"/>
            <set field="envioIdsToSend" from="new LinkedHashSet&lt;String&gt;()"/>
            <iterate list="ftdList" entry="dte">
                <entity-find entity-name="mchile.dte.DteEnvioAndFiscalTaxDocument" list="existingEnvioList">
                    <econdition field-name="fiscalTaxDocumentId" from="dte.fiscalTaxDocumentId"/>
                    <econdition field-name="envioStatusId" value="Ftde-Created"/>
                    <econdition field-name="rutReceptor" value="60803000-K"/>
                </entity-find>
                <if condition="existingEnvioList"><then>
                    <set field="envio" from="existingEnvioList.first"/>
                    <log message="Found existing envio ${envio.envioId}, not creating new one"/>
                    <if condition="triggerSend">
                        <script>envioIdsToSend.add(envio.envioId)</script>
                    </if>
                </then><else>
                    <set field="ungeneratedDocumentIdList" from="ungeneratedDocumentIdsByIssuerPartyId[dte.issuerPartyId]"/>
                    <if condition="ungeneratedDocumentIdList == null">
                        <set field="ungeneratedDocumentIdList" from="[]"/>
                        <set field="ungeneratedDocumentIdsByIssuerPartyId[dte.issuerPartyId]" from="ungeneratedDocumentIdList"/>
                    </if>
                    <script>ungeneratedDocumentIdList.add(dte.fiscalTaxDocumentId)</script>
                </else></if>
            </iterate>
            <iterate list="ungeneratedDocumentIdsByIssuerPartyId" entry="documentIdList" key="issuerPartyId">
                <log message="Creating envio for documentIdList ${documentIdList}"/>
                <service-call name="mchile.sii.DTECommServices.genera#EnvioDte" in-map="[organizationPartyId:issuerPartyId, documentIdList:documentIdList]" out-map="envio" transaction="force-new" ignore-error="true"/>
                <script>envioIdsToSend.add(envio.envioId)</script>
            </iterate>
            <if condition="envioIdsToSend &amp;&amp; triggerSend">
                <log message="Sending envioIds: ${envioIdsToSend}"/>
                <service-call name="mchile.sii.DTECommServices.send#PendingEnvioDte" in-map="[envioIdList:envioIdsToSend]"/>
            </if>
        </actions>
    </service>

    <service verb="create" noun="EnvioDteReceiver">
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="triggerSend" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.sii.DTEServices.check#ProductionEnvironment" out-map="context"/>
            <log message="Creating envio for fiscalTaxDocumentId: ${fiscalTaxDocumentId}"/>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" for-update="true"/>
            <if condition="!dte"><return error="true" message="Could not find FiscalTaxDocument with id ${fiscalTaxDocumentId}"/></if>
            <entity-find entity-name="mchile.dte.FiscalTaxDocumentContent" list="contentList">
                <econdition field-name="fiscalTaxDocumentId"/>
                <econdition field-name="fiscalTaxDocumentContentTypeEnumId" value="Ftdct-Xml"/>
            </entity-find>
            <if condition="contentList.size() != 1"><return error="true" message="Found ${contentList.size()} XML content for fiscalTaxDocumentId ${fiscalTaxDocumentId}, expected 1"/></if>
            <set field="content" from="ec.resource.getLocationReference(contentList.first.contentLocation)"/>
            <service-call name="mchile.sii.DTECommServices.genera#EnvioDte" in-map="[rutReceptor:dte.receiverPartyIdValue, organizationPartyId:dte.issuerPartyId, documentIdList:[dte.fiscalTaxDocumentId]]" out-map="envio"/>

            <script><![CDATA[
                if (triggerSend && systemIsProduction)
                    ec.service.special().name("mchile.sii.DTECommServices.send#PendingEnvioDteReceiver").parameter("envioId", envio.envioId).registerOnCommit()
            ]]></script>
        </actions>
    </service>

    <service verb="send" noun="PendingEnvioDte" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="envioIdList" type="List"/>
            <parameter name="envioTypeEnumIdList" type="List"/>
            <parameter name="maxFail" type="Integer" default="3"/>
            <parameter name="secondsBeforeRetry" type="Long" default="3*60*60"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList">
                <econdition field-name="envioId" operator="in" from="envioIdList" ignore-if-empty="true"/>
                <econdition field-name="envioTypeEnumId" operator="in" from="envioTypeEnumIdList" ignore-if-empty="true"/>
                <econdition field-name="statusId" value="Ftde-Created" ignore="envioIdList"/>
                <econdition field-name="statusId" operator="in" value="Ftde-Created,Ftde-Failed"/>
                <econdition field-name="lastAttempt" operator="less-equals" from="ec.user.nowTimestamp.time-(secondsBeforeRetry*1000)" ignore="secondsBeforeRetry == null" ignore-if-empty="true" or-null="true"/>
            </entity-find>
            <iterate list="envioList" entry="envio">
                <if condition="envio.envioTypeEnumId == 'Ftde-EnvioBoleta'"><then>
                    <if condition="envio.rutReceptor == '60803000-K'"><then>
                        <service-call name="mchile.sii.DTECommServices.enviaSII#EnvioBoleta" in-map="[envioId:envio.envioId, maxFail:maxFail]" out-map="resultadoEnvio"/>
                    </then><else>
                        <message type="danger">Not sending EnvioBoleta ${envio.envioId} with rut not matching SII</message>
                    </else></if>
                </then><else>
                    <if condition="envio.rutReceptor == '60803000-K'"><then>
                        <service-call name="mchile.sii.DTECommServices.enviaSII#EnvioDte" in-map="[envioId:envio.envioId, maxFail:maxFail]" out-map="resultadoEnvio"/>
                    </then><else>
                        <service-call name="mchile.sii.DTECommServices.send#PendingEnvioDteReceiver" in-map="[envioId:envio.envioId, maxFail:maxFail]" out-map="resultadoEnvio"/>
                    </else></if>
                </else></if>
            </iterate>
        </actions>
    </service>

    <service verb="send" noun="PendingEnvioDteReceiver" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="maxFail" type="Integer" default="3"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList" for-update="true">
                <econdition field-name="envioId"/>
                <econdition field-name="rutReceptor" operator="not-equals" value="60803000-K"/>
                <econdition field-name="statusId" operator="in" value="Ftde-Created,Ftde-Failed"/>
            </entity-find>
            <set field="envio" from="envioList.first"/>
            <if condition="envio">
                <if condition="envio.envioTypeEnumId == 'Ftde-EnvioDte'"><then>
                    <entity-find entity-name="mchile.dte.DteEnvioFiscalTaxDocument" list="dteList" for-update="true">
                        <econdition field-name="envioId" from="envio.envioId"/>
                    </entity-find>
                    <if condition="dteList.size() == 0">
                        <log message="No FiscalTaxDocument found for envio ${envio.envioId}"/>
                        <return/>
                    </if>
                    <set field="rutReceptor" from="null"/>
                    <set field="rutEmisor" from="null"/>
                    <set field="folio" value=""/>
                    <set field="receptorPartyId" from="null"/>
                    <set field="issuerPartyId" from="null"/>
                    <iterate list="dteList" entry="envioDte">
                        <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" auto-field-map="envioDte"/>
                        <if condition="rutReceptor == null"><set field="rutReceptor" from="dte.receiverPartyIdValue"/></if>
                        <if condition="dte.receiverPartyIdValue != rutReceptor"><return error="true" message="No se puede incluir más de un receptor en un envío (envío ${envio.envioId})"/></if>
                        <if condition="rutEmisor == null"><set field="rutEmisor" from="dte.issuerPartyIdValue"/></if>
                        <if condition="dte.issuerPartyIdValue != rutEmisor"><return error="true" message="No se puede incluir más de un emisor en un envío (envío ${envio.envioId})"/></if>
                        <set field="folio" value="${folio.length() > 0? ', ': ''}${dte.fiscalTaxDocumentNumber}"/>
                        <if condition="issuerPartyId != null &amp;&amp; issuerPartyId != dte.issuerPartyId"><then>
                            <return error="true" message="No se puede crear envío con más de un origen"/>
                        </then><else>
                            <set field="issuerPartyId" from="dte.issuerPartyId"/>
                        </else>
                        </if>
                        <if condition="receptorPartyId &amp;&amp; receptorPartyId != dte.receiverPartyId"><then>
                            <message type="warning">Found more than one receptorPartyId for envio ${envio.envioId}: ${receptorPartyId} and ${dte.receiverPartyId}</message>
                        </then><else>
                            <set field="receptorPartyId" from="dte.receiverPartyId"/>
                        </else></if>
                    </iterate>
                    <service-call name="mchile.sii.DTEServices.get#DteInfo" in-map="[fiscalTaxDocumentId:dte.fiscalTaxDocumentId]" out-map="dteInfo"/>
                    <set field="envioMessageText" value="Adjunto encontrará el documento tributario ${dteInfo.doctypeName} con folio${dteList.size() > 1? 's':''} ${folio} emitido por ${dteInfo.issuerName} (Rut ${rutEmisor})."/>
                    <set field="subject" value="${dteInfo.doctypeName} ${folio} emitida${dteList.size() > 1? 's':''} por ${dteInfo.issuerName} (Rut ${rutEmisor})"/>
                    <set field="emailTypeEnumId" value="Ftdemt-SendXmlReceiverMandatory"/>
                </then><else-if condition="envio.envioTypeEnumId == 'Ftde-RespuestaDte'">
                    <set field="envioMessageText" value="Adjunto encontrará el resultado del proceso de revision y validación de un envío de Documentos Tributarios Electrónicos que Usted realizó."/>
                    <set field="subject" value="Acuse de Recibo Nro. ${envio.internalId} - Receptor: ${envio.rutEmisor}"/>
                    <set field="emailTypeEnumId" value="Ftdemt-XmlReceptionResponse"/>
                    <service-call name="mchile.sii.DTECommServices.get#PartyIdByRut" in-map="[idValue:envio.rutReceptor]" out-map="receptorMap" out-map-add-to-existing="false"/>
                    <set field="receptorPartyId" from="receptorMap?.partyId"/>
                </else-if><else-if condition="envio.envioTypeEnumId == 'Ftde-EnvioRecibos'">
                    <!-- Aceptación / Acuse de Recibo que da pie a título ejecutivo de factura -->
                    <set field="emailTypeEnumId" value="Ftdemt-XmlCommercialAcceptance"/>
                    <set field="envioMessageText" value="Adjunto encontrará la Aceptación del Documento Tributario Electrónico que Usted envió."/>
                    <set field="subject" value="Aceptación Nro. ${envio.internalId} - Receptor: ${envio.rutEmisor}"/>
                    <service-call name="mchile.sii.DTECommServices.get#PartyIdByRut" in-map="[idValue:envio.rutReceptor]" out-map="receptorMap" out-map-add-to-existing="false"/>
                    <set field="receptorPartyId" from="receptorMap?.partyId"/>
                </else-if><else>
                    <return error="true" message="Unsupported envioTypeEnumId ${envio.envioTypeEnumId}"/>
                </else></if>
                <entity-find-one entity-name="mantle.party.PartyRole" value-field="issuerRoleInternal" auto-field-map="[partyId:issuerPartyId, roleId:'OrgInternal']"/>
                <entity-find-one entity-name="mantle.party.PartyRole" value-field="receiverRoleInternal" auto-field-map="[partyId:receiverPartyId, roleId:'OrgInternal']"/>
                <if condition="envio.rutEmisor == envio.rutReceptor &amp;&amp; envio.rutEmisor != null"><then>
                    <set field="sent" from="true"/>
                </then><else>
                    <set field="envioContent" from="ec.resource.getLocationReference(envio.documentLocation)"/>
                    <set field="xmlAttachment" from="[attachmentLocation:envioContent.location, fileName:envioContent.fileName, contentType:envioContent.contentType]"/>
                    <service-call name="mchile.sii.DTECommServices.get#PartyIdByRut" in-map="[idValue:envio.rutEmisor]" out-map="emisorMap" out-map-add-to-existing="false"/>
                    <set field="xmlReceptionEmailAddress" from="null"/>
                    <service-call name="mchile.sii.SIIServices.get#XmlReceptionEmail" in-map="[partyId:receptorPartyId, partyIdValue:envio.rutReceptor, dtePartyId:emisorMap.partyId]" out-map="context"
                                  ignore-error="true" transaction="force-new"/>
                    <entity-find-one entity-name="moqui.basic.Enumeration" value-field="tipoEnvioEv" auto-field-map="[enumId:envio.envioTypeEnumId]"/>
                    <if condition="xmlReceptionEmailAddress"><then>
                        <entity-find-one entity-name="mantle.party.PartyDetail" value-field="receiverDetail" auto-field-map="[partyId:receptorPartyId]"/>
                        <set field="receiverName" from="ec.resource.expand('PartyNameOnlyTemplate', null, receiverDetail)"/>
                        <set field="bodyParameters" from="[title:subject, subject:subject, receiverName:receiverName, receiverRut:envio.rutReceptor, envioMessageText:envioMessageText]"/>
                        <entity-find-one entity-name="moqui.basic.email.EmailTemplate" value-field="emailTemplate" auto-field-map="[emailTemplateId:'MchDteSendEnvio']"/>
                        <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[toAddresses:xmlReceptionEmailAddress, emailTemplateId:'MchDteSendEnvio', emailTypeEnumId:emailTypeEnumId,
                    attachments:[xmlAttachment], bodyParameters:bodyParameters, subject:subject]" out-map="context"/>
                        <set field="sent" from="emailMessageId != null"/>
                    </then><else>
                        <log level="error" message="No se encuentra dirección de mail para envío tipo ${tipoEnvioEv.description}: ${envio.envioId}"/>
                        <set field="sent" from="false"/>
                    </else></if>
                </else></if>
                <if condition="sent"><then>
                    <entity-find entity-name="mchile.dte.DteEnvioFiscalTaxDocument" list="envioDteList">
                        <econdition field-name="envioId" from="envio.envioId"/>
                    </entity-find>
                    <iterate list="envioDteList" entry="envioDte">
                        <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" auto-field-map="envioDte" for-update="true"/>
                        <service-call name="create#mchile.dte.FiscalTaxDocumentEmailMessage" in-map="[fiscalTaxDocumentId:dte.fiscalTaxDocumentId, emailMessageId:emailMessageId]"/>
                        <set field="dte.sentRecStatusId" value="Ftd-SentRec"/>
                        <entity-update value-field="dte"/>
                    </iterate>
                    <set field="envio.statusId" value="Ftde-Sent"/>
                    <set field="envio.emailMessageId" from="emailMessageId"/>
                </then><else>
                    <if condition="envio.attemptCount >= maxFail">
                        <set field="envio.statusId" value="Ftde-Failed"/>
                    </if>
                </else></if>
                <set field="envio.attemptCount" from="(envio.attemptCount?:0)+1"/>
                <set field="envio.lastAttempt" from="ec.user.nowTimestamp"/>
                <entity-update value-field="envio"/>
            </if>
        </actions>
    </service>

    <service verb="process" noun="IncomingDteMessage">
        <implements service="org.moqui.EmailServices.process#EmailEca"/>
        <actions>
            <script>
                import cl.moit.dte.MoquiDTEUtils
                import org.moqui.context.ExecutionContext
            </script>
            <set field="messageId" from="headers.get('message-id')"/>
            <!-- Save Message -->
            <if condition="messageId">
                <entity-find entity-name="moqui.basic.email.EmailMessage" list="emailMessageList">
                    <econdition field-name="emailServerId" ignore-if-empty="true"/>
                    <econdition field-name="messageId"/>
                </entity-find>
                <if condition="emailMessageList"><then>
                    <set field="emailMessageId" from="emailMessageList.first.emailMessageId"/>
                    <log message="Found duplicate message with Message-ID [${messageId}] from server [${emailServerId}]"/>
                </then><else>
                    <service-call name="create#moqui.basic.email.EmailMessage" out-map="context"
                                  in-map="[sentDate:fields.sentDate, receivedDate:fields.receivedDate, statusId:statusId,
                    subject:fields.subject, body:body, bodyText:bodyText,
                    fromAddress:fields.from, toAddresses:fields.toList?.toString(),
                    ccAddresses:fields.ccList?.toString(), bccAddresses:fields.bccList?.toString(),
                    messageId:messageId, emailServerId:emailServerId]"/>
                </else></if>
            </if>
            <log level="warn" message="Processing email ${messageId}"/>
            <set field="envioIdsToProcess" from="[]"/>
            <iterate list="bodyPartList" entry="bodyPart">
                <if condition="(bodyPart.contentType.contains('text/plain') || bodyPart.contentType.contains('text/html')) &amp;&amp; bodyPart.filename == null"><then>
                    <if condition="body == null"><then>
                        <set field="body" from="bodyPart.contentText"/>
                    </then><else-if condition="bodyPart.contentType.contains('text/plain')">
                        <if condition="bodyText == null"><then>
                            <set field="bodyText" from="bodyPart.contentText"/>
                        </then><else>
                            <log level="warn" message="More than one bodyPart with type text/plain for mail ${messageId}"/>
                        </else></if>
                    </else-if><else>
                        <log level="warn" message="More than one bodyPart with type text/html for mail ${messageId}"/>
                    </else></if>
                </then><else-if condition="(bodyPart.contentType.contains('text/plain') || bodyPart.contentType.contains('text/html')) &amp;&amp; bodyPart.filename != null">
                    <log level="warn" message="Ignoring bodyPart of type ${bodyPart.contentType} and filename ${filename} for mail ${messageId}"/>
                </else-if><else-if condition="(bodyPart.disposition == 'attachment' || bodyPart.disposition == null) &amp;&amp; bodyPart.filename.toLowerCase().endsWith('.xml')">
                    <if condition="bodyPart.contentBytes == null &amp;&amp; bodyPart.contentText == null">
                        <log level="error" message="No contentBytes nor contentText for bodyPart of message ${messageId}"/>
                        <continue/>
                    </if>
                    <set field="contentBytes" from="bodyPart.contentBytes ?: bodyPart.contentText?.getBytes('ISO-8859-1')"/>
                    <if condition="contentBytes == null">
                        <log level="error" message="No contentBytes nor contentText for bodyPart of message ${messageId}"/>
                        <continue/>
                    </if>
                    <service-call name="mchile.sii.DTECommServices.store#ReceivedEnvio" in-map="context + [contentBytes:contentBytes, fileName:bodyPart.filename ]" out-map="storeResult"/>
                    <script>
                        if (storeResult.envioId)
                            envioIdsToProcess.add(storeResult.envioId)
                    </script>
                </else-if><else>
                    <log level="warn" message="Ignoring bodyPart of type ${bodyPart.contentType} and filename ${bodyPart.filename}, disposition ${bodyPart.disposition} for mail ${messageId}"/>
                </else></if>
            </iterate>
            <script>
                if (envioIdsToProcess)
                    ec.service.special().name("mchile.sii.DTECommServices.process#PendingEnvioDte").registerOnCommit()
            </script>
        </actions>
    </service>

    <service verb="store" noun="ReceivedEnvio">
        <in-parameters>
            <parameter name="contentBytes" type="Object"/>
            <parameter name="fileName"/>
            <parameter name="emailMessageId"/>
            <parameter name="messageId" default-value="NO-ID" allow-html="any"/>
            <parameter name="createUnknownIssuer" default="true" type="Boolean"/>
            <parameter name="requireIssuerInternalOrg" default="false" type="Boolean"/>
            <parameter name="createUnknownReceiver" default="false" type="Boolean"/>
            <parameter name="requireReceiverInternalOrg" default="false" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="envioId"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                import cl.moit.dte.MoquiDTEUtils

                org.moqui.context.ExecutionContext ec = context.ec
                org.w3c.dom.Document doc = null
                try {
                    doc = MoquiDTEUtils.parseDocument(contentBytes)
                } catch (Exception e) {
                    ec.logger.error("Parsing document ${receivedFileName} of message ${messageId}: ${e.toString()}")
                    return
                }
                firstTag = doc.getDocumentElement().getNodeName()
                groovy.util.Node envio = MoquiDTEUtils.dom2GroovyNode(doc)
                generalSignedXPath = null
                internalSignedXPath = null
                generalDateXPath = null
                envioTypeEnumId = null
                internalId = null
                if (firstTag == 'EnvioDTE') {
                    /*
                    internalSignedXPath = "/sii:EnvioDTE/sii:SetDTE/sii:DTE/sii:Documento"
                    internalDateXPath = "./sii:Encabezado/sii:IdDoc/sii:FchEmis/text()"
                     */
                    envioTypeEnumId = 'Ftde-EnvioDte'
                    processingParameters = groovy.json.JsonOutput.toJson([createUnknownIssuer:createUnknownIssuer, requireIssuerInternalOrg:requireIssuerInternalOrg, createUnknownReceiver:createUnknownReceiver, requireReceiverInternalOrg:requireReceiverInternalOrg])
                    setDte = envio.SetDTE
                    caratula = setDte.Caratula
                    rutEmisorCaratula = caratula.RutEmisor.text()
                    rutReceptorCaratula = caratula.RutReceptor.text()
                    fechaEnvio = ec.l10n.parseTimestamp(caratula.TmstFirmaEnv.text(), "yyyy-MM-dd'T'HH:mm:ss")
                    internalId = setDte.'@ID'.text()
                } else if (firstTag == 'RESULTADO_ENVIO') {
                    // Envío recibido en SII
                    envioTypeEnumId = 'Ftde-ResultadoEnvio'
                    identificacion = envio.IDENTIFICACION
                    rutReceptorCaratula = identificacion.RUTEMISOR.text()
                    rutEmisorCaratula = "60803000-K" // Rut del SII
                    fechaEnvio = ec.l10n.parseTimestamp(identificacion.TMSTRECEPCION.text(), "dd/MM/yyyy HH:mm:ss")
                    internalId = identificacion.TRACKID.text()
                } else if (firstTag == 'EnvioRecibos') {
                    // Recibos: aceptacion de los servicios y/o mercaderia para efecto de merito ejecutivo
                    envioTypeEnumId = 'Ftde-EnvioRecibos'
                    setRecibos = envio.SetRecibos
                    caratula = setRecibos.Caratula
                    rutEmisorCaratula = caratula.RutResponde.text()
                    rutReceptorCaratula = caratula.RutRecibe.text()
                    fechaEnvio = ec.l10n.parseTimestamp(caratula.TmstFirmaEnv.text(), "yyyy-MM-dd'T'HH:mm:ss")
                    internalId = setRecibos.'@ID'.text()
                    /*
                    generalSignedXPath = "/sii:EnvioRecibos/sii:SetRecibos"
                    generalDateXPath = "./sii:Caratula/sii:TmstFirmaEnv/text()"
                     */
                } else if (firstTag == 'RespuestaDTE') {
                    // Recepción de los DTE
                    envioTypeEnumId = 'Ftde-RespuestaDte'
                    resultado = envio.Resultado
                    caratula = resultado.Caratula
                    rutEmisorCaratula = caratula.RutResponde.text()
                    rutReceptorCaratula = caratula.RutRecibe.text()
                    fechaEnvio = ec.l10n.parseTimestamp(caratula.TmstFirmaResp.text(), "yyyy-MM-dd'T'HH:mm:ss")
                    internalId = resultado.'@ID'.text()
                    // Si es respuesta a un envío: RespuestaDTE/Resultado/RecepcionEnvio
                    // Si es respuesta a un DTE en particular: RespuestaDTE/Resultado/ResultadoDTE
                    /*
                    generalSignedXPath = "/sii:RespuestaDTE/sii:Resultado"
                    generalDateXPath = "./sii:Caratula/sii:TmstFirmaResp/text()"
                     */
                } else if (firstTag == 'ResultadoConsumoFolios') {
                    // Consumo Folios recibido en SII
                    envioTypeEnumId = 'Ftde-ResultadoConsumoFolios'
                    identificacion = envio.IDENTIFICACION
                    rutReceptorCaratula = identificacion.RUTEMISOR.text()
                    rutEmisorCaratula = "60803000-K" // Rut del SII
                    fechaEnvio = ec.l10n.parseTimestamp(identificacion.TMSTRECEPCION.text(), "dd/MM/yyyy HH:mm:ss")
                    internalId = identificacion.TRACKID.text()
                } else {
                    ec.logger.error("Unrecognized content with filename ${fileName} for email ${messageId}, firstTag: ${firstTag}")
                    return
                }
                /*
                if (generalSignedXPath)
                    if (!MoquiDTEUtils.verifySignature(doc, generalSignedXPath, generalDateXPath))
                        ec.message.addError("No se verifica firma en ${generalSignedXPath}")
                if (internalSignedXPath)
                    if (!MoquiDTEUtils.verifySignature(doc, internalSignedXPath, internalDateXPath))
                        ec.message.addError("No se verifica firma en ${internalSignedXPath}")
                 */
                envioId = ec.service.sync().name("create#mchile.dte.DteEnvio").parameters([envioTypeEnumId:envioTypeEnumId, emailMessageId:emailMessageId, statusId:'Ftde-Received',
                                                rutEmisor:rutEmisorCaratula, rutReceptor:rutReceptorCaratula, fechaEnvio:fechaEnvio, fechaRegistro:ec.user.nowTimestamp,
                                                internalId:internalId, processingParameters:processingParameters]).call().envioId
                envEv = ec.entity.find("moqui.basic.Enumeration").condition("enumId", envioTypeEnumId).one()
                documentLocation ="dbresource://moit/erp/dte/${envEv.enumCode}/${rutEmisorCaratula}/${rutEmisorCaratula}-${envioId}.xml"
                ec.resource.getLocationReference(documentLocation).putBytes(contentBytes)
                ec.service.sync().name("update#mchile.dte.DteEnvio").parameters([envioId:envioId, documentLocation:documentLocation, fileName:fileName]).call().envioId
            ]]></script>
        </actions>
    </service>

    <service verb="process" noun="PendingEnvioDte" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="envioIdList" type="List"/>
            <parameter name="ignoreLastAttempt" type="Boolean" default="false"/>
        </in-parameters>
        <actions>
            <if condition="context.DTECommServices_processingPendingEnvioDte == 'yes'">
                <!-- was already triggered -->
                <log message="Returning without running from process#PendingEnvioDte"/>
                <return/>
            </if>
            <set field="context.DTECommServices_processingPendingEnvioDte" value="yes"/>
            <set field="maxAttemptThreshold" from="3"/>
            <set field="minutesBeforeRetry" from="120"/>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList">
                <econditions combine="or">
                    <econdition field-name="statusId" value="Ftde-Received"/>
                    <econditions>
                        <econdition field-name="statusId" value="Ftde-ProcessFailed"/>
                        <econdition field-name="envioId" operator="in" from="envioIdList"/>
                        <econdition field-name="envioId" operator="is-not-null"/>
                    </econditions>
                </econditions>
                <econdition field-name="lastAttempt" operator="less" from="ec.user.nowTimestamp.time-(minutesBeforeRetry*60*1000)" or-null="true" ignore="ignoreLastAttempt"/>
                <econdition field-name="envioId" operator="in" from="envioIdList" ignore-if-empty="true"/>
            </entity-find>
            <set field="responseCount" from="0"/>
            <iterate list="envioList" entry="envio">
                <entity-find-one entity-name="moqui.basic.Enumeration" value-field="envEv" auto-field-map="[enumId:envio.envioTypeEnumId]"/>
                <service-call name="mchile.sii.DTECommServices.process#${envEv.enumCode}" in-map="[envioId:envio.envioId]" out-map="processOut" ignore-error="true" transaction="force-new" out-map-add-to-existing="false"/>
                <if condition="processOut.withResponse"><set field="responseCount" from="responseCount+1"/></if>
                <set field="newAttemptCount" from="(envio.attemptCount?:0) + 1"/>
                <if condition="processOut.processed"><then>
                    <if condition="processOut.withError"><then>
                        <set field="newStatusId" value="Ftde-ProcessFailed"/>
                    </then><else-if condition="processOut.rejectionCount != null &amp;&amp; processOut.rejectionCount > 0">
                        <set field="newStatusId" value="Ftde-ProcessedWithRejection"/>
                    </else-if><else-if condition="processOut.discrepancyCount != null &amp;&amp; processOut.discrepancyCount > 0">
                        <set field="newStatusId" value="Ftde-ProcessedWithDiscrepancy"/>
                    </else-if><else>
                        <set field="newStatusId" from="processOut.newEnvioStatusId?:'Ftde-Processed'"/>
                    </else></if>
                    <service-call name="update#mchile.dte.DteEnvio" in-map="[envioId:envio.envioId, statusId:newStatusId, attemptCount:newAttemptCount, lastAttempt:ec.user.nowTimestamp]" transaction="force-new"/>
                </then><else>
                    <set field="newStatusId" from="newAttemptCount >= maxAttemptThreshold ? 'Ftde-ProcessFailed': envio.statusId"/>
                    <service-call name="update#mchile.dte.DteEnvio" in-map="[envioId:envio.envioId, attemptCount:newAttemptCount, lastAttempt:ec.user.nowTimestamp, statusId:newStatusId]" transaction="force-new"/>
                </else></if>
            </iterate>
            <if condition="responseCount &gt; 0">
                <script>ec.service.special().name("mchile.sii.DTECommServices.start#SendPendingEnvioDteJob").registerOnCommit()</script>
            </if>
        </actions>
    </service>

    <service verb="process" noun="EnvioInterface" type="interface">
        <in-parameters>
            <parameter name="envioId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="totalItems" type="Integer"/>
            <parameter name="processedItems" type="Integer"/>
            <parameter name="processed" type="Boolean"/>
            <parameter name="withError" type="Boolean"/>
            <parameter name="withResponse" type="Boolean"/>
        </out-parameters>
    </service>

    <service verb="process" noun="EnvioDte" type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/processEnvioDte.groovy">
        <implements service="mchile.sii.DTECommServices.process#EnvioInterface"/>
        <out-parameters>
            <parameter name="envioRespuestaId"/>
            <parameter name="rejectionCount" type="Integer"/>
            <parameter name="discrepancyCount" type="Integer"/>
            <parameter name="newEnvioStatusId"/>
        </out-parameters>
    </service>

    <service verb="process" noun="RespuestaDte">
        <implements service="mchile.sii.DTECommServices.process#EnvioInterface"/>
        <actions>
            <set field="processed" from="false"/>
            <set field="withResponse" from="false"/>
            <entity-find-one entity-name="mchile.dte.DteEnvio" value-field="envio" for-update="true"/>
            <set field="rutEmisorEnvio" from="envio.rutEmisor"/>
            <set field="rutReceptorEnvio" from="envio.rutReceptor"/>
            <set field="envioRr" from="ec.resource.getLocationReference(envio.documentLocation)"/>
            <set field="respuesta" from=" new groovy.xml.XmlParser(false, false).parse(envioRr.openStream())"/>
            <set field="caratula" from="respuesta.Resultado.Caratula"/>
            <set field="recepcionEnvioList" from="respuesta.Resultado.RecepcionEnvio"/>
            <set field="resultadoDteList" from="respuesta.Resultado.ResultadoDTE"/>
            <if condition="recepcionEnvioList.size() > 0 &amp;&amp; resultadoDteList.size() > 0">
                <log level="error" message="Error: RespuestaDte incluye tanto RecepcionEnvio como ResultadoDTE, ignorando."/>
                <set field="processed" from="true"/>
                <set field="withError" from="true"/>
                <return/>
            </if>
            <set field="rutResponde" from="caratula.RutResponde.text()"/>
            <set field="rutRecibe" from="caratula.RutRecibe.text()"/>
            <set field="idRespuesta" from="caratula.IdRespuesta.text()"/>
            <script>
                try {
                    nroDetalles = caratula.NroDetalles.text() as Integer
                } catch (NumberFormatException e) {
                    ec.logger.warn("NroDetalles is no Integer: ${caratula.NroDetalles.text()}, setting to 0")
                    nroDetalles = 0 as Integer
                }
            </script>
            <set field="tmstFirmaResp" from="ec.l10n.parseTimestamp(caratula.TmstFirmaResp.text(), &quot;yyyy-MM-dd'T'HH:mm:ss&quot;)" type="Timestamp"/>

            <set field="processedItems" from="0" type="Integer"/>
            <set field="itemsWithErrors" from="0" type="Integer"/>
            <set field="totalItems" from="0" type="Integer"/>
            <if condition="recepcionEnvioList">
                <iterate list="recepcionEnvioList" entry="recepcionEnvio">
                    <set field="nmbEnvio" from="recepcionEnvio.NmbEnvio.text()"/>
                    <set field="fchRecep" from="ec.l10n.parseTimestamp(recepcionEnvio.FchRecep.text(), &quot;yyyy-MM-dd'T'HH:mm:ss&quot;)" type="Timestamp"/>
                    <set field="codEnvio" from="recepcionEnvio.CodEnvio.text()"/>
                    <set field="envioDteId" from="recepcionEnvio.EnvioDTEID.text()"/>
                    <set field="digest" from="recepcionEnvio.Digest.text()"/>
                    <set field="estadoRecepEnvio" from="recepcionEnvio.EstadoRecepEnv.text()"/>
                    <set field="recepEnvioGlosa" from="recepcionEnvio.RecepEnvGlosa.text()"/>
                    <script>
                        try {
                            nroDte = recepcionEnvio.NroDTE.text() as Integer
                        } catch (NumberFormatException e) {
                            ec.logger.warn("NroDTE is no Integer: ${recepcionEnvio.NroDTE.text()}, setting to same value as NroDetalles (${nroDetalles})")
                            nroDte = nroDetalles
                        }
                    </script>
                    <set field="dteList" from="recepcionEnvio.RecepcionDTE"/>
                    <entity-find entity-name="mchile.dte.DteEnvio" list="envioDteList">
                        <econdition field-name="envioTypeEnumId" value="Ftde-EnvioDte"/>
                        <econdition field-name="internalId" from="envioDteId"/>
                    </entity-find>
                    <if condition="envioDteList.size() > 1">
                        <entity-find entity-name="mchile.dte.DteEnvio" list="envioDteList">
                            <econdition field-name="fileName" from="nmbEnvio"/>
                            <econdition field-name="envioTypeEnumId" value="Ftde-EnvioDte"/>
                            <econdition field-name="internalId" from="envioDteId" ignore-if-empty="true"/>
                        </entity-find>
                    </if>
                    <if condition="envioDteList.size() == 0">
                        <log level="error" message="No se encuentra envío al cual hace referencia RespuestaDte ${envioId}: ${envioDteId} (nmbEnvio: ${nmbEnvio})"/>
                        <set field="processed" from="true"/>
                        <set field="withError" from="true"/>
                        <return/>
                    </if>
                    <set field="envioDteEnvioId" from="envioDteList.first.envioId"/>
                    <entity-find entity-name="mchile.dte.DteEnvioFiscalTaxDocument" list="envioFtdList">
                        <econdition field-name="envioId" from="envioDteEnvioId"/>
                    </entity-find>
                    <set field="validFiscalTaxDocumentIdList" from="envioFtdList.fiscalTaxDocumentId"/>
                    <iterate list="dteList" entry="dte">
                        <set field="tipoDte" from="dte.TipoDTE.text()"/>
                        <script>
                            try {
                                folio = dte.Folio.text() as Integer
                            } catch (NumberFormatException e) {
                                ec.logger.warn("Folio is no Integer: ${dte.Folio.text()}, setting to 0")
                                folio = 0 as Integer
                            }
                        </script>
                        <set field="fechaEmision" from="ec.l10n.parseDate(dte.FchEmis.text(), 'yyyy-MM-dd')" type="Date"/>
                        <set field="rutEmisor" from="dte.RUTEmisor.text()"/>
                        <set field="rutReceptor" from="dte.RUTRecep.text()"/>
                        <script>
                            try {
                                montoTotal = dte.MntTotal.text() as BigDecimal
                            } catch (NumberFormatException e) {
                                ec.logger.warn("MntTotal is no BigDecimal: ${dte.MntTotal.text()}, setting to 0")
                                montoTotal = 0 as BigDecimal
                            }
                        </script>
                        <set field="estadoDte" from="dte.EstadoRecepDTE.text()"/>
                        <set field="estadoDteGlosa" from="dte.RecepDTEGlosa.text()"/>
                        <service-call name="mchile.sii.DTECommServices.process#DteInRespuestaDte" in-map="context" out-map="processDte" out-map-add-to-existing="false"/>
                        <if condition="processDte.processed"><then>
                            <set field="processedItems" from="processedItems+1"/>
                        </then><else-if condition="processDte.processedWithErrors">
                            <set field="itemsWithErrors" from="itemsWithErrors+1"/>
                        </else-if></if>
                        <if condition="processDte.envioIssuerPartyId">
                            <if condition="envio.issuerPartyId == null"><then>
                                <set field="envio.issuerPartyId" from="processDte.envioIssuerPartyId"/>
                            </then><else-if condition="envio.issuerPartyId != processDte.envioIssuerPartyId">
                                <return error="true" message="IssuerPartyId mismatch: previously ${envio.issuerPartyId}, for tipo DTE ${tipoDte}, folio ${folio}: ${processDte.envioIssuerPartyId}"/>
                            </else-if></if>
                        </if>
                        <if condition="processDte.envioReceiverPartyId">
                            <if condition="envio.receiverPartyId == null"><then>
                                <set field="envio.receiverPartyId" from="processDte.envioReceiverPartyId"/>
                            </then><else-if condition="envio.receiverPartyId != processDte.envioReceiverPartyId">
                                <return error="true" message="ReceiverPartyId mismatch: previously ${envio.receiverPartyId}, for tipo DTE ${tipoDte}, folio ${folio}: ${processDte.envioReceiverPartyId}"/>
                            </else-if></if>
                        </if>
                    </iterate>
                    <set field="totalItems" from="totalItems + nroDte"/>
                </iterate>
                <set field="processed" from="(processedItems + itemsWithErrors) == totalItems"/>
                <set field="validFiscalTaxDocumentIdList" from="null"/>
            </if>

            <if condition="resultadoDteList">
                <set field="processed" from="true"/>
                <iterate list="resultadoDteList" entry="resultadoDte">
                    <set field="tipoDte" from="resultadoDte.TipoDTE.text()"/>
                    <script>
                        try {
                            folio = resultadoDte.Folio.text() as Integer
                        } catch (NumberFormatException e) {
                            ec.logger.warn("Folio is no Integer: ${resultadoDte.Folio.text()}, setting to 0")
                            folio = 0 as Integer
                        }
                    </script>
                    <set field="fechaEmision" from="ec.l10n.parseDate(resultadoDte.FchEmis.text(), 'yyyy-MM-dd')" type="Date"/>
                    <set field="rutEmisor" from="resultadoDte.RUTEmisor.text()"/>
                    <set field="rutReceptor" from="resultadoDte.RUTRecep.text()"/>
                    <script>
                        try {
                            montoTotal = resultadoDte.MntTotal.text() as BigDecimal
                        } catch (NumberFormatException e) {
                            ec.logger.warn("MntTotal is no BigDecimal: ${resultadoDte.MntTotal.text()}, setting to 0")
                            montoTotal = 0 as BigDecimal
                        }
                    </script>
                    <set field="estadoDte" from="resultadoDte.EstadoDTE.text()"/>
                    <set field="estadoDteGlosa" from="resultadoDte.EstadoDTEGlosa.text()"/>
                    <service-call name="mchile.sii.DTECommServices.process#DteInRespuestaDte" in-map="context" out-map="processDte"/>
                    <if condition="processDte.envioIssuerPartyId">
                        <if condition="envio.issuerPartyId == null"><then>
                            <set field="envio.issuerPartyId" from="processDte.envioIssuerPartyId"/>
                        </then><else-if condition="envio.issuerPartyId != processDte.envioIssuerPartyId">
                            <return error="true" message="IssuerPartyId mismatch: previously ${envio.issuerPartyId}, for tipo DTE ${tipoDte}, folio ${folio}: ${processDte.envioIssuerPartyId}"/>
                        </else-if></if>
                    </if>
                    <if condition="processDte.envioReceiverPartyId">
                        <if condition="envio.receiverPartyId == null"><then>
                            <set field="envio.receiverPartyId" from="processDte.envioReceiverPartyId"/>
                        </then><else-if condition="envio.receiverPartyId != processDte.envioReceiverPartyId">
                            <return error="true" message="ReceiverPartyId mismatch: previously ${envio.receiverPartyId}, for tipo DTE ${tipoDte}, folio ${folio}: ${processDte.envioReceiverPartyId}"/>
                        </else-if></if>
                    </if>
                    <if condition="processDte.processed"><then>
                        <set field="processedItems" from="processedItems+1"/>
                    </then><else-if condition="processDte.processedWithErrors">
                        <set field="itemsWithErrors" from="itemsWithErrors+1"/>
                    </else-if><else>
                        <set field="processed" from="false"/>
                    </else></if>
                </iterate>
            </if>
            <entity-update value-field="envio"/>
        </actions>
    </service>
    <service verb="process" noun="DteInRespuestaDte">
        <in-parameters>
            <parameter name="tipoDte" required="true"/>
            <parameter name="folio" type="Integer"/>
            <parameter name="fechaEmision" type="Date"/>
            <parameter name="rutEmisor"/>
            <parameter name="rutReceptor"/>
            <parameter name="montoTotal" type="BigDecimal"/>
            <parameter name="estadoDte"/>
            <parameter name="rutEmisorEnvio"/>
            <parameter name="rutReceptorEnvio"/>
            <parameter name="envioDteEnvioId"/>
            <parameter name="envioId"/>
            <parameter name="validFiscalTaxDocumentIdList" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="processed" type="Boolean"/>
            <parameter name="processedWithErrors" type="Boolean"/>
            <parameter name="envioIssuerPartyId"/>
            <parameter name="envioReceiverPartyId"/>
        </out-parameters>
        <actions>
            <set field="process" from="true" type="Boolean"/>
            <set field="processed" from="false" type="Boolean"/>
            <set field="processedWithErrors" from="false" type="Boolean"/>
            <if condition="rutEmisorEnvio != null &amp;&amp; rutEmisorEnvio != rutReceptor">
                <log level="warn" message="Rut mismatch en envío ${envioId} rut emisor indicado en inicio: ${rutEmisorEnvio}, en documento tipo ${tipoDte} folio ${folio} receptor es ${rutReceptor}"/>
                <if condition="estadoDte == '3'">
                    <set field="processedWithErrors" from="true"/>
                </if>
                <set field="process" from="false" type="Boolean"/>
            </if>
            <if condition="rutReceptorEnvio != null &amp;&amp; rutReceptorEnvio != rutEmisor">
                <log level="warn" message="Rut mismatch en envío ${envioId} rut receptor indicado en inicio: ${rutReceptorEnvio}, en documento tipo ${tipoDte} folio ${folio} emisor es ${rutEmisor}"/>
                <set field="processedWithErrors" from="true"/>
                <set field="process" from="false" type="Boolean"/>
            </if>
            <if condition="estadoDte != '0'">
                <set field="processedWithErrors" from="true"/>
                <set field="process" from="false" type="Boolean"/>
            </if>
            <if condition="process">
                <service-call name="mchile.sii.DTEServices.get#MoquiSIICode" in-map="[siiCode:tipoDte]" out-map="moquiCode"/>
                <set field="fiscalTaxDocumentTypeEnumId" from="moquiCode.enumId"/>
                <entity-find entity-name="mchile.dte.FiscalTaxDocumentAndInvoice" list="dbDteList">
                    <econdition field-name="fiscalTaxDocumentTypeEnumId"/>
                    <econdition field-name="fiscalTaxDocumentNumber" from="folio"/>
                    <econdition field-name="date" operator="greater-equals" from="fechaEmision"/>
                    <econdition field-name="date" operator="less-equals" from="fechaEmision+1"/>
                    <econdition field-name="issuerPartyIdValue" from="rutEmisor"/>
                    <econdition field-name="receiverPartyIdValue" from="rutReceptor"/>
                    <econdition field-name="invoiceTotal" from="montoTotal"/>
                </entity-find>
                <if condition="dbDteList"><then>
                    <set field="dbDte" from="dbDteList.first"/>
                    <!-- set issuerParty to be set at envio to the receiver of the DTE and vice verssa -->
                    <set field="envioIssuerPartyId" from="dbDte.receiverPartyId"/>
                    <set field="envioReceiverPartyId" from="dbDte.issuerPartyId"/>
                    <entity-find-one entity-name="mchile.dte.DteEnvioFiscalTaxDocument" value-field="dteEnvioFtd" auto-field-map="[fiscalTaxDocumentId:dbDte.fiscalTaxDocumentId, envioId:envioId]"/>
                    <if condition="validFiscalTaxDocumentIdList == null || dbDte.fiscalTaxDocumentId in validFiscalTaxDocumentIdList"><then>
                        <if condition="dbDte.sentRecStatusId == 'Ftd-SentRec' &amp;&amp; estadoDte == '0'">
                            <service-call name="update#mchile.dte.FiscalTaxDocument" in-map="[fiscalTaxDocumentId:dbDte.fiscalTaxDocumentId, sentRecStatusId:'Ftd-ReceiverAck']"/>
                        </if>
                        <service-call name="store#mchile.dte.DteEnvioFiscalTaxDocument" in-map="[envioId:envioId, fiscalTaxDocumentId:dbDte.fiscalTaxDocumentId]"/>
                        <set field="processed" from="true"/>
                    </then><else>
                        <log level="error" message="DTE ${dbDte.fiscalTaxDocumentId} was not sent in envioDte ${envioDteEnvioId} which is responded by RespuestaDte ${envioId}, ignoring"/>
                    </else></if>
                </then><else>
                    <log level="warn" message="No se encuentra DTE para envío ${envioId}, documento tipo ${tipoDte} folio ${folio} emitido por ${rutEmisor}"/>
                </else></if>
            </if>
        </actions>
    </service>

    <service verb="process" noun="EnvioRecibo">
        <implements service="mchile.sii.DTECommServices.process#EnvioInterface"/>
        <actions>
            <set field="processed" from="false"/>
            <set field="withError" from="false"/>
            <set field="withResponse" from="false"/>
            <entity-find-one entity-name="mchile.dte.DteEnvio" value-field="envio" for-update="true"/>
            <set field="envioRr" from="ec.resource.getLocationReference(envio.documentLocation)"/>
            <set field="envioRecibos" from=" new groovy.xml.XmlParser(false, false).parse(envioRr.openStream())"/>
            <set field="caratula" from="envioRecibos.SetRecibos.Caratula"/>
            <set field="reciboList" from="envioRecibos.SetRecibos.Recibo.DocumentoRecibo"/>
            <set field="rutEmisor" from="caratula.RutRecibe.text()"/>
            <iterate list="reciboList" entry="recibo">
                <set field="tipoDte" from="recibo.TipoDoc.text()"/>
                <set field="folio" from="recibo.Folio.text()" type="Integer"/>
                <set field="fechaEmision" from="ec.l10n.parseTimestamp(recibo.FchEmis.text(), 'yyyy-MM-dd')"/>
                <set field="rutReceptor" from="recibo.RUTRecep.text()"/>
                <set field="montoTotal" from="recibo.MntTotal.text()" type="BigDecimal"/>
                <set field="recinto" from="recibo.Recinto.text()"/>
                <set field="rutFirma" from="recibo.RutFirma.text()"/>
                <set field="declaracion" from="recibo.Declaracion.text()"/>
                <set field="timestampFirma" from="recibo.TmstFirmaRecibo.text()"/>
                <service-call name="mchile.sii.DTEServices.get#MoquiSIICode" in-map="[siiCode:tipoDte]" out-map="moquiCode"/>
                <set field="fiscalTaxDocumentTypeEnumId" from="moquiCode.enumId"/>
                <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="dteList" for-update="true">
                    <econdition field-name="issuerPartyIdValue" from="rutEmisor"/>
                    <econdition field-name="receiverPartyIdValue" from="rutReceptor"/>
                    <econdition field-name="fiscalTaxDocumentNumber" from="folio"/>
                    <econdition field-name="date" operator="greater-equals" from="fechaEmision"/>
                    <econdition field-name="date" operator="less" from="fechaEmision+1"/>
                    <econdition field-name="statusId" value="Ftd-Issued"/>
                    <econdition field-name="sentRecStatusId" operator="in" value="Ftd-SentRec,Ftd-ReceiverAck,Ftd-ReceiverAccept"/>
                </entity-find>
                <if condition="dteList"><then>
                    <set field="dte" from="dteList.first"/>
                    <if condition="envio.issuerPartyId == null"><then>
                        <set field="envio.issuerPartyId" from="dte.receiverPartyId"/>
                    </then><else-if condition="envio.issuerPartyId != dte.receiverPartyId">
                        <return error="true" message="IssuerPartyId mismatch: previously ${envio.issuerPartyId}, for tipo DTE ${tipoDte}, folio ${folio}: ${dte.receiverPartyId}"/>
                    </else-if></if>
                    <if condition="envio.receiverPartyId == null"><then>
                        <set field="envio.receiverPartyId" from="dte.issuerPartyId"/>
                    </then><else-if condition="envio.receiverPartyId != dte.issuerPartyId">
                        <return error="true" message="ReceiverPartyId mismatch: previously ${envio.receiverPartyId}, for tipo DTE ${tipoDte}, folio ${folio}: ${dte.issuerPartyId}"/>
                    </else-if></if>
                    <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentAttributes" value-field="attributes" auto-field-map="[fiscalTaxDocumentId:dte.fiscalTaxDocumentId]"/>
                    <if condition="attributes.amount == montoTotal"><then>
                        <set field="dte.sentRecStatusId" value="Ftd-ReceiverAccept"/>
                        <entity-update value-field="dte"/>
                        <service-call name="create#mchile.dte.DteEnvioFiscalTaxDocument" in-map="[fiscalTaxDocumentId:dte.fiscalTaxDocumentId, envioId:envioId]"/>
                    </then><else>
                        <log message="Not processing, attributes.amount (${attributes.amount}) != montoTotal (${montoTotal})"/>
                        <set field="withError" from="true"/>
                    </else></if>
                </then><else>
                    <log message="no se encuentra dte para rutEmisor ${rutEmisor}, rutReceptor ${rutReceptor}, folio ${folio}, fechaEmision ${fechaEmision}"/>
                    <set field="withError" from="true"/>
                </else></if>
            </iterate>
            <set field="processed" from="true"/>
            <entity-update value-field="envio"/>
        </actions>
    </service>

    <service verb="process" noun="ResultadoEnvio">
        <implements service="mchile.sii.DTECommServices.process#EnvioInterface"/>
        <actions>
            <set field="withResponse" from="false"/>
            <entity-find-one entity-name="mchile.dte.DteEnvio" value-field="envio" for-update="true"/>
            <if condition="envio.rutEmisor == '60803000-K'"><then>
                <set field="envio.issuerPartyId" value="CL_SII"/>
            </then><else>
                <return error="true" message="Rut de emisor de envío ${envioId} (${rutEmisorEnvio}) de tipo ResultadoEnvio no es del SII"/>
            </else></if>
            <set field="envioRr" from="ec.resource.getLocationReference(envio.documentLocation)"/>
            <set field="resultado" from=" new groovy.xml.XmlParser(false, false).parse(envioRr.openStream())"/>
            <set field="rutEmisor" from="resultado.IDENTIFICACION.RUTEMISOR.text().toUpperCase()"/>
            <set field="estadoResultado" from="resultado.IDENTIFICACION.ESTADO.text()"/>
            <set field="trackId" from="resultado.IDENTIFICACION.TRACKID.text()"/>
            <set field="dteList" from="resultado.REVISIONENVIO.REVISIONDTE"/>
            <set field="totalItems" from="0" type="Integer"/>
            <set field="itemSubtotalList" from="resultado.ESTADISTICA.SUBTOTAL"/>
            <iterate list="itemSubtotalList" entry="subtotal">
                <set field="totalItems" from="totalItems + ((subtotal.INFORMADO.text() ?:0) as Integer)"/>
            </iterate>
            <set field="processedItems" from="0"/>
            <set field="processedFiscalTaxDocumentIds" from="[]"/>
            <if condition="estadoResultado == 'EPR - Envio Procesado'"><then>
                <iterate list="dteList" entry="dte">
                    <set field="folio" from="dte.FOLIO.text()" type="Integer"/>
                    <set field="tipoDte" from="dte.TIPODTE.text()"/>
                    <set field="estadoDte" from="dte.ESTADO.text()"/>
                    <set field="detalle" from="dte.DETALLE.text()"/>
                    <service-call name="mchile.sii.DTEServices.get#MoquiSIICode" in-map="[siiCode:tipoDte]" out-map="moquiCode"/>
                    <set field="fiscalTaxDocumentTypeEnumId" from="moquiCode.enumId"/>
                    <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="ftdList" for-update="true">
                        <econdition field-name="issuerPartyIdValue" from="rutEmisor"/>
                        <econdition field-name="fiscalTaxDocumentNumber" from="folio"/>
                        <econdition field-name="fiscalTaxDocumentTypeEnumId"/>
                        <econdition field-name="trackId"/>
                        <econdition field-name="sentAuthStatusId" operator="in" value="Ftd-SentAuthUnverified,Ftd-SentAuthRejected"/>
                    </entity-find>
                    <set field="ftd" from="ftdList.first"/>
                    <if condition="ftd">
                        <if condition="envio.receiverPartyId == null"><then>
                            <set field="envio.receiverPartyId" from="ftd.issuerPartyId"/>
                        </then><else-if condition="envio.receiverPartyId != ftd.issuerPartyId">
                            <return error="true" message="ReceiverPartyId mismatch: previously ${envio.receiverPartyId}, for tipo DTE ${tipoDte}, folio ${folio}: ${ftd.issuerPartyId}"/>
                        </else-if></if>
                        <if condition="estadoDte.startsWith('RCH')"><then>
                            <set field="ftd.sentAuthStatusId" value="Ftd-SentAuthRejected"/>
                        </then></if>
                        <entity-update value-field="ftd"/>
                        <service-call name="store#mchile.dte.DteEnvioFiscalTaxDocument" in-map="[fiscalTaxDocumentId:ftd.fiscalTaxDocumentId, envioId:envioId]"/>
                    </if>
                    <set field="processedItems" from="processedItems+1"/>
                    <script>processedFiscalTaxDocumentIds.add(ftd.fiscalTaxDocumentId)</script>
                </iterate>
                <!-- When all are accepted, no detail by document is sent, have to mark all others as accepted -->
                <entity-find entity-name="mchile.dte.DteEnvioAndFiscalTaxDocument" list="otherFtdList">
                    <econdition field-name="envioTrackId" operator="is-not-null"/>
                    <econdition field-name="envioTrackId" from="trackId"/>
                    <econdition field-name="ftdTrackId" operator="is-not-null"/>
                    <econdition field-name="ftdTrackId" from="trackId"/>
                    <econdition field-name="fiscalTaxDocumentId" operator="not-in" from="processedFiscalTaxDocumentIds"/>
                </entity-find>
                <iterate list="otherFtdList" entry="ftd">
                    <if condition="envio.receiverPartyId == null"><then>
                        <set field="envio.receiverPartyId" from="ftd.ftdIssuerPartyId"/>
                    </then><else-if condition="envio.receiverPartyId != ftd.ftdIssuerPartyId">
                        <return error="true" message="ReceiverPartyId mismatch: previously ${envio.receiverPartyId}, for tipo DTE ${tipoDte}, folio ${folio}: ${ftd.ftdIssuerPartyId}"/>
                    </else-if></if>
                    <if condition="ftd.ftdStatusId in ['Ftd-SentAuthUnverified', 'Ftd-SentAuthAccepted']"><then>
                        <message error="true">FiscalTaxDocument {ftd.fiscalTaxDocumentId} should be marked as Accepted but is currently in status ${ftd.ftdStatusId}</message>
                    </then><else>
                        <service-call name="update#mchile.dte.FiscalTaxDocument" in-map="[fiscalTaxDocumentId:ftd.fiscalTaxDocumentId, sentAuthStatusId:'Ftd-SentAuthAccepted']"/>
                    </else></if>
                    <set field="processedItems" from="processedItems+1"/>
                </iterate>
            </then><else>
                <message error="true">Unknown estado for resultado envioId ${envioId}: ${estadoResultado}</message>
            </else></if>
            <entity-update value-field="envio"/>
            <if condition="totalItems == processedItems"><then>
                <set field="processed" from="true"/>
            </then><else>
                <message error="true">Itemes procesados: ${processedItems}, indicados en resultado: ${totalItems}</message>
            </else></if>
        </actions>
    </service>

    <service verb="process" noun="ResultadoConsumoFolios">
        <implements service="mchile.sii.DTECommServices.process#EnvioInterface"/>
        <actions>
            <set field="withResponse" from="false"/>
            <entity-find-one entity-name="mchile.dte.DteEnvio" value-field="envio" for-update="true"/>
            <if condition="envio.rutEmisor == '60803000-K'"><then>
                <set field="envio.issuerPartyId" value="CL_SII"/>
            </then><else>
                <return error="true" message="Rut de emisor de envío ${envioId} (${rutEmisorEnvio}) de tipo ResultadoEnvio no es del SII"/>
            </else></if>
            <set field="envioRr" from="ec.resource.getLocationReference(envio.documentLocation)"/>
            <set field="resultado" from=" new groovy.xml.XmlParser(false, false).parse(envioRr.openStream()).DocumentoResultadoConsumoFolios"/>
            <set field="rutEmisor" from="resultado.Identificacion.Envio.RutEmisor.text().toUpperCase()"/>
            <set field="estadoResultado" from="resultado.Resultado.Estado.text()"/>
            <set field="trackId" from="resultado.Identificacion.Envio.TrackId.text()"/>
            <if condition="estadoResultado == 'CORRECTO'"><then>
                <entity-find entity-name="mchile.dte.DteEnvio" list="rcofList" for-update="true">
                    <econdition field-name="trackId"/>
                    <econdition field-name="rutEmisor"/>
                    <econdition field-name="rutReceptor" value="60803000-K"/>
                    <econdition field-name="statusId" operator="in" value="Ftde-Sent,Ftde-Processed"/>
                </entity-find>
                <message error="true">Encontrado envio ${rcofList.first?.envioId} </message>
                <if condition="!rcofList">
                    <message type="warning">No se encuentra envío referenciado en envío ${envioId} con trackId ${trackId}</message>
                    <return/>
                </if>
                <set field="rcof" from="rcof.first"/>
                <set field="rcof.statusId" value="Ftde-Procesed"/>
                <set field="envio.receiverPartyId" from="rcof.issuerPartyId"/>
                <set field="processed" from="true"/>
            </then><else>
                <message error="true">Unknown estado for resultado envioId ${envioId}: ${estadoResultado}</message>
            </else></if>
            <entity-update value-field="envio"/>
        </actions>
    </service>

    <service verb="genera" noun="Envio">
        <in-parameters>
            <parameter name="rutReceptor" default-value="60803000-K"><description>El receptor del envio es el SII</description></parameter>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="documentIdList" required="true" type="List"/>
            <parameter name="saveSinFirma" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="envioIdList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="ftdList">
                <econdition field-name="fiscalTaxDocumentId" operator="in" from="documentIdList"/>
            </entity-find>
            <if condition="!ftdList"><return error="true" message="Could not find any FiscalTaxDocument"/></if>
            <set field="boletaIdList" from="[]"/>
            <set field="facturaIdList" from="[]"/>
            <iterate list="ftdList" entry="ftd">
                <if condition="ftd.fiscalTaxDocumentTypeEnumId in ['Ftdt-39', 'Ftdt-41']"><then>
                    <script>boletaIdList.add(ftd.fiscalTaxDocumentId)</script>
                </then><else>
                    <script>facturaIdList.add(ftd.fiscalTaxDocumentId)</script>
                </else></if>
            </iterate>
            <set field="envioIdList" from="[]"/>
            <if condition="boletaIdList">
                <service-call name="mchile.sii.DTECommServices.genera#EnvioBoleta" in-map="context+[documentIdList:boletaIdList]" out-map="envioBoleta"/>
                <script>envioIdList.add(envioBoleta.envioId)</script>
            </if>
            <if condition="facturaIdList">
                <service-call name="mchile.sii.DTECommServices.genera#EnvioDte" in-map="context+[documentIdList:facturaIdList]" out-map="envioFactura"/>
                <script>envioIdList.add(envioFactura.envioId)</script>
            </if>
        </actions>
    </service>

    <service verb="genera" noun="EnvioDte" type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/generaEnvioDte.groovy">
        <description>Generación de envio documento a partir de facturas ya generadas.</description>
        <in-parameters>
            <parameter name="rutReceptor" default-value="60803000-K"><description>El receptor del envio es el SII</description></parameter>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="documentIdList" required="true" type="List"/>
            <parameter name="saveSinFirma" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="envioId"/>
        </out-parameters>
    </service>

    <service verb="start" noun="SendPendingEnvioDteJob" authenticate="anonymous-all">
        <actions>
            <script>ec.service.job("sii_dte_SendPendingEnvioDte").run()</script>
        </actions>
    </service>

    <service verb="start" noun="EnviaEnvioDteToSiiJob" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="envioIdList"/>
        </in-parameters>
        <actions>
            <script>
                job = ec.service.job("sii_dte_EnviaEnvioDteToSii")
                if (envioId)
                    job.parameter("envioIdList", envioIdList)
                job.run()
            </script>
        </actions>
    </service>

    <service verb="start" noun="ValidaEnvioServiceJob" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="envioId"/>
            <parameter name="initialDelaySeconds"/>
            <parameter name="checkDelaySeconds"/>
            <parameter name="checkAttempts"/>
            <parameter name="minSecondsBetweenAttempts"/>
        </in-parameters>
        <actions>
            <script>
                job = ec.service.job("sii_dte_CheckEnviosEnviadosSii")
                if (envioId)
                    job.parameter("envioId", envioId)
                if (initialDelaySeconds)
                    job.parameter("initialDelaySeconds", initialDelaySeconds)
                if (checkDelaySeconds)
                    job.parameter("checkDelaySeconds", checkDelaySeconds)
                if (checkAttempts)
                    job.parameter("checkAttempts", checkAttempts)
                if (minSecondsBetweenAttempts)
                    job.parameter("minSecondsBetweenAttempts", minSecondsBetweenAttempts)
                job.run()
            </script>
        </actions>
    </service>

    <service verb="enviaSII" noun="Envio">
        <description>
            Envio al SII envio ya generado
            envioId: ID de envío
        </description>
        <in-parameters>
            <parameter name="envioIdList" required="true"/>
            <parameter name="maxFail" type="Integer" default="3"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackIdList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList">
                <econdition field-name="envioId" operator="in" from="envioIdList"/>
            </entity-find>
            <set field="trackIdList" from="[]"/>
            <iterate list="envioList" entry="envio">
                <set field="envioId" from="envio.envioId"/>
                <if condition="envio.envioTypeEnumId == 'Ftde-EnvioBoleta'"><then>
                    <service-call name="mchile.sii.DTECommServices.enviaSII#EnvioBoleta" in-map="context" out-map="envioResult" out-map-add-to-existing="false"/>
                    <script>trackIdList.add(envioResult.trackId)</script>
                </then><else>
                    <service-call name="mchile.sii.DTECommServices.enviaSII#EnvioDte" in-map="context" out-map="envioResult" out-map-add-to-existing="false"/>
                    <script>trackIdList.add(envioResult.trackId)</script>
                </else></if>
            </iterate>
        </actions>
    </service>

    <service verb="enviaSII" noun="EnvioDte"  type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/enviaSiiEnvioDte.groovy">
        <description>
            Envio al SII envio ya generado
            envioId: ID de envío
        </description>
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="maxFail" type="Integer" default="3"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
    </service>

    <service verb="check" noun="EnviosEnviadosSii" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="initialDelaySeconds" type="Integer" default="5"/>
            <parameter name="checkDelaySeconds" type="Integer" default="30"/>
            <parameter name="checkAttempts" type="Integer" default="1"/>
            <parameter name="envioId"/>
            <parameter name="minSecondsBetweenAttempts" type="Integer" default="1800"/>
            <parameter name="maxAttempts" type="Integer" default="5"/>
            <parameter name="triggerEnvioToReceiver" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList">
                <econdition field-name="rutReceptor" value="60803000-K"/>
                <econdition field-name="statusId" value="Ftde-Sent"/>
                <econdition field-name="envioId" ignore-if-empty="true"/>
                <econdition field-name="lastAttempt" operator="less" from="ec.user.nowTimestamp.time - (minSecondsBetweenAttempts*1000)" or-null="true"/>
            </entity-find>
            <if condition="envioList.size() == 0">
                <log message="No envios found."/>
                <return/>
            </if>
            <script>if (initialDelaySeconds) Thread.sleep(initialDelaySeconds*1000L)</script>
            <set field="newStatusByEnvioId" from="[:]"/>
            <set field="totalAcceptedDocs" from="0"/>
            <set field="attempt" from="1"/>

            <while condition="envioList &amp;&amp; attempt &lt;= checkAttempts">
                <set field="reattemptList" from="[]"/>

                <script>Thread.sleep(initialDelaySeconds*1000L)</script>
                <log message="Starting attempt ${attempt}"/>
                <iterate list="envioList" entry="envio">
                    <if condition="envio.envioTypeEnumId == 'Ftde-EnvioBoleta'"><then>
                        <service-call name="mchile.sii.DTECommServices.verifica#EnvioBoletaEnSii" in-map="[envioId:envio.envioId]" transaction="force-new" out-map="checkMap" ignore-error="true"/>
                    </then><else>
                        <service-call name="mchile.sii.DTECommServices.verifica#EnvioEnSii" in-map="[envioId:envio.envioId]" transaction="force-new" out-map="checkMap" ignore-error="true"/>
                    </else></if>
                    <set field="totalAcceptedDocs" from="totalAcceptedDocs + (checkMap.documentosAceptados?:0)"/>
                    <if condition="checkMap.hasError != false"><then>
                        <script>reattemptList.add(envio)</script>
                    </then><else>
                        <service-call name="update#mchile.dte.DteEnvio" in-map="[envioId:envio.envioId, statusId:'Ftde-Processed', lastAttempt:ec.user.nowTimestamp, attemptCount:((envio.attemptCount?:0)+1)]" transaction="force-new" ignore-error="true"/>
                    </else></if>
                    <if condition="checkMap.newStatusId">
                        <set field="newStatusByEnvioId[envio.envioId]" from="checkMap.newStatusId"/>
                    </if>
                </iterate>
                <set field="envioList" from="reattemptList"/>
                <log message="Finishing attempt ${attempt}"/>
                <if condition="envioList &amp;&amp; (attempt &lt; checkAttempts)">
                    <log message="Waiting ${checkDelaySeconds} before next attempt"/>
                    <script>Thread.sleep(checkDelaySeconds*1000L)</script>
                </if>
                <set field="attempt" from="attempt + 1"/>
            </while>
            <iterate list="reattemptList" entry="envio">
                <set field="attemptCount" from="(envio.attemptCount?:0)+1"/>
                <set field="updateMap" from="[envioId:envio.envioId, attemptCount:attemptCount, lastAttempt:ec.user.nowTimestamp]"/>
                <set field="newStatusId" from="attemptCount >= maxAttempts ? 'Ftde-FailedAtReceiver' : newStatusByEnvioId[envio.envioId]"/>
                <if condition="newStatusId"><set field="updateMap.statusId" from="newStatusId"/></if>
                <service-call name="update#mchile.dte.DteEnvio" in-map="updateMap" transaction="force-new" ignore-error="true"/>
            </iterate>
            <if condition="triggerEnvioToReceiver &amp;&amp; totalAcceptedDocs &gt; 0">
                <script>ec.service.job("sii_dte_CreateEnvioDteReceiver").run()</script>
            </if>
        </actions>
    </service>

    <service verb="genera" noun="EnvioBoleta" type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/generaEnvioBoleta.groovy">
        <description>Generación de envio boletas a partir de facturas ya generadas.</description>
        <in-parameters>
            <parameter name="rutReceptor" default-value="60803000-K"><description>El receptor del envio es el SII</description></parameter>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="documentIdList" required="true" type="List"/>
            <parameter name="saveSinFirma" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="envioId"/>
        </out-parameters>
    </service>

    <service verb="marcarEnviados" noun="Documentos">
        <description>
            Marca lista de documentos como enviados, usando el trackid devuelto por el SII
        </description>
        <in-parameters>
            <parameter name="trackId"/>
            <parameter name="documentIdList" required="true" type="List"/>
        </in-parameters>
        <actions>
            <iterate list="documentIdList" entry="documentId">
                <!-- Se marca DTE como enviada -->
                <set field="idDte" from="documentId"/>
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                    <field-map field-name="fiscalTaxDocumentId" from="idDte"/>
                </entity-find-one>
                <set field="dteEv.sentAuthStatusId" value="Ftd-SentAuthUnverified"/>
                <set field="dteEv.trackId" from="trackId"/>
                <entity-update value-field="dteEv"/>
            </iterate>
        </actions>
    </service>

    <service verb="verifica" noun="DocumentoEnSii">
        <description>
            Verificación en el SII de DTE ya enviado
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="salida" required="true"/>
            <parameter name="errorCode" required="true"/>
            <parameter name="glosa"/>
            <parameter name="glosaError"/>
            <parameter name="status"/>
            <parameter name="numeroAtencion"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FtdtAttributesView" value-field="dte"/>
            <if condition="dte == null"><return error="true" message="No se encuentra DTE"/></if>
            <service-call name="mchile.sii.DTEServices.load#DTEConfig" in-map="[partyId:dte.issuerPartyId]" out-map="context"/>
            <if condition="certificate == null"><return error="true" message="No se encuentra configuración de facturación para sujeto ${dte.issuerPartyId}"/></if>
            <if condition="rutEmisor != dte.issuerPartyIdValue"><return error="true" message="Error de rut, DTE indica ${dte.issuerPartyIdValue}, en configuración aparece ${rutEmisor}"/></if>
            <set field="rutCertificado" from="cl.moit.dte.MoquiDTEUtils.getRutFromCertificate(certificate)"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutCertificado]" out-map="rutMap"/>
            <set field="RutConsultante" from="rutMap.rut"/>
            <set field="DvConsultante" from="rutMap.dv"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutEmisor]" out-map="rutMap"/>
            <set field="RutCompania" from="rutMap.rut"/>
            <set field="DvCompania" from="rutMap.dv"/>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:dte.receiverPartyIdValue]" out-map="rutMap"/>
            <set field="RutReceptor" from="rutMap.rut"/>
            <set field="DvReceptor" from="rutMap.dv"/>
            <service-call name="mchile.sii.DTEServices.get#SIICode" in-map="[fiscalTaxDocumentTypeEnumId:dte.fiscalTaxDocumentTypeEnumId]" out-map="siiCodeMap"/>
            <set field="TipoDte" from="siiCodeMap.siiCode"/>
            <set field="FolioDte" from="dte.fiscalTaxDocumentNumber"/>
            <set field="FechaEmisionDte" from="ec.l10n.format(dte.date, 'ddMMyyyy')"/>
            <set field="MontoDte" from="ec.l10n.format(dte.amount, '###')"/>
            <service-call name="mchile.sii.DTECommServices.get#Token" in-map="[dteIsProduction:dteIsProduction, partyId:dte.issuerPartyId]" out-map="tokenMap"/>
            <set field="Token" from="tokenMap.token"/>
            <if condition="dteIsProduction"><then>
                <service-call name="mchile.sii.DTECommServices.verifica#DocumentoEnSiiProduction" in-map="context" out-map="context"/>
            </then><else>
                <service-call name="mchile.sii.DTECommServices.verifica#DocumentoEnSiiCertification" in-map="context" out-map="context"/>
            </else></if>
            <script><![CDATA[
                salida = getEstDteResponse.getEstDteReturn
                ec.logger.info("salida: ${salida}")
                xmlDoc = new groovy.xml.XmlParser(false, false).parseText(salida)
                header = xmlDoc.'SII:RESP_HDR'
                status = header.ESTADO.text()
                glosa = header.GLOSA_ESTADO.text()
                errorCode = header.ERR_CODE.text()
                glosaError = header.GLOSA_ERR.text()
                numeroAtencion = header.NUM_ATENCION.text()
            ]]></script>
            <if condition="errorCode == '0'">
                <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dte" for-update="true"/>
                <if condition="dte.sentAuthStatusId == 'Ftd-SentAuthUnverified'">
                    <set field="dte.sentAuthStatusId" value="Ftd-SentAuthAccepted"/>
                    <entity-update value-field="dte"/>
                </if>
            </if>
        </actions>
    </service>

    <service verb="verifica" noun="DocumentoEnSiiProduction" type="remote-xml-soap" location="https://palena.sii.cl/DTEWS/QueryEstDte.jws?WSDL" method="getEstDte">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://maullin.sii.cl/DTEWS/QueryEstDte.jws?WSDL', methodNamespacePrefix:'m', parameterOrder:'RutConsultante DvConsultante RutCompania DvCompania RutReceptor DvReceptor TipoDte FolioDte FechaEmisionDte MontoDte Token']" type="Map"/>
            <parameter name="RutConsultante"/>
            <parameter name="DvConsultante"/>
            <parameter name="RutCompania"/>
            <parameter name="DvCompania"/>
            <parameter name="RutReceptor"/>
            <parameter name="DvReceptor"/>
            <parameter name="TipoDte"/>
            <parameter name="FolioDte"/>
            <parameter name="FechaEmisionDte"/>
            <parameter name="MontoDte"/>
            <parameter name="Token"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getEstDteResponse" type="Map">
                <parameter name="getEstDteReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="verifica" noun="DocumentoEnSiiCertification" type="remote-xml-soap" location="https://maullin.sii.cl/DTEWS/QueryEstDte.jws?WSDL" method="getEstDte">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://maullin.sii.cl/DTEWS/QueryEstDte.jws?WSDL', methodNamespacePrefix:'m', parameterOrder:'RutConsultante DvConsultante RutCompania DvCompania RutReceptor DvReceptor TipoDte FolioDte FechaEmisionDte MontoDte Token']" type="Map"/>
            <parameter name="RutConsultante"/>
            <parameter name="DvConsultante"/>
            <parameter name="RutCompania"/>
            <parameter name="DvCompania"/>
            <parameter name="RutReceptor"/>
            <parameter name="DvReceptor"/>
            <parameter name="TipoDte"/>
            <parameter name="FolioDte"/>
            <parameter name="FechaEmisionDte"/>
            <parameter name="MontoDte"/>
            <parameter name="Token"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getEstDteResponse" type="Map">
                <parameter name="getEstDteReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="verifica" noun="EnvioEnSii">
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="issuerPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="estado"/>
            <parameter name="glosaEstado"/>
            <parameter name="numeroAtencion"/>
            <parameter name="errorCode"/>
            <parameter name="errorCodeGlosa"/>
            <parameter name="sqlCode"/>
            <parameter name="sqlCodeGlosa"/>
            <parameter name="serverCode"/>
            <parameter name="serverCodeGlosa"/>
            <parameter name="tipoDte"/>
            <parameter name="documentosInformados" type="Integer"/>
            <parameter name="documentosAceptados" type="Integer"/>
            <parameter name="documentosRechazados" type="Integer"/>
            <parameter name="hasError" type="Boolean"/>
            <parameter name="newStatusId"/>
        </out-parameters>
        <actions>
            <set field="hasError" from="false" type="Boolean"/>
            <entity-find-one entity-name="mchile.dte.DteEnvio" value-field="envio" for-update="true"/>
            <if condition="envio.trackId == null">
                <set field="hasError" from="true"/>
                <set field="newStatusId" value="Ftde-FailedAtReceiver"/>
                <return error="true" message="No trackId, cannot verify"/>
            </if>
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:envio.rutEmisor]" out-map="rutMap"/>
            <set field="RutCompania" from="rutMap.rut"/>
            <set field="DvCompania" from="rutMap.dv"/>
            <entity-find entity-name="mantle.party.PartyIdentification" list="idList">
                <econdition field-name="idValue" from="envio.rutEmisor"/>
                <econdition field-name="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            </entity-find>
            <set field="dbIssuerPartyId" from="idList.first?.partyId"/>
            <if condition="issuerPartyId == null || issuerPartyId == ''"><set field="issuerPartyId" from="dbIssuerPartyId"/></if>
            <if condition="issuerPartyId != null &amp;&amp; issuerPartyId != '' &amp;&amp; issuerPartyId != dbIssuerPartyId">
                <return error="true" message="No conincide Rut indicado en servicio (${issuerPartyId}) con el obtenido por el rut (${dbIssuerPartyId})"/>
            </if>
            <if condition="issuerPartyId == null"><return error="true" message="No se encuentra partyId para el rut ${envio.rutEmisor}"/></if>
            <service-call name="mchile.sii.DTEServices.load#DTEConfig" in-map="[partyId:issuerPartyId]" out-map="context"/>
            <service-call name="mchile.sii.DTECommServices.get#Token" in-map="[dteIsProduction:dteIsProduction, partyId:issuerPartyId]" out-map="tokenMap"/>
            <set field="Token" from="tokenMap.token"/>
            <set field="TrackId" from="envio.trackId"/>
            <if condition="dteIsProduction"><then>
                <service-call name="mchile.sii.DTECommServices.verifica#EnvioEnSiiProduction" in-map="context" out-map="context"/>
            </then><else>
                <service-call name="mchile.sii.DTECommServices.verifica#EnvioEnSiiCertification" in-map="context" out-map="context"/>
            </else></if>
            <script><![CDATA[
                import org.moqui.entity.EntityCondition

                glosasServerCode = ['0': 'Todo OK', '1': 'Error en Entrada', '2': 'Error SQL']
                glosasSqlCode = ['0': 'Schema Validado']
                glosasErrorCode = ['0': 'Se retorna el estado', '1': 'El envío no es de la Empresa, faltan parámetros de entrada', '2': 'Error de Proceso']
                salida = getEstUpResponse.getEstUpReturn
                ec.logger.info("salida: ${salida}")
                xmlDoc = new groovy.xml.XmlParser(false, true).parseText(salida)
                header = xmlDoc.'SII:RESP_HDR'
                ec.logger.info("header: ${header}")
                estado = header.ESTADO.text()
                glosaEstado = header.GLOSA.text()
                numeroAtencion = header.NUM_ATENCION.text()
                errorCode = header.ERR_CODE.text()
                if (errorCode)
                    errorCodeGlosa = glosasErrorCode[errorCode]
                sqlCode = header.SQL_CODE.text()
                if (sqlCode) {
                    sqlCodeGlosa = glosasSqlCode[sqlCode] ?: 'Código de Oracle'
                }
                serverCode = header.SRV_CODE.text()
                if (serverCode)
                    serverCodeGlosa = glosasServerCode[serverCode]
                body = xmlDoc.'SII:RESP_BODY'
                tipoDte = body.TIPO_DOCTO.text()
                try {
                    documentosInformados = body.INFORMADOS.text() as Integer
                } catch (Exception e) {}
                try {
                    documentosAceptados = body.ACEPTADOS.text() as Integer
                } catch (Exception e) {}
                try {
                    documentosRechazados = body.RECHAZADOS.text() as Integer
                } catch (Exception e) {}
                if (estado in ['PDR', 'PRD', 'FOK', 'CRT', 'SOK']) {
                    ec.logger.info("Envío en proceso")
                    hasError = true
                } else if (estado == 'EPR') {
                    // Envío procesado
                    newStatusId = 'Ftde-Processed'
                    ec.logger.info("Envío procesado")
                    if (documentosAceptados == documentosInformados) {
                        dteIdList = ec.entity.find("mchile.dte.DteEnvioFiscalTaxDocument").condition("envioId", envioId).list().fiscalTaxDocumentId
                        dteList = ec.entity.find("mchile.dte.FiscalTaxDocument").condition("fiscalTaxDocumentId", EntityCondition.ComparisonOperator.IN, dteIdList).forUpdate(true).list()
                        docsAcInt = documentosAceptados as Integer
                        if (dteList.size() != docsAcInt) {
                            ec.message.addError("Documentos informados y aceptados en envío ${envioId} no calza con encontrados en BD por trackId ${envio.trackId}: ${documentosAceptados} vs ${dteList.size()}")
                            return;
                        }
                        // Se pueden asignar todos como aceptados
                        dteList.each { dte ->
                            if (dte.sentAuthStatusId in ['Ftd-SentAuthUnverified', 'Ftd-SendAuthFailed']) {
                                dte.sentAuthStatusId = 'Ftd-SentAuthAccepted'
                                dte.update()
                            }
                        }
                    } else {
                        // Se tienen que revisar caso a caso
                        dteList = ec.entity.find("mchile.dte.FiscalTaxDocument").condition("trackId", envio.trackId).list()
                        dteList.each { dte ->
                            ec.service.async().name("mchile.sii.DTECommServices.verifica#DocumentoEnSii").parameter("fiscalTaxDocumentId", dte.fiscalTaxDocumentId).call()
                        }
                    }
                } else if (estado == 'RSC') {
                    ec.logger.info("Envío rechazado por Schema")
                    newStatusId = 'Ftde-ProcessRejectedSchema'
                } else if (estado == 'RFR') {
                    ec.logger.info("Envío rechazado por Firma")
                    newStatusId = 'Ftde-ProcessRejectedSignature'
                } else if (estado == 'RCT') {
                    ec.logger.info("Envío rechazado por Carátula")
                    newStatusId = 'Ftde-ProcessRejectedEnvelope'
                } else if (estado == '001') {
                    ec.logger.info("Error con token: ${glosaEstado}")
                    hasError = true
                } else if (errorCodeGlosa != null) {
                    ec.logger.info("Consulta con error: ${errorCodeGlosa}")
                    hasError = true
                } else if (sqlCodeGlosa != null) {
                    ec.logger.info("Consulta con error: ${errorCodeGlosa}")
                    hasError = true
                } else if (serverCodeGlosa != null) {
                    ec.logger.info("Consulta con error: ${errorCodeGlosa}")
                    hasError = true
                } else {
                    ec.logger.info("Estado no reconocido: ${estado}, errorCode ${errorCode} (${errorCodeGlosa}), sqlCode ${sqlCode} (${sqlCodeGlosa}), serverCode ${serverCode} (${serverCodeGlosa})")
                    if (errorEnvio != null && errorEnvio != '') {
                        newStatusId = 'Ftd-SentAuthRejected'
                    }
                }
                ]]></script>
        </actions>
    </service>

    <service verb="verifica" noun="EnvioEnSiiProduction" type="remote-xml-soap" location="https://palena.sii.cl/DTEWS/QueryEstUp.jws?WSDL" method="getEstUp">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'http://maullin.sii.cl/DTEWS/QueryEstDte.jws', methodNamespacePrefix:'m', parameterOrder:'RutCompania DvCompania
TrackId Token']" type="Map"/>
            <parameter name="RutCompania"/>
            <parameter name="DvCompania"/>
            <parameter name="TrackId"/>
            <parameter name="Token"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getEstUpResponse" type="Map">
                <parameter name="getEstUpReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="verifica" noun="EnvioEnSiiCertification" type="remote-xml-soap" location="https://maullin.sii.cl/DTEWS/QueryEstUp.jws?WSDL" method="getEstUp">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'http://maullin.sii.cl/DTEWS/QueryEstDte.jws', methodNamespacePrefix:'m', parameterOrder:'RutCompania DvCompania
TrackId Token']" type="Map"/>
            <parameter name="RutCompania"/>
            <parameter name="DvCompania"/>
            <parameter name="TrackId"/>
            <parameter name="Token"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getEstUpResponse" type="Map">
                <parameter name="getEstUpReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="enviaSII" noun="EnvioBoleta"  type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/enviaSiiEnvioBoleta.groovy">
        <description>
            Envio al SII envio ya generado
            envioId: ID de envío
        </description>
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="maxFail" type="Integer" default="3"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trackId"/>
        </out-parameters>
    </service>

    <service verb="verifica" noun="EnvioBoletaEnSii">
        <description>
            Verificación en el SII de envioBoleta con rut y trackid
        </description>
        <in-parameters>
            <parameter name="envioId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="errorCode" required="true"/>
            <parameter name="glosaError" required="true"/>
            <parameter name="hasError" type="Boolean"/>
            <parameter name="newStatusId"/>
        </out-parameters>
        <actions>
            <set field="hasError" from="true"/>
            <entity-find-one entity-name="mchile.dte.DteEnvio" value-field="envio"/>
            <if condition="envio?.trackId == null">
                <return error="true" message="Envio ${envioId} no tiene trackId, no se puede verificar"/>
            </if>

            <service-call name="mchile.sii.DTEServices.load#DTEConfig" in-map="[partyId:envio.issuerPartyId]" out-map="context"/>
            <set field="certData" from="certData"/>

            <set field="statusSii" value=""/>
            <set field="salida" value=""/>
            <set field="statusXML" value=""/>
            <set field="token" default-value="0"/>
            <set field="resp" default-value="0"/>


            <script>
                import groovy.json.JsonSlurper;

                // Ejecutar GET https://apicert.sii.cl/boleta.electronica.envio/{rut}-{dv}-{trackid}
                token = ec.service.sync().name("mchile.sii.DTECommServices.get#TokenBoleta").parameters([boletaIsProduction:boletaIsProduction,  partyId:envio.issuerPartyId]).call().token
                if (boletaIsProduction) {
                    logger.warn("Consultando envio Boleta en produccion")
                    resp = ec.service.sync().name("mchile.sii.DTECommServices.get#EstadoEnvioBoletaProduccion").parameters([rutCompany:rutEmisor, trackId:envio.trackId, token:token, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]).call().respSII
                } else {
                    logger.warn("Consultando envio en Certificacion")
                    resp = ec.service.sync().name("mchile.sii.DTECommServices.get#EstadoEnvioBoletaCertificacion").parameters([rutCompany:rutEmisor, trackId:envio.trackId, token:token, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]).call().respSII
                }

                salida = resp.toString()
                logger.warn("Salida JSON: " + salida)


                def jsonSlurper = new JsonSlurper()
                def object = jsonSlurper.parseText(resp)
                assert object instanceof Map
                glosa = object.estadistica
                //glosa = object.detalle_rep_rech.descripcion

            </script>
            <set field="errorCode" value="0"/><!-- aaaaa -->
            <!-- TODO: better message for status -->
            <set field="glosaError" value="$glosa"/>
        </actions>
    </service>

    <service verb="verifica" noun="BoletaEnSii">
        <description>
            Verificación en el SII de boleta especifica usando rut empresa, tipo y folio
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="errorCode" required="true"/>
            <parameter name="glosaError" required="true"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.sii.DTEServices.load#DTEConfig" in-map="[partyId:organizationPartyId]" out-map="context"/>
            <set field="certData" from="certData"/>

            <service-call name="mchile.sii.DTEServices.get#DteContent" in-map="[fiscalTaxDocumentId:fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml']" out-map="context"/>

            <if condition="!content">
                <return error="true" message="DTE no existe"/>
            </if>
            <set field="envio" from="content"/>

            <set field="salida" value=""/>
            <set field="statusXML" value=""/>
            <set field="token" value="0"/>

            <set field="tipo" value="39"/>
            <if condition="fiscalTaxDocumentTypeEnumId.equals('Ftdt-41')">
                <set field="tipo" value="41"/>
            </if>

            <!-- Recuperar folio -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="boletaField">
                <select-field field-name="fiscalTaxDocumentNumber"/>
                <select-field field-name="receiverPartyId"/>
                <select-field field-name="receiverPartyIdTypeEnumId"/>
            </entity-find-one>

            <set field="folio" from="boletaField.fiscalTaxDocumentNumber" type="String"/>
            <set field="receiverPartyId" from="boletaField.receiverPartyId"/>
            <set field="receiverPartyIdTypeEnumId" from="boletaField.receiverPartyIdTypeEnumId"/>
            <set field="invoiceId" from="boletaField.invoiceId"/>


            <!-- Recuperacion de rut receptor -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="receiverPartyId"/>
                <econdition field-name="partyIdTypeEnumId" from="receiverPartyIdTypeEnumId"/>
            </entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="No existe organización receptora definida en el sistema"/>
            </if>
            <set field="rutReceptor" from="partyIdentificationList.idValue[0]"/>

            <!-- Obtencion de monto desde invoiceId -->
            <set field="monto" value="0"/>
            <set field="fechaEmision" value="23-11-2020"/>

            <!-- Recuperacion de xml para parsear -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocumentContent" value-field="contentField">
                <select-field field-name="contentLocation"/>
            </entity-find-one>
            <if condition="!contentField">
                <return error="true" message="Boleta no tiene XML generado"/>
            </if>
            <set field="xmlDataRef" from="ec.resource.getLocationReference(contentField.contentLocation)"/>
            <script>
                import javax.xml.parsers.*
                import org.w3c.dom.*
                import java.text.DateFormat
                import java.text.SimpleDateFormat
                import java.util.Date
                import java.io.FileInputStream
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.HashMap
                import groovy.json.JsonSlurper;

                // Correccion de rut
                rutEmisor = rutEmisor.replace(".","")

                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()
                DocumentBuilder builder = null
                Document document = null

                builder = factory.newDocumentBuilder()
                document = builder.parse(xmlDataRef.openStream())
                document.getDocumentElement().normalize()
                Element root = document.getDocumentElement()

                NodeList nList = document.getElementsByTagName("MntTotal")
                monto = nList.item(0).getTextContent()

                nList = document.getElementsByTagName("FchEmis")
                fechaEmision = nList.item(0).getTextContent()

                // Formateo de fecha desde YYYY-MM-DD a DD-MM-YYYY
                SimpleDateFormat sourceFmt = new SimpleDateFormat("yyyy-MM-dd")
                SimpleDateFormat targetFmt = new SimpleDateFormat("dd-MM-yyyy")

                Date date1 = sourceFmt.parse(fechaEmision)
                fechaEmision = targetFmt.format(date1)

                System.out.println("Folio: " + folio + ", token: " + token)

                // Ejecutar GET https://apicert.sii.cl/boleta.electronica.envio/{rut}-{dv}-{trackid}
                token = ec.service.sync().name("mchile.sii.DTECommServices.get#TokenBoleta").parameters([boletaIsProduction:boletaIsProduction,  partyId:organizationPartyId]).call().token
                if (boletaIsProduction) {
                    logger.warn("Consultando Boleta en produccion")
                    resp = ec.service.sync().name("mchile.sii.DTECommServices.get#EstadoBoletaProduccion").parameters([rutCompany:rutEmisor, rutReceptor:rutReceptor, monto:monto, fechaEmision:fechaEmision, folio:folio, tipo:tipo, token:token, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]).call().respSII
                } else {
                    logger.warn("Consultando Boleta en Certificacion")
                    resp = ec.service.sync().name("mchile.sii.DTECommServices.get#EstadoBoletaCertificacion").parameters([rutCompany:rutEmisor, rutReceptor:rutReceptor, monto:monto, fechaEmision:fechaEmision, folio:folio, tipo:tipo, token:token, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]).call().respSII
                }

                salida = resp.toString()
                logger.warn("Salida JSON: " + salida)

                def jsonSlurper = new JsonSlurper()
                def object = jsonSlurper.parseText(resp)
                assert object instanceof Map
                glosa = object.descripcion

            </script>
            <set field="errorCode" value="0"/>
            <set field="glosaError" value="$glosa"/>
        </actions>
    </service>

    <service verb="marcarNoEnviado" noun="Documento">
        <description>
            Marca una DTE como no enviada al SII
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteEv">
                <return error="true" message="No existe DTE especificada"/>
            </if>

            <set field="dteEv.sentAuthStatusId" value="Ftd-NotSentAuth"/>
            <entity-update value-field="dteEv"/>
        </actions>
    </service>

    <service verb="marcarEnviado" noun="Documento">
        <description>
            Marca una DTE como ya enviada al SII
        </description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteEv" for-update="true">
                <field-map field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
            </entity-find-one>

            <if condition="!dteEv">
                <return error="true" message="No existe DTE especificada"/>
            </if>

            <set field="dteEv.sentAuthStatusId" value="Ftd-SentAuthAccepted"/>
            <entity-update value-field="dteEv"/>
        </actions>
    </service>
    
    <service verb="get" noun="PartyIdByRut">
        <in-parameters>
            <parameter name="idValue" required="true"/>
            <parameter name="createUnknown" type="Boolean" default="false"/>
            <parameter name="razonSocial"/>
            <parameter name="roleTypeId"/>
            <parameter name="giro"/>
            <parameter name="direccion"/>
            <parameter name="comuna"/>
            <parameter name="ciudad"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="idValue"/>
                <econdition field-name="partyIdTypeEnumId" value="PtidNationalTaxId"/>
            </entity-find>
            <if condition="partyIdentificationList.size() &gt; 1">
                <entity-find entity-name="mantle.party.Party" list="multiplePartyList">
                    <econdition field-name="partyId" operator="in" from="partyIdentificationList.partyId"/>
                </entity-find>
                <set field="excludePartyIds" from="[]"/>
                <iterate list="multiplePartyList" entry="party">
                    <script>
                        if (party.mergedToPartyId || party.disabled == 'Y')
                            excludePartyIds.add(party.partyId)
                    </script>
                </iterate>
                <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                    <econdition field-name="idValue"/>
                    <econdition field-name="partyIdTypeEnumId" value="PtidNationalTaxId"/>
                    <econdition field-name="partyId" operator="not-in" from="excludePartyIds"/>
                </entity-find>
            </if>
            <if condition="!partyIdentificationList"><then>
                <if condition="createUnknown"><then>
                    <service-call name="mantle.party.PartyServices.create#Organization" in-map="[organizationName:razonSocial, taxOrganizationName:razonSocial, roleTypeId:'Supplier']"
                                  out-map="context"/>
                    <service-call name="create#mantle.party.PartyIdentification" in-map="[partyId:partyId, partyIdTypeEnumId:'PtidNationalTaxId', idValue:idValue]"/>
                    <service-call name="create#mchile.dte.PartyGiro" in-map="[partyId:partyId, description:giro, isPrimary:'Y']"/>
                    <entity-find entity-name="moqui.basic.GeoAssocAndToDetail" list="comunaList">
                        <econdition field-name="geoId" value="CHL"/>
                        <econdition field-name="geoName" ignore-case="true" from="comuna"/>
                    </entity-find>
                    <set field="comunaId" from="comunaList.first?.geoId"/>
                    <service-call name="mantle.party.ContactServices.store#PartyContactInfo"
                                  in-map="[partyId:partyId, address1:direccion, postalContactMechPurposeId:'PostalTax', stateProvinceGeoId:comunaId, countryGeoId:'CHL', city:ciudad]"/>
                </then><else>
                    <return error="true" message="No existe organización con RUT ${idValue} definida en el sistema"/>
                </else></if>
            </then><else-if condition="partyIdentificationList.size() == 1">
                <set field="partyId" from="partyIdentificationList.first.partyId"/>
            </else-if><else>
                <return error="true" message="Más de un sujeto con mismo rut ${idValue}: partyIds ${partyIdentificationList.partyId})"/>
            </else></if>
        </actions>
    </service>

    <service verb="get" noun="Seed">
        <in-parameters>
            <parameter name="dteIsProduction" type="Boolean"/>
            <parameter name="boletaIsProduction" type="Boolean"/>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="estado"/>
            <parameter name="semilla"/>
        </out-parameters>
        <actions>
            <if condition="dteIsProduction == null">
                <service-call name="mchile.sii.DTEServices.check#ProductionEnvironment" out-map="context"/>
                <set field="dteIsProduction" from="dteIsProductionByPartyId[partyId]"/>
            </if>
            <if condition="dteIsProduction"><then>
                <service-call name="mchile.sii.DTECommServices.get#SeedProduction" out-map="context"/>
            </then><else>
                <service-call name="mchile.sii.DTECommServices.get#SeedCertification" out-map="context"/>
            </else></if>
            <script><![CDATA[
                seedReturn = getSeedResponse?.getSeedReturn
                bais = new ByteArrayInputStream(seedReturn.getBytes())
                groovy.util.Node seedReturn = new groovy.xml.XmlParser(false, false).parse(bais)
                bais.close()
                semilla = seedReturn.'SII:RESP_BODY'.SEMILLA.text()
                estado = seedReturn.'SII:RESP_HDR'.ESTADO.text()
            ]]></script>
        </actions>
    </service>

    <service verb="get" noun="SeedCertification" type="remote-xml-soap" location="https://maullin.sii.cl/DTEWS/CrSeed.jws?WSDL" method="getSeed" reattemptAmount="1" reattemptPauseMilliseconds="1500">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://palena.sii.cl/DTEWS/CrSeed.jws', methodNamespacePrefix:'m']" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getSeedResponse" type="Map">
                <parameter name="getSeedReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="get" noun="SeedProduction" type="remote-xml-soap" location="https://palena.sii.cl/DTEWS/CrSeed.jws?WSDL" method="getSeed" reattemptAmount="1" reattemptPauseMilliseconds="1500">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://palena.sii.cl/DTEWS/CrSeed.jws', methodNamespacePrefix:'m']" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getSeedResponse" type="Map">
                <parameter name="getSeedReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="get" noun="Token">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="dteIsProduction" type="Boolean"/>
            <parameter name="boletaIsProduction" type="Boolean"/>
            <parameter name="boleta" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token"/>
            <parameter name="estado"/>
            <parameter name="glosa"/>
        </out-parameters>
        <actions>
            <if condition="boleta"><then>
                <if condition="boletaIsProduction == null">
                    <service-call name="mchile.sii.DTEServices.check#ProductionEnvironment" out-map="context"/>
                    <set field="boletaIsProduction" from="boletaIsProductionByPartyId[partyId]"/>
                </if>
                <service-call name="mchile.sii.DTECommServices.get#SeedBoleta" in-map="context" out-map="seed"/>
            </then><else>
                <if condition="dteIsProduction == null">
                    <service-call name="mchile.sii.DTEServices.check#ProductionEnvironment" out-map="context"/>
                    <set field="dteIsProduction" from="dteIsProductionByPartyId[partyId]"/>
                </if>
                <service-call name="mchile.sii.DTECommServices.get#Seed" in-map="context" out-map="seed"/>
            </else></if>
            <if condition="seed.estado != '00'">
                <return error="true" message="Estado inválido al obtener semilla: ${seed.estado}"/>
            </if>
            <script><![CDATA[
                import groovy.xml.MarkupBuilder
                import cl.moit.dte.MoquiDTEUtils

                StringWriter xmlWriter = new StringWriter()
                MarkupBuilder xmlBuilder = new MarkupBuilder(xmlWriter)
                xmlBuilder.getToken(xmlns: 'http://www.sii.cl/SiiDte') {
                    item() {
                        Semilla(seed.semilla)
                    }
                }
                String xmlString = xmlWriter.toString()
                xmlWriter.close()
                org.w3c.dom.Document doc = MoquiDTEUtils.parseDocument(xmlString.getBytes())
                ec.context.putAll(ec.service.sync().name("mchile.sii.DTEServices.load#DTEConfig").parameter("partyId", partyId).call())
                byte[] signedXmlBytes = MoquiDTEUtils.sign(doc, "", pkey, certificate, "", "")
                String signedXml = new String(signedXmlBytes)
            ]]></script>
            <if condition="boleta"><then>
                <return error="true" message="No soportado obtener token boleta vía DTECommServices.get#Token"/>
            </then><else>
                <if condition="dteIsProduction"><then>
                    <service-call name="mchile.sii.DTECommServices.get#TokenProduction" in-map="[pszXml:signedXml]" out-map="context"/>
                </then><else>
                    <service-call name="mchile.sii.DTECommServices.get#TokenCertification" in-map="[pszXml:signedXml]" out-map="context"/>
                </else></if>
            </else></if>
            <script><![CDATA[
                tokenReturn = getTokenResponse?.getTokenReturn
                bais = new ByteArrayInputStream(tokenReturn.getBytes())
                groovy.util.Node seedReturn = new groovy.xml.XmlParser(false, false).parse(bais)
                bais.close()
                token = seedReturn.'SII:RESP_BODY'.TOKEN.text()
                estado = seedReturn.'SII:RESP_HDR'.ESTADO.text()
                glosa = seedReturn.'SII:RESP_HDR'.GLOSA.text()
            ]]></script>
        </actions>
    </service>

    <service verb="get" noun="TokenProduction" type="remote-xml-soap" location="https://palena.sii.cl/DTEWS/GetTokenFromSeed.jws" method="getToken" reattemptAmount="1" reattemptPauseMilliseconds="1500">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://palena.sii.cl/DTEWS/CrSeed.jws', methodNamespacePrefix:'m']" type="Map"/>
            <parameter name="pszXml" required="true" allow-html="any"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getTokenResponse" type="Map">
                <parameter name="getTokenReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="get" noun="TokenCertification" type="remote-xml-soap" location="https://maullin.sii.cl/DTEWS/GetTokenFromSeed.jws" method="getToken" reattemptAmount="1" reattemptPauseMilliseconds="1500">
        <in-parameters>
            <parameter name="xmlRpcServiceParams" default="[debug:false, mimeHeaders:[SOAPAction:''], methodNamespace:'https://palena.sii.cl/DTEWS/CrSeed.jws', methodNamespacePrefix:'m']" type="Map"/>
            <parameter name="pszXml" required="true" allow-html="any"/>
        </in-parameters>
        <out-parameters>
            <parameter name="getTokenResponse" type="Map">
                <parameter name="getTokenReturn"/>
            </parameter>
        </out-parameters>
    </service>

    <service verb="enviar" noun="AceptacionComercial">
        <description>Envío de respuesta con aprobación comercial a emisor DTE, chequeando que el usuario pueda representar al receptor.</description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fiscalTaxDocumentNumber" required="true" type="Integer"/>
        </in-parameters>
        <actions>
            <service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/>
            <entity-find entity-name="mchile.dte.FiscalTaxDocument" list="dteList">
                <econdition field-name="fiscalTaxDocumentId"/>
                <econdition field-name="fiscalTaxDocumentTypeEnumId"/>
                <econdition field-name="fiscalTaxDocumentNumber"/>
                <econdition field-name="receiverPartyId" operator="in" from="userOrgIds"/>
            </entity-find>
            <if condition="!dteList">
                <return error="true" message="No se encuentra el DTE especificado para aprobación"/>
            </if>
            <service-call name="mchile.sii.DteCommServices.genera#EnvioAceptacionComercial" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="genera" noun="EnvioAceptacionComercial" type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/generaEnvioAceptacionComercial.groovy">
        <description>Envío de respuesta con aprobación comercial a emisor DTE.</description>
        <in-parameters>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentTypeEnumId" required="true"/>
            <parameter name="fiscalTaxDocumentNumber" required="true" type="Integer"/>
        </in-parameters>
    </service>

    <service verb="get" noun="SeedBoleta">
        <in-parameters>
            <parameter name="boletaIsProduction" type="Boolean"/>
            <parameter name="partyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="semilla"/>
        </out-parameters>
        <actions>
            <if condition="boletaIsProduction == null">
                <if condition="partyId == null">
                    <return error="true" message="Need to specify boletaIsProduction or partyId"/>
                </if>
                <service-call name="mchile.sii.DTEServices.check#ProductionEnvironment" out-map="context"/>
                <set field="boletaIsProduction" from="boletaIsProductionByPartyId[partyId]"/>
            </if>
            <if condition="boletaIsProduction"><then>
                <service-call name="mchile.sii.DTECommServices.get#SeedBoletaProduction" out-map="context"/>
            </then><else>
                <service-call name="mchile.sii.DTECommServices.get#SeedBoletaCertification" out-map="context"/>
            </else></if>
        </actions>
    </service>

    <service verb="get" noun="SeedBoletaCertification" type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/getSeedBoleta.groovy">
        <in-parameters>
            <parameter name="urlSolicitud" required="true" default-value="https://apicert.sii.cl/recursos/v1/boleta.electronica.semilla"/>
            <parameter name="hostEnvio" required="true" default-value="apicert.sii.cl"/>
        </in-parameters>
        <out-parameters>
            <parameter name="semilla"/>
        </out-parameters>
    </service>

    <service verb="get" noun="SeedBoletaProduction" type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/getSeedBoleta.groovy">
        <in-parameters>
            <parameter name="urlSolicitud" required="true" default-value="https://api.sii.cl/recursos/v1/boleta.electronica.semilla"/>
            <parameter name="hostEnvio" required="true" default-value="api.sii.cl"/>
        </in-parameters>
        <out-parameters>
            <parameter name="semilla"/>
        </out-parameters>
    </service>

    <service verb="get" noun="TokenBoleta">
        <in-parameters>
            <parameter name="boletaIsProduction" type="Boolean"/>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token"/>
        </out-parameters>
        <actions>
            <if condition="boletaIsProduction == null">
                <service-call name="mchile.sii.DTEServices.check#ProductionEnvironment" out-map="context"/>
                <set field="boletaIsProduction" from="boletaIsProductionByPartyId[partyId]"/>
            </if>
            <if condition="boletaIsProduction"><then>
                <set field="urlSolicitud" value="https://api.sii.cl/recursos/v1/boleta.electronica.token"/>
                <service-call name="mchile.sii.DTECommServices.get#TokenBoletaInternal" out-map="context" in-map="[partyId:partyId, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]"/>
            </then><else>
                <set field="urlSolicitud" value="https://apicert.sii.cl/recursos/v1/boleta.electronica.token"/>
                <service-call name="mchile.sii.DTECommServices.get#TokenBoletaInternal" out-map="context" in-map="[partyId:partyId, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]"/>
            </else></if>
        </actions>
    </service>

    <service verb="get" noun="TokenBoletaInternal" type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/getTokenBoleta.groovy">
        <in-parameters>
            <parameter name="urlSolicitud" required="true"/>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token"/>
        </out-parameters>
    </service>

    <service verb="get" noun="EstadoEnvioBoleta" type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/getEstadoEnvioBoleta.groovy">
        <description>Verificacion del estado de un EnvioBoleta</description>
        <in-parameters>
            <parameter name="rutCompany" required="true"/>
            <parameter name="trackId" required="true"/>
            <parameter name="token" required="true"/>
            <parameter name="urlSolicitud" required="true"/>
            <parameter name="hostEnvio" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="respSII"/>
        </out-parameters>
    </service>

    <service verb="get" noun="EstadoEnvioBoletaCertificacion">
        <in-parameters>
            <parameter name="rutCompany" required="true"/>
            <parameter name="trackId" required="true"/>
            <parameter name="token" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="respSII"/>
        </out-parameters>
        <actions>
            <set field="urlSolicitud"/>
            <set field="hostEnvio"/>
            <script>
            urlSolicitud = "https://apicert.sii.cl/recursos/v1/boleta.electronica.envio";
            hostEnvio = "apicert.sii.cl";
            </script>
            <service-call name="mchile.sii.DTECommServices.get#EstadoEnvioBoleta" out-map="respuesta"
                          in-map="[rutCompany:rutCompany, trackId:trackId, token:token, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]"/>
            <set field="respSII" from="respuesta.respSII"/>
        </actions>
    </service>

    <service verb="get" noun="EstadoEnvioBoletaProduccion">
        <in-parameters>
            <parameter name="rutCompany" required="true"/>
            <parameter name="trackId" required="true"/>
            <parameter name="token" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="respSII"/>
        </out-parameters>
        <actions>
            <set field="urlSolicitud"/>
            <set field="hostEnvio"/>
            <script>
                urlSolicitud = "https://api.sii.cl/recursos/v1/boleta.electronica.envio";
                hostEnvio = "api.sii.cl";
            </script>
            <service-call name="mchile.sii.DTECommServices.get#EstadoEnvioBoleta" out-map="respuesta"
                          in-map="[rutCompany:rutCompany, trackId:trackId, token:token, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]"/>
            <set field="respSII" from="respuesta.respSII"/>
        </actions>
    </service>

    <service verb="get" noun="EstadoBoleta" type="script" location="component://MoquiChile/service/mchile/sii/DTECommServices/getEstadoBoleta.groovy">
        <description>Verificacion del estado de una Boleta</description>
        <in-parameters>
            <parameter name="rutCompany" required="true"/>
            <parameter name="rutReceptor" required="true"/>
            <parameter name="monto" required="true"/>
            <parameter name="folio" required="true"/>
            <parameter name="tipo" required="true"/>
            <parameter name="fechaEmision" required="true"/>
            <parameter name="token" required="true"/>
            <parameter name="urlSolicitud" required="true"/>
            <parameter name="hostEnvio" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="respSII"/>
        </out-parameters>
    </service>

    <service verb="get" noun="EstadoBoletaCertificacion">
        <in-parameters>
            <parameter name="rutCompany" required="true"/>
            <parameter name="rutReceptor" required="true"/>
            <parameter name="monto" required="true"/>
            <parameter name="folio" required="true"/>
            <parameter name="tipo" required="true"/>
            <parameter name="fechaEmision" required="true"/>
            <parameter name="token" required="true"/>
            <parameter name="urlSolicitud" default-value="https://apicert.sii.cl/recursos/v1/boleta.electronica"/>
            <parameter name="hostEnvio"  default-value="apicert.sii.cl"/>
        </in-parameters>
        <out-parameters>
            <parameter name="respSII"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.sii.DTECommServices.get#EstadoBoleta" out-map="respuesta"
                          in-map="[rutCompany:rutCompany, rutReceptor:rutReceptor, monto:monto, folio:folio, tipo:tipo, fechaEmision:fechaEmision, token:token, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]"/>
            <set field="respSII" from="respuesta.respSII"/>
        </actions>
    </service>

    <service verb="get" noun="EstadoBoletaProduccion">
        <in-parameters>
            <parameter name="rutCompany" required="true"/>
            <parameter name="rutReceptor" required="true"/>
            <parameter name="monto" required="true"/>
            <parameter name="folio" required="true"/>
            <parameter name="tipo" required="true"/>
            <parameter name="fechaEmision" required="true"/>
            <parameter name="token" required="true"/>
            <parameter name="urlSolicitud" default-value="https://api.sii.cl/recursos/v1/boleta.electronica"/>
            <parameter name="hostEnvio"  default-value="api.sii.cl"/>
        </in-parameters>
        <out-parameters>
            <parameter name="respSII"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.sii.DTECommServices.get#EstadoBoleta" out-map="respuesta"
                          in-map="[rutCompany:rutCompany, rutReceptor:rutReceptor, monto:monto, folio:folio, tipo:tipo, fechaEmision:fechaEmision, token:token, urlSolicitud:urlSolicitud, hostEnvio:hostEnvio]"/>
            <set field="respSII" from="respuesta.respSII"/>
        </actions>
    </service>

    <service verb="reenable" noun="EnvioFailedToProcess">
        <in-parameters>
            <parameter name="envioId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList" for-update="true">
                <econdition field-name="envioId"/>
                <econdition field-name="statusId" value="Ftde-ProcessFailed"/>
            </entity-find>
            <if condition="!envioList">
                <return error="true" message="No se encuentra envío con fallas de procesamiento ${envioId}"/>
            </if>
            <set field="envio" from="envioList.first"/>
            <set field="envio.statusId" value="Ftde-Received"/>
            <entity-update value-field="envio"/>
        </actions>
    </service>

    <service verb="reenable" noun="EnvioFailedToSend">
        <in-parameters>
            <parameter name="envioId" required="true"/>
            <parameter name="toStatusId" default-value="Ftde-Created"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mchile.dte.DteEnvio" list="envioList" for-update="true">
                <econdition field-name="envioId"/>
                <econdition field-name="statusId" operator="in" value="Ftde-Failed,Ftde-FailedAtReceiver"/>
            </entity-find>
            <if condition="!envioList">
                <return error="true" message="No se encuentra envío con fallas de procesamiento ${envioId}"/>
            </if>
            <set field="envio" from="envioList.first"/>
            <set field="envio.statusId" from="toStatusId"/>
            <entity-update value-field="envio"/>
        </actions>
    </service>

</services>
