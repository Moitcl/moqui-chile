<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="genera" noun="PDFPrueba">
        <description>Genera archivo PDF de Factura (envio).</description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="giro" from="giroEmisor"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfBoleta" from="templatePdfBoleta"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>


            <if condition="boleta">
                <set field="template" from="templatePdfBoleta"/>
            </if>

            <script>
                import java.io.File
                import java.io.FileInputStream
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate

                import cl.nic.dte.net.ConexionSii
                import cl.nic.dte.util.Utilities
                import cl.sii.siiDte.RECEPCIONDTEDocument

                dte = "/home/cherrera/git/moqui-moit/moqui-framework/runtime/component/MoquiChile/DTE/DTE33-93.xml"
                pdf = "/home/cherrera/DTE33-93.pdf"
                pdfCedible = "/home/cherrera/DTE33-93-cedible.pdf"
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdf), new FileOutputStream(pdf))
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdfCedible), new FileOutputStream(pdfCedible))

                dte = "/home/cherrera/git/moqui-moit/moqui-framework/runtime/component/MoquiChile/DTE/DTE33-94.xml"
                pdf = "/home/cherrera/DTE33-94.pdf"
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdf), new FileOutputStream(pdf))
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdfCedible), new FileOutputStream(pdfCedible))

                dte = "/home/cherrera/git/moqui-moit/moqui-framework/runtime/component/MoquiChile/DTE/DTE33-95.xml"
                pdf = "/home/cherrera/DTE33-95.pdf"
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdf), new FileOutputStream(pdf))
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdfCedible), new FileOutputStream(pdfCedible))

            </script>
        </actions>
    </service>

    <service verb="genera" noun="LibroVentas">
        <description>
            Generaci√≥n de libro de Ventas
        </description>
        <in-parameters>
            <parameter name="tipo" default="'VENTA'"/><!-- Compra o venta -->
            <!--parameter name="tipoLibro" default="'ESPECIAL'"/--><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2020-12'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Calculo de valores tomando datos de caso de prueba -->

            <set field="qtyItem1Caso1" value="118" type="Long"/>
            <set field="prcItem1Caso1" value="601" type="Long"/>
            <set field="qtyItem2Caso1" value="51" type="Long"/>
            <set field="prcItem2Caso1" value="930" type="Long"/>
            <set field="refCaso1" value="CASO 1965337-1"/>

            <set field="qtyItem1Caso2" value="169" type="Long"/>
            <set field="prcItem1Caso2" value="1431" type="Long"/>
            <set field="descItem1Caso2" value="3" type="Long"/>
            <set field="qtyItem2Caso2" value="93" type="Long"/>
            <set field="prcItem2Caso2" value="497" type="Long"/>
            <set field="descItem2Caso2" value="3" type="Long"/>
            <set field="refCaso2" value="CASO 1965337-2"/>

            <set field="qtyItem1Caso3" value="23" type="Long"/>
            <set field="prcItem1Caso3" value="1239" type="Long"/>
            <set field="qtyItem2Caso3" value="138" type="Long"/>
            <set field="prcItem2Caso3" value="2911" type="Long"/>
            <set field="qtyItem3Caso3" value="1" type="Long"/>
            <set field="prcItem3Caso3" value="34631" type="Long"/>
            <set field="refCaso3" value="CASO 1965337-3"/>

            <set field="qtyItem1Caso4" value="39" type="Long"/>
            <set field="prcItem1Caso4" value="1140" type="Long"/>
            <set field="qtyItem2Caso4" value="17" type="Long"/>
            <set field="prcItem2Caso4" value="678" type="Long"/>
            <set field="qtyItem3Caso4" value="2" type="Long"/>
            <set field="prcItem3Caso4" value="6759" type="Long"/>
            <set field="descGlobalAfectos" value="4" type="Long"/>
            <set field="refCaso4" value="CASO 1965337-4"/>

            <!-- Caso 5 no usa datos de otros casos -->

            <!-- Caso 6: 2 itemes para devolver. Tomar precios de caso 2 -->
            <set field="qtyItem1Caso6" value="62" type="Long"/>
            <set field="prcItem1Caso6" value="1431" type="Long"/><!-- usa el precio sin descuento caso 2 -->
            <set field="qtyItem2Caso6" value="63" type="Long"/>
            <set field="prcItem2Caso6" value="497" type="Long"/><!-- usa el precio sin descuento caso 2 -->
            <set field="refCaso6" value="CASO 1965337-6"/>

            <!-- Caso 7 usa datos de caso 3 -->

            <!-- Caso 8 no usa nada. Anula Caso 5 -->

            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="plantillaS" from="templateLibro"/>
            <set field="plantillaS" from="'/home/cherrera/moit/cowork/moqui-framework/runtime/component/moquichile/DTE/TEMPLATES/plantilla_libro.xml'"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>



            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String" value="1"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal
                import java.text.SimpleDateFormat
                import java.util.ArrayList
                import java.util.Properties
                import java.util.Iterator
                import java.util.Map
                import java.util.Map.Entry
                import java.nio.file.Path
                import org.apache.xmlbeans.XmlCursor
                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer

                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate

                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil

                import cl.helpcom.recursos.Validador
                //import cl.helpcom.recursos.ComunicadorAppClienteTXT
                import cl.helpcom.dte.util.FirmaLibro
                import cl.helpcom.dte.util.AgregarCamposLibros
                import cl.helpcom.recursos.LectorFichero

                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenSegmento
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Caratula
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.IVANoRec
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.OtrosImp
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp
                import cl.sii.siiDte.FechaType

                LectorFichero lectorFichero = new LectorFichero()
                String resultadoSinFirma = "/tmp/LBR-temp.xml"

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm")
                idS  = "ID"+dateFormat.format(new Date())

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                //ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT()
                Validador val = new Validador()

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                // Lee y llena los campos  => Caratula se debe armar con par√°metros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C")
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;())
                arrayLineasCaratulas.get(0).add(rutEmisor)
                arrayLineasCaratulas.get(0).add(rutEnviador)
                // Debe corresponder a las fechas del set de pruebas, pero si hay que reintentar se empieza a bajar la fecha
                arrayLineasCaratulas.get(0).add('2020-10')
                arrayLineasCaratulas.get(0).add(fechaResolucionSii)
                arrayLineasCaratulas.get(0).add(numeroResolucionSii)
                arrayLineasCaratulas.get(0).add(tipo)
                arrayLineasCaratulas.get(0).add(tipoLibro)
                arrayLineasCaratulas.get(0).add(tipoEnvio)

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para env√≠o ESPECIAL, y 1 en certificacion
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd")

                /* XML FACTURA */
                LibroCompraVentaDocument libCV

                /* LibroCV */
                libCV = LibroCompraVentaDocument.Factory.parse(new FileInputStream(plantillaS))

                // libCV = LibroCompraVentaDocument.Factory.newInstance()
                LibroCompraVenta libroCompraVenta = libCV.getLibroCompraVenta()
                libCV.getLibroCompraVenta().setVersion(new BigDecimal("1.0"))
                EnvioLibro envioLibro = libroCompraVenta.addNewEnvioLibro()

                // ID de libro se deber√≠a calcular
                libCV.getLibroCompraVenta().getEnvioLibro().setID(idS)
                //libCV.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                XmlCursor cursor = libCV.newCursor()
                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo()

                AgregarCamposLibros addCampos = new AgregarCamposLibros()
                // Agregar CARATULA
                addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas)

                // Factura Electronica (33)
                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(33)
                totalesPeriodo.setTotDoc(4)
                totalMontoExento = (qtyItem3Caso3 * prcItem3Caso3) + (qtyItem3Caso4 * prcItem3Caso4)
                totalesPeriodo.setTotMntExe(totalMontoExento)

                totalNetoCaso1 = (qtyItem1Caso1 * prcItem1Caso1) + (qtyItem2Caso1 * prcItem2Caso1)

                // Se aplica descuento en Caso 2
                descuento = (qtyItem1Caso2*prcItem1Caso2) * descItem1Caso2 / 100
                totalItem1Caso2 = Math.round(qtyItem1Caso2*prcItem1Caso2)-Math.round(descuento)
                descuento = (qtyItem2Caso2*prcItem2Caso2) * descItem2Caso2 / 100
                totalItem2Caso2 = Math.round(qtyItem2Caso2*prcItem2Caso2)-Math.round(descuento)
                totalNetoCaso2 = totalItem1Caso2 + totalItem2Caso2

                // Caso 3
                totalNetoCaso3 = (qtyItem1Caso3 * prcItem1Caso3) + (qtyItem2Caso3 * prcItem2Caso3)

                // Caso 4
                // Se aplica descuento global items afectos
                descuento = (qtyItem1Caso4*prcItem1Caso4) * descGlobalAfectos / 100
                totalItem1Caso4 = Math.round(qtyItem1Caso4*prcItem1Caso4)-Math.round(descuento)
                logger.warn("Caso 4: " + totalItem1Caso4)
                descuento = (qtyItem2Caso4*prcItem2Caso4) * descGlobalAfectos / 100
                totalItem2Caso4 = Math.round(qtyItem2Caso4*prcItem2Caso4)-Math.round(descuento)
                logger.warn("Caso 4: " + totalItem2Caso4)
                totalNetoCaso4 = totalItem1Caso4 + totalItem2Caso4

                totalMontoNeto = totalNetoCaso1 + totalNetoCaso2 + totalNetoCaso3 + totalNetoCaso4
                totalMontoIva = Math.round(totalMontoNeto * 0.19)

                totalesPeriodo.setTotMntNeto(totalMontoNeto)
                totalesPeriodo.setTotMntIVA(totalMontoIva)
                totalesPeriodo.setTotMntTotal(totalMontoExento + totalMontoNeto + totalMontoIva)

                // Nota de Debito Electronica (56)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(56)
                totalesPeriodo.setTotDoc(1)
                totalesPeriodo.setTotMntExe(0)
                totalesPeriodo.setTotMntNeto(0)
                totalesPeriodo.setTotMntIVA(0)
                totalesPeriodo.setTotMntTotal(0)

                // Nota de Credito Electr√≥nica (61)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(61)
                totalesPeriodo.setTotDoc(3)

                // Caso 6 Total de NC por devolucion mercaderias caso 2
                descuento = (qtyItem1Caso6*prcItem1Caso6) * descItem1Caso2 / 100
                totalItem1Caso6 = Math.round(qtyItem1Caso6*prcItem1Caso6)-Math.round(descuento)
                logger.warn("qtyitem1Caso6:"+qtyItem1Caso6+", prcItem1Caso6: "+prcItem1Caso6+", descuento: " +descuento)
                logger.warn("Total item 1 Caso6: "+totalItem1Caso6)
                descuento = (qtyItem2Caso6*prcItem2Caso6) * descItem2Caso2 / 100
                totalItem2Caso6 = Math.round(qtyItem2Caso6*prcItem2Caso6)-Math.round(descuento)
                logger.warn("qtyitem2Caso6:"+qtyItem2Caso6+", prcItem2Caso6: "+prcItem2Caso6+", descuento: " +descuento)
                logger.warn("Total item 2 Caso6: "+totalItem2Caso6)
                totalNetoCaso6 = totalItem1Caso6 + totalItem2Caso6

                // Caso 7 NC Caso Total de NC que anula caso 3
                totalItem1Caso7 = Math.round(qtyItem1Caso3*prcItem1Caso3)
                totalItem2Caso7 = Math.round(qtyItem2Caso3*prcItem2Caso3)
                totalNetoCaso7 = totalItem1Caso7 + totalItem2Caso7
                logger.warn("Total neto caso 7: "+totalNetoCaso7)

                totalMontoNeto = totalNetoCaso6 + totalNetoCaso7
                totalMontoIva = Math.round(totalMontoNeto * 0.19)

                totalMontoExento = (qtyItem3Caso3 * prcItem3Caso3)
                logger.warn("61:")
                logger.warn("Total caso 5: " + totalNetoCaso5)
                logger.warn("Total caso 6: " + totalNetoCaso6)
                logger.warn("Total caso 7: " + totalNetoCaso7)

                logger.warn("Total monto neto: " + totalMontoNeto)
                logger.warn("Total monto iva: " + totalMontoIva)
                logger.warn("Total monto exento: " + totalMontoExento)
                totalesPeriodo.setTotMntExe(totalMontoExento)
                totalesPeriodo.setTotMntNeto(totalMontoNeto)
                totalesPeriodo.setTotMntIVA(totalMontoIva)
                totalesPeriodo.setTotMntTotal(totalMontoExento + totalMontoNeto + totalMontoIva)

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3))
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml"

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                //opts = new XmlOptions()
                opts.setSavePrettyPrint()
                //opts.setSavePrettyPrintIndent(0)
                //opts.setCharacterEncoding("ISO-8859-1")
                libCV = LibroCompraVentaDocument.Factory.parse(libCV.newInputStream(opts), (opts))

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma)
                ByteArrayOutputStream out = new ByteArrayOutputStream()
                //libCV.save(archivoEnvio, opts)

                libCV.save(new File(resultS + "LIBCV" + idS + "-sinfirma.xml"), opts)
                libCV.save(out, opts)

                FirmaLibro firmaLibro = new FirmaLibro()

                String mensaje=firmaLibro.firmarLibro(new ByteArrayInputStream(certData.decodeBase64()), passCert, resultS + "LIBCV" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio)

                logger.warn("Mensaje: " + mensaje)

            </script>
            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <!--set field="periodo" from="arrayLineasCaratulas.get(0).get(2)"/>
            <set field="tipoLibro" from="arrayLineasCaratulas.get(0).get(5)"/-->
        </actions>
    </service>


    <service verb="genera" noun="LibroCompras">
        <description>
            Generaci√≥n de libro de Compra/Venta
        </description>
        <in-parameters>
            <parameter name="tipo" default="'COMPRA'"/><!-- Compra o venta -->
            <!--parameter name="tipoLibro" default="'MENSUAL'"/--><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="2"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Variables de set de prueba
            Ejemplo

            SET LIBRO DE COMPRAS - NUMERO DE ATENCION: 1965339

            ==========================================================================
            TIPO DOCUMENTO				        FOLIO       OBSERVACIONES                        	MONTO EXENTO	MONTO AFECTO
            ==========================================================================
            FACTURA					234        FACTURA DEL GIRO CON DERECHO A CREDITO		48922

            FACTURA ELECTRONICA 			 	32	   FACTURA DEL GIRO CON DERECHO A CREDITO		10390	10803

            FACTURA					781	   FACTURA CON IVA USO COMUN  				30118

            NOTA DE CREDITO				451	   NOTA DE CREDITO POR DESCUENTO A FACTURA 234  	2900

            FACTURA ELECTRONICA			 	67	   ENTREGA GRATUITA DEL PROVEEDOR 			11849

            FACTURA DE COMPRA ELECTRONICA		  	9	   COMPRA CON RETENCION TOTAL DEL IVA			10488

            NOTA DE CREDITO				211	   NOTA DE CREDITO POR DESCUENTO FACTURA ELECTRONICA 32   8431

            -->
            <set field="dte1" value="30"/>
            <set field="dte1folio" value="234"/>
            <set field="dte1MontoAfecto" value="48922" type="Long"/>
            <set field="dte2" value="33"/>
            <set field="dte2folio" value="32"/>
            <set field="dte2MontoExento" value="10390" type="Long"/>
            <set field="dte2MontoAfecto" value="10803" type="Long"/>
            <set field="dte3" value="30"/>
            <set field="dte3folio" value="781"/>
            <set field="dte3MontoAfecto" value="30118" type="Long"/>
            <set field="dte4" value="60"/><!-- Referente a dte 1 -->
            <set field="dte4folio" value="451"/>
            <set field="dte4MontoAfecto" value="2900" type="Long"/>
            <set field="dte5" value="33"/>
            <set field="dte5folio" value="67"/>
            <set field="dte5MontoAfecto" value="11849" type="Long"/>
            <set field="dte6" value="46"/>
            <set field="dte6folio" value="9"/>
            <set field="dte6MontoAfecto" value="10488" type="Long"/>
            <set field="dte7" value="60"/><!-- Referente a folio dte2 -->
            <set field="dte7folio" value="211"/>
            <set field="dte7MontoAfecto" value="8431" type="Long"/>

            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="plantillaS" from="templateLibro"/>
            <set field="plantillaS" from="'/home/cherrera/moit/cowork/moqui-framework/runtime/component/moquichile/DTE/TEMPLATES/plantilla_libro.xml'"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!-- Folio notificacion es 2 en caso de certificacion -->
            <set field="folioNotificacion" type="String" value="2"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal
                import java.text.SimpleDateFormat
                import java.util.ArrayList
                import java.util.Properties
                import java.util.Iterator
                import java.util.Map
                import java.util.Map.Entry
                import java.nio.file.Path
                import org.apache.xmlbeans.XmlCursor
                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer

                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate

                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil

                //import cl.helpcom.recursos.Validador
                //import cl.helpcom.recursos.ComunicadorAppClienteTXT
                import cl.helpcom.dte.util.FirmaLibro
                import cl.helpcom.dte.util.AgregarCamposLibros
                import cl.helpcom.recursos.LectorFichero

                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenSegmento
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Caratula
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.IVANoRec
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.OtrosImp
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp
                import cl.sii.siiDte.FechaType

                X509Certificate cert
                PrivateKey key

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                LectorFichero lectorFichero = new LectorFichero()
                String resultadoSinFirma = "/tmp/LBR-temp.xml"

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm")
                idS  = "ID"+dateFormat.format(new Date())

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                //ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT()
                //Validador val = new Validador()

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                // Lee y llena los campos  => Caratula se debe armar con par√°metros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C")
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;())
                logger.warn("Emisor:" +rutEmisor)
                logger.warn("Enviador:" +rutEnviador)
                arrayLineasCaratulas.get(0).add(rutEmisor)
                arrayLineasCaratulas.get(0).add(rutEnviador)
                arrayLineasCaratulas.get(0).add('2020-09');// Se puede partir con cualquier fecha desde 1980. Ojo con las fechas de los detalles, deben corresponder al mismo periodo.
                arrayLineasCaratulas.get(0).add(fechaResolucionSii)
                arrayLineasCaratulas.get(0).add(numeroResolucionSii)
                arrayLineasCaratulas.get(0).add(tipo)
                arrayLineasCaratulas.get(0).add(tipoLibro)
                arrayLineasCaratulas.get(0).add(tipoEnvio)

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para env√≠o ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd")

                /* XML FACTURA */
                LibroCompraVentaDocument libCV

                /* LibroCV */
                libCV = LibroCompraVentaDocument.Factory.parse(new FileInputStream(plantillaS))

                // libCV = LibroCompraVentaDocument.Factory.newInstance()
                LibroCompraVenta libroCompraVenta = libCV.getLibroCompraVenta()
                libCV.getLibroCompraVenta().setVersion(new BigDecimal("1.0"))
                EnvioLibro envioLibro = libroCompraVenta.addNewEnvioLibro()

                // ID de libro se deber√≠a calcular
                libCV.getLibroCompraVenta().getEnvioLibro().setID(idS)
                //libCV.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                XmlCursor cursor = libCV.newCursor()
                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo()

                AgregarCamposLibros addCampos = new AgregarCamposLibros()
                // Agregar CARATULA
                addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas)

                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                // Factura (30)
                totalesPeriodo.setTpoDoc(30)
                totalesPeriodo.setTotDoc(2)
                totalesPeriodo.setTotMntExe(0)
                totalNeto = dte1MontoAfecto + dte3MontoAfecto
                totalesPeriodo.setTotMntNeto(totalNeto)
                //totalIVA = Math.round(totalNeto * 0.19)
                totalIVA = Math.round(dte1MontoAfecto * 0.19)
                totalIVAUsoComun = Math.round(dte3MontoAfecto * 0.19)
                totalesPeriodo.setTotMntIVA(totalIVA)
                totalesPeriodo.setTotOpIVAUsoComun(1)
                totalesPeriodo.setTotIVAUsoComun(totalIVAUsoComun)
                totalesPeriodo.setFctProp(0.6)
                totalCreditoIVAUsoComun = Math.round(totalIVAUsoComun * 0.6)
                totalesPeriodo.setTotCredIVAUsoComun(totalCreditoIVAUsoComun)
                totalMontoTotal = totalNeto + totalIVA + totalIVAUsoComun
                totalesPeriodo.setTotMntTotal(totalMontoTotal)


                // Factura Electronica (33)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(33)
                totalesPeriodo.setTotDoc(2)
                totalMontoExento = dte2MontoExento

                totalesPeriodo.setTotMntExe(Long.valueOf(dte2MontoExento))
                totalMontoAfecto = dte2MontoAfecto + dte5MontoAfecto
                totalesPeriodo.setTotMntNeto(totalMontoAfecto)
                ivaNoRec = Math.round(dte5MontoAfecto*0.19)
                totalMontoIVA = Math.round(totalMontoAfecto * 0.19) - ivaNoRec
                totalesPeriodo.setTotMntIVA(totalMontoIVA)
                // IVA No Recuperable por entrega gratuita
                totIvaNoRec = new ArrayList&lt;TotIVANoRec&gt;()
                oit = TotIVANoRec.Factory.newInstance()
                oit.setCodIVANoRec(4)
                oit.setTotOpIVANoRec(1)
                oit.setTotMntIVANoRec(ivaNoRec)
                totIvaNoRec.add(oit)
                arrayTot = new TotIVANoRec[totIvaNoRec.size()]
                totIvaNoRec.toArray(arrayTot)
                totalesPeriodo.setTotIVANoRecArray(arrayTot)
                // Manera correcta de calcular monto total
                montoTotal = totalMontoExento + totalMontoAfecto + totalMontoIVA + ivaNoRec
                totalesPeriodo.setTotMntTotal(montoTotal)

                // Factura Exenta Electronica (34)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                //totalesPeriodo.setTpoDoc(34)
                //totalesPeriodo.setTotDoc(1)
                //totalesPeriodo.setTotMntExe(29744)
                //totalesPeriodo.setTotMntNeto(0)
                //totalesPeriodo.setTotMntIVA(0)
                //totalesPeriodo.setTotMntTotal(29744)

                // Factura Exenta (32)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                //totalesPeriodo.setTpoDoc(32)
                //totalesPeriodo.setTotDoc(1)
                //totalesPeriodo.setTotMntExe(29628)
                //totalesPeriodo.setTotMntNeto(0)
                //totalesPeriodo.setTotMntIVA(0)
                //totalesPeriodo.setTotMntTotal(29628)

                // Nota de Credito (60)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(60)
                totalesPeriodo.setTotDoc(2)
                totalesPeriodo.setTotMntExe(0)
                totalMontoAfecto = dte4MontoAfecto + dte7MontoAfecto
                totalesPeriodo.setTotMntNeto(totalMontoAfecto)
                totalMontoIVA = Math.round(totalMontoAfecto * 0.19)
                totalesPeriodo.setTotMntIVA(totalMontoIVA)
                montoTotal = totalMontoAfecto + totalMontoIVA
                totalesPeriodo.setTotMntTotal(montoTotal)
                logger.warn("Total nota de credito")
                logger.warn("Monto neto: "+totalMontoAfecto)
                logger.warn("Monto IVA: "+totalMontoIVA)
                logger.warn("Monto Total: "+montoTotal)


                // Nota de Credito Electronica (61)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                //totalesPeriodo.setTpoDoc(61)
                //totalesPeriodo.setTotDoc(1)
                //totalesPeriodo.setTotMntExe(8649)
                //totalesPeriodo.setTotMntNeto(5990)
                //totalesPeriodo.setTotMntIVA(0)
                // IVA No Recuperable
                //totIvaNoRec = new ArrayList&lt;TotIVANoRec&gt;()
                //oit = TotIVANoRec.Factory.newInstance()
                //oit.setCodIVANoRec(1)
                //oit.setTotOpIVANoRec(1)
                //oit.setTotMntIVANoRec(1138)
                //totIvaNoRec.add(oit)
                //arrayTot = new TotIVANoRec[totIvaNoRec.size()]
                //totIvaNoRec.toArray(arrayTot)
                //totalesPeriodo.setTotIVANoRecArray(arrayTot)
                //totalesPeriodo.setTotMntTotal(15777)

                // Nota de Debito Electronica (56)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                //totalesPeriodo.setTpoDoc(56)
                //totalesPeriodo.setTotDoc(1)
                //totalesPeriodo.setTotMntExe(3967)
                //totalesPeriodo.setTotMntNeto(0)
                //totalesPeriodo.setTotMntIVA(0)
                //totalesPeriodo.setTotMntTotal(3967)

                // Factura de Compra Electronica (46)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(46)
                totalesPeriodo.setTotDoc(1)
                totalesPeriodo.setTotMntExe(0)
                totalesPeriodo.setTotMntNeto(dte6MontoAfecto)
                // Compra con retencion total IVA
                totalesPeriodo.setTotOpIVARetTotal(1)
                totalMontoIVA = Math.round(dte6MontoAfecto * 0.19)
                totalesPeriodo.setTotMntIVA(totalMontoIVA)
                ArrayList&lt;TotOtrosImp&gt; totOtrosImp = new ArrayList&lt;TotOtrosImp&gt;()
                toimp = TotOtrosImp.Factory.newInstance()
                toimp.setCodImp(15)
                toimp.setTotMntImp(totalMontoIVA)
                totOtrosImp.add(toimp)
                arrayTot = new TotOtrosImp[totOtrosImp.size()]
                totOtrosImp.toArray(arrayTot)
                totalesPeriodo.setTotOtrosImpArray(arrayTot)
                // PRUEBA
                //montoTotal = dte6MontoAfecto + totalMontoIVA
                montoTotal = dte6MontoAfecto
                totalesPeriodo.setTotMntTotal(montoTotal)
                //totalesPeriodo.setTotIVARetTotal(totalMontoIVA)
                totalesPeriodo.setTotIVARetTotal(totalMontoIVA)

                // **************************************************
                // Factura 234
                // Detalles
                Detalle detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(30)
                detalle.setNroDoc(Long.valueOf(dte1folio))
                detalle.setTasaImp(19)
                //detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2020-09-21"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(dte1MontoAfecto)
                detalle.setMntIVA(Math.round(dte1MontoAfecto * 0.19))
                detalle.setMntTotal(dte1MontoAfecto + Math.round(dte1MontoAfecto * 0.19))

                // Factura Electr√≥nica 32
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(33)
                detalle.setNroDoc(Long.valueOf(dte2folio))
                detalle.setTasaImp(19)
                //detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2020-09-10"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(dte2MontoExento)
                detalle.setMntNeto(dte2MontoAfecto)
                detalle.setMntIVA(Math.round(dte2MontoAfecto * 0.19))
                detalle.setMntTotal(dte2MontoExento + dte2MontoAfecto + Math.round(dte2MontoAfecto * 0.19))

                // Factura 781
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(30)
                detalle.setNroDoc(Long.valueOf(dte3folio))
                detalle.setTasaImp(19)
                detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2020-09-21"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(dte3MontoAfecto)
                detalle.setIVAUsoComun(Math.round(dte3MontoAfecto * 0.19))
                detalle.setMntTotal(dte3MontoAfecto + Math.round(dte3MontoAfecto * 0.19))


                // Nota de Cr√©dito 451
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(60)
                detalle.setNroDoc(Long.valueOf(dte4folio))
                detalle.setTasaImp(19)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2020-09-29"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(dte4MontoAfecto)
                detalle.setMntIVA(Math.round(dte4MontoAfecto * 0.19))
                montoTotal = dte4MontoAfecto + Math.round(dte4MontoAfecto * 0.19)
                detalle.setMntTotal(montoTotal)
                logger.warn("NC 451")
                logger.warn("Monto Neto: " + dte4MontoAfecto)
                logger.warn("Monto IVA: " + Math.round(dte4MontoAfecto * 0.19))
                logger.warn("Monto Total: " + montoTotal)

                // Factura Electronica 67
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(33)
                detalle.setNroDoc(Long.valueOf(dte5folio))
                detalle.setTasaImp(19)
                detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2020-09-10"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(dte5MontoAfecto)
                ivaNoRec = new ArrayList&lt;IVANoRec&gt;()
                oi = IVANoRec.Factory.newInstance()
                oi.setCodIVANoRec(new BigInteger(4))
                totalMontoIVA = Math.round(dte5MontoAfecto * 0.19)
                oi.setMntIVANoRec(totalMontoIVA)
                ivaNoRec.add(oi)
                array = new IVANoRec[ivaNoRec.size()]
                ivaNoRec.toArray(array)
                detalle.setIVANoRecArray(array)
                // Manera correcta de calcular monto total
                montoTotal = dte5MontoAfecto + totalMontoIVA
                //montoTotal = dte5MontoAfecto
                detalle.setMntTotal(montoTotal)

                // Factura de Compra Electr√≥nica 9
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(46)
                detalle.setNroDoc(Long.valueOf(dte6folio))
                detalle.setTasaImp(19)
                //detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2020-09-10"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(dte6MontoAfecto)
                montoIVA = Math.round(dte6MontoAfecto * 0.19)
                detalle.setMntIVA(montoIVA)
                ArrayList&lt;OtrosImp&gt; otrosImp = new ArrayList&lt;OtrosImp&gt;()
                oimp = OtrosImp.Factory.newInstance()
                oimp.setCodImp(15)
                oimp.setTasaImp(19)
                oimp.setMntImp(montoIVA)
                otrosImp.add(oimp)
                array = new OtrosImp[otrosImp.size()]
                otrosImp.toArray(array)
                detalle.setOtrosImpArray(array)
                detalle.setIVARetTotal(montoIVA)
                // PRUEBA
                //detalle.setMntTotal(dte6MontoAfecto + montoIVA)
                detalle.setMntTotal(dte6MontoAfecto)

                // Nota de Cr√©dito 211
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(60)
                detalle.setNroDoc(Long.valueOf(dte7folio))
                detalle.setTasaImp(19)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2020-09-12"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(dte7MontoAfecto)
                detalle.setMntIVA(Math.round(dte7MontoAfecto * 0.19))
                montoTotal = dte7MontoAfecto + Math.round(dte7MontoAfecto * 0.19)
                detalle.setMntTotal(montoTotal)
                logger.warn("NC 211")
                logger.warn("Monto Neto: " + dte7MontoAfecto)
                logger.warn("Monto IVA: " + Math.round(dte7MontoAfecto * 0.19))
                logger.warn("Monto Total: " + montoTotal)

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3))
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml"


                // Agregar DETALLES (SOLO LIBRO DE COMPRAS)
                if(tipo.equals("COMPRA")) {
                    logger.warn("agregando detalles libro de compras")
                    //addCampos.addDatosDetalle(envioLibro, arrayLineasDetalle,c.getCantidadDetallesTotales())
                    //addCampos.addDatosDetalle(envioLibro, arrayLineasDetalle,7)
                }
               // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                //opts = new XmlOptions()
                opts.setSavePrettyPrint()
                //opts.setSavePrettyPrintIndent(0)
                //opts.setCharacterEncoding("ISO-8859-1")
                libCV = LibroCompraVentaDocument.Factory.parse(libCV.newInputStream(opts), (opts))

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma)
                ByteArrayOutputStream out = new ByteArrayOutputStream()
                //libCV.save(archivoEnvio, opts)

                libCV.save(new File(resultS + "LIBCV" + idS + "-sinfirma.xml"), opts)
                libCV.save(out, opts)

                FirmaLibro firmaLibro = new FirmaLibro()

                //String mensaje=firmaLibro.firmarLibro(certData, passCert, resultS + "LIBCV" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio)
                String mensaje=firmaLibro.firmarLibro(new ByteArrayInputStream(certData.decodeBase64()), passCert, resultS + "LIBCV" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio)

            </script>
        </actions>
    </service>

    <service verb="genera" noun="LibroGuias">
        <description>
            Generaci√≥n de libro de Guias de Despacho
        </description>
        <in-parameters>
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2020-12'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Caso 1 Traslado de materiales entre bodegas de la empresa -->
            <set field="dte1Item1Qty" value="84"/>
            <set field="dte1Item2Qty" value="139"/>
            <set field="dte1Item3Qty" value="98"/>
            <set field="dte1Folio" value="159" type="Long"/>
            <set field="dte1Year" value="2021"/>
            <set field="dte1Month" value="01"/>
            <set field="dte1Day" value="28"/>

            <!-- Caso 2 Venta - Traslado por emisor del documento al local del clientei, facturado en el periodo -->
            <set field="dte2Item1Qty" value="410" type="Long"/>
            <set field="dte2Item1Prc" value="8270" type="Long"/>
            <set field="dte2Item2Qty" value="796" type="Long"/>
            <set field="dte2Item2Prc" value="1785" type="Long"/>
            <set field="dte2Folio" value="160" type="Long"/>
            <set field="dte2Year" value="2021"/>
            <set field="dte2Month" value="01"/>
            <set field="dte2Day" value="28"/>

            <!-- Caso 3 Venta - Traslado por cliente, guia anulada -->
            <set field="dte3Item1Qty" value="189" type="Long"/>
            <set field="dte3Item1Prc" value="2151" type="Long"/>
            <set field="dte3Item2Qty" value="487" type="Long"/>
            <set field="dte3Item2Prc" value="6450" type="Long"/>
            <set field="dte3Folio" value="161" type="Long"/>
            <set field="dte3Year" value="2021"/>
            <set field="dte3Month" value="01"/>
            <set field="dte3Day" value="28"/>

            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certData" from="certData"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="plantillaS" from="templateLibroGuia"/>
            <set field="plantillaS" from="'/home/cherrera/moit/cowork/moqui-framework/runtime/component/moquichile/DTE/TEMPLATES/plantilla_libro_guia.xml'"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal
                import java.text.SimpleDateFormat
                import java.util.ArrayList
                import java.util.Properties
                import java.util.Iterator
                import java.util.Map
                import java.util.Map.Entry
                import java.nio.file.Path
                import org.apache.xmlbeans.XmlCursor
                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer

                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate

                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil

                import cl.helpcom.recursos.Validador
                //import cl.helpcom.recursos.ComunicadorAppClienteTXT
                import cl.helpcom.dte.util.FirmaLibroGuia
                import cl.helpcom.dte.util.AgregarCamposLibros
                import cl.helpcom.recursos.LectorFichero

                import cl.sii.siiDte.libroguia.LibroGuiaDocument
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Detalle
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotalesPeriodo
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenSegmento
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Caratula
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Detalle.IVANoRec
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotTraslado
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp
                import cl.sii.siiDte.FechaType
                import cl.nic.dte.VerifyResult
                import cl.sii.siiDte.libroguia.SignatureType


                LectorFichero lectorFichero = new LectorFichero()
                String resultadoSinFirma = "/tmp/LBR-temp.xml"

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm")
                idS  = "ID"+dateFormat.format(new Date())

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                //ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT()
                Validador val = new Validador()

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                // Lee y llena los campos  => Caratula se debe armar con par√°metros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C")
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;())
                arrayLineasCaratulas.get(0).add(rutEmisor)
                arrayLineasCaratulas.get(0).add(rutEnviador)
                arrayLineasCaratulas.get(0).add('2020-12')
                arrayLineasCaratulas.get(0).add(fechaResolucionSii)
                arrayLineasCaratulas.get(0).add(numeroResolucionSii)
                arrayLineasCaratulas.get(0).add(tipo)
                arrayLineasCaratulas.get(0).add(tipoLibro)
                arrayLineasCaratulas.get(0).add(tipoEnvio)

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para env√≠o ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd")

                /* XML FACTURA */
                LibroGuiaDocument libGuia

                /* LibroGuia */
                libGuia = LibroGuiaDocument.Factory.parse(new FileInputStream(plantillaS))

                LibroGuia libroGuia = libGuia.getLibroGuia()
                libGuia.getLibroGuia().setVersion(new BigDecimal("1.0"))
                //EnvioLibro envioLibro = libroGuia.addNewEnvioLibro()
                EnvioLibro envioLibro = libroGuia.getEnvioLibro()
                // ID de libro se deber√≠a calcular
                libGuia.getLibroGuia().getEnvioLibro().setID(idS)
                XmlCursor cursor = libGuia.newCursor()


                //AgregarCamposLibros addCampos = new AgregarCamposLibros()
                // Agregar CARATULA
                //addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas)


                //Caratula caratula = envioLibro.addNewCaratula()
                Caratula caratula = envioLibro.getCaratula()
                caratula.setRutEmisorLibro(rutEmisor)
                caratula.setRutEnvia("12857517-0")
                Calendar cal = Calendar.getInstance()
                cal.clear()
                cal.set(Calendar.YEAR, 2020)
                cal.set(Calendar.MONTH, 12)
                caratula.setPeriodoTributario(cal)
                cal.clear()
                cal.set(Calendar.YEAR, 2018)
                cal.set(Calendar.MONTH, 09)
                cal.set(Calendar.DAY_OF_MONTH, 24)
                caratula.setFchResol(cal)
                caratula.setNroResol(Integer.valueOf(numeroResolucionSii))
                caratula.setFolioNotificacion(1); // Solo para env√≠o ESPECIAL
                logger.warn("Caratula: " + caratula.getTipoEnvio())

                //iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))


                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo()
                resumenPeriodo.setTotFolAnulado(0)
                resumenPeriodo.setTotGuiaAnulada(1)
                resumenPeriodo.setTotGuiaVenta(1)
                totalMontoDte2 = dte2Item1Qty*dte2Item1Prc + dte2Item2Qty*dte2Item2Prc
                totalMontoDte3 = dte3Item1Qty*dte3Item1Prc + dte3Item2Qty*dte3Item2Prc
                // Total Monto Guia Venta: incluye iva y deja fuera guia anulada
                totalMontoGuiaVenta = totalMontoDte2;// + totalMontoDte3
                totalMontoIva = Math.round(totalMontoGuiaVenta * 0.19)
                totalMontoGuiaVenta = totalMontoGuiaVenta + totalMontoIva
                logger.warn("Total MntGuiaVta: " + totalMontoGuiaVenta)
                resumenPeriodo.setTotMntGuiaVta(totalMontoGuiaVenta)
                resumenPeriodo.setTotMntModificado(0)
                ArrayList&lt;TotTraslado&gt; totTraslado = new ArrayList&lt;TotTraslado&gt;()
                oimp = TotTraslado.Factory.newInstance()
                oimp.setTpoTraslado(5)
                oimp.setCantGuia(1)
                oimp.setMntGuia(0)
                totTraslado.add(oimp)
                //oimp = TotTraslado.Factory.newInstance()
                //oimp.setTpoTraslado(2)
                //oimp.setCantGuia(1)
                //oimp.setMntGuia(5137330)
                //totTraslado.add(oimp)
                array = new TotTraslado[totTraslado.size()]
                totTraslado.toArray(array)
                resumenPeriodo.setTotTrasladoArray(array)



                Detalle detalle = envioLibro.addNewDetalle(); // Caso 1
                detalle.setFolio(dte1Folio)
                //detalle.setOperacion(1)
                detalle.setTpoOper(5)
                cal.clear()
                cal.set(Calendar.YEAR, Integer.valueOf(dte1Year))
                cal.set(Calendar.MONTH, Integer.valueOf(dte1Month))
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf(dte1Day))
                detalle.setFchDoc(cal)
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                //detalle.setMntExe(0)
                detalle.setMntNeto(0)
                detalle.setTasaImp(0)
                detalle.setIVA(0)
                detalle.setMntTotal(0)

                detalle = envioLibro.addNewDetalle(); // Caso 2
                detalle.setFolio(dte2Folio)
                detalle.setOperacion(2)
                detalle.setTpoOper(1)
                cal.clear()
                cal.set(Calendar.YEAR, Integer.valueOf(dte2Year))
                cal.set(Calendar.MONTH, Integer.valueOf(dte2Month))
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf(dte2Year))
                detalle.setFchDoc(cal)
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                //detalle.setMntExe(0)
                totalMontoNeto = (dte2Item1Qty*dte2Item1Prc) + (dte2Item2Qty*dte2Item2Prc)
                logger.warn("Caso 2 monto neto: " + totalMontoNeto)
                detalle.setMntNeto(totalMontoNeto)
                detalle.setTasaImp(19)
                totalIVA = Math.round(totalMontoNeto * 0.19)
                logger.warn("Total iva caso 2: " + totalIVA)
                detalle.setIVA(totalIVA)
                detalle.setMntTotal(totalMontoNeto + totalIVA)
                detalle.setTpoDocRef(33)
                detalle.setFolioDocRef(18)
                cal.clear()
                cal.set(Calendar.YEAR, Integer.valueOf(dte2Year))
                cal.set(Calendar.MONTH, Integer.valueOf(dte2Month))
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf(dte2Day))
                detalle.setFchDocRef(cal)

                detalle = envioLibro.addNewDetalle(); // Caso 3
                detalle.setFolio(dte3Folio)
                detalle.setAnulado(2)
                detalle.setOperacion(1)
                detalle.setTpoOper(1)
                cal.clear()
                cal.set(Calendar.YEAR, Integer.valueOf(dte3Year))
                cal.set(Calendar.MONTH, Integer.valueOf(dte3Month))
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf(dte3Day))
                detalle.setFchDoc(cal)
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                //detalle.setMntExe(0)
                totalMontoNeto = (dte3Item1Qty*dte3Item1Prc) + (dte3Item2Qty*dte3Item2Prc)
                logger.warn("Monto neto caso 3: " + totalMontoNeto)
                detalle.setMntNeto(totalMontoNeto)
                detalle.setTasaImp(19)
                totalIVA = Math.round(totalMontoNeto * 0.19)
                logger.warn("Total iva caso 3: " + totalIVA)
                detalle.setIVA(totalIVA)
                detalle.setMntTotal(totalMontoNeto + totalIVA)

                //SignatureType signature = libroGuia.addNewSignature()

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3))
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml"


                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                //opts = new XmlOptions()
                opts.setSavePrettyPrint()
                libGuia = LibroGuiaDocument.Factory.parse(libGuia.newInputStream(opts), (opts))

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())
                // firmo
                //libGuia.sign(key, cert)

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                ByteArrayOutputStream out = new ByteArrayOutputStream()

                libGuia.save(new File(resultS + "LIBGUIA" + idS + "-sinfirma.xml"), opts)
                libGuia.save(out, opts)

                FirmaLibroGuia firmaLibro = new FirmaLibroGuia()
                //String mensaje=firmaLibro.firmarLibro(certData, passCert, resultS + "LIBGUIA" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio)
                String mensaje=firmaLibro.firmarLibro(new ByteArrayInputStream(certData.decodeBase64()), passCert, resultS + "LIBGUIA" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio)

            </script>
        </actions>
    </service>

    <service verb="genera" noun="LibroBoletas">
        <description>
            Generaci√≥n de libro de boletas - hardcoded!
        </description>
        <in-parameters>
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="saveSinFirma" type="Boolean" default="false"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="plantillaS" from="templateLibroBoletas"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal
                import java.text.SimpleDateFormat
                import java.util.ArrayList
                import java.util.Properties
                import java.util.Iterator
                import java.util.Map
                import java.util.Map.Entry
                import java.nio.file.Path
                import org.apache.xmlbeans.XmlCursor
                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer

                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate

                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil

                import cl.helpcom.recursos.Validador
                //import cl.helpcom.recursos.ComunicadorAppClienteTXT
                import cl.helpcom.dte.util.FirmaLibroBoleta
                import cl.helpcom.dte.util.AgregarCamposLibros
                import cl.helpcom.recursos.LectorFichero

                import cl.sii.siiDte.libroboletas.LibroBoletaDocument
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Detalle
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenSegmento
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenSegmento.TotalesSegmento
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Caratula
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Caratula.TipoLibro
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Caratula.TipoEnvio
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Caratula.TipoLibro.Enum
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenSegmento.TotalesSegmento.TotalesServicio
                import cl.sii.siiDte.FechaType

                LectorFichero lectorFichero = new LectorFichero()
                String resultadoSinFirma = "/tmp/LBR-temp.xml"

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm")
                idS  = "ID"+dateFormat.format(new Date())

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                //ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT()
                Validador val = new Validador()

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                // Lee y llena los campos  => Caratula se debe armar con par√°metros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C")
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;())
                arrayLineasCaratulas.get(0).add(rutEmisor)
                arrayLineasCaratulas.get(0).add(rutEnviador)
                arrayLineasCaratulas.get(0).add('2018-04')
                arrayLineasCaratulas.get(0).add(fechaResolucionSii)
                arrayLineasCaratulas.get(0).add(numeroResolucionSii)
                arrayLineasCaratulas.get(0).add(tipo)
                arrayLineasCaratulas.get(0).add(tipoLibro)
                arrayLineasCaratulas.get(0).add(tipoEnvio)

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para env√≠o ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd")

                /* XML FACTURA */
                LibroBoletaDocument libCV

                /* LibroCV */
                libCV = LibroBoletaDocument.Factory.parse(new FileInputStream(plantillaS))

                LibroBoleta libroBoleta = libCV.getLibroBoleta()
                libCV.getLibroBoleta().setVersion(new BigDecimal("1.0"))
                EnvioLibro envioLibro = libroBoleta.addNewEnvioLibro()

                // ID de libro se deber√≠a calcular
                libCV.getLibroBoleta().getEnvioLibro().setID(idS)



                //AgregarCamposLibros addCampos = new AgregarCamposLibros()
                // Agregar CARATULA
                //addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas)

                Caratula caratula = envioLibro.addNewCaratula()
                //Caratula caratula = envioLibro.getCaratula()
                caratula.setRutEmisorLibro(rutEmisor)
                caratula.setRutEnvia(rutEnviador)
                Calendar cal = Calendar.getInstance()
                cal.clear()
                cal.set(Calendar.YEAR, 2019)
                cal.set(Calendar.MONTH, 04)
                caratula.setPeriodoTributario(cal)
                cal.clear()
                cal.set(Calendar.YEAR, 2019)
                cal.set(Calendar.MONTH, 04)
                cal.set(Calendar.DAY_OF_MONTH, 28)
                caratula.setFchResol(cal)
                caratula.setNroResol(Integer.valueOf(numeroResolucionSii))
                //caratula.setTipoOperacion('BOLETA')

                //DscRcgGlobal dscGlobal = DscRcgGlobal.Factory.newInstance()
                //dscGlobal.setTpoMov(DscRcgGlobal.TpoMov.Enum.forString("D"))

                TipoLibro tpL = TipoLibro.Factory.newInstance()
                //tpL.setTipoLibro(TipoLibro.Enum.forString("ESPECIAL"))

                caratula.setTipoLibro(TipoLibro.Enum.forString("ESPECIAL"))
                caratula.setTipoEnvio(TipoEnvio.Enum.forString("TOTAL"))
                caratula.setNroSegmento(0)
                caratula.setFolioNotificacion(1); // Solo para env√≠o ESPECIAL


                //XmlCursor cursor = libCV.newCursor()
                ResumenSegmento resumenSegmento = envioLibro.addNewResumenSegmento()

                // Boleta Electronica (39)
                TotalesSegmento totalesSegmento = resumenSegmento.addNewTotalesSegmento()

                totalesSegmento.setTpoDoc(BigInteger.valueOf(39))
                // Array de Totales Servicio
                ArrayList&lt;TotalesServicio&gt; totServicio = new ArrayList&lt;TotalesServicio&gt;()
                oimp = TotalesServicio.Factory.newInstance()
                oimp.setTpoServ(3)
                oimp.setTotDoc(5)
                oimp.setTotMntExe(2000)
                oimp.setTotMntTotal(54160)
                totServicio.add(oimp)
                array = new TotalesServicio[totServicio.size()]
                totServicio.toArray(array)
                totalesSegmento.setTotalesServicioArray(array)

                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo()
                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(BigInteger.valueOf(39))
                // Array de Totales Servicio
                ArrayList &lt;cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotalesServicio&gt;  totServicio2 = new ArrayList&lt;cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotalesServicio&gt;()

                oimp2 = cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotalesServicio.Factory.newInstance()

                // TODO: Usar casos de set de pruebas

                oimp2.setTpoServ(3)
                oimp2.setTotDoc(5)
                oimp2.setTotMntExe(2000)
                oimp2.setTotMntTotal(54160)
                totServicio2.add(oimp2)

                array2 = new cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotalesServicio[totServicio2.size()]
                totServicio2.toArray(array2)
                totalesPeriodo.setTotalesServicioArray(array2)

                Detalle detalle = envioLibro.addNewDetalle(); // Caso 1

                detalle.setTpoDoc(39)
                detalle.setFolioDoc(Long.valueOf(1))
                detalle.setTpoServ(3)
                cal.clear()
                cal.set(Calendar.YEAR, 2019)
                cal.set(Calendar.MONTH, 05)
                cal.set(Calendar.DAY_OF_MONTH, 23)
                detalle.setFchEmiDoc(cal)
                detalle.setRUTCliente("66666666-6")
                detalle.setMntTotal(29800)

                detalle = envioLibro.addNewDetalle(); // Caso 2

                detalle.setTpoDoc(39)
                detalle.setFolioDoc(Long.valueOf(2))
                detalle.setTpoServ(3)
                cal.clear()
                cal.set(Calendar.YEAR, 2019)
                cal.set(Calendar.MONTH, 05)
                cal.set(Calendar.DAY_OF_MONTH, 23)
                detalle.setFchEmiDoc(cal)
                detalle.setRUTCliente("66666666-6")
                detalle.setMntTotal(2040)

                detalle = envioLibro.addNewDetalle(); // Caso 3

                detalle.setTpoDoc(39)
                detalle.setFolioDoc(Long.valueOf(3))
                detalle.setTpoServ(3)
                cal.clear()
                cal.set(Calendar.YEAR, 2019)
                cal.set(Calendar.MONTH, 05)
                cal.set(Calendar.DAY_OF_MONTH, 23)
                detalle.setFchEmiDoc(cal)
                detalle.setRUTCliente("66666666-6")
                detalle.setMntTotal(4100)

                detalle = envioLibro.addNewDetalle(); // Caso 4

                detalle.setTpoDoc(39)
                detalle.setFolioDoc(Long.valueOf(4))
                detalle.setTpoServ(3)
                cal.clear()
                cal.set(Calendar.YEAR, 2019)
                cal.set(Calendar.MONTH, 05)
                cal.set(Calendar.DAY_OF_MONTH, 23)
                detalle.setFchEmiDoc(cal)
                detalle.setRUTCliente("66666666-6")
                detalle.setMntExe(2000)
                detalle.setMntTotal(14720)

                detalle = envioLibro.addNewDetalle(); // Caso 5

                detalle.setTpoDoc(39)
                detalle.setFolioDoc(Long.valueOf(5))
                detalle.setTpoServ(3)
                cal.clear()
                cal.set(Calendar.YEAR, 2019)
                cal.set(Calendar.MONTH, 05)
                cal.set(Calendar.DAY_OF_MONTH, 23)
                detalle.setFchEmiDoc(cal)
                detalle.setRUTCliente("66666666-6")
                detalle.setMntTotal(3500)

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3))
                //outPDF=lectorFichero.crearFicheroMMDDFlex("LIBROBOLETAS-", arrayLineasCaratulas.get(0).get(3))
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml"
                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                //opts = new XmlOptions()
                opts.setSavePrettyPrint()
                //opts.setSavePrettyPrintIndent(0)
                //opts.setCharacterEncoding("ISO-8859-1")
                libCV = LibroBoletaDocument.Factory.parse(libCV.newInputStream(opts), (opts))

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma)
                ByteArrayOutputStream out = new ByteArrayOutputStream()
                //libCV.save(archivoEnvio, opts)

                if (saveSinFirma) {
                    ResourceReference xmlContentResource = "dbresource://moit/erp/dte/${rutEmisor}/LIBBLT-${idS}-sinfirma.xml"
                    libCv.save(xmlContentReference.outputStream, opts)
                }
                libCv.save(out, opts)
                out.close()

                LibroBoletaDocument libro = null
                PrivateKey key = null

                try {
                    libro = LibroBoletaDocument.Factory.parse(new ByteArrayInputStream(out.toByteArray()))
                } catch (Exception e1) {

                e1.printStackTrace()
                return null

                }

                logger.warn("Libro:" + libro)

                FirmaLibroBoleta firmaLibro = new FirmaLibroBoleta()

                String mensaje=firmaLibro.firmarLibro(certData, passCert, resultS + "LIBBLT" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio)

            </script>
        </actions>
    </service>


    <service verb="genera" noun="CasoPruebaBoletasOld">
        <description>
            Generaci√≥n de Boletas para Caso de Prueba (DEPRECATED)
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="rutReceptor" default="'66666666-6'"/>
            <parameter name="receiverPartyId"/>
            <parameter name="razonSocialReceptor" default="'Venta a publico sin nombre receptor'"/>
            <parameter name="giroReceptor"/>
            <parameter name="contactoReceptor"/>
            <parameter name="direccionReceptor"/>
            <parameter name="comunaReceptor"/>
            <parameter name="ciudadReceptor" default-value="${comunaReceptor}"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <!-- TODO: Guardar boletas en FiscalTaxDocument y generar RCOF -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>

            <!-- Validaci√≥n rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certData" from="certData"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="rutEnvia" from="rutEnvia"/>
            <set field="razonSocialEmisor" from="razonSocialEmisor"/>
            <!--set field="giroEmisor" from="giroEmisor"/-->
            <set field="codigoSucursalSii" from="codigoSucursalSii"/>
            <set field="direccionOrigen" from="direccionOrigen"/>
            <set field="comunaOrigen" from="comunaOrigen"/>
            <set field="ciudadOrigen" from="ciudadOrigen"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>
            <set field="templatePdfBoleta" from="templatePdfBoleta"/>
            <!-- Giro del emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giroEmisor" from="giroOutMap.description"/>
            <set field="fechaEmision"/>
            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', partyId:activeOrgId]" out-map="context"/>

            <set field="codRef" value="0" type="Integer"/>

            <set field="idS" value="BO"/>

            <script>
                import java.text.SimpleDateFormat
                import java.util.Date

                Date dNow = new Date()
                SimpleDateFormat ft = new SimpleDateFormat("yyyyMMddhhmmssSSS")
                String datetime = ft.format(dNow)
                idS = idS + datetime

                import java.io.ByteArrayOutputStream
                import java.io.IOException
                import java.io.StringReader
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.sql.Connection
                import java.sql.SQLException
                import java.text.SimpleDateFormat
                import java.util.ArrayList
                import java.util.Calendar
                import java.util.Collection
                import java.util.Date
                import java.util.HashMap
                import java.nio.file.Path
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths

                import org.apache.xmlbeans.XmlDate
                import org.apache.xmlbeans.XmlException
                import org.apache.xmlbeans.XmlOptions
                import javax.xml.namespace.QName
                import org.apache.xmlbeans.XmlCursor
                import java.security.cert.X509Certificate
                import java.security.KeyStore
                import java.security.PrivateKey
                import org.w3c.dom.Document

                import cl.nic.dte.VerifyResult
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.boletas.BOLETADefType
                import cl.sii.siiDte.boletas.EnvioBOLETADocument
                import cl.sii.siiDte.boletas.BOLETADefType.Documento
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.SubTotInfo
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle.CdgItem
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoMov
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoValor
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Emisor
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula.SubTotDTE
                import org.apache.commons.io.IOUtils

                AutorizacionType caf
                AutorizacionType caf2
                AutorizacionType caf3
                AutorizacionType caf4
                AutorizacionType caf5
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

                // Boleta 1

                tipoFactura = 39 as Integer
                if(formaPago != null)
                    frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                // Recuperaci√≥n de archivo CAF desde BD
                caf = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts).getAUTORIZACION()

                BOLETADefType boleta; // boleta tiene cargada toda la informaci√≥n correspondiente

                // (emisor, receptor, detalle, totales, etc)
                boleta = BOLETADefType.Factory.newInstance()

                boleta.addNewDocumento()
                boleta.getDocumento().addNewEncabezado()
                // IdDoc
                boleta.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                //ks.load(new FileInputStream(certData), passCert.toCharArray())
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)
                //doc.addNewDocumento()
                //doc.getDocumento().addNewEncabezado()

                //IdDoc iddoc = doc.getDocumento().getEncabezado().addNewIdDoc()
                boleta.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta.getDocumento().setID(idS)

                // Tipo de DTE
                boleta.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))



                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta: " + boleta)

                Calendar cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp = boleta.getDocumento().getEncabezado().addNewReceptor()
                recp.setRUTRecep(rutReceptor.trim())
                //recp.setRznSocRecep(razonSocialReceptor)
                recp.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor = boleta.getDocumento().getEncabezado().addNewEmisor()
                emisor.setRUTEmisor(rutEmisor)
                emisor.setRznSocEmisor(razonSocialEmisor)
                emisor.setGiroEmisor(giroEmisor)
                emisor.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor.setDirOrigen(direccionOrigen)
                emisor.setCmnaOrigen(comunaOrigen)
                emisor.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101071"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <!-- TODO: Verificar si item es afecto o exento -->
                    <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                    <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance()
                        if(itemAfecto.equals("true")) {
                        //totalNeto = totalNeto + totalItem
                        } else {
                        //totalExento = totalExento + totalItem
                        det[i].setIndExe(1)
                        }
                        det[i].setNroLinDet(i+1)
                        det[i].setNmbItem(nombreItem)
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem))
                        det[i].setMontoItem( totalItem )
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
            </iterate>
            <script>

                boleta.getDocumento().setDetalleArray(det)
                // Totales
                Totales tot = boleta.getDocumento().getEncabezado().addNewTotales()

                //tot.setMntNeto(totalInvoice)
                montoNeto = totalInvoice
                //tot.setTasaIVA(BigDecimal.valueOf(19))
                //tot.setTasaIVA(iva)
                // Valor de solo IVA
                //long totalIVA = totalInvoice * 0.19
                //montoIVARecuperable = totalIVA
                //tot.setIVA(totalIVA)
                logger.warn("monto neto:" + montoNeto)
                //logger.warn("total IVA:" + totalIVA)
                // total neto + IVA
                //totalInvoice = totalInvoice + totalIVA
                logger.warn("Total: " + totalInvoice)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta.timbrar(caf.getCAF(), caf.getPrivateKey(null))

                logger.warn("Boleta 1: " + boleta)

            </script>
            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', partyId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio le√≠do: $folio"/>
            <set field="codRef" value="0" type="Integer"/>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 2
                // ***********************************************************************

                dNow = new Date()
                ft = new SimpleDateFormat("yyyyMMddhhmmssSSS")
                datetime = ft.format(dNow)
                idS = idS + datetime

                folio = 2 as Integer
                tipoFactura = 39 as Integer
                if(formaPago != null)
                    frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces2 = new HashMap&lt;String, String&gt;()
                namespaces2.put("", "http://www.sii.cl/SiiDte")
                namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts2 = new XmlOptions()
                opts2.setLoadSubstituteNamespaces(namespaces2)

                // Recuperaci√≥n de archivo CAF desde BD
                caf2 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts2).getAUTORIZACION()

                BOLETADefType boleta2; // boleta tiene cargada toda la informaci√≥n correspondiente

                // (emisor, receptor, detalle, totales, etc)
                boleta2 = BOLETADefType.Factory.newInstance()

                boleta2.addNewDocumento()
                boleta2.getDocumento().addNewEncabezado()
                // IdDoc
                boleta2.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta2.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks2 = KeyStore.getInstance("PKCS12")
                //ks2.load(new FileInputStream(certData), passCert.toCharArray())
                ks2.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                alias2 = ks2.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks2.getCertificate(alias)
                key = (PrivateKey) ks2.getKey(alias2, passCert.toCharArray())


                boleta2.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta2.getDocumento().setID(idS)

                // Tipo de DTE
                boleta2.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta2.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta2.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta 2: " + boleta2)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp2 = boleta2.getDocumento().getEncabezado().addNewReceptor()
                recp2.setRUTRecep(rutReceptor.trim())
                recp2.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor2 = boleta2.getDocumento().getEncabezado().addNewEmisor()
                emisor2.setRUTEmisor(rutEmisor)
                emisor2.setRznSocEmisor(razonSocialEmisor)
                emisor2.setGiroEmisor(giroEmisor)
                emisor2.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor2.setDirOrigen(direccionOrigen)
                emisor2.setCmnaOrigen(comunaOrigen)
                emisor2.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101072"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance()
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1)
                    }
                    det[i].setNroLinDet(i+1)
                    det[i].setNmbItem(nombreItem)
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem))
                    det[i].setMontoItem( totalItem )
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta2.getDocumento().setDetalleArray(det)
                // Totales
                tot = boleta2.getDocumento().getEncabezado().addNewTotales()

                montoNeto = totalInvoice
                logger.warn("monto neto:" + montoNeto)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta2.timbrar(caf2.getCAF(), caf2.getPrivateKey(null))

                logger.warn("Boleta 2: " + boleta2)



            </script>
            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', partyId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio le√≠do: $folio"/>
            <set field="codRef" value="0" type="Integer"/>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 3
                // ***********************************************************************


                dNow = new Date()
                ft = new SimpleDateFormat("yyyyMMddHHmmssSSS")
                datetime = ft.format(dNow)
                idS = idS + datetime

                folio = 3 as Integer
                tipoFactura = 39 as Integer
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces3 = new HashMap&lt;String, String&gt;()
                namespaces3.put("", "http://www.sii.cl/SiiDte")
                namespaces3.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts3 = new XmlOptions()
                opts3.setLoadSubstituteNamespaces(namespaces3)

                // Recuperaci√≥n de archivo CAF desde BD
                caf3 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts3).getAUTORIZACION()

                BOLETADefType boleta3

                // (emisor, receptor, detalle, totales, etc)
                boleta3 = BOLETADefType.Factory.newInstance()

                boleta3.addNewDocumento()
                boleta3.getDocumento().addNewEncabezado()
                // IdDoc
                boleta3.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta3.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks3 = KeyStore.getInstance("PKCS12")
                //ks3.load(new FileInputStream(certData), passCert.toCharArray())
                ks3.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                alias3 = ks3.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks3.getCertificate(alias)
                key = (PrivateKey) ks3.getKey(alias2, passCert.toCharArray())


                boleta3.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta3.getDocumento().setID(idS)

                // Tipo de DTE
                boleta3.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta3.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta3.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta 3: " + boleta3)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp3 = boleta3.getDocumento().getEncabezado().addNewReceptor()
                recp3.setRUTRecep(rutReceptor.trim())
                recp3.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor3 = boleta3.getDocumento().getEncabezado().addNewEmisor()
                emisor3.setRUTEmisor(rutEmisor)
                emisor3.setRznSocEmisor(razonSocialEmisor)
                emisor3.setGiroEmisor(giroEmisor)
                emisor3.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor3.setDirOrigen(direccionOrigen)
                emisor3.setCmnaOrigen(comunaOrigen)
                emisor3.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101075"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance()
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1)
                    }
                    det[i].setNroLinDet(i+1)
                    det[i].setNmbItem(nombreItem)
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem))
                    det[i].setMontoItem( totalItem )
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta3.getDocumento().setDetalleArray(det)
                // Totales
                tot = boleta3.getDocumento().getEncabezado().addNewTotales()

                montoNeto = totalInvoice
                logger.warn("monto neto:" + montoNeto)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta3.timbrar(caf3.getCAF(), caf3.getPrivateKey(null))

                logger.warn("Boleta 3: " + boleta3)

                // *********************************************************************
                // Fin Boleta 3
                // *********************************************************************

                // ***********************************************************************
                // Boleta 4
                // ***********************************************************************


                dNow = new Date()
                ft = new SimpleDateFormat("yyyyMMddHHmmssSSS")
                datetime = ft.format(dNow)
                idS = idS + datetime

                folio = Integer.valueOf(4)
                tipoFactura = Integer.valueOf(39)
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces4 = new HashMap&lt;String, String&gt;()
                namespaces4.put("", "http://www.sii.cl/SiiDte")
                namespaces4.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts4 = new XmlOptions()
                opts4.setLoadSubstituteNamespaces(namespaces4)

                // Recuperaci√≥n de archivo CAF desde BD
                caf4 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts4).getAUTORIZACION()

                BOLETADefType boleta4

                // (emisor, receptor, detalle, totales, etc)
                boleta4 = BOLETADefType.Factory.newInstance()

                boleta4.addNewDocumento()
                boleta4.getDocumento().addNewEncabezado()
                // IdDoc
                boleta4.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta4.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks4 = KeyStore.getInstance("PKCS12")
                //ks4.load(new FileInputStream(certData), passCert.toCharArray())
                ks4.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                alias4 = ks4.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks4.getCertificate(alias)
                key = (PrivateKey) ks4.getKey(alias2, passCert.toCharArray())


                boleta4.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta4.getDocumento().setID(idS)

                // Tipo de DTE
                boleta4.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta4.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta4.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta 4: " + boleta4)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp4 = boleta4.getDocumento().getEncabezado().addNewReceptor()
                recp4.setRUTRecep(rutReceptor.trim())
                recp4.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor4 = boleta4.getDocumento().getEncabezado().addNewEmisor()
                emisor4.setRUTEmisor(rutEmisor)
                emisor4.setRznSocEmisor(razonSocialEmisor)
                emisor4.setGiroEmisor(giroEmisor)
                emisor4.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor4.setDirOrigen(direccionOrigen)
                emisor4.setCmnaOrigen(comunaOrigen)
                emisor4.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101076"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance()
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1)
                    }
                    det[i].setNroLinDet(i+1)
                    det[i].setNmbItem(nombreItem)
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem))
                    det[i].setMontoItem( totalItem )
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta4.getDocumento().setDetalleArray(det)
                // Totales
                tot = boleta4.getDocumento().getEncabezado().addNewTotales()

                montoNeto = totalInvoice
                logger.warn("monto neto:" + montoNeto)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta4.timbrar(caf4.getCAF(), caf4.getPrivateKey(null))

                logger.warn("Boleta 4: " + boleta4)

                // *********************************************************************
                // Fin Boleta 4
                // ********************************************************************

                // ***********************************************************************
                // Boleta 5
                // ***********************************************************************


                dNow = new Date()
                ft = new SimpleDateFormat("yyyyMMddHHmmssSSS")
                datetime = ft.format(dNow)
                idS = idS + datetime

                folio = Integer.valueOf(5)
                tipoFactura = Integer.valueOf(39)
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces5 = new HashMap&lt;String, String&gt;()
                namespaces5.put("", "http://www.sii.cl/SiiDte")
                namespaces5.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts5 = new XmlOptions()
                opts5.setLoadSubstituteNamespaces(namespaces5)

                // Recuperaci√≥n de archivo CAF desde BD
                caf5 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts5).getAUTORIZACION()

                BOLETADefType boleta5

                // (emisor, receptor, detalle, totales, etc)
                boleta5 = BOLETADefType.Factory.newInstance()

                boleta5.addNewDocumento()
                boleta5.getDocumento().addNewEncabezado()
                // IdDoc
                boleta5.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta5.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks5 = KeyStore.getInstance("PKCS12")
                //ks5.load(new FileInputStream(certData), passCert.toCharArray())
                ks5.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                alias5 = ks5.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks5.getCertificate(alias)
                key = (PrivateKey) ks5.getKey(alias5, passCert.toCharArray())


                boleta5.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta5.getDocumento().setID(idS)

                // Tipo de DTE
                boleta5.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta5.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta5.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta 5: " + boleta5)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp5 = boleta5.getDocumento().getEncabezado().addNewReceptor()
                recp5.setRUTRecep(rutReceptor.trim())
                recp5.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor5 = boleta5.getDocumento().getEncabezado().addNewEmisor()
                emisor5.setRUTEmisor(rutEmisor)
                emisor5.setRznSocEmisor(razonSocialEmisor)
                emisor5.setGiroEmisor(giroEmisor)
                emisor5.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor5.setDirOrigen(direccionOrigen)
                emisor5.setCmnaOrigen(comunaOrigen)
                emisor5.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101479"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <set field="unmdItem"/>
                <if condition="detailEntry.quantityUomId">
                    <set field="unmdItem" from="detailEntry.quantityUomId"/>
                </if>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>

                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance()
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1)
                    }
                    det[i].setNroLinDet(i+1)
                    det[i].setNmbItem(nombreItem)
                        if(unmdItem.equals("WT_kg"))
                    det[i].setUnmdItem("Kg.")
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem))

                    det[i].setMontoItem( totalItem )
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta5.getDocumento().setDetalleArray(det)
                // Totales
                tot = boleta5.getDocumento().getEncabezado().addNewTotales()

                montoNeto = totalInvoice
                logger.warn("monto neto:" + montoNeto)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta5.timbrar(caf5.getCAF(), caf5.getPrivateKey(null))

                logger.warn("Boleta 5: " + boleta5)

                // *********************************************************************
                // Fin Boleta5
                // *********************************************************************

                // *********************************************************************
                // Preparaci√≥n de Envio Boleta con 5 boletas
                // *********************************************************************

                logger.warn("Generando Envio Boleta\n")

                // ajustes para el formato (MAGIA) antes de firmar
                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr = new BOLETADefType[5]
                bolArr[0] = boleta

                BOLETADefType boleta0 = boleta

                bolArr[1] = boleta2
                bolArr[2] = boleta3
                bolArr[3] = boleta4
                bolArr[4] = boleta5
                sdte.setDTEArray(bolArr)
                sdte.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime())
                sdte.setID("ENVBO" + System.nanoTime())


                // Datos de car√°tula
                Caratula caratula = sdte.addNewCaratula()
                caratula.setRutEmisor(rutEmisor)
                caratula.setRutEnvia(rutEnviador)
                //caratula.setRutReceptor(rutReceptor)
                Date dateFchResol = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol)))

                caratula.setNroResol(Integer.valueOf(numeroResolucionSii))
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                caratula.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes = new SubTotDTE[1]
                SubTotDTE subt = SubTotDTE.Factory.newInstance()
                subt.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt.setNroDTE(new BigInteger(5))
                subtDtes[0] = subt
                caratula.setSubTotDTEArray(subtDtes)

                eb.setSetDTE(sdte)
                eb.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument.setEnvioBOLETA(eb)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                    envioBoletaDocument = EnvioBOLETADocument.Factory.parse(envioBoletaDocument.newInputStream(opts), opts)
                } catch (Exception e) {
                    logger.warn("Error al parsear XML")
                    return
                }

                boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0)

                //boleta.sign(key, cert)

                logger.warn("Boleta: " + boleta)

                String uri = ""
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                uri = boleta.getDocumento().getID()
                boleta.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream()
                envioBoletaDocument.save(new File(resultS + "BOL" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts)
                envioBoletaDocument.save(out, opts)

                Document doc2 = MoquiDTEUtils.parseDocument(out.toByteArray())

                byte[] salida = MoquiDTEUtils.sign(doc2, uri, key, cert, uri, "Documento")
                doc2 = MoquiDTEUtils.parseDocument(salida)

                if (Signer.verify(doc2, "Documento")) {
                    Path path = Paths.get(resultS + "BOL-Envio.xml")
                    Files.write(path, salida)
                    logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                    Path path = Paths.get(resultS + "BOL-Envio-mala.xml")
                    Files.write(path, salida)
                    logger.warn("Error al generar boleta folio "+folio)
                }

                // **************************************************************
                // Creaci√≥n de PDF en base a EnvioBOLETA con boletaN
                // PDF Boleta 1
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument1 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb1 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte1 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr1 = new BOLETADefType[1]
                bolArr1[0] = boleta0

                folio = "1"

                sdte1.setDTEArray(bolArr1)
                //sdte1.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime())
                sdte1.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula1 = sdte1.addNewCaratula()
                caratula1.setRutEmisor(rutEmisor)
                caratula1.setRutEnvia(rutEnviador)
                Date dateFchResol1 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula1.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol1)))

                caratula1.setNroResol(Integer.valueOf(numeroResolucionSii))
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                caratula1.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes1 = new SubTotDTE[1]
                SubTotDTE subt1 = SubTotDTE.Factory.newInstance()
                subt1.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt1.setNroDTE(new BigInteger(5))
                subtDtes1[0] = subt1
                caratula1.setSubTotDTEArray(subtDtes1)

                eb1.setSetDTE(sdte1)
                eb1.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument1.setEnvioBOLETA(eb1)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                    //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                    logger.warn("Error al parsear XML")
                    return
                }
                // No es necesario de nuevo
                //boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0)

                String uri1 = ""
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                uri = boleta0.getDocumento().getID()
                boleta0.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out1 = new ByteArrayOutputStream()
                envioBoletaDocument1.save(new File(resultS + "BOLPDF" + tipoFactura + "-1-sinfirma.xml"), opts)
                envioBoletaDocument1.save(out1, opts)

                Document doc1 = MoquiDTEUtils.parseDocument(out1.toByteArray())

                byte[] salida1 = MoquiDTEUtils.sign(doc1, uri, key, cert, uri, "Documento")
                doc1 = MoquiDTEUtils.parseDocument(salida1)

                if (Signer.verify(doc1, "Documento")) {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1.xml")
                    Files.write(path, salida1)
                    logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1-mala.xml")
                    Files.write(path, salida1)
                    logger.warn("Error al generar boleta folio "+folio)
                }
                // ******************************************************************

                // PDF Boleta 2
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument2 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb2 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte2 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr2 = new BOLETADefType[1]
                bolArr2[0] = boleta2

                folio = "2"

                sdte2.setDTEArray(bolArr2)
                //sdte2.setID("envio-boleta")
                sdte2.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula2 = sdte2.addNewCaratula()
                caratula2.setRutEmisor(rutEmisor)
                caratula2.setRutEnvia(rutEnviador)
                Date dateFchResol2 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula2.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol2)))

                caratula2.setNroResol(Integer.valueOf(numeroResolucionSii))
                //now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                caratula2.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes2 = new SubTotDTE[1]
                SubTotDTE subt2 = SubTotDTE.Factory.newInstance()
                subt2.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt2.setNroDTE(new BigInteger(5))
                subtDtes2[0] = subt2
                caratula2.setSubTotDTEArray(subtDtes2)

                eb2.setSetDTE(sdte2)
                eb2.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument2.setEnvioBOLETA(eb2)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                uri = boleta2.getDocumento().getID()
                boleta2.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out2 = new ByteArrayOutputStream()
                envioBoletaDocument2.save(new File(resultS + "BOLPDF" + tipoFactura + "-2-sinfirma.xml"), opts)
                envioBoletaDocument2.save(out2, opts)

                Document doc22 = MoquiDTEUtils.parseDocument(out2.toByteArray())

                byte[] salida2 = MoquiDTEUtils.sign(doc22, uri, key, cert, uri, "Documento")
                doc22 = MoquiDTEUtils.parseDocument(salida2)

                if (Signer.verify(doc22, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2.xml")
                Files.write(path, salida2)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2-mala.xml")
                Files.write(path, salida2)
                logger.warn("Error al generar boleta folio "+folio)
                }
                // *****************************************************************


                // ******************************************************************

                // PDF Boleta 3
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument3 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb3 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte3 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr3 = new BOLETADefType[1]
                bolArr3[0] = boleta3

                folio = "3"

                sdte3.setDTEArray(bolArr3)
                //sdte3.setID("envio-boleta")
                sdte3.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula3 = sdte3.addNewCaratula()
                caratula3.setRutEmisor(rutEmisor)
                caratula3.setRutEnvia(rutEnviador)
                Date dateFchResol3 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula3.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol3)))

                caratula3.setNroResol(Integer.valueOf(numeroResolucionSii))
                caratula3.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes3 = new SubTotDTE[1]
                SubTotDTE subt3 = SubTotDTE.Factory.newInstance()
                subt3.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt3.setNroDTE(new BigInteger(5))
                subtDtes3[0] = subt3
                caratula3.setSubTotDTEArray(subtDtes3)

                eb3.setSetDTE(sdte3)
                eb3.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument3.setEnvioBOLETA(eb3)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }
                uri = boleta3.getDocumento().getID()
                boleta3.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out3 = new ByteArrayOutputStream()
                envioBoletaDocument3.save(new File(resultS + "BOLPDF" + tipoFactura + "-3-sinfirma.xml"), opts)
                envioBoletaDocument3.save(out3, opts)

                Document doc33 = MoquiDTEUtils.parseDocument(out3.toByteArray())

                byte[] salida3 = MoquiDTEUtils.sign(doc33, uri, key, cert, uri, "Documento")
                doc33 = MoquiDTEUtils.parseDocument(salida3)

                if (Signer.verify(doc33, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3.xml")
                Files.write(path, salida3)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3-mala.xml")
                Files.write(path, salida3)
                logger.warn("Error al generar boleta folio "+folio)
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta 4
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument4 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb4 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte4 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr4 = new BOLETADefType[1]
                bolArr4[0] = boleta4

                folio = "4"

                sdte4.setDTEArray(bolArr4)
                //sdte4.setID("envio-boleta")
                sdte4.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula4 = sdte4.addNewCaratula()
                caratula4.setRutEmisor(rutEmisor)
                caratula4.setRutEnvia(rutEnviador)
                Date dateFchResol4 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula4.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol4)))

                caratula4.setNroResol(Integer.valueOf(numeroResolucionSii))
                caratula4.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes4 = new SubTotDTE[1]
                SubTotDTE subt4 = SubTotDTE.Factory.newInstance()
                subt4.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt4.setNroDTE(new BigInteger(5))
                subtDtes4[0] = subt4
                caratula4.setSubTotDTEArray(subtDtes4)

                eb4.setSetDTE(sdte4)
                eb4.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument4.setEnvioBOLETA(eb4)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }
                uri = boleta4.getDocumento().getID()
                boleta4.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out4 = new ByteArrayOutputStream()
                envioBoletaDocument4.save(new File(resultS + "BOLPDF" + tipoFactura + "-4-sinfirma.xml"), opts)
                envioBoletaDocument4.save(out4, opts)

                Document doc44 = MoquiDTEUtils.parseDocument(out4.toByteArray())

                byte[] salida4 = MoquiDTEUtils.sign(doc44, uri, key, cert, uri, "Documento")
                doc44 = MoquiDTEUtils.parseDocument(salida4)

                if (Signer.verify(doc44, "Documento")) {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4.xml")
                    Files.write(path, salida4)
                    logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4-mala.xml")
                    Files.write(path, salida4)
                    logger.warn("Error al generar boleta folio "+folio)
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta5
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument5 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb5 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte5 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr5 = new BOLETADefType[1]
                bolArr5[0] = boleta5

                folio = "5"

                sdte5.setDTEArray(bolArr5)
                //sdte5.setID("envio-boleta")
                sdte5.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula5 = sdte5.addNewCaratula()
                caratula5.setRutEmisor(rutEmisor)
                caratula5.setRutEnvia(rutEnviador)
                Date dateFchResol5 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula5.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol5)))

                caratula5.setNroResol(Integer.valueOf(numeroResolucionSii))
                caratula5.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes5 = new SubTotDTE[1]
                SubTotDTE subt5 = SubTotDTE.Factory.newInstance()
                subt5.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt5.setNroDTE(new BigInteger(5))
                subtDtes5[0] = subt5
                caratula5.setSubTotDTEArray(subtDtes5)

                eb5.setSetDTE(sdte5)
                eb5.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument5.setEnvioBOLETA(eb5)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }
                uri = boleta5.getDocumento().getID()
                boleta5.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out5 = new ByteArrayOutputStream()
                envioBoletaDocument5.save(new File(resultS + "BOLPDF" + tipoFactura + "-5-sinfirma.xml"), opts)
                envioBoletaDocument5.save(out5, opts)

                Document doc55 = MoquiDTEUtils.parseDocument(out5.toByteArray())

                byte[] salida5 = MoquiDTEUtils.sign(doc55, uri, key, cert, uri, "Documento")
                doc55 = MoquiDTEUtils.parseDocument(salida5)

                if (Signer.verify(doc55, "Documento")) {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5.xml")
                    Files.write(path, salida5)
                    logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5-mala.xml")
                    Files.write(path, salida5)
                    logger.warn("Error al generar boleta folio "+folio)
                }
                // *****************************************************************


            </script>
            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->

            <!--set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/-->
            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-1.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-1.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-2.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-2.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-3.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-3.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-4.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-4.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-5.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-5.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <!--entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
            </entity-find-one>

            <set field="dteField.issuerPartyId" from="activeOrgId"/>
            <if condition="rutReceptor != '66666666-6'"><then>
                <set field="dteField.receiverPartyId" from="receiverPartyId"/>
                <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
                <set field="dteField.receiverPartyIdValue" from="rutReceptor"/>
            </then></if>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>
            <set field="dteField.invoiceId" from="invoiceId"/-->

            <!--script>
                Date date = new Date()
                Timestamp ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/-->

        </actions>
    </service>

    <!-- Servicio verdadero para generar envio de caso de pruebas -->
    <service verb="genera" noun="CasoPruebaBoletas2">
        <description>
            Generaci√≥n de Boletas para Caso de Prueba
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="rutReceptor" default="'66666666-6'"/>
            <parameter name="receiverPartyId"/>
            <parameter name="razonSocialReceptor" default="'Venta a publico sin nombre receptor'"/>
            <parameter name="giroReceptor"/>
            <parameter name="contactoReceptor"/>
            <parameter name="direccionReceptor"/>
            <parameter name="comunaReceptor"/>
            <parameter name="ciudadReceptor" default-value="${comunaReceptor}"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>

            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>

            <!-- Validaci√≥n rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certData" from="certData"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="razonSocialEmisor" from="razonSocialEmisor"/>
            <!--set field="giroEmisor" from="giroEmisor"/-->
            <set field="codigoSucursalSii" from="codigoSucursalSii"/>
            <set field="direccionOrigen" from="direccionOrigen"/>
            <set field="comunaOrigen" from="comunaOrigen"/>
            <set field="ciudadOrigen" from="ciudadOrigen"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>
            <set field="templatePdfBoleta" from="templatePdfBoleta"/>
            <!-- Giro del emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giroEmisor" from="giroOutMap.description"/>



            <set field="fechaEmision"/>


            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', partyId:activeOrgId]" out-map="context"/>

            <set field="codRef" value="0" type="Integer"/>

            <set field="idS" value="BO"/>

            <script>
                import java.text.SimpleDateFormat
                import java.util.Date

                Date dNow = new Date()
                SimpleDateFormat ft = new SimpleDateFormat("yyyyMMddHHmmssSSS")
                String datetime = ft.format(dNow)
                idS = idS + datetime

                import java.io.ByteArrayOutputStream
                import java.io.IOException
                import java.io.StringReader
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.sql.Connection
                import java.sql.SQLException
                import java.text.SimpleDateFormat
                import java.util.ArrayList
                import java.util.Calendar
                import java.util.Collection
                import java.util.Date
                import java.util.HashMap
                import java.nio.file.Path
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths

                import org.apache.log4j.Logger
                import org.apache.xmlbeans.XmlDate
                import org.apache.xmlbeans.XmlException
                import org.apache.xmlbeans.XmlOptions
                import javax.xml.namespace.QName
                import org.apache.xmlbeans.XmlCursor
                import java.security.cert.X509Certificate
                import java.security.KeyStore
                import java.security.PrivateKey
                import org.w3c.dom.Document

                import cl.nic.dte.VerifyResult
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.boletas.BOLETADefType
                import cl.sii.siiDte.boletas.EnvioBOLETADocument
                import cl.sii.siiDte.boletas.BOLETADefType.Documento
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.SubTotInfo
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle.CdgItem
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoMov
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoValor
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Emisor
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula.SubTotDTE
                import org.apache.commons.io.IOUtils

                AutorizacionType caf
                AutorizacionType caf2
                AutorizacionType caf3
                AutorizacionType caf4
                AutorizacionType caf5
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

                // Boleta 1

                tipoFactura = 39 as Integer
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                // Recuperaci√≥n de archivo CAF desde BD
                caf = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts).getAUTORIZACION()

                BOLETADefType boleta; // boleta tiene cargada toda la informaci√≥n correspondiente

                // (emisor, receptor, detalle, totales, etc)
                //cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.newInstance()
                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocumentTmp = EnvioBOLETADocument.Factory.parse(new File("/home/cherrera/git/moqui-nodocowork/moqui-framework/runtime/component/MoquiChile/DTE/BOLPDF39-5.xml"),opts)
                //EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance()
                //SetDTE sdte = SetDTE.Factory.newInstance()
                SetDTE sdteTmp =  envioBoletaDocumentTmp.envioBOLETA.getSetDTE()
                //boleta = BOLETADefType.Factory.parse(new File("/home/cherrera/git/moqui-nodocowork/moqui-framework/runtime/component/MoquiChile/DTE/BOLPDF39-5.xml"),opts).getSetDTE()
                //boleta = sdteTmp.getDTE()

                logger.warn("Leido: " + sdteTmp)
                logger.warn("Leido: " + boleta)
                return

                //boleta = BOLETADefType.Factory.newInstance()

                boleta.addNewDocumento()
                boleta.getDocumento().addNewEncabezado()
                // IdDoc
                boleta.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                //ks.load(new FileInputStream(certData), passCert.toCharArray())
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)
                //doc.addNewDocumento()
                //doc.getDocumento().addNewEncabezado()

                //IdDoc iddoc = doc.getDocumento().getEncabezado().addNewIdDoc()
                boleta.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta.getDocumento().setID(idS)

                // Tipo de DTE
                boleta.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))



                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta: " + boleta)

                Calendar cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp = boleta.getDocumento().getEncabezado().addNewReceptor()
                recp.setRUTRecep(rutReceptor.trim())
                //recp.setRznSocRecep(razonSocialReceptor)
                recp.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor = boleta.getDocumento().getEncabezado().addNewEmisor()
                emisor.setRUTEmisor(rutEmisor)
                emisor.setRznSocEmisor(razonSocialEmisor)
                emisor.setGiroEmisor(giroEmisor)
                emisor.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor.setDirOrigen(direccionOrigen)
                emisor.setCmnaOrigen(comunaOrigen)
                emisor.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101071"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                int i = 0
                listSize = detailList.size()
                Detalle[] det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento -->
                <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance()
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1)
                    }
                    det[i].setNroLinDet(i+1)
                    det[i].setNmbItem(nombreItem)
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem))
                    det[i].setMontoItem( totalItem )
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta.getDocumento().setDetalleArray(det)
                // Totales
                Totales tot = boleta.getDocumento().getEncabezado().addNewTotales()

                //tot.setMntNeto(totalInvoice)
                montoNeto = totalInvoice
                //tot.setTasaIVA(BigDecimal.valueOf(19))
                //tot.setTasaIVA(iva)
                // Valor de solo IVA
                //long totalIVA = totalInvoice * 0.19
                //montoIVARecuperable = totalIVA
                //tot.setIVA(totalIVA)
                logger.warn("monto neto:" + montoNeto)
                //logger.warn("total IVA:" + totalIVA)
                // total neto + IVA
                //totalInvoice = totalInvoice + totalIVA
                logger.warn("Total: " + totalInvoice)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta.timbrar(caf.getCAF(), caf.getPrivateKey(null))

                logger.warn("Boleta 1: " + boleta)

            </script>
            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', partyId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio le√≠do: $folio"/>
            <set field="codRef" value="0" type="Integer"/>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 2
                // ***********************************************************************

                dNow = new Date()
                ft = new SimpleDateFormat("yyyyMMddHHmmssSSS")
                datetime = ft.format(dNow)
                idS = idS + datetime

                folio = Integer.valueOf(2)
                tipoFactura = Integer.valueOf(39)
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces2 = new HashMap&lt;String, String&gt;()
                namespaces2.put("", "http://www.sii.cl/SiiDte")
                namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts2 = new XmlOptions()
                opts2.setLoadSubstituteNamespaces(namespaces2)

                // Recuperaci√≥n de archivo CAF desde BD
                caf2 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts2).getAUTORIZACION()

                BOLETADefType boleta2; // boleta tiene cargada toda la informaci√≥n correspondiente

                // (emisor, receptor, detalle, totales, etc)
                boleta2 = BOLETADefType.Factory.newInstance()

                boleta2.addNewDocumento()
                boleta2.getDocumento().addNewEncabezado()
                // IdDoc
                boleta2.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta2.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks2 = KeyStore.getInstance("PKCS12")
                //ks2.load(new FileInputStream(certData), passCert.toCharArray())
                ks2.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                alias2 = ks2.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks2.getCertificate(alias)
                key = (PrivateKey) ks2.getKey(alias2, passCert.toCharArray())

                boleta2.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta2.getDocumento().setID(idS)

                // Tipo de DTE
                boleta2.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta2.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta2.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta 2: " + boleta2)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp2 = boleta2.getDocumento().getEncabezado().addNewReceptor()
                recp2.setRUTRecep(rutReceptor.trim())
                recp2.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor2 = boleta2.getDocumento().getEncabezado().addNewEmisor()
                emisor2.setRUTEmisor(rutEmisor)
                emisor2.setRznSocEmisor(razonSocialEmisor)
                emisor2.setGiroEmisor(giroEmisor)
                emisor2.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor2.setDirOrigen(direccionOrigen)
                emisor2.setCmnaOrigen(comunaOrigen)
                emisor2.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101072"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance()
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1)
                    }
                    det[i].setNroLinDet(i+1)
                    det[i].setNmbItem(nombreItem)
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem))
                    det[i].setMontoItem( totalItem )
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta2.getDocumento().setDetalleArray(det)
                // Totales
                tot = boleta2.getDocumento().getEncabezado().addNewTotales()

                montoNeto = totalInvoice
                logger.warn("monto neto:" + montoNeto)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta2.timbrar(caf2.getCAF(), caf2.getPrivateKey(null))

                logger.warn("Boleta 2: " + boleta2)



            </script>
            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', partyId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio le√≠do: $folio"/>
            <set field="codRef" value="0" type="Integer"/>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 3
                // ***********************************************************************


                dNow = new Date()
                ft = new SimpleDateFormat("yyyyMMddHHmmssSSS")
                datetime = ft.format(dNow)
                idS = idS + datetime

                folio = Integer.valueOf(3)
                tipoFactura = Integer.valueOf(39)
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces3 = new HashMap&lt;String, String&gt;()
                namespaces3.put("", "http://www.sii.cl/SiiDte")
                namespaces3.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts3 = new XmlOptions()
                opts3.setLoadSubstituteNamespaces(namespaces3)

                // Recuperaci√≥n de archivo CAF desde BD
                caf3 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts3).getAUTORIZACION()

                BOLETADefType boleta3

                // (emisor, receptor, detalle, totales, etc)
                boleta3 = BOLETADefType.Factory.newInstance()

                boleta3.addNewDocumento()
                boleta3.getDocumento().addNewEncabezado()
                // IdDoc
                boleta3.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta3.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks3 = KeyStore.getInstance("PKCS12")
                //ks3.load(new FileInputStream(certData), passCert.toCharArray())
                ks3.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                alias3 = ks3.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks3.getCertificate(alias)
                key = (PrivateKey) ks3.getKey(alias2, passCert.toCharArray())


                boleta3.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta3.getDocumento().setID(idS)

                // Tipo de DTE
                boleta3.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta3.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta3.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta 3: " + boleta3)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp3 = boleta3.getDocumento().getEncabezado().addNewReceptor()
                recp3.setRUTRecep(rutReceptor.trim())
                recp3.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor3 = boleta3.getDocumento().getEncabezado().addNewEmisor()
                emisor3.setRUTEmisor(rutEmisor)
                emisor3.setRznSocEmisor(razonSocialEmisor)
                emisor3.setGiroEmisor(giroEmisor)
                emisor3.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor3.setDirOrigen(direccionOrigen)
                emisor3.setCmnaOrigen(comunaOrigen)
                emisor3.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101075"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance()
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1)
                    }
                    det[i].setNroLinDet(i+1)
                    det[i].setNmbItem(nombreItem)
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem))
                    det[i].setMontoItem( totalItem )
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta3.getDocumento().setDetalleArray(det)
                // Totales
                tot = boleta3.getDocumento().getEncabezado().addNewTotales()

                montoNeto = totalInvoice
                logger.warn("monto neto:" + montoNeto)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta3.timbrar(caf3.getCAF(), caf3.getPrivateKey(null))

                logger.warn("Boleta 3: " + boleta3)

                // *********************************************************************
                // Fin Boleta 3
                // *********************************************************************

                // ***********************************************************************
                // Boleta 4
                // ***********************************************************************


                dNow = new Date()
                ft = new SimpleDateFormat("yyyyMMddHHmmssSSS")
                datetime = ft.format(dNow)
                idS = idS + datetime

                folio = Integer.valueOf(4)
                tipoFactura = Integer.valueOf(39)
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces4 = new HashMap&lt;String, String&gt;()
                namespaces4.put("", "http://www.sii.cl/SiiDte")
                namespaces4.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts4 = new XmlOptions()
                opts4.setLoadSubstituteNamespaces(namespaces4)

                // Recuperaci√≥n de archivo CAF desde BD
                caf4 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts4).getAUTORIZACION()

                BOLETADefType boleta4

                // (emisor, receptor, detalle, totales, etc)
                boleta4 = BOLETADefType.Factory.newInstance()

                boleta4.addNewDocumento()
                boleta4.getDocumento().addNewEncabezado()
                // IdDoc
                boleta4.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta4.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks4 = KeyStore.getInstance("PKCS12")
                //ks4.load(new FileInputStream(certData), passCert.toCharArray())
                ks4.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                alias4 = ks4.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks4.getCertificate(alias)
                key = (PrivateKey) ks4.getKey(alias2, passCert.toCharArray())


                boleta4.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta4.getDocumento().setID(idS)

                // Tipo de DTE
                boleta4.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta4.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta4.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta 4: " + boleta4)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp4 = boleta4.getDocumento().getEncabezado().addNewReceptor()
                recp4.setRUTRecep(rutReceptor.trim())
                recp4.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor4 = boleta4.getDocumento().getEncabezado().addNewEmisor()
                emisor4.setRUTEmisor(rutEmisor)
                emisor4.setRznSocEmisor(razonSocialEmisor)
                emisor4.setGiroEmisor(giroEmisor)
                emisor4.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor4.setDirOrigen(direccionOrigen)
                emisor4.setCmnaOrigen(comunaOrigen)
                emisor4.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101076"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance()
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1)
                    }
                    det[i].setNroLinDet(i+1)
                    det[i].setNmbItem(nombreItem)
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem))
                    det[i].setMontoItem( totalItem )
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta4.getDocumento().setDetalleArray(det)
                // Totales
                tot = boleta4.getDocumento().getEncabezado().addNewTotales()

                montoNeto = totalInvoice
                logger.warn("monto neto:" + montoNeto)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta4.timbrar(caf4.getCAF(), caf4.getPrivateKey(null))

                logger.warn("Boleta 4: " + boleta4)

                // *********************************************************************
                // Fin Boleta 4
                // ********************************************************************

                // ***********************************************************************
                // Boleta 5
                // ***********************************************************************


                dNow = new Date()
                ft = new SimpleDateFormat("yyyyMMddHHmmssSSS")
                datetime = ft.format(dNow)
                idS = idS + datetime

                folio = Integer.valueOf(5)
                tipoFactura = Integer.valueOf(39)
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces5 = new HashMap&lt;String, String&gt;()
                namespaces5.put("", "http://www.sii.cl/SiiDte")
                namespaces5.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts5 = new XmlOptions()
                opts5.setLoadSubstituteNamespaces(namespaces5)

                // Recuperaci√≥n de archivo CAF desde BD
                caf5 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts5).getAUTORIZACION()

                BOLETADefType boleta5

                // (emisor, receptor, detalle, totales, etc)
                boleta5 = BOLETADefType.Factory.newInstance()

                boleta5.addNewDocumento()
                boleta5.getDocumento().addNewEncabezado()
                // IdDoc
                boleta5.getDocumento().getEncabezado().addNewIdDoc()
                // Detalles
                boleta5.getDocumento().addNewDetalle()


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks5 = KeyStore.getInstance("PKCS12")
                //ks5.load(new FileInputStream(certData), passCert.toCharArray())
                ks5.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                alias5 = ks5.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks5.getCertificate(alias)
                key = (PrivateKey) ks5.getKey(alias5, passCert.toCharArray())


                boleta5.getDocumento().getEncabezado().getIdDoc().setFolio(folio)
                boleta5.getDocumento().setID(idS)

                // Tipo de DTE
                boleta5.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura))
                boleta5.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                // Indicador Servicio
                // 1 Boleta de servicios peri√≥dicos
                // 2 Boleta de servicios peri√≥dicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta5.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3))
                logger.warn("Boleta 5: " + boleta5)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)


                // Receptor
                Receptor recp5 = boleta5.getDocumento().getEncabezado().addNewReceptor()
                recp5.setRUTRecep(rutReceptor.trim())
                recp5.setRznSocRecep('Venta a publico sin nombre receptor')

                // Emisor
                Emisor emisor5 = boleta5.getDocumento().getEncabezado().addNewEmisor()
                emisor5.setRUTEmisor(rutEmisor)
                emisor5.setRznSocEmisor(razonSocialEmisor)
                emisor5.setGiroEmisor(giroEmisor)
                emisor5.setCdgSIISucur(Integer.valueOf(codigoSucursalSii))
                emisor5.setDirOrigen(direccionOrigen)
                emisor5.setCmnaOrigen(comunaOrigen)
                emisor5.setCiudadOrigen(ciudadOrigen)

            </script>

            <!-- Campos para elaboraci√≥n de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101122"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.sii.dte.DteLoadServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>

                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance()
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1)
                    }
                    det[i].setNroLinDet(i+1)
                    det[i].setNmbItem(nombreItem)
                    if(unmdItem.equals("WT_kg"))
                    det[i].setUnmdItem("Kg.")
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem))
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem))

                    det[i].setMontoItem( totalItem )
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta5.getDocumento().setDetalleArray(det)
                // Totales
                tot = boleta5.getDocumento().getEncabezado().addNewTotales()

                montoNeto = totalInvoice
                logger.warn("monto neto:" + montoNeto)
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta5.timbrar(caf5.getCAF(), caf5.getPrivateKey(null))

                logger.warn("Boleta 5: " + boleta5)

                // *********************************************************************
                // Fin Boleta5
                // *********************************************************************

                // *********************************************************************
                // Preparaci√≥n de Envio Boleta con 5 boletas
                // *********************************************************************

                logger.warn("Generando Envio Boleta\n")

                // ajustes para el formato (MAGIA) antes de firmar
                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr = new BOLETADefType[5]
                bolArr[0] = boleta

                BOLETADefType boleta0 = boleta

                bolArr[1] = boleta2
                bolArr[2] = boleta3
                bolArr[3] = boleta4
                bolArr[4] = boleta5
                sdte.setDTEArray(bolArr)
                //sdte.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime())
                sdte.setID("ENVBO" + System.nanoTime())


                // Datos de car√°tula
                Caratula caratula = sdte.addNewCaratula()
                caratula.setRutEmisor(rutEmisor)
                caratula.setRutEnvia(rutEnviador)
                //caratula.setRutReceptor(rutReceptor)
                Date dateFchResol = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol)))

                caratula.setNroResol(Integer.valueOf(numeroResolucionSii))
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                caratula.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes = new SubTotDTE[1]
                SubTotDTE subt = SubTotDTE.Factory.newInstance()
                subt.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt.setNroDTE(new BigInteger(5))
                subtDtes[0] = subt
                caratula.setSubTotDTEArray(subtDtes)

                eb.setSetDTE(sdte)
                eb.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument.setEnvioBOLETA(eb)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                envioBoletaDocument = EnvioBOLETADocument.Factory.parse(envioBoletaDocument.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }

                boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0)

                //boleta.sign(key, cert)

                logger.warn("Boleta: " + boleta)

                String uri = ""
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                uri = boleta.getDocumento().getID()
                boleta.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream()
                envioBoletaDocument.save(new File(resultS + "BOL" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts)
                envioBoletaDocument.save(out, opts)

                Document doc2 = MoquiDTEUtils.parseDocument(out.toByteArray())

                byte[] salida = MoquiDTEUtils.sign(doc2, uri, key, cert, uri, "Documento")
                doc2 = MoquiDTEUtils.parseDocument(salida)

                if (Signer.verify(doc2, "Documento")) {
                Path path = Paths.get(resultS + "BOL-Envio.xml")
                Files.write(path, salida)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "BOL-Envio-mala.xml")
                Files.write(path, salida)
                logger.warn("Error al generar boleta folio "+folio)
                }

                // **************************************************************
                // Creaci√≥n de PDF en base a EnvioBOLETA con boletaN
                // PDF Boleta 1
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument1 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb1 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte1 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr1 = new BOLETADefType[1]
                bolArr1[0] = boleta0

                folio = "1"

                sdte1.setDTEArray(bolArr1)
                //sdte1.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime())
                sdte1.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula1 = sdte1.addNewCaratula()
                caratula1.setRutEmisor(rutEmisor)
                caratula1.setRutEnvia(rutEnviador)
                Date dateFchResol1 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula1.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol1)))

                caratula1.setNroResol(Integer.valueOf(numeroResolucionSii))
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                caratula1.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes1 = new SubTotDTE[1]
                SubTotDTE subt1 = SubTotDTE.Factory.newInstance()
                subt1.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt1.setNroDTE(new BigInteger(5))
                subtDtes1[0] = subt1
                caratula1.setSubTotDTEArray(subtDtes1)

                eb1.setSetDTE(sdte1)
                eb1.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument1.setEnvioBOLETA(eb1)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }
                // No es necesario de nuevo
                //boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0)

                String uri1 = ""
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                uri = boleta0.getDocumento().getID()
                boleta0.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out1 = new ByteArrayOutputStream()
                envioBoletaDocument1.save(new File(resultS + "BOLPDF" + tipoFactura + "-1-sinfirma.xml"), opts)
                envioBoletaDocument1.save(out1, opts)

                Document doc1 = MoquiDTEUtils.parseDocument(out1.toByteArray())

                byte[] salida1 = MoquiDTEUtils.sign(doc1, uri, key, cert, uri, "Documento")
                doc1 = MoquiDTEUtils.parseDocument(salida1)

                if (Signer.verify(doc1, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1.xml")
                Files.write(path, salida1)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1-mala.xml")
                Files.write(path, salida1)
                logger.warn("Error al generar boleta folio "+folio)
                }
                // ******************************************************************

                // PDF Boleta 2
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument2 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb2 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte2 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr2 = new BOLETADefType[1]
                bolArr2[0] = boleta2

                folio = "2"

                sdte2.setDTEArray(bolArr2)
                //sdte2.setID("envio-boleta")
                sdte2.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula2 = sdte2.addNewCaratula()
                caratula2.setRutEmisor(rutEmisor)
                caratula2.setRutEnvia(rutEnviador)
                Date dateFchResol2 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula2.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol2)))

                caratula2.setNroResol(Integer.valueOf(numeroResolucionSii))
                //now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                caratula2.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes2 = new SubTotDTE[1]
                SubTotDTE subt2 = SubTotDTE.Factory.newInstance()
                subt2.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt2.setNroDTE(new BigInteger(5))
                subtDtes2[0] = subt2
                caratula2.setSubTotDTEArray(subtDtes2)

                eb2.setSetDTE(sdte2)
                eb2.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument2.setEnvioBOLETA(eb2)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                uri = boleta2.getDocumento().getID()
                boleta2.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out2 = new ByteArrayOutputStream()
                envioBoletaDocument2.save(new File(resultS + "BOLPDF" + tipoFactura + "-2-sinfirma.xml"), opts)
                envioBoletaDocument2.save(out2, opts)

                Document doc22 = MoquiDTEUtils.parseDocument(out2.toByteArray())

                byte[] salida2 = MoquiDTEUtils.sign(doc22, uri, key, cert, uri, "Documento")
                doc22 = MoquiDTEUtils.parseDocument(salida2)

                if (Signer.verify(doc22, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2.xml")
                Files.write(path, salida2)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2-mala.xml")
                Files.write(path, salida2)
                logger.warn("Error al generar boleta folio "+folio)
                }
                // *****************************************************************


                // ******************************************************************

                // PDF Boleta 3
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument3 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb3 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte3 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr3 = new BOLETADefType[1]
                bolArr3[0] = boleta3

                folio = "3"

                sdte3.setDTEArray(bolArr3)
                //sdte3.setID("envio-boleta")
                sdte3.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula3 = sdte3.addNewCaratula()
                caratula3.setRutEmisor(rutEmisor)
                caratula3.setRutEnvia(rutEnviador)
                Date dateFchResol3 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula3.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol3)))

                caratula3.setNroResol(Integer.valueOf(numeroResolucionSii))
                caratula3.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes3 = new SubTotDTE[1]
                SubTotDTE subt3 = SubTotDTE.Factory.newInstance()
                subt3.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt3.setNroDTE(new BigInteger(5))
                subtDtes3[0] = subt3
                caratula3.setSubTotDTEArray(subtDtes3)

                eb3.setSetDTE(sdte3)
                eb3.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument3.setEnvioBOLETA(eb3)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }
                uri = boleta3.getDocumento().getID()
                boleta3.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out3 = new ByteArrayOutputStream()
                envioBoletaDocument3.save(new File(resultS + "BOLPDF" + tipoFactura + "-3-sinfirma.xml"), opts)
                envioBoletaDocument3.save(out3, opts)

                Document doc33 = MoquiDTEUtils.parseDocument(out3.toByteArray())

                byte[] salida3 = MoquiDTEUtils.sign(doc33, uri, key, cert, uri, "Documento")
                doc33 = MoquiDTEUtils.parseDocument(salida3)

                if (Signer.verify(doc33, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3.xml")
                Files.write(path, salida3)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3-mala.xml")
                Files.write(path, salida3)
                logger.warn("Error al generar boleta folio "+folio)
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta 4
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument4 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb4 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte4 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr4 = new BOLETADefType[1]
                bolArr4[0] = boleta4

                folio = "4"

                sdte4.setDTEArray(bolArr4)
                //sdte4.setID("envio-boleta")
                sdte4.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula4 = sdte4.addNewCaratula()
                caratula4.setRutEmisor(rutEmisor)
                caratula4.setRutEnvia(rutEnviador)
                Date dateFchResol4 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula4.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol4)))

                caratula4.setNroResol(Integer.valueOf(numeroResolucionSii))
                caratula4.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes4 = new SubTotDTE[1]
                SubTotDTE subt4 = SubTotDTE.Factory.newInstance()
                subt4.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt4.setNroDTE(new BigInteger(5))
                subtDtes4[0] = subt4
                caratula4.setSubTotDTEArray(subtDtes4)

                eb4.setSetDTE(sdte4)
                eb4.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument4.setEnvioBOLETA(eb4)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }
                uri = boleta4.getDocumento().getID()
                boleta4.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out4 = new ByteArrayOutputStream()
                envioBoletaDocument4.save(new File(resultS + "BOLPDF" + tipoFactura + "-4-sinfirma.xml"), opts)
                envioBoletaDocument4.save(out4, opts)

                Document doc44 = MoquiDTEUtils.parseDocument(out4.toByteArray())

                byte[] salida4 = MoquiDTEUtils.sign(doc44, uri, key, cert, uri, "Documento")
                doc44 = MoquiDTEUtils.parseDocument(salida4)

                if (Signer.verify(doc44, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4.xml")
                Files.write(path, salida4)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4-mala.xml")
                Files.write(path, salida4)
                logger.warn("Error al generar boleta folio "+folio)
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta5
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument5 = EnvioBOLETADocument.Factory.newInstance()
                EnvioBOLETA eb5 = EnvioBOLETA.Factory.newInstance()
                SetDTE sdte5 = SetDTE.Factory.newInstance()

                BOLETADefType[] bolArr5 = new BOLETADefType[1]
                bolArr5[0] = boleta5

                folio = "5"

                sdte5.setDTEArray(bolArr5)
                //sdte5.setID("envio-boleta")
                sdte5.setID("ENVBO" + System.nanoTime())

                // Datos de car√°tula
                Caratula caratula5 = sdte5.addNewCaratula()
                caratula5.setRutEmisor(rutEmisor)
                caratula5.setRutEnvia(rutEnviador)
                Date dateFchResol5 = new SimpleDateFormat("yyyy-MM-dd").parse(fechaResolucionSii)
                caratula5.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol5)))

                caratula5.setNroResol(Integer.valueOf(numeroResolucionSii))
                caratula5.xsetTmstFirmaEnv(now)

                // Subtotales
                SubTotDTE[] subtDtes5 = new SubTotDTE[1]
                SubTotDTE subt5 = SubTotDTE.Factory.newInstance()
                subt5.setTpoDTE(new BigInteger(tipoFactura.toString()))
                subt5.setNroDTE(new BigInteger(5))
                subtDtes5[0] = subt5
                caratula5.setSubTotDTEArray(subtDtes5)

                eb5.setSetDTE(sdte5)
                eb5.setVersion(new BigDecimal("1.0"))
                envioBoletaDocument5.setEnvioBOLETA(eb5)

                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(0)

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts)
                } catch (Exception e) {
                logger.warn("Error al parsear XML")
                return
                }
                uri = boleta5.getDocumento().getID()
                boleta5.getDocumento().xsetTmstFirma(now)

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out5 = new ByteArrayOutputStream()
                envioBoletaDocument5.save(new File(resultS + "BOLPDF" + tipoFactura + "-5-sinfirma.xml"), opts)
                envioBoletaDocument5.save(out5, opts)

                Document doc55 = MoquiDTEUtils.parseDocument(out5.toByteArray())

                byte[] salida5 = MoquiDTEUtils.sign(doc55, uri, key, cert, uri, "Documento")
                doc55 = MoquiDTEUtils.parseDocument(salida5)

                if (Signer.verify(doc55, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5.xml")
                Files.write(path, salida5)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5-mala.xml")
                Files.write(path, salida5)
                logger.warn("Error al generar boleta folio "+folio)
                }
                // *****************************************************************


            </script>
            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->

            <!--set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/-->
            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-1.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-1.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-2.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-2.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-3.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-3.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-4.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-4.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-5.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-5.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf1, dte:xml1, issuerPartyId:activeOrgId, boleta:true]" out-map="context"/>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <!--entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
            </entity-find-one>

            <set field="dteField.issuerPartyId" from="activeOrgId"/>
            <if condition="rutReceptor != '66666666-6'"><then>
                <set field="dteField.receiverPartyId" from="receiverPartyId"/>
                <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
                <set field="dteField.receiverPartyIdValue" from="rutReceptor"/>
            </then></if>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>
            <set field="dteField.invoiceId" from="invoiceId"/-->

            <!--script>
                Date date = new Date()
                Timestamp ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/-->

        </actions>
    </service>


    <service verb="load" noun="Xml">
        <description>
            Carga XML directo en la BD
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentContentTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <set field="archivo" from="filename.getName()"/>

            <entity-find entity-name="mchile.dte.FiscalTaxDocumentContent" list="ftdtList">
                <econdition field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <econdition field-name="fiscalTaxDocumentContentTypeEnumId" from="fiscalTaxDocumentContentTypeEnumId"/>
            </entity-find>
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="fiscalTaxDocument"/>
            <service-call name="mchile.GeneralServices.get#RutForParty" in-map="[rut:fiscalTaxDocument.issuerPartyId]" out-map="rut"/>
            <set field="rutEmisor" from="rut.rutSinFormato"/>
            <entity-find-one entity-name="moqui.basic.Enumeration" auto-field-map="[enumId:fiscalTaxDocument.fiscalTaxDocumentTypeEnumId]" value-field="fiscalTaxDocumentContentType"/>
            <set field="tipoFactura" from="fiscalTaxDocumentContentType.enumCode"/>

            <iterate list="ftdtList" entry="ftdtEntry">
                <set field="ftdtEntry.contentLocation" value="dbresource://moit/erp/dte/${rutEmisor}/DTE-${tipoFactura}-${folio}.xml"/>
                <script>
                    docRr = ec.resource.locationReference(ftdtEntry.contentLocation)
                    docRr.putStream(filename.getInputStream())
                </script>
                <entity-update value-field="ftdtEntry"/>

                <set field="ftdtEntry.contentData" from="filename.get()"/>
                <entity-update value-field="ftdtEntry"/>
            </iterate>
        </actions>
    </service>

    <service verb="genera" noun="LibroVentas">
        <description>
            Generaci√≥n de libro de Ventas
        </description>
        <in-parameters>
            <parameter name="tipo" default="'VENTA'"/><!-- Compra o venta -->
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="plantillaS" from="templateLibro"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>



            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String" value="2"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal
                import java.text.SimpleDateFormat
                import java.util.ArrayList
                import java.util.Properties
                import java.util.Iterator
                import java.util.Map
                import java.util.Map.Entry
                import java.nio.file.Path
                import org.apache.xmlbeans.XmlCursor
                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer

                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate

                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil

                import cl.helpcom.recursos.Validador
                //import cl.helpcom.recursos.ComunicadorAppClienteTXT
                import cl.helpcom.dte.util.FirmaLibro
                import cl.helpcom.dte.util.AgregarCamposLibros
                import cl.helpcom.recursos.LectorFichero

                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenSegmento
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Caratula
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.IVANoRec
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.OtrosImp
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp
                import cl.sii.siiDte.FechaType

                LectorFichero lectorFichero = new LectorFichero()
                String resultadoSinFirma = "/tmp/LBR-temp.xml"

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm")
                idS  = "ID"+dateFormat.format(new Date())

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                //ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT()
                Validador val = new Validador()

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                // Lee y llena los campos  => Caratula se debe armar con par√°metros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C")
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;())
                arrayLineasCaratulas.get(0).add(rutEmisor)
                arrayLineasCaratulas.get(0).add(rutEnviador)
                arrayLineasCaratulas.get(0).add('2019-05')
                arrayLineasCaratulas.get(0).add(fechaResolucionSii)
                arrayLineasCaratulas.get(0).add(numeroResolucionSii)
                arrayLineasCaratulas.get(0).add(tipo)
                arrayLineasCaratulas.get(0).add(tipoLibro)
                arrayLineasCaratulas.get(0).add(tipoEnvio)

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para env√≠o ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd")

                /* XML FACTURA */
                LibroCompraVentaDocument libCV

                /* LibroCV */
                libCV = LibroCompraVentaDocument.Factory.parse(new FileInputStream(plantillaS))

                // libCV = LibroCompraVentaDocument.Factory.newInstance()
                LibroCompraVenta libroCompraVenta = libCV.getLibroCompraVenta()
                libCV.getLibroCompraVenta().setVersion(new BigDecimal("1.0"))
                EnvioLibro envioLibro = libroCompraVenta.addNewEnvioLibro()

                // ID de libro se deber√≠a calcular
                libCV.getLibroCompraVenta().getEnvioLibro().setID(idS)
                //libCV.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                XmlCursor cursor = libCV.newCursor()
                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo()

                AgregarCamposLibros addCampos = new AgregarCamposLibros()
                // Agregar CARATULA
                addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas)

                // Factura Electronica (33)
                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(33)
                totalesPeriodo.setTotDoc(4)
                totalesPeriodo.setTotMntExe(48825)
                totalesPeriodo.setTotMntNeto(9288349)
                totalesPeriodo.setTotMntIVA(1764786)
                totalesPeriodo.setTotMntTotal(11101960)

                // Nota de Debito Electronica (56)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(56)
                totalesPeriodo.setTotDoc(1)
                totalesPeriodo.setTotMntExe(0)
                totalesPeriodo.setTotMntNeto(0)
                totalesPeriodo.setTotMntIVA(0)
                totalesPeriodo.setTotMntTotal(0)

                // Nota de Credito Electr√≥nica (61)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(61)
                totalesPeriodo.setTotDoc(3)
                totalesPeriodo.setTotMntExe(35183)
                totalesPeriodo.setTotMntNeto(3655247)
                totalesPeriodo.setTotMntIVA(694497)
                totalesPeriodo.setTotMntTotal(4384927)

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3))
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml"

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                //opts = new XmlOptions()
                opts.setSavePrettyPrint()
                //opts.setSavePrettyPrintIndent(0)
                //opts.setCharacterEncoding("ISO-8859-1")
                libCV = LibroCompraVentaDocument.Factory.parse(libCV.newInputStream(opts), (opts))

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma)
                ByteArrayOutputStream out = new ByteArrayOutputStream()
                //libCV.save(archivoEnvio, opts)

                libCV.save(new File(resultS + "LIBCV" + idS + "-sinfirma.xml"), opts)
                libCV.save(out, opts)

                FirmaLibro firmaLibro = new FirmaLibro()

                String mensaje=firmaLibro.firmarLibro(certData, passCert, resultS + "LIBCV" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio)
                logger.warn("Mensaje: " + mensaje)

            </script>
            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <!--set field="periodo" from="arrayLineasCaratulas.get(0).get(2)"/>
            <set field="tipoLibro" from="arrayLineasCaratulas.get(0).get(5)"/-->
        </actions>
    </service>

    <service verb="genera" noun="LibroCompras2">
        <description>
            Generaci√≥n de libro de Compra/Venta
        </description>
        <in-parameters>
            <parameter name="tipo" default="'COMPRA'"/><!-- Compra o venta -->
            <parameter name="tipoLibro" default="'MENSUAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2020-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <return error="true" message="ppp"/>

            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="plantillaS" from="templateLibro"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal
                import java.text.SimpleDateFormat
                import java.util.ArrayList
                import java.util.Properties
                import java.util.Iterator
                import java.util.Map
                import java.util.Map.Entry
                import java.nio.file.Path
                import org.apache.xmlbeans.XmlCursor
                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer

                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate

                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil

                //import cl.helpcom.recursos.Validador
                //import cl.helpcom.recursos.ComunicadorAppClienteTXT
                //import cl.helpcom.dte.util.FirmaLibro
                //wimport cl.helpcom.dte.util.AgregarCamposLibros
                //import cl.helpcom.recursos.LectorFichero

                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenSegmento
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Caratula
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.IVANoRec
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.OtrosImp
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp
                import cl.sii.siiDte.FechaType

                //LectorFichero lectorFichero = new LectorFichero()
                String resultadoSinFirma = "/tmp/LBR-temp.xml"

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm")
                idS  = "ID"+dateFormat.format(new Date())

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT()
                //Validador val = new Validador()

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;()
                // Lee y llena los campos  => Caratula se debe armar con par√°metros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C")
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;())
                logger.warn("Emisor:" +rutEmisor)
                logger.warn("Enviador:" +rutEnviador)
                arrayLineasCaratulas.get(0).add(rutEmisor)
                arrayLineasCaratulas.get(0).add(rutEnviador)
                arrayLineasCaratulas.get(0).add('2020-05')
                arrayLineasCaratulas.get(0).add(fechaResolucionSii)
                arrayLineasCaratulas.get(0).add(numeroResolucionSii)
                arrayLineasCaratulas.get(0).add(tipo)
                arrayLineasCaratulas.get(0).add(tipoLibro)
                arrayLineasCaratulas.get(0).add(tipoEnvio)

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para env√≠o ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd")

                /* XML FACTURA */
                LibroCompraVentaDocument libCV

                /* LibroCV */
                libCV = LibroCompraVentaDocument.Factory.parse(new FileInputStream(plantillaS))

                // libCV = LibroCompraVentaDocument.Factory.newInstance()
                LibroCompraVenta libroCompraVenta = libCV.getLibroCompraVenta()
                libCV.getLibroCompraVenta().setVersion(new BigDecimal("1.0"))
                EnvioLibro envioLibro = libroCompraVenta.addNewEnvioLibro()

                // ID de libro se deber√≠a calcular
                libCV.getLibroCompraVenta().getEnvioLibro().setID(idS)
                //libCV.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                XmlCursor cursor = libCV.newCursor()
                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo()

                AgregarCamposLibros addCampos = new AgregarCamposLibros()
                // Agregar CARATULA
                addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas)

                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(30)
                totalesPeriodo.setTotDoc(2)
                totalesPeriodo.setTotMntExe(0)
                totalesPeriodo.setTotMntNeto(57995)
                totalesPeriodo.setTotMntIVA(5344)
                totalesPeriodo.setTotOpIVAUsoComun(1)
                totalesPeriodo.setTotIVAUsoComun(5675)
                totalesPeriodo.setFctProp(0.6)
                totalesPeriodo.setTotCredIVAUsoComun(3405)
                totalesPeriodo.setTotMntTotal(69014)


                // Factura Electronica (33)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(33)
                totalesPeriodo.setTotDoc(2)
                totalesPeriodo.setTotMntExe(9226)
                totalesPeriodo.setTotMntNeto(18061)
                totalesPeriodo.setTotMntIVA(1441)
                // IVA No Recuperable
                totIvaNoRec = new ArrayList&lt;TotIVANoRec&gt;()
                oit = TotIVANoRec.Factory.newInstance()
                oit.setCodIVANoRec(4)
                oit.setTotOpIVANoRec(1)
                oit.setTotMntIVANoRec(1991)
                totIvaNoRec.add(oit)
                arrayTot = new TotIVANoRec[totIvaNoRec.size()]
                totIvaNoRec.toArray(arrayTot)
                totalesPeriodo.setTotIVANoRecArray(arrayTot)
                totalesPeriodo.setTotMntTotal(30719)

                // Factura Exenta Electronica (34)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                //totalesPeriodo.setTpoDoc(34)
                //totalesPeriodo.setTotDoc(1)
                //totalesPeriodo.setTotMntExe(29744)
                //totalesPeriodo.setTotMntNeto(0)
                //totalesPeriodo.setTotMntIVA(0)
                //totalesPeriodo.setTotMntTotal(29744)

                // Factura Exenta (32)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                //totalesPeriodo.setTpoDoc(32)
                //totalesPeriodo.setTotDoc(1)
                //totalesPeriodo.setTotMntExe(29628)
                //totalesPeriodo.setTotMntNeto(0)
                //totalesPeriodo.setTotMntIVA(0)
                //totalesPeriodo.setTotMntTotal(29628)

                // Nota de Credito (60)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(60)
                totalesPeriodo.setTotDoc(2)
                totalesPeriodo.setTotMntExe(0)
                totalesPeriodo.setTotMntNeto(8209)
                totalesPeriodo.setTotMntIVA(1560)
                totalesPeriodo.setTotMntTotal(9769)

                // Nota de Credito Electronica (61)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                //totalesPeriodo.setTpoDoc(61)
                //totalesPeriodo.setTotDoc(1)
                //totalesPeriodo.setTotMntExe(8649)
                //totalesPeriodo.setTotMntNeto(5990)
                //totalesPeriodo.setTotMntIVA(0)
                // IVA No Recuperable
                //totIvaNoRec = new ArrayList&lt;TotIVANoRec&gt;()
                //oit = TotIVANoRec.Factory.newInstance()
                //oit.setCodIVANoRec(1)
                //oit.setTotOpIVANoRec(1)
                //oit.setTotMntIVANoRec(1138)
                //totIvaNoRec.add(oit)
                //arrayTot = new TotIVANoRec[totIvaNoRec.size()]
                //totIvaNoRec.toArray(arrayTot)
                //totalesPeriodo.setTotIVANoRecArray(arrayTot)
                //totalesPeriodo.setTotMntTotal(15777)

                // Nota de Debito Electronica (56)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                //totalesPeriodo.setTpoDoc(56)
                //totalesPeriodo.setTotDoc(1)
                //totalesPeriodo.setTotMntExe(3967)
                //totalesPeriodo.setTotMntNeto(0)
                //totalesPeriodo.setTotMntIVA(0)
                //totalesPeriodo.setTotMntTotal(3967)

                // Factura de Compra Electronica (46)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo()
                totalesPeriodo.setTpoDoc(46)
                totalesPeriodo.setTotDoc(1)
                totalesPeriodo.setTotMntExe(0)
                totalesPeriodo.setTotMntNeto(9801)
                totalesPeriodo.setTotMntIVA(1862)
                ArrayList&lt;TotOtrosImp&gt; totOtrosImp = new ArrayList&lt;TotOtrosImp&gt;()
                toimp = TotOtrosImp.Factory.newInstance()
                toimp.setCodImp(15)
                toimp.setTotMntImp(1862)
                totOtrosImp.add(toimp)
                arrayTot = new TotOtrosImp[totOtrosImp.size()]
                totOtrosImp.toArray(arrayTot)
                totalesPeriodo.setTotOtrosImpArray(arrayTot)
                totalesPeriodo.setTotMntTotal(9801)

                // **************************************************
                // Factura 234
                // Detalles
                Detalle detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(30)
                detalle.setNroDoc(234)
                detalle.setTasaImp(19)
                //detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-21"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(28127)
                detalle.setMntIVA(5344)
                detalle.setMntTotal(33471)

                // Factura Electr√≥nica 32
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(33)
                detalle.setNroDoc(32)
                detalle.setTasaImp(19)
                //detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-10"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(9226)
                detalle.setMntNeto(7584)
                detalle.setMntIVA(1441)
                detalle.setMntTotal(18251)

                // Factura 781
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(30)
                detalle.setNroDoc(781)
                detalle.setTasaImp(19)
                detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-21"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(29868)
                detalle.setIVAUsoComun(5675)
                detalle.setMntTotal(35543)


                // Nota de Cr√©dito 451
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(60)
                detalle.setNroDoc(451)
                detalle.setTasaImp(19)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-29"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(2763)
                detalle.setMntIVA(525)
                detalle.setMntTotal(3288)

                // Factura Electronica 67
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(33)
                detalle.setNroDoc(67)
                detalle.setTasaImp(19)
                detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-10"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(10477)
                ivaNoRec = new ArrayList&lt;IVANoRec&gt;()
                oi = IVANoRec.Factory.newInstance()
                oi.setCodIVANoRec(new BigInteger(4))
                oi.setMntIVANoRec(1991)
                ivaNoRec.add(oi)
                array = new IVANoRec[ivaNoRec.size()]
                ivaNoRec.toArray(array)
                detalle.setIVANoRecArray(array)
                detalle.setMntTotal(12468)

                // Factura de Compra Electr√≥nica 9
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(46)
                detalle.setNroDoc(9)
                detalle.setTasaImp(19)
                //detalle.setTpoImp(1)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-10"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(9801)
                detalle.setMntIVA(1862)
                ArrayList&lt;OtrosImp&gt; otrosImp = new ArrayList&lt;OtrosImp&gt;()
                oimp = OtrosImp.Factory.newInstance()
                oimp.setCodImp(15)
                oimp.setTasaImp(19)
                oimp.setMntImp(1862)
                otrosImp.add(oimp)
                array = new OtrosImp[otrosImp.size()]
                otrosImp.toArray(array)
                detalle.setOtrosImpArray(array)
                detalle.setMntTotal(9801)

                // Nota de Cr√©dito 211
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(60)
                detalle.setNroDoc(211)
                detalle.setTasaImp(19)
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-04-12"))
                detalle.setRUTDoc("96800570-7")
                detalle.setRznSoc("ENEL DISTRIBUCION")
                detalle.setMntExe(0)
                detalle.setMntNeto(5446)
                detalle.setMntIVA(1035)
                detalle.setMntTotal(6481)

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3))
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml"


                // Agregar DETALLES (SOLO LIBRO DE COMPRAS)
                if(tipo.equals("COMPRA")) {
                logger.warn("agregando detalles libro de compras")
                addCampos.addDatosDetalle(envioLibro, arrayLineasDetalle,c.getCantidadDetallesTotales())
                //addCampos.addDatosDetalle(envioLibro, arrayLineasDetalle,7)
                }
                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                //opts = new XmlOptions()
                opts.setSavePrettyPrint()
                //opts.setSavePrettyPrintIndent(0)
                //opts.setCharacterEncoding("ISO-8859-1")
                libCV = LibroCompraVentaDocument.Factory.parse(libCV.newInputStream(opts), (opts))

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma)
                ByteArrayOutputStream out = new ByteArrayOutputStream()
                //libCV.save(archivoEnvio, opts)

                libCV.save(new File(resultS + "LIBCV" + idS + "-sinfirma.xml"), opts)
                libCV.save(out, opts)

                FirmaLibro firmaLibro = new FirmaLibro()

                String mensaje=firmaLibro.firmarLibro(certData, passCert, resultS + "LIBCV" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio)

            </script>
        </actions>
    </service>



    <service verb="genera" noun="SetFacturaExenta">
        <description>
            Generaci√≥n de libro de Compra/Venta
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <return error="true" message="Not implemented yet!"/>
        </actions>
    </service>


    <service verb="genera" noun="SetBasicoCaso1">
        <description>
            Generaci√≥n de Caso 1 Set Prueba Basico
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="qtyItem1Caso1" required="true" type="Long"/>
            <parameter name="prcItem1Caso1" required="true" type="Long"/>
            <parameter name="qtyItem2Caso1" required="true" type="Long"/>
            <parameter name="prcItem2Caso1" required="true" type="Long"/>
            <parameter name="refCaso1" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>


            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-33', partyId:activeOrgId]" out-map="context"/>

            <set field="codRef" value="0" type="Integer"/>

            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                logger.warn("Creando Caso 1, con folio: " + folio)
                /* Primera Factura *******************************************
                CASO 1889781-1
                ==============
                DOCUMENTO	FACTURA ELECTRONICA

                ITEM			CANTIDAD	PRECIO UNITARIO
                Caj√≥n AFECTO		    130		   1274
                Relleno AFECTO		     56		   2066
                **************************************************************/

                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

                folioCaso1 = folio
                tipoFactura = Integer.valueOf('33')
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                // Recuperaci√≥n de archivo CAF desde BD

                caf = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts).getAUTORIZACION()

                // Construyo base a partir del template
                doc = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                IdDoc iddoc = doc.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                // Obtenci√≥n de ID distinto
                logger.warn("id: " + System.nanoTime())
                doc.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                Calendar cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                iddoc.xsetFchVenc(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Si es gu√≠a de despacho se configura indicador de traslado

                // Receptor
                Receptor recp = doc.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel
                recp.setRUTRecep("96806980-2")
                recp.setRznSocRecep("ENTEL PCS TELECOMUNICACIONES S A")
                recp.setGiroRecep("TELECOMUNICACIONES")
                recp.setContacto("23651000")
                recp.setDirRecep("AVDA. COSTANERA SUR RIO MAPOCHO 2760")
                recp.setCmnaRecep("Las Condes")
                recp.setCiudadRecep("Santiago")

                Detalle[] det = new Detalle[2]

                // Agrego detalle 0
                det[0] = Detalle.Factory.newInstance()
                det[0].setNroLinDet(1)
                det[0].setNmbItem("Caj√≥n AFECTO")
                //det[0].setQtyItem(BigDecimal.valueOf(130))
                det[0].setQtyItem(BigDecimal.valueOf(qtyItem1Caso1))
                //det[0].setPrcItem(BigDecimal.valueOf(1274))
                det[0].setPrcItem(BigDecimal.valueOf(prcItem1Caso1))
                //totalItem1 = 130 * 1274
                totalItem1 = qtyItem1Caso1 * prcItem1Caso1
                det[0].setMontoItem(Math.round(totalItem1))
                ivaItem1 = Math.round(totalItem1 * 0.19)

                det[1] = Detalle.Factory.newInstance()
                det[1].setNroLinDet(2)
                det[1].setNmbItem("Relleno AFECTO")
                //det[1].setQtyItem(BigDecimal.valueOf(56))
                det[1].setQtyItem(BigDecimal.valueOf(qtyItem2Caso1))
                //det[1].setPrcItem(BigDecimal.valueOf(2066))
                det[1].setPrcItem(BigDecimal.valueOf(prcItem2Caso1))
                //totalItem2 = 56*2066
                totalItem2 = qtyItem2Caso1 * prcItem2Caso1
                det[1].setMontoItem(Math.round(totalItem2))
                ivaItem2 = Math.round(totalItem2 * 0.19)

                doc.getDTE().getDocumento().setDetalleArray(det)

                // Totales
                Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales()
                long totalNeto = totalItem1 + totalItem2
                tot.setMntNeto(Math.round(totalNeto))
                tot.setMntExe(0)
                //tot.setTasaIVA(BigDecimal.valueOf(19))
                cl.sii.siiDte.PctType tasaIVA = cl.sii.siiDte.PctType.Factory.newValue("19.00")
                tot.xsetTasaIVA(tasaIVA)
                // Valor de solo IVA
                long totalIVA = ivaItem1 + ivaItem2
                tot.setIVA(totalIVA)
                // total neto + IVA
                totalInvoice = totalNeto + totalIVA
                tot.setMntTotal(Math.round(totalInvoice))
                amount = totalInvoice

                // Referencias
                Referencia[] ref = new Referencia[1]

                ref[0] = Referencia.Factory.newInstance()
                ref[0].setNroLinRef(1)
                ref[0].setTpoDocRef('SET')
                ref[0].setFolioRef(""+folio)
                ref[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                //ref[0].setRazonRef("CASO 1889781-1")
                ref[0].setRazonRef(refCaso1)

                doc.getDTE().getDocumento().setReferenciaArray(ref)

                // Timbro

                doc.getDTE().timbrar(caf.getCAF(), caf.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setLoadAdditionalNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces)

                String uri = ""
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc.getDTE().isSetDocumento()) {
                uri = doc.getDTE().getDocumento().getID()
                doc.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc.getDTE().isSetLiquidacion()) {
                uri = doc.getDTE().getLiquidacion().getID()
                doc.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc.getDTE().isSetExportaciones()) {
                uri = doc.getDTE().getExportaciones().getID()
                doc.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream()
                doc.save(out, opts)
                Document doc21 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida = MoquiDTEUtils.sign(doc21, uri, key, cert, uri, "Documento")
                doc21 = MoquiDTEUtils.parseDocument(salida)

                if (Signer.verify(doc21, "Documento")) {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                Files.write(path, salida)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                Files.write(path, salida)
                logger.warn("Error al generar factura folio "+folio)
                }
            </script>
            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                byte[] bArray = new byte[(int) file.length()]
                try {
                    fis = new FileInputStream(file)
                    fis.read(bArray)
                    fis.close()
                } catch (IOException ioExp) {
                    ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                byte[] bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                    fisCedible = new FileInputStream(fileCedible)
                    fisCedible.read(bArrayCedible)
                    fisCedible.close()
                } catch (IOException ioExp) {
                    ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-33'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>


            <!--set field="dteField.receiverPartyId" from="receiverPartyId"/-->
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>
            <set field="dteField.sentRecStatusId" value="Ftd-NotSentRec"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                Date date = new Date()
                Timestamp ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>

            <!-- Eliminacion de XML temporal -->
            <script>
                File XMLfile = new File(xml)
                XMLfile.delete()
            </script>

            <!-- Eliminacion de PDF temporal -->
            <script>
                file.delete()
                fileCedible.delete()
            </script>

        </actions>

    </service>

    <service verb="genera" noun="SetBasicoCaso2">
        <description>
            Generaci√≥n de Set Basico Caso 2
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="qtyItem1Caso2" required="true" type="Long"/>
            <parameter name="prcItem1Caso2" required="true" type="Long"/>
            <parameter name="qtyItem2Caso2" required="true" type="Long"/>
            <parameter name="prcItem2Caso2" required="true" type="Long"/>
            <parameter name="descItem1Caso2" required="true" type="Long"/>
            <parameter name="descItem2Caso2" required="true" type="Long"/>
            <parameter name="refCaso2" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>


            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-33', partyId:activeOrgId]" out-map="dte2map"/>

            <set field="folio" from="dte2map.folio"/>
            <set field="codRef" value="0" type="Integer"/>

            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

                logger.warn("Creando Caso 2, con folio: " + dte2map.folio)
                /************************************************************************

                CASO 1889781-2
                ==============
                DOCUMENTO	FACTURA ELECTRONICA

                ITEM			CANTIDAD	PRECIO UNITARIO		DESCUENTO ITEM
                Pa√±uelo AFECTO		    306		   2465			      5%
                ITEM 2 AFECTO		    235		   1527			      8%

                *************************************************************************/
                // Leo el folio
                tipoFactura = Integer.valueOf('33')
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces2 = new HashMap&lt;String, String&gt;()
                namespaces2.put("", "http://www.sii.cl/SiiDte")
                namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts2 = new XmlOptions()
                opts2.setLoadSubstituteNamespaces(namespaces2)

                // Recuperaci√≥n de archivo CAF desde BD
                AutorizacionType caf2 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(dte2map.cafData.getBytes()), opts2).getAUTORIZACION()

                // Construyo base a partir del template
                DTEDocument doc2 = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts2)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                iddoc = doc2.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                // Obtenci√≥n de ID distinto
                doc2.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Si es gu√≠a de despacho se configura indicador de traslado

                // Receptor
                Receptor recp2 = doc2.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel

                recp2.setRUTRecep("79693930-3")
                recp2.setRznSocRecep("LOREAL")
                recp2.setGiroRecep("COMERCIALIZ. PROD. FARMAC. Y COSMETICOS")
                recp2.setContacto("224406777")
                recp2.setDirRecep("Av. Apoquindo 3885 Of. 201")
                recp2.setCmnaRecep("LAS CONDES")
                recp2.setCiudadRecep("SANTIAGO")


                Detalle[] det2 = new Detalle[2]

                // Agrego detalle 0
                det2[0] = Detalle.Factory.newInstance()
                det2[0].setNroLinDet(1)
                det2[0].setNmbItem("Pa√±uelo AFECTO")
                det2[0].setQtyItem(BigDecimal.valueOf(qtyItem1Caso2))
                det2[0].setPrcItem(BigDecimal.valueOf(prcItem1Caso2))
                det2[0].setDescuentoPct(descItem1Caso2)
                descuento = (qtyItem1Caso2*prcItem1Caso2) * descItem1Caso2 / 100
                totalItem1 = Math.round(qtyItem1Caso2*prcItem1Caso2)-Math.round(descuento)
                det2[0].setMontoItem(totalItem1)
                det2[0].setDescuentoMonto(Math.round(descuento))

                det2[1] = Detalle.Factory.newInstance()
                det2[1].setNroLinDet(2)
                det2[1].setNmbItem("ITEM 2 AFECTO")
                det2[1].setQtyItem(BigDecimal.valueOf(qtyItem2Caso2))
                det2[1].setPrcItem(BigDecimal.valueOf(prcItem2Caso2))
                det2[1].setDescuentoPct(descItem2Caso2)
                descuento = (qtyItem2Caso2*prcItem2Caso2) * descItem2Caso2 / 100
                totalItem2 = Math.round(qtyItem2Caso2*prcItem2Caso2)-Math.round(descuento)
                det2[1].setMontoItem(totalItem2)
                det2[1].setDescuentoMonto(Math.round(descuento))

                doc2.getDTE().getDocumento().setDetalleArray(det2)

                // Totales
                Totales tot2 = doc2.getDTE().getDocumento().getEncabezado().addNewTotales()
                totalNeto = totalItem1 + totalItem2
                tot2.setMntNeto(Math.round(totalNeto))
                tot2.setTasaIVA(BigDecimal.valueOf(19))
                // Valor de solo IVA
                totalIVA = Math.round(totalNeto * 0.19)
                tot2.setIVA(totalIVA)
                // total neto + IVA
                //totalInvoice = totalNeto + totalIVA + totalExento
                totalInvoice = totalNeto + totalIVA
                tot2.setMntTotal(Math.round(totalInvoice))
                //if(totalExento &gt; 0) {
                //    tot.setMntExe(Math.round(totalExento))
                //}
                amount = totalInvoice

                // Referencias
                Referencia[] ref2 = new Referencia[1]

                ref2[0] = Referencia.Factory.newInstance()
                ref2[0].setNroLinRef(1)
                ref2[0].setTpoDocRef('SET')
                ref2[0].setFolioRef(""+folio)
                ref2[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref2[0].setRazonRef(refCaso2)

                doc2.getDTE().getDocumento().setReferenciaArray(ref2)

                // Timbro
                doc2.getDTE().timbrar(caf2.getCAF(), caf2.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces2)
                opts.setLoadSubstituteNamespaces(namespaces2)
                opts.setLoadAdditionalNamespaces(namespaces2)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc2 = DTEDocument.Factory.parse(doc2.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces2)

                uri = ""
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc2.getDTE().isSetDocumento()) {
                uri = doc2.getDTE().getDocumento().getID()
                doc2.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc2.getDTE().isSetLiquidacion()) {
                uri = doc2.getDTE().getLiquidacion().getID()
                doc2.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc2.getDTE().isSetExportaciones()) {
                uri = doc2.getDTE().getExportaciones().getID()
                doc2.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri
                out = new ByteArrayOutputStream()
                doc2.save(out, opts)
                Document doc22 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida2 = MoquiDTEUtils.sign(doc22, uri, key, cert, uri, "Documento")
                doc22 = MoquiDTEUtils.parseDocument(salida2)

                if (Signer.verify(doc22, "Documento")) {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                Files.write(path, salida2)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                Files.write(path, salida2)
                logger.warn("Error al generar factura folio "+folio)
                }
            </script>
            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-33'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>

            <!--set field="dteField.receiverPartyId" from="receiverPartyId"/-->
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                date = new Date()
                ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>

            <!-- Eliminacion de XML temporal -->
            <script>
                XMLfile = new File(xml)
                XMLfile.delete()
            </script>

            <!-- Eliminacion de PDF temporal -->
            <script>
                file.delete()
                fileCedible.delete()
            </script>

        </actions>
    </service>

    <service verb="genera" noun="SetBasicoCaso3">
        <description>
            Generaci√≥n de DTE de acuerdo a plantilla
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="qtyItem1Caso3" required="true" type="Long"/>
            <parameter name="prcItem1Caso3" required="true" type="Long"/>
            <parameter name="qtyItem2Caso3" required="true" type="Long"/>
            <parameter name="prcItem2Caso3" required="true" type="Long"/>
            <parameter name="qtyItem3Caso3" required="true" type="Long"/>
            <parameter name="prcItem3Caso3" required="true" type="Long"/>
            <parameter name="refCaso3" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-33', partyId:activeOrgId]" out-map="dte3map"/>

            <set field="folio" from="dte3map.folio"/>

            <set field="codRef" value="0" type="Integer"/>
            <set field="receiverPartyId" value="100102"/>

            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

                logger.warn("Creando Caso 3, con folio: " + dte3map.folio)
                /************************************************************************

                CASO 1889781-3
                ==============
                DOCUMENTO	FACTURA ELECTRONICA

                ITEM			CANTIDAD	PRECIO UNITARIO
                Pintura B y W AFECTO	     27		   2676
                ITEM 2 AFECTO		    161		   3069
                ITEM 3 SERVICIO EXENTO	      1		  34785

                *************************************************************************/


                tipoFactura = Integer.valueOf('33')
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces3 = new HashMap&lt;String, String&gt;()
                namespaces3.put("", "http://www.sii.cl/SiiDte")
                namespaces3.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts3 = new XmlOptions()
                opts3.setLoadSubstituteNamespaces(namespaces3)

                // Recuperaci√≥n de archivo CAF desde BD
                AutorizacionType caf3 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(dte3map.cafData.getBytes()), opts3).getAUTORIZACION()

                // Construyo base a partir del template
                DTEDocument doc3 = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts3)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                iddoc = doc3.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                // Obtenci√≥n de ID distinto
                doc3.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Si es gu√≠a de despacho se configura indicador de traslado

                // Receptor
                Receptor recp3 = doc3.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel

                recp3.setRUTRecep("96992030-1")
                recp3.setRznSocRecep("Sociedad Concesionaria Vespucio Norte Express S.A.")
                recp3.setGiroRecep("CONSTRUCCION DE CARRETERAS Y LINEAS DE")
                recp3.setContacto("6005713000")
                recp3.setDirRecep("AMERICO VESPUCIO ORIENTE 1305")
                recp3.setCmnaRecep("PUDAHUEL")
                recp3.setCiudadRecep("SANTIAGO")

                Detalle[] det3 = new Detalle[3]

                // Agrego detalle 0
                det3[0] = Detalle.Factory.newInstance()
                det3[0].setNroLinDet(1)
                det3[0].setNmbItem("Pintura B&amp;W AFECTO")
                det3[0].setQtyItem(BigDecimal.valueOf(qtyItem1Caso3))
                det3[0].setPrcItem(BigDecimal.valueOf(prcItem1Caso3))
                det3[0].setMontoItem(Math.round(qtyItem1Caso3*prcItem1Caso3))
                totalItem1 = Math.round(qtyItem1Caso3*prcItem1Caso3)

                det3[1] = Detalle.Factory.newInstance()
                det3[1].setNroLinDet(2)
                det3[1].setNmbItem("ITEM 2 AFECTO")
                det3[1].setQtyItem(BigDecimal.valueOf(qtyItem2Caso3))
                det3[1].setPrcItem(BigDecimal.valueOf(prcItem2Caso3))
                det3[1].setMontoItem( Math.round(qtyItem2Caso3 * prcItem2Caso3))
                totalItem2 = Math.round(qtyItem2Caso3 * prcItem2Caso3)

                det3[2] = Detalle.Factory.newInstance()
                det3[2].setNroLinDet(3)
                det3[2].setNmbItem("ITEM 3 SERVICIO EXENTO")
                det3[2].setQtyItem(BigDecimal.valueOf(qtyItem3Caso3))
                det3[2].setPrcItem(BigDecimal.valueOf(prcItem3Caso3))
                det3[2].setMontoItem( Math.round(qtyItem3Caso3 * prcItem3Caso3))
                det3[2].setIndExe(1)
                totalItem3 = Math.round(qtyItem3Caso3 * prcItem3Caso3)
                totalExento = totalItem3

                doc3.getDTE().getDocumento().setDetalleArray(det3)

                // Totales
                Totales tot3 = doc3.getDTE().getDocumento().getEncabezado().addNewTotales()
                totalNeto = totalItem1 + totalItem2
                tot3.setMntNeto(Math.round(totalNeto))
                tot3.setMntExe(totalExento)
                tot3.setTasaIVA(BigDecimal.valueOf(19))
                // Valor de solo IVA
                totalIVA = Math.round(totalNeto * 0.19)
                tot3.setIVA(totalIVA)
                totalInvoice = totalNeto + totalIVA+totalExento
                tot3.setMntTotal(Math.round(totalInvoice))
                amount = totalInvoice

                // Referencias
                Referencia[] ref3 = new Referencia[1]

                ref3[0] = Referencia.Factory.newInstance()
                ref3[0].setNroLinRef(1)
                ref3[0].setTpoDocRef('SET')
                ref3[0].setFolioRef(""+folio)
                ref3[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref3[0].setRazonRef(refCaso3)

                doc3.getDTE().getDocumento().setReferenciaArray(ref3)

                // Timbro
                doc3.getDTE().timbrar(caf3.getCAF(), caf3.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces3)
                opts.setLoadSubstituteNamespaces(namespaces3)
                opts.setLoadAdditionalNamespaces(namespaces3)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc3 = DTEDocument.Factory.parse(doc3.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces3)

                uri = ""
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc3.getDTE().isSetDocumento()) {
                uri = doc3.getDTE().getDocumento().getID()
                doc3.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc3.getDTE().isSetLiquidacion()) {
                uri = doc3.getDTE().getLiquidacion().getID()
                doc3.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc3.getDTE().isSetExportaciones()) {
                uri = doc3.getDTE().getExportaciones().getID()
                doc3.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri
                out = new ByteArrayOutputStream()
                doc3.save(out, opts)
                doc3.save(new File(resultS + "DTE" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts)
                Document doc23 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida3 = MoquiDTEUtils.sign(doc23, uri, key, cert, uri, "Documento")
                doc23 = MoquiDTEUtils.parseDocument(salida3)

                if (Signer.verify(doc23, "Documento")) {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                    Files.write(path, salida3)
                    logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                    Files.write(path, salida3)
                    logger.warn("Error al generar factura folio "+folio)
                }
            </script>

            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-33'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>


            <!--set field="dteField.receiverPartyId" from="receiverPartyId"/-->
            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                date = new Date()
                ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida3]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>
            <script>
                <!-- Eliminacion de XML temporal -->
                XMLfile = new File(xml)
                XMLfile.delete()
                <!-- Eliminacion de PDF temporal -->
                file.delete()
                fileCedible.delete()
            </script>

        </actions>
    </service>

    <service verb="genera" noun="SetBasicoCaso4">

        <description>
            Generaci√≥n Set Basico Caso 4
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="qtyItem1Caso4" required="true" type="Long"/>
            <parameter name="prcItem1Caso4" required="true" type="Long"/>
            <parameter name="qtyItem2Caso4" required="true" type="Long"/>
            <parameter name="prcItem2Caso4" required="true" type="Long"/>
            <parameter name="qtyItem3Caso4" required="true" type="Long"/>
            <parameter name="prcItem3Caso4" required="true" type="Long"/>
            <parameter name="refCaso4" required="true"/>
            <parameter name="descGlobalAfectos" required="true" type="Long"/>
        </in-parameters>
        <actions>
            <!--return error="true" message="
                $qtyItem1Caso4, $prcItem1Caso4 -
                $qtyItem2Caso4, $prcItem2Caso4 -
                $qtyItem3Caso4, $prcItem3Caso4 -
                $refCaso4, $descGlobalAfectos
            "/-->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>


            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-33', partyId:activeOrgId]" out-map="dte4map"/>

            <set field="folio" from="dte4map.folio"/>
            <set field="codRef" value="0" type="Integer"/>

            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                int folioCaso1
                int folioCaso2
                int folioCaso3
                int folioCaso5
                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

            </script>

            <set field="receiverPartyId" value="100102"/>
            <script>
                logger.warn("Creando Caso 4, con folio: " + dte4map.folio)
                /************************************************************************

                CASO 1889781-4
                ==============
                DOCUMENTO	FACTURA ELECTRONICA

                ITEM			CANTIDAD	PRECIO UNITARIO
                ITEM 1 AFECTO		    127		   2252
                ITEM 2 AFECTO		     54		   2197
                ITEM 3 SERVICIO EXENTO	      2		   6776

                DESCUENTO GLOBAL ITEMES AFECTOS		      9%

                *************************************************************************/
                tipoFactura = Integer.valueOf('33')
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces4 = new HashMap&lt;String, String&gt;()
                namespaces4.put("", "http://www.sii.cl/SiiDte")
                namespaces4.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts4 = new XmlOptions()
                opts4.setLoadSubstituteNamespaces(namespaces4)

                // Recuperaci√≥n de archivo CAF desde BD
                AutorizacionType caf4 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(dte4map.cafData.getBytes()), opts4).getAUTORIZACION()

                // Construyo base a partir del template
                DTEDocument doc4 = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts4)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                iddoc = doc4.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                // Obtenci√≥n de ID distinto
                doc4.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Receptor
                Receptor recp4 = doc4.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel
                recp4.setRUTRecep("76114143-0")
                recp4.setRznSocRecep("VTR COMUNICACIONES SPA")
                recp4.setGiroRecep("TELECOMUNICACIONES")
                recp4.setContacto("223101476")
                recp4.setDirRecep("Avda. del valle sur 534")
                recp4.setCmnaRecep("Huechuraba")
                recp4.setCiudadRecep("Santiago")

                Detalle[] det4 = new Detalle[3]


                // Agrego detalle 0
                det4[0] = Detalle.Factory.newInstance()
                det4[0].setNroLinDet(1)
                det4[0].setNmbItem("ITEM 1 AFECTO")
                det4[0].setQtyItem(BigDecimal.valueOf(qtyItem1Caso4))
                det4[0].setPrcItem(BigDecimal.valueOf(prcItem1Caso4))
                det4[0].setMontoItem( Math.round(qtyItem1Caso4*prcItem1Caso4))
                totalItem1 = Math.round(qtyItem1Caso4*prcItem1Caso4)

                det4[1] = Detalle.Factory.newInstance()
                det4[1].setNroLinDet(2)
                det4[1].setNmbItem("ITEM 2 AFECTO")
                det4[1].setQtyItem(BigDecimal.valueOf(qtyItem2Caso4))
                det4[1].setPrcItem(BigDecimal.valueOf(prcItem2Caso4))
                det4[1].setMontoItem( Math.round(qtyItem2Caso4*prcItem2Caso4))
                totalItem2 = Math.round(qtyItem2Caso4*prcItem2Caso4)

                det4[2] = Detalle.Factory.newInstance()
                det4[2].setNroLinDet(3)
                det4[2].setNmbItem("ITEM 3 SERVICIO EXENTO")
                det4[2].setQtyItem(BigDecimal.valueOf(qtyItem3Caso4))
                det4[2].setPrcItem(BigDecimal.valueOf(prcItem3Caso4))
                det4[2].setMontoItem( Math.round(qtyItem3Caso4*prcItem3Caso4))
                det4[2].setIndExe(1)
                totalItem3 = Math.round(qtyItem3Caso4*prcItem3Caso4)

                doc4.getDTE().getDocumento().setDetalleArray(det4)

                totalNeto = totalItem1 + totalItem2
                totalExento = totalItem3

                // Descuento Global
                long descuento = Math.round(totalNeto * (Long.valueOf(descGlobalAfectos) / 100))
                totalNeto = totalNeto - descuento
                // Creaci√≥n entradas en XML
                DscRcgGlobal dscGlobal = DscRcgGlobal.Factory.newInstance()
                dscGlobal.setNroLinDR(BigInteger.valueOf(1))
                dscGlobal.setTpoMov(DscRcgGlobal.TpoMov.Enum.forString("D"))
                dscGlobal.setTpoValor(cl.sii.siiDte.DineroPorcentajeType.Enum.forString("%"))
                dscGlobal.setValorDR(BigDecimal.valueOf(Integer.valueOf(""+descGlobalAfectos)));// Porcentaje Dscto
                dscGlobal.setGlosaDR("DESCUENTO GLOBAL ITEMES AFECTOS")
                DscRcgGlobal[] dscGB4 = new DscRcgGlobal[1]
                dscGB4[0] = dscGlobal
                doc4.getDTE().getDocumento().setDscRcgGlobalArray(dscGB4)


                // Totales
                Totales tot4 = doc4.getDTE().getDocumento().getEncabezado().addNewTotales()

                tot4.setMntNeto(Math.round(totalNeto))
                tot4.setMntExe(totalExento)
                tot4.setTasaIVA(BigDecimal.valueOf(19))
                // Valor de solo IVA
                totalIVA = Math.round(totalNeto * 0.19)
                tot4.setIVA(totalIVA)
                // total neto + IVA
                totalInvoice = totalNeto + totalIVA + totalExento
                tot4.setMntTotal(Math.round(totalInvoice))

                amount = totalInvoice

                // Referencias
                Referencia[] ref4 = new Referencia[1]

                ref4[0] = Referencia.Factory.newInstance()
                ref4[0].setNroLinRef(1)
                ref4[0].setTpoDocRef('SET')
                ref4[0].setFolioRef(""+folio)
                ref4[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref4[0].setRazonRef(refCaso4)

                doc4.getDTE().getDocumento().setReferenciaArray(ref4)

                // Timbro
                doc4.getDTE().timbrar(caf4.getCAF(), caf4.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                XmlOptions opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces4)
                opts.setLoadSubstituteNamespaces(namespaces4)
                opts.setLoadAdditionalNamespaces(namespaces4)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato

                doc4 = DTEDocument.Factory.parse(doc4.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces4)

                uri = ""
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc4.getDTE().isSetDocumento()) {
                uri = doc4.getDTE().getDocumento().getID()
                doc4.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc4.getDTE().isSetLiquidacion()) {
                uri = doc4.getDTE().getLiquidacion().getID()
                doc4.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc4.getDTE().isSetExportaciones()) {
                uri = doc4.getDTE().getExportaciones().getID()
                doc4.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri
                out = new ByteArrayOutputStream()
                doc4.save(out, opts)
                Document doc24 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida4 = MoquiDTEUtils.sign(doc24, uri, key, cert, uri, "Documento")
                doc24 = MoquiDTEUtils.parseDocument(salida4)

                if (Signer.verify(doc24, "Documento")) {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                    Files.write(path, salida4)
                    logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                    Files.write(path, salida4)
                    logger.warn("Error al generar factura folio "+folio)
                }
            </script>

            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-33'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>


            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                date = new Date()
                ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida4]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                             montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>
            <script>
                <!-- Eliminacion de XML temporal -->
                XMLfile = new File(xml)
                XMLfile.delete()
                <!-- Eliminacion de PDF temporal -->
                file.delete()
                fileCedible.delete()
            </script>

        </actions>
    </service>

    <service verb="genera" noun="SetBasicoCaso5">
        <description>
            Generaci√≥n de DTE de acuerdo a plantilla
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="folioReferencia" required="true"/>
            <parameter name="refCaso5" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>


            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

            </script>

            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-61', partyId:activeOrgId]" out-map="dte5map"/>

            <set field="folio" from="dte5map.folio"/>

            <set field="codRef" value="0" type="Integer"/>
            <set field="receiverPartyId" value="100102"/>
            <script>
                logger.warn("Creando Caso 5, con folio: " + dte5map.folio)
                /************************************************************************

                CASO 1889781-5
                ==============
                DOCUMENTO		NOTA DE CREDITO ELECTRONICA
                REFERENCIA		FACTURA ELECTRONICA CORRESPONDIENTE A CASO 1889781-1
                RAZON REFERENCIA	CORRIGE GIRO DEL RECEPTOR

                *************************************************************************/
                tipoFactura = Integer.valueOf('61')
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces5 = new HashMap&lt;String, String&gt;()
                namespaces5.put("", "http://www.sii.cl/SiiDte")
                namespaces5.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts5 = new XmlOptions()
                opts5.setLoadSubstituteNamespaces(namespaces5)

                // Recuperaci√≥n de archivo CAF desde BD
                AutorizacionType caf5 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(dte5map.cafData.getBytes()), opts5).getAUTORIZACION()

                // Construyo base a partir del template
                DTEDocument doc5 = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts5)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                iddoc = doc5.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                // Obtenci√≥n de ID distinto
                doc5.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                    iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Si es gu√≠a de despacho se configura indicador de traslado

                // Receptor
                Receptor recp5 = doc5.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel

                recp5.setRUTRecep("96806980-2")
                recp5.setRznSocRecep("ENTEL PCS S.A.")
                recp5.setGiroRecep("TELECOMUNICACIONES")
                recp5.setContacto("ENTEL PCS S.A.")
                recp5.setDirRecep("AVDA. COSTANERA SUR RIO MAPOCHO 2760")
                recp5.setCmnaRecep("Las Condes")
                recp5.setCiudadRecep("Santiago")

                Detalle[] det5 = new Detalle[1]

                // Agrego detalle 0 - En este caso va solo 1
                det5[0] = Detalle.Factory.newInstance()
                det5[0].setNroLinDet(1)
                det5[0].setNmbItem("Caj√≥n AFECTO")
                //det5[0].setQtyItem(BigDecimal.valueOf(0))
                //det5[0].setPrcItem(BigDecimal.valueOf(0))
                det5[0].setMontoItem( Math.round(0))
                totalItem1 = Math.round(0)

                doc5.getDTE().getDocumento().setDetalleArray(det5)

                totalNeto = totalItem1

                // Totales
                Totales tot5 = doc5.getDTE().getDocumento().getEncabezado().addNewTotales()

                //tot5.setMntNeto(Math.round(totalNeto))
                //tot5.setTasaIVA(BigDecimal.valueOf(19))
                // Valor de solo IVA
                totalIVA = Math.round(totalNeto * 0.19)
                tot5.setIVA(totalIVA)
                // total neto + IVA
                totalInvoice = totalNeto + totalIVA
                tot5.setMntTotal(0);//Math.round(totalInvoice))
                amount = totalInvoice

                // Referencias
                Referencia[] ref5 = new Referencia[2]

                ref5[0] = Referencia.Factory.newInstance()
                ref5[0].setNroLinRef(1)
                ref5[0].setTpoDocRef('SET')
                ref5[0].setFolioRef(""+folio)
                ref5[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                //ref5[0].setRazonRef("CASO 1889781-5")
                ref5[0].setRazonRef(refCaso5)

                ref5[1] = Referencia.Factory.newInstance()
                ref5[1].setNroLinRef(2)
                ref5[1].setTpoDocRef('33')
                ref5[1].setCodRef(2)
                ref5[1].setFolioRef(folioReferencia); // Folio del caso 1
                ref5[1].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref5[1].setRazonRef("CORRIGE GIRO DEL RECEPTOR")

                doc5.getDTE().getDocumento().setReferenciaArray(ref5)

                // Timbro
                doc5.getDTE().timbrar(caf5.getCAF(), caf5.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces5)
                opts.setLoadSubstituteNamespaces(namespaces5)
                opts.setLoadAdditionalNamespaces(namespaces5)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc5 = DTEDocument.Factory.parse(doc5.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces5)

                uri = ""
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc5.getDTE().isSetDocumento()) {
                    uri = doc5.getDTE().getDocumento().getID()
                    doc5.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc5.getDTE().isSetLiquidacion()) {
                    uri = doc5.getDTE().getLiquidacion().getID()
                    doc5.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc5.getDTE().isSetExportaciones()) {
                    uri = doc5.getDTE().getExportaciones().getID()
                    doc5.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri
                out = new ByteArrayOutputStream()
                doc5.save(out, opts)
                Document doc25 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida5 = MoquiDTEUtils.sign(doc25, uri, key, cert, uri, "Documento")
                doc25 = MoquiDTEUtils.parseDocument(salida5)

                if (Signer.verify(doc25, "Documento")) {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                    Files.write(path, salida5)
                    logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                    Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                    Files.write(path, salida5)
                    logger.warn("Error al generar factura folio "+folio)
                }
            </script>

            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>
            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-61'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>

            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                date = new Date()
                ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida5]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>
            <script>
                <!-- Eliminacion de XML temporal -->
                XMLfile = new File(xml)
                XMLfile.delete()
                <!-- Eliminacion de PDF temporal -->
                file.delete()
                fileCedible.delete()
            </script>

        </actions>
    </service>

    <service verb="genera" noun="SetBasicoCaso6">
        <description>
            Generaci√≥n de DTE de acuerdo a plantilla
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="folioReferencia" required="true"/>
            <parameter name="qtyItem1Caso6" required="true" type="Long"/>
            <parameter name="prcItem1Caso6" required="true" type="Long"/>
            <parameter name="qtyItem2Caso6" required="true" type="Long"/>
            <parameter name="prcItem2Caso6" required="true" type="Long"/>
            <parameter name="descItem1Caso6" required="true" type="Long"/>
            <parameter name="descItem2Caso6" required="true" type="Long"/>
            <parameter name="refCaso6" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>


            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                int folioCaso1
                int folioCaso2
                int folioCaso3
                int folioCaso5
                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

            </script>

            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-61', partyId:activeOrgId]" out-map="dte6map"/>

            <set field="folio" from="dte6map.folio"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                logger.warn("Creando Caso 6, con folio: " + dte6map.folio)
                /************************************************************************

                CASO 1889781-6
                ==============
                DOCUMENTO		NOTA DE CREDITO ELECTRONICA
                REFERENCIA		FACTURA  ELECTRONICA CORRESPONDIENTE A CASO 1889781-2
                RAZON REFERENCIA	DEVOLUCION DE MERCADERIAS

                ITEM			CANTIDAD
                Pa√±uelo AFECTO		    112
                ITEM 2 AFECTO		    159

                *************************************************************************/
                tipoFactura = Integer.valueOf('61')
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces6 = new HashMap&lt;String, String&gt;()
                namespaces6.put("", "http://www.sii.cl/SiiDte")
                namespaces6.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts6 = new XmlOptions()
                opts6.setLoadSubstituteNamespaces(namespaces6)

                // Recuperaci√≥n de archivo CAF desde BD
                AutorizacionType caf6 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(dte6map.cafData.getBytes()), opts6).getAUTORIZACION()

                // Construyo base a partir del template
                DTEDocument doc6 = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts6)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                iddoc = doc6.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                // Obtenci√≥n de ID distinto
                doc6.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Si es gu√≠a de despacho se configura indicador de traslado

                // Receptor
                Receptor recp6 = doc6.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a LOREAL
                recp6.setRUTRecep("79693930-3")
                recp6.setRznSocRecep("LOREAL")
                recp6.setGiroRecep("COMERCIALIZ. PROD. FARMAC. Y COSMETICOS")
                recp6.setContacto("224406777")
                recp6.setDirRecep("Av. Apoquindo 3885 Of. 201")
                recp6.setCmnaRecep("LAS CONDES")
                recp6.setCiudadRecep("SANTIAGO")

                Detalle[] det6 = new Detalle[2]




                // Agrego detalle 0
                det6[0] = Detalle.Factory.newInstance()
                det6[0].setNroLinDet(1)
                det6[0].setNmbItem("Pa√±uelo AFECTO")
                det6[0].setQtyItem(BigDecimal.valueOf(qtyItem1Caso6))
                det6[0].setPrcItem(BigDecimal.valueOf(prcItem1Caso6))
                det6[0].setDescuentoPct(descItem1Caso6)
                descuento = (qtyItem1Caso6*prcItem1Caso6) * descItem1Caso6 / 100
                totalItem1 = Math.round(qtyItem1Caso6*prcItem1Caso6)-Math.round(descuento)
                //det6[0].setMontoItem( Math.round(qtyItem1Caso6*prcItem1Caso6))
                det6[0].setMontoItem(totalItem1)
                det6[0].setDescuentoMonto(Math.round(descuento))

                det6[1] = Detalle.Factory.newInstance()
                det6[1].setNroLinDet(2)
                det6[1].setNmbItem("ITEM 2 AFECTO")
                det6[1].setQtyItem(BigDecimal.valueOf(qtyItem2Caso6))
                det6[1].setPrcItem(BigDecimal.valueOf(prcItem2Caso6))
                det6[1].setDescuentoPct(descItem2Caso6)
                descuento = (qtyItem2Caso6*prcItem2Caso6) * descItem2Caso6 / 100
                totalItem2 = Math.round(qtyItem2Caso6*prcItem2Caso6)-Math.round(descuento)
                //det6[1].setMontoItem( Math.round(qtyItem2Caso6*prcItem2Caso6))
                det6[1].setMontoItem(totalItem2)
                det6[1].setDescuentoMonto(Math.round(descuento))

                doc6.getDTE().getDocumento().setDetalleArray(det6)

                totalNeto = totalItem1 + totalItem2

                // Totales
                Totales tot6 = doc6.getDTE().getDocumento().getEncabezado().addNewTotales()

                tot6.setMntNeto(Math.round(totalNeto))
                tot6.setTasaIVA(BigDecimal.valueOf(19))
                // Valor de solo IVA
                totalIVA = Math.round(totalNeto * 0.19)
                tot6.setIVA(totalIVA)
                // total neto + IVA
                totalInvoice = totalNeto + totalIVA
                tot6.setMntTotal(Math.round(totalInvoice))
                amount = totalInvoice

                // Referencias
                Referencia[] ref6 = new Referencia[2]

                ref6[0] = Referencia.Factory.newInstance()
                ref6[0].setNroLinRef(1)
                ref6[0].setTpoDocRef('SET')
                ref6[0].setFolioRef(""+folio)
                ref6[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref6[0].setRazonRef(refCaso6)

                ref6[1] = Referencia.Factory.newInstance()
                ref6[1].setNroLinRef(2)
                ref6[1].setTpoDocRef('33')
                ref6[1].setCodRef(3)
                ref6[1].setFolioRef(folioReferencia); // Folio del caso 2
                ref6[1].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref6[1].setRazonRef("DEVOLUCION DE MERCADERIAS")

                doc6.getDTE().getDocumento().setReferenciaArray(ref6)

                // Timbro
                doc6.getDTE().timbrar(caf6.getCAF(), caf6.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces6)
                opts.setLoadSubstituteNamespaces(namespaces6)
                opts.setLoadAdditionalNamespaces(namespaces6)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc6 = DTEDocument.Factory.parse(doc6.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces6)

                uri = ""
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc6.getDTE().isSetDocumento()) {
                uri = doc6.getDTE().getDocumento().getID()
                doc6.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc6.getDTE().isSetLiquidacion()) {
                uri = doc6.getDTE().getLiquidacion().getID()
                doc6.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc6.getDTE().isSetExportaciones()) {
                uri = doc6.getDTE().getExportaciones().getID()
                doc6.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri
                out = new ByteArrayOutputStream()
                doc6.save(out, opts)
                Document doc26 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida6 = MoquiDTEUtils.sign(doc26, uri, key, cert, uri, "Documento")
                doc26 = MoquiDTEUtils.parseDocument(salida6)

                if (Signer.verify(doc26, "Documento")) {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                Files.write(path, salida6)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                Files.write(path, salida6)
                logger.warn("Error al generar factura folio "+folio)
                }
            </script>

            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-61'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>


            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField." value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                date = new Date()
                ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida6]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>
            <script>
                <!-- Eliminacion de XML temporal -->
                XMLfile = new File(xml)
                XMLfile.delete()
                <!-- Eliminacion de PDF temporal -->
                file.delete()
                fileCedible.delete()
            </script>

        </actions>
    </service>

    <service verb="genera" noun="SetBasicoCaso7">

        <description>
            Generaci√≥n de DTE de acuerdo a plantilla
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="folioReferencia" required="true"/>
            <parameter name="qtyItem1Caso7" required="true" type="Long"/>
            <parameter name="prcItem1Caso7" required="true" type="Long"/>
            <parameter name="qtyItem2Caso7" required="true" type="Long"/>
            <parameter name="prcItem2Caso7" required="true" type="Long"/>
            <parameter name="qtyItem3Caso7" required="true" type="Long"/>
            <parameter name="prcItem3Caso7" required="true" type="Long"/>
            <parameter name="refCaso7" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>


            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <set field="receiverPartyId" value="100102"/>
            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                int folioCaso1
                int folioCaso2
                int folioCaso3
                int folioCaso5
                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

            </script>

            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-61', partyId:activeOrgId]" out-map="dte7map"/>

            <set field="folio" from="dte7map.folio"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                logger.warn("Creando Caso 7, con folio: " + dte7map.folio)
                /************************************************************************

                CASO 1889781-7
                ==============
                DOCUMENTO		NOTA DE CREDITO ELECTRONICA
                REFERENCIA		FACTURA ELECTRONICA CORRESPONDIENTE A CASO 1889781-3
                RAZON REFERENCIA	ANULA FACTURA

                *************************************************************************/
                tipoFactura = Integer.valueOf('61')
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces7 = new HashMap&lt;String, String&gt;()
                namespaces7.put("", "http://www.sii.cl/SiiDte")
                namespaces7.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts7 = new XmlOptions()
                opts7.setLoadSubstituteNamespaces(namespaces7)

                // Recuperaci√≥n de archivo CAF desde BD
                AutorizacionType caf7 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(dte7map.cafData.getBytes()), opts7).getAUTORIZACION()

                // Construyo base a partir del template
                DTEDocument doc7 = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts7)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                iddoc = doc7.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                // Obtenci√≥n de ID distinto
                doc7.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Receptor
                Receptor recp7 = doc7.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel

                recp7.setRUTRecep("96992030-1")
                recp7.setRznSocRecep("Sociedad Concesionaria Vespucio Norte Express S.A.")
                recp7.setGiroRecep("CONSTRUCCION DE CARRETERAS")
                recp7.setContacto("6005713000")
                recp7.setDirRecep("AMERICO VESPUCIO ORIENTE 1305")
                recp7.setCmnaRecep("PUDAHUEL")
                recp7.setCiudadRecep("SANTIAGO")

                Detalle[] det7 = new Detalle[3]

                // Agrego detalle 0
                det7[0] = Detalle.Factory.newInstance()
                det7[0].setNroLinDet(1)
                det7[0].setNmbItem("Pintura B&amp;W AFECTO")
                det7[0].setQtyItem(BigDecimal.valueOf(qtyItem1Caso7))
                det7[0].setPrcItem(BigDecimal.valueOf(prcItem1Caso7))
                det7[0].setMontoItem( Math.round(qtyItem1Caso7*prcItem1Caso7))
                totalItem1 = Math.round(qtyItem1Caso7*prcItem1Caso7)

                det7[1] = Detalle.Factory.newInstance()
                det7[1].setNroLinDet(2)
                det7[1].setNmbItem("ITEM 2 AFECTO")
                det7[1].setQtyItem(BigDecimal.valueOf(qtyItem2Caso7))
                det7[1].setPrcItem(BigDecimal.valueOf(prcItem2Caso7))
                det7[1].setMontoItem( Math.round(qtyItem2Caso7*prcItem2Caso7))
                totalItem2 = Math.round(qtyItem2Caso7*prcItem2Caso7)

                det7[2] = Detalle.Factory.newInstance()
                det7[2].setNroLinDet(3)
                det7[2].setNmbItem("ITEM 3 SERVICIO EXENTO")
                det7[2].setQtyItem(BigDecimal.valueOf(qtyItem3Caso7))
                det7[2].setPrcItem(BigDecimal.valueOf(prcItem3Caso7))
                det7[2].setMontoItem( Math.round(qtyItem3Caso7*prcItem3Caso7))
                det7[2].setIndExe(1)
                totalItem3 = Math.round(qtyItem3Caso7*prcItem3Caso7)

                doc7.getDTE().getDocumento().setDetalleArray(det7)

                totalExento = totalItem3
                totalNeto = totalItem1 + totalItem2

                // Totales
                Totales tot7 = doc7.getDTE().getDocumento().getEncabezado().addNewTotales()

                tot7.setMntNeto(Math.round(totalNeto))
                tot7.setTasaIVA(BigDecimal.valueOf(19))
                // Valor de solo IVA
                totalIVA = Math.round(totalNeto * 0.19)
                tot7.setIVA(totalIVA)
                // total neto + IVA
                totalInvoice = totalNeto + totalIVA + totalExento
                tot7.setMntTotal(Math.round(totalInvoice))
                tot7.setMntExe(Math.round(totalExento))
                amount = totalInvoice

                // Referencias
                Referencia[] ref7 = new Referencia[2]

                ref7[0] = Referencia.Factory.newInstance()
                ref7[0].setNroLinRef(1)
                ref7[0].setTpoDocRef('SET')
                ref7[0].setFolioRef(""+folio)
                ref7[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                //ref7[0].setRazonRef("CASO 1889781-7")
                ref7[0].setRazonRef(refCaso7)

                ref7[1] = Referencia.Factory.newInstance()
                ref7[1].setNroLinRef(2)
                ref7[1].setTpoDocRef('33')
                ref7[1].setCodRef(1)
                ref7[1].setFolioRef(folioReferencia); // Folio del caso 3
                ref7[1].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref7[1].setRazonRef("ANULA FACTURA")

                doc7.getDTE().getDocumento().setReferenciaArray(ref7)

                // Timbro

                doc7.getDTE().timbrar(caf7.getCAF(), caf7.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces7)
                opts.setLoadSubstituteNamespaces(namespaces7)
                opts.setLoadAdditionalNamespaces(namespaces7)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc7 = DTEDocument.Factory.parse(doc7.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces7)

                uri = ""
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc7.getDTE().isSetDocumento()) {
                uri = doc7.getDTE().getDocumento().getID()
                doc7.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc7.getDTE().isSetLiquidacion()) {
                uri = doc7.getDTE().getLiquidacion().getID()
                doc7.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc7.getDTE().isSetExportaciones()) {
                uri = doc7.getDTE().getExportaciones().getID()
                doc7.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri
                out = new ByteArrayOutputStream()
                doc7.save(out, opts)
                Document doc27 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida7 = MoquiDTEUtils.sign(doc27, uri, key, cert, uri, "Documento")
                doc27 = MoquiDTEUtils.parseDocument(salida7)

                if (Signer.verify(doc27, "Documento")) {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                Files.write(path, salida7)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                Files.write(path, salida7)
                logger.warn("Error al generar factura folio "+folio)
                }
            </script>

            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-61'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>


            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                date = new Date()
                ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida7]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>
            <script>
                <!-- Eliminacion de XML temporal -->
                XMLfile = new File(xml)
                XMLfile.delete()
                <!-- Eliminacion de PDF temporal -->
                file.delete()
                fileCedible.delete()
            </script>

        </actions>
    </service>


    <service verb="genera" noun="SetBasicoCaso8">

        <description>
            Generaci√≥n de Set Basico Caso 8
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="folioReferencia" required="true"/>
            <parameter name="refCaso8" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>


            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <!-- Obtenci√≥n de primer folio y path de CAF -->

            <set field="receiverPartyId" value="100102"/>
            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

            </script>

            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-56', partyId:activeOrgId]" out-map="dte8map"/>

            <set field="folio" from="dte8map.folio"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                logger.warn("Creando Caso 8, con folio: " + dte8map.folio)
                /************************************************************************

                CASO 1889781-8
                ==============
                DOCUMENTO		NOTA DE DEBITO ELECTRONICA
                REFERENCIA		NOTA DE CREDITO ELECTRONICA CORRESPONDIENTE A CASO 1889781-5
                RAZON REFERENCIA	ANULA NOTA DE CREDITO ELECTRONICA

                *************************************************************************/
                tipoFactura = 56 as Integer
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces8 = new HashMap&lt;String, String&gt;()
                namespaces8.put("", "http://www.sii.cl/SiiDte")
                namespaces8.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts8 = new XmlOptions()
                opts8.setLoadSubstituteNamespaces(namespaces8)

                // Recuperaci√≥n de archivo CAF desde BD
                AutorizacionType caf8 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(dte8map.cafData.getBytes()), opts8).getAUTORIZACION()

                // Construyo base a partir del template
                DTEDocument doc8 = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts8)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                iddoc = doc8.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                // Obtenci√≥n de ID distinto
                doc8.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Receptor
                Receptor recp8 = doc8.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel

                recp8.setRUTRecep("96806980-2")
                recp8.setRznSocRecep("ENTEL PCS S.A.")
                recp8.setGiroRecep("TELECOMUNICACIONES")
                recp8.setContacto("ENTEL PCS S.A.")
                recp8.setDirRecep("AVDA. COSTANERA SUR RIO MAPOCHO 2760")
                recp8.setCmnaRecep("Las Condes")
                recp8.setCiudadRecep("Santiago")

                Detalle[] det8 = new Detalle[1]

                // Agrego detalle 0
                det8[0] = Detalle.Factory.newInstance()
                det8[0].setNroLinDet(1)
                det8[0].setNmbItem("Caj√≥n AFECTO")
                det8[0].setMontoItem( Math.round(0))
                totalItem1 = Math.round(0)

                doc8.getDTE().getDocumento().setDetalleArray(det8)

                totalNeto = totalItem1

                // Totales
                Totales tot8 = doc8.getDTE().getDocumento().getEncabezado().addNewTotales()

                tot8.setMntNeto(Math.round(totalNeto))
                tot8.setTasaIVA(BigDecimal.valueOf(19))
                // Valor de solo IVA
                totalIVA = Math.round(totalNeto * 0.19)
                tot8.setIVA(totalIVA)
                // total neto + IVA
                totalInvoice = totalNeto + totalIVA
                tot8.setMntTotal(Math.round(totalInvoice))
                amount = totalInvoice

                // Referencias
                Referencia[] ref8 = new Referencia[2]

                ref8[0] = Referencia.Factory.newInstance()
                ref8[0].setNroLinRef(1)
                ref8[0].setTpoDocRef('SET')
                ref8[0].setFolioRef(""+folio)
                ref8[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                //ref8[0].setRazonRef("CASO 1889781-7")
                ref8[0].setRazonRef(refCaso8)

                ref8[1] = Referencia.Factory.newInstance()
                ref8[1].setNroLinRef(2)
                ref8[1].setTpoDocRef('61')
                ref8[1].setCodRef(1)
                ref8[1].setFolioRef(folioReferencia); // Folio del caso 3
                ref8[1].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref8[1].setRazonRef("ANULA NOTA DE CREDITO ELECTRONICA")

                doc8.getDTE().getDocumento().setReferenciaArray(ref8)

                // Timbro
                doc8.getDTE().timbrar(caf8.getCAF(), caf8.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces8)
                opts.setLoadSubstituteNamespaces(namespaces8)
                opts.setLoadAdditionalNamespaces(namespaces8)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc8 = DTEDocument.Factory.parse(doc8.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces8)

                uri = ""
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc8.getDTE().isSetDocumento()) {
                uri = doc8.getDTE().getDocumento().getID()
                doc8.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc8.getDTE().isSetLiquidacion()) {
                uri = doc8.getDTE().getLiquidacion().getID()
                doc8.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc8.getDTE().isSetExportaciones()) {
                uri = doc8.getDTE().getExportaciones().getID()
                doc8.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri
                out = new ByteArrayOutputStream()
                doc8.save(out, opts)
                Document doc28 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida8 = MoquiDTEUtils.sign(doc28, uri, key, cert, uri, "Documento")
                doc28 = MoquiDTEUtils.parseDocument(salida8)

                if (Signer.verify(doc28, "Documento")) {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                Files.write(path, salida8)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                Files.write(path, salida8)
                logger.warn("Error al generar factura folio "+folio)
                }
            </script>

            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-56'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>


            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                date = new Date()
                ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida8]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>
            <script>
                <!-- Eliminacion de XML temporal -->
                XMLfile = new File(xml)
                XMLfile.delete()
                <!-- Eliminacion de PDF temporal -->
                file.delete()
                fileCedible.delete()
            </script>

        </actions>
    </service>

    <service verb="genera" noun="SetBasico">

        <description>
            Generaci√≥n de Set Basico
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <!-- Caso 1: 2 itemes afectos -->
            <set field="qtyItem1Caso1" value="118"/>
            <set field="prcItem1Caso1" value="601"/>
            <set field="qtyItem2Caso1" value="51"/>
            <set field="prcItem2Caso1" value="930"/>
            <set field="refCaso1" value="CASO 1965337-1"/>
            <service-call name="mchile.sii.DTECertification.genera#SetBasicoCaso1" in-map="[activeOrgId:activeOrgId,
                qtyItem1Caso1:qtyItem1Caso1, prcItem1Caso1:prcItem1Caso1,
                qtyItem2Caso1:qtyItem2Caso1, prcItem2Caso1:prcItem2Caso1,
                refCaso1:refCaso1]" out-map="caso1map"/>

            <!-- Caso2: 2 itemes afectos c/u con un descuento especifico -->
            <set field="qtyItem1Caso2" value="169"/>
            <set field="prcItem1Caso2" value="1431"/>
            <set field="descItem1Caso2" value="3"/>
            <set field="qtyItem2Caso2" value="93"/>
            <set field="prcItem2Caso2" value="497"/>
            <set field="descItem2Caso2" value="3"/>
            <set field="refCaso2" value="CASO 1965337-2"/>
            <service-call name="mchile.sii.DTECertification.genera#SetBasicoCaso2" in-map="[activeOrgId:activeOrgId,
                qtyItem1Caso2:qtyItem1Caso2, prcItem1Caso2:prcItem1Caso2,
                qtyItem2Caso2:qtyItem2Caso2, prcItem2Caso2:prcItem2Caso2,
                descItem1Caso2:descItem1Caso2, descItem2Caso2:descItem2Caso2,
                refCaso2:refCaso2]" out-map="caso2map"/>

            <!-- Caso 3: 2 itemes afectos, 1 item exento -->
            <set field="qtyItem1Caso3" value="23"/>
            <set field="prcItem1Caso3" value="1239"/>
            <set field="qtyItem2Caso3" value="138"/>
            <set field="prcItem2Caso3" value="2911"/>
            <set field="qtyItem3Caso3" value="1"/>
            <set field="prcItem3Caso3" value="34631"/>
            <set field="refCaso3" value="CASO 1965337-3"/>
            <service-call name="mchile.sii.DTECertification.genera#SetBasicoCaso3" in-map="[activeOrgId:activeOrgId,
                qtyItem1Caso3:qtyItem1Caso3, prcItem1Caso3:prcItem1Caso3,
                qtyItem2Caso3:qtyItem2Caso3, prcItem2Caso3:prcItem2Caso3,
                qtyItem3Caso3:qtyItem3Caso3, prcItem3Caso3:prcItem3Caso3,
                refCaso3:refCaso3]" out-map="caso3map"/>

            <!-- Caso 4: 2 itemes afectos, 1 item exento, descuento global afectos -->
            <set field="qtyItem1Caso4" value="39"/>
            <set field="prcItem1Caso4" value="1140"/>
            <set field="qtyItem2Caso4" value="17"/>
            <set field="prcItem2Caso4" value="678"/>
            <set field="qtyItem3Caso4" value="2"/>
            <set field="prcItem3Caso4" value="6759"/>
            <set field="descGlobalAfectos" value="4"/>
            <set field="refCaso4" value="CASO 1965337-4"/>
            <service-call name="mchile.sii.DTECertification.genera#SetBasicoCaso4" in-map="[activeOrgId:activeOrgId,
                qtyItem1Caso4:qtyItem1Caso4, prcItem1Caso4:prcItem1Caso4,
                qtyItem2Caso4:qtyItem2Caso4, prcItem2Caso4:prcItem2Caso4,
                qtyItem3Caso4:qtyItem3Caso4, prcItem3Caso4:prcItem3Caso4,
                descGlobalAfectos:descGlobalAfectos,
                refCaso4:refCaso4
            ]" out-map="caso4map"/>

            <!-- Caso 5: Corrige giro del receptor, sin otros parametros -->
            <set field="refCaso5" value="CASO 1965337-5"/>
            <service-call name="mchile.sii.DTECertification.genera#SetBasicoCaso5" in-map="[activeOrgId:activeOrgId,
                refCaso5:refCaso5, folioReferencia:caso1map.folio]" out-map="caso5map"/>

            <!-- Caso 6: 2 itemes para devolver. Tomar precios de caso 2 -->
            <set field="qtyItem1Caso6" value="62"/>
            <set field="prcItem1Caso6" value="1431" type="Long"/><!-- usa el precio sin descuento caso 2 -->
            <set field="qtyItem2Caso6" value="63"/>
            <set field="prcItem2Caso6" value="497" type="Long"/><!-- usa el precio sin descuento caso 2 -->
            <set field="refCaso6" value="CASO 1965337-6"/>
            <service-call name="mchile.sii.DTECertification.genera#SetBasicoCaso6" in-map="[activeOrgId:activeOrgId,
                qtyItem1Caso6:qtyItem1Caso6, prcItem1Caso6:prcItem1Caso2,
                qtyItem2Caso6:qtyItem2Caso6, prcItem2Caso6:prcItem2Caso2,
                descItem1Caso6:descItem1Caso2, descItem2Caso6:descItem2Caso2,
                refCaso6:refCaso6, folioReferencia:caso2map.folio]" out-map="caso6map"/>


            <!-- Caso 7: Anula Factura de caso 3. Toma todos los items de caso 3-->
            <set field="refCaso7" value="CASO 1965337-7"/>
            <service-call name="mchile.sii.DTECertification.genera#SetBasicoCaso7" in-map="[activeOrgId:activeOrgId,
                qtyItem1Caso7:qtyItem1Caso3, prcItem1Caso7:prcItem1Caso3,
                qtyItem2Caso7:qtyItem2Caso3, prcItem2Caso7:prcItem2Caso3,
                qtyItem3Caso7:qtyItem3Caso3, prcItem3Caso7:prcItem3Caso3,
                refCaso7:refCaso7,
                folioReferencia:caso3map.folio]" out-map="caso7map"/>

            <!-- Caso 8: Anula nota de credito electronica. No toma parametros de otros casos -->
            <set field="refCaso8" value="CASO 1965337-8"/>
            <service-call name="mchile.sii.DTECertification.genera#SetBasicoCaso8" in-map="[activeOrgId:activeOrgId, folioReferencia:caso5map.folio, refCaso8:refCaso8]" out-map="caso8map"/>
        </actions>
    </service>

    <service verb="genera" noun="SetGuiaDespacho">
        <description>
            Generaci√≥n de Set Basico
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <!-- Caso 1: 3 items por traslado de materiales -->
            <set field="qtyItem1Caso1" value="84"/>
            <set field="qtyItem2Caso1" value="139"/>
            <set field="qtyItem3Caso1" value="98"/>
            <set field="refCaso1" value="CASO 1965340-1"/>
            <service-call name="mchile.sii.DTECertification.genera#SetGuiaCaso1" in-map="[activeOrgId:activeOrgId,
                qtyItem1Caso1:qtyItem1Caso1, qtyItem2Caso1:qtyItem2Caso1, qtyItem3Caso1:qtyItem3Caso1,
                refCaso1:refCaso1]" out-map="caso1map"/>

            <!-- Caso2: 2 Guia por venta y traslado por emisor, con precios -->
            <set field="qtyItem1Caso2" value="410"/>
            <set field="prcItem1Caso2" value="8270"/>
            <set field="descItem1Caso2" value="5"/>
            <set field="qtyItem2Caso2" value="796"/>
            <set field="prcItem2Caso2" value="1785"/>
            <set field="refCaso2" value="CASO 1965340-2"/>
            <service-call name="mchile.sii.DTECertification.genera#SetGuiaCaso2" in-map="[activeOrgId:activeOrgId,
                qtyItem1Caso2:qtyItem1Caso2, prcItem1Caso2:prcItem1Caso2,
                qtyItem2Caso2:qtyItem2Caso2, prcItem2Caso2:prcItem2Caso2,
                refCaso2:refCaso2]" out-map="caso2map"/>

            <!-- Caso 3: 2 itemes por venta, traslado por cliente -->
            <set field="qtyItem1Caso3" value="189"/>
            <set field="prcItem1Caso3" value="2151"/>
            <set field="qtyItem2Caso3" value="487"/>
            <set field="prcItem2Caso3" value="6450"/>
            <set field="refCaso3" value="CASO 1965340-3"/>
            <service-call name="mchile.sii.DTECertification.genera#SetGuiaCaso3" in-map="[activeOrgId:activeOrgId,
                qtyItem1Caso3:qtyItem1Caso3, prcItem1Caso3:prcItem1Caso3,
                qtyItem2Caso3:qtyItem2Caso3, prcItem2Caso3:prcItem2Caso3,
                refCaso3:refCaso3]" out-map="caso3map"/>

        </actions>
    </service>

    <service verb="genera" noun="SetGuiaCaso1">
        <description>
            Generaci√≥n de Caso 1 Set Guia Despacho
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="qtyItem1Caso1" required="true" type="Long"/>
            <parameter name="qtyItem2Caso1" required="true" type="Long"/>
            <parameter name="qtyItem3Caso1" required="true" type="Long"/>
            <parameter name="refCaso1" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-52', partyId:activeOrgId]" out-map="context"/>

            <set field="codRef" value="0" type="Integer"/>

            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                logger.warn("Creando Guia Caso 1, con folio: " + folio)
                /* Primera Guia (Ejemplo caso) *******************************************
                CASO 1965340-1
                ==============
                DOCUMENTO	GUIA DE DESPACHO
                MOTIVO:		TRASLADO DE MATERIALES ENTRE BODEGAS DE LA EMPRESA

                ITEM		CANTIDAD
                ITEM 1		     84
                ITEM 2		    139
                ITEM 3		     98
                **************************************************************/

                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

                folioCaso1 = folio
                tipoFactura = Integer.valueOf('52')
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;()
                namespaces.put("", "http://www.sii.cl/SiiDte")
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts = new XmlOptions()
                opts.setLoadSubstituteNamespaces(namespaces)

                // Recuperaci√≥n de archivo CAF desde BD

                caf = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(cafData.getBytes()), opts).getAUTORIZACION()

                // Construyo base a partir del template
                doc = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certData)

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                IdDoc iddoc = doc.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                // Obtenci√≥n de ID distinto
                logger.warn("id: " + System.nanoTime())
                doc.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                //iddoc.setTipoDespacho(3)
                iddoc.setIndTraslado(5)

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                Date dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                Calendar cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                iddoc.xsetFchVenc(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Si es gu√≠a de despacho se configura indicador de traslado

                // Receptor
                Receptor recp = doc.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel
                recp.setRUTRecep("76222457-7")
                recp.setRznSocRecep("INVERSIONES CJ LIMITADA")
                recp.setGiroRecep("ALQUILER DE BIENES INMUEBLES AMOBLADOS"); // Max 40 en giro receptor
                recp.setContacto("228213789")
                recp.setDirRecep("ALFREDO BARROS ERRAZURIZ #1954")
                recp.setCmnaRecep("PROVIDENCIA")
                recp.setCiudadRecep("SANTIAGO")

                Detalle[] det = new Detalle[3]

                // Agrego detalle 0
                det[0] = Detalle.Factory.newInstance()
                det[0].setNroLinDet(1)
                det[0].setNmbItem("ITEM 1")
                det[0].setQtyItem(BigDecimal.valueOf(qtyItem1Caso1))
                //det[0].setPrcItem(BigDecimal.valueOf(0))
                totalItem1 = 0
                det[0].setMontoItem(Math.round(totalItem1))
                ivaItem1 = Math.round(totalItem1 * 0.19)

                det[1] = Detalle.Factory.newInstance()
                det[1].setNroLinDet(2)
                det[1].setNmbItem("ITEM 2")
                det[1].setQtyItem(BigDecimal.valueOf(qtyItem2Caso1))
                //det[1].setPrcItem(BigDecimal.valueOf(0))
                totalItem2 = 0
                det[1].setMontoItem(Math.round(totalItem2))
                ivaItem2 = Math.round(totalItem2 * 0.19)

                det[2] = Detalle.Factory.newInstance()
                det[2].setNroLinDet(3)
                det[2].setNmbItem("ITEM 3")
                det[2].setQtyItem(BigDecimal.valueOf(qtyItem3Caso1))
                //det[2].setPrcItem(BigDecimal.valueOf(0))
                totalItem3 = 0
                det[2].setMontoItem(Math.round(totalItem3))
                ivaItem3 = Math.round(totalItem3 * 0.19)

                doc.getDTE().getDocumento().setDetalleArray(det)

                // Totales
                Totales tot = doc.getDTE().getDocumento().getEncabezado().addNewTotales()
                long totalNeto = totalItem1 + totalItem2
                tot.setMntNeto(Math.round(totalNeto))
                tot.setMntExe(0)
                //tot.setTasaIVA(BigDecimal.valueOf(19))
                cl.sii.siiDte.PctType tasaIVA = cl.sii.siiDte.PctType.Factory.newValue("19.00")
                tot.xsetTasaIVA(tasaIVA)
                // Valor de solo IVA
                long totalIVA = ivaItem1 + ivaItem2
                tot.setIVA(totalIVA)
                // total neto + IVA
                totalInvoice = totalNeto + totalIVA
                tot.setMntTotal(Math.round(totalInvoice))
                amount = totalInvoice

                // Referencias
                Referencia[] ref = new Referencia[1]

                ref[0] = Referencia.Factory.newInstance()
                ref[0].setNroLinRef(1)
                ref[0].setTpoDocRef('SET')
                ref[0].setFolioRef(""+folio)
                ref[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref[0].setRazonRef(refCaso1)

                doc.getDTE().getDocumento().setReferenciaArray(ref)

                // Timbro

                doc.getDTE().timbrar(caf.getCAF(), caf.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces)
                opts.setLoadSubstituteNamespaces(namespaces)
                opts.setLoadAdditionalNamespaces(namespaces)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc = DTEDocument.Factory.parse(doc.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces)

                String uri = ""
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc.getDTE().isSetDocumento()) {
                uri = doc.getDTE().getDocumento().getID()
                doc.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc.getDTE().isSetLiquidacion()) {
                uri = doc.getDTE().getLiquidacion().getID()
                doc.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc.getDTE().isSetExportaciones()) {
                uri = doc.getDTE().getExportaciones().getID()
                doc.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream()
                doc.save(out, opts)
                Document doc21 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida = MoquiDTEUtils.sign(doc21, uri, key, cert, uri, "Documento")
                doc21 = MoquiDTEUtils.parseDocument(salida)

                if (Signer.verify(doc21, "Documento")) {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                Files.write(path, salida)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                Files.write(path, salida)
                logger.warn("Error al generar factura folio "+folio)
                }
            </script>
            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                byte[] bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                byte[] bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-52'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>


            <!--set field="dteField.receiverPartyId" from="receiverPartyId"/-->
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                Date date = new Date()
                Timestamp ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <!--set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/-->

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>

            <!-- Eliminacion de XML temporal -->
            <script>
                File XMLfile = new File(xml)
                XMLfile.delete()
            </script>

            <!-- Eliminacion de PDF temporal -->
            <script>
                file.delete()
                fileCedible.delete()
            </script>

        </actions>

    </service>

    <service verb="genera" noun="SetGuiaCaso2">
        <description>
            Generaci√≥n de Set Guia Despacho Caso 2
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="qtyItem1Caso2" required="true" type="Long"/>
            <parameter name="prcItem1Caso2" required="true" type="Long"/>
            <parameter name="qtyItem2Caso2" required="true" type="Long"/>
            <parameter name="prcItem2Caso2" required="true" type="Long"/>
            <parameter name="refCaso2" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>


            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-52', partyId:activeOrgId]" out-map="dte2map"/>

            <set field="folio" from="dte2map.folio"/>
            <set field="codRef" value="0" type="Integer"/>

            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

                logger.warn("Creando Guia Caso 2, con folio: " + dte2map.folio)
                /** Ejemplo de Caso 2 ****************************************************

                CASO 1965340-2
                ==============
                DOCUMENTO	GUIA DE DESPACHO
                MOTIVO:		VENTA
                TRASLADO POR: 	EMISOR DEL DOCUMENTO AL LOCAL DEL CLIENTE

                ITEM		CANTIDAD	PRECIO UNITARIO
                ITEM 1		    410		   8270
                ITEM 2		    796		   1785

                *************************************************************************/
                tipoFactura = Integer.valueOf('52')
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces2 = new HashMap&lt;String, String&gt;()
                namespaces2.put("", "http://www.sii.cl/SiiDte")
                namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts2 = new XmlOptions()
                opts2.setLoadSubstituteNamespaces(namespaces2)

                // Recuperaci√≥n de archivo CAF desde BD
                AutorizacionType caf2 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(dte2map.cafData.getBytes()), opts2).getAUTORIZACION()

                // Construyo base a partir del template
                DTEDocument doc2 = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts2)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                iddoc = doc2.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                iddoc.setTipoDespacho(2)
                iddoc.setIndTraslado(1)
                // Obtenci√≥n de ID distinto
                doc2.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Si es gu√≠a de despacho se configura indicador de traslado

                // Receptor
                Receptor recp2 = doc2.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel

                recp2.setRUTRecep("79693930-3")
                recp2.setRznSocRecep("LOREAL")
                recp2.setGiroRecep("COMERCIALIZ. PROD. FARMAC. Y COSMETICOS")
                recp2.setContacto("224406777")
                recp2.setDirRecep("Av. Apoquindo 3885 Of. 201")
                recp2.setCmnaRecep("LAS CONDES")
                recp2.setCiudadRecep("SANTIAGO")


                Detalle[] det2 = new Detalle[2]

                // Agrego detalle 0
                det2[0] = Detalle.Factory.newInstance()
                det2[0].setNroLinDet(1)
                det2[0].setNmbItem("ITEM 1")
                det2[0].setQtyItem(BigDecimal.valueOf(qtyItem1Caso2))
                det2[0].setPrcItem(BigDecimal.valueOf(prcItem1Caso2))
                totalItem1 = Math.round(qtyItem1Caso2*prcItem1Caso2)
                det2[0].setMontoItem(totalItem1)

                det2[1] = Detalle.Factory.newInstance()
                det2[1].setNroLinDet(2)
                det2[1].setNmbItem("ITEM 2")
                det2[1].setQtyItem(BigDecimal.valueOf(qtyItem2Caso2))
                det2[1].setPrcItem(BigDecimal.valueOf(prcItem2Caso2))
                totalItem2 = Math.round(qtyItem2Caso2*prcItem2Caso2)
                det2[1].setMontoItem(totalItem2)

                doc2.getDTE().getDocumento().setDetalleArray(det2)

                // Totales
                Totales tot2 = doc2.getDTE().getDocumento().getEncabezado().addNewTotales()
                totalNeto = totalItem1 + totalItem2
                tot2.setMntNeto(Math.round(totalNeto))
                tot2.setTasaIVA(BigDecimal.valueOf(19))
                // Valor de solo IVA
                totalIVA = Math.round(totalNeto * 0.19)
                tot2.setIVA(totalIVA)
                // total neto + IVA
                totalInvoice = totalNeto + totalIVA
                tot2.setMntTotal(Math.round(totalInvoice))
                amount = totalInvoice

                // Referencias
                Referencia[] ref2 = new Referencia[1]

                ref2[0] = Referencia.Factory.newInstance()
                ref2[0].setNroLinRef(1)
                ref2[0].setTpoDocRef('SET')
                ref2[0].setFolioRef(""+folio)
                ref2[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref2[0].setRazonRef(refCaso2)

                doc2.getDTE().getDocumento().setReferenciaArray(ref2)

                // Timbro
                doc2.getDTE().timbrar(caf2.getCAF(), caf2.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces2)
                opts.setLoadSubstituteNamespaces(namespaces2)
                opts.setLoadAdditionalNamespaces(namespaces2)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc2 = DTEDocument.Factory.parse(doc2.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces2)

                uri = ""
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc2.getDTE().isSetDocumento()) {
                uri = doc2.getDTE().getDocumento().getID()
                doc2.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc2.getDTE().isSetLiquidacion()) {
                uri = doc2.getDTE().getLiquidacion().getID()
                doc2.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc2.getDTE().isSetExportaciones()) {
                uri = doc2.getDTE().getExportaciones().getID()
                doc2.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri
                out = new ByteArrayOutputStream()
                doc2.save(out, opts)
                Document doc22 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida2 = MoquiDTEUtils.sign(doc22, uri, key, cert, uri, "Documento")
                doc22 = MoquiDTEUtils.parseDocument(salida2)

                if (Signer.verify(doc22, "Documento")) {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                Files.write(path, salida2)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                Files.write(path, salida2)
                logger.warn("Error al generar factura folio "+folio)
                }
            </script>
            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-52'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>

            <!--set field="dteField.receiverPartyId" from="receiverPartyId"/-->
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                date = new Date()
                ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>

            <!-- Eliminacion de XML temporal -->
            <script>
                XMLfile = new File(xml)
                XMLfile.delete()
            </script>

            <!-- Eliminacion de PDF temporal -->
            <script>
                file.delete()
                fileCedible.delete()
            </script>

        </actions>
    </service>

    <service verb="genera" noun="SetGuiaCaso3">
        <description>
            Generaci√≥n de Caso 3 Guia de Despacho
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="qtyItem1Caso3" required="true" type="Long"/>
            <parameter name="prcItem1Caso3" required="true" type="Long"/>
            <parameter name="qtyItem2Caso3" required="true" type="Long"/>
            <parameter name="prcItem2Caso3" required="true" type="Long"/>
            <parameter name="refCaso3" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="folio"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organizaci√≥n $activeOrgId no tiene RUT definido"/>
            </if>
            <set field="rutEmisor" from="partyIdentificationList.idValue[0]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="plantillaS" from="templateFactura"/>
            <!--set field="giro" from="giroEmisor"/-->
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="logo" from="logo"/>
            <set field="fechaResolucionSii" from="fechaResolucionSii"/>
            <set field="numeroResolucionSii" from="numeroResolucionSii"/>

            <!-- Giro Emisor -->
            <service-call name="mchile.sii.dte.DteInternalServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giro" from="giroOutMap.description"/>

            <set field="fechaEmision"/>

            <!-- Obtenci√≥n de primer folio y path de CAF -->
            <service-call name="mchile.sii.dte.DteFolioServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-52', partyId:activeOrgId]" out-map="dte3map"/>

            <set field="folio" from="dte3map.folio"/>

            <set field="codRef" value="0" type="Integer"/>
            <set field="receiverPartyId" value="100102"/>

            <script>
                import java.io.ByteArrayOutputStream
                import java.io.File
                import java.io.FileInputStream
                import java.math.BigDecimal
                import java.math.BigInteger
                import java.nio.file.Files
                import java.nio.file.Path
                import java.nio.file.Paths
                import java.security.KeyStore
                import java.security.PrivateKey
                import java.security.cert.X509Certificate
                import java.util.Calendar
                import java.util.Date
                import java.util.HashMap
                import java.text.ParseException
                import java.text.SimpleDateFormat
                import java.util.Date

                import org.apache.xmlbeans.XmlOptions
                import org.w3c.dom.Document

                import cl.nic.dte.util.Signer
                import cl.nic.dte.util.Utilities
                import cl.nic.dte.util.XMLUtil
                import cl.sii.siiDte.AUTORIZACIONDocument
                import cl.sii.siiDte.AutorizacionType
                import cl.sii.siiDte.DTEDefType.Documento.Detalle
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.IdDoc
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Receptor
                import cl.sii.siiDte.DTEDefType.Documento.Encabezado.Totales
                import cl.sii.siiDte.DTEDefType.Documento.Referencia
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal
                import cl.sii.siiDte.DTEDefType.Documento.DscRcgGlobal.TpoMov.Enum
                import cl.sii.siiDte.DTEDocument
                import cl.sii.siiDte.FechaHoraType
                import cl.sii.siiDte.FechaType
                import cl.sii.siiDte.MedioPagoType
                import org.apache.commons.io.IOUtils

                DTEDocument doc
                AutorizacionType caf
                X509Certificate cert
                PrivateKey key
                int tipoFactura
                int frmPago = 1
                int listSize = 0

                logger.warn("Creando Caso 3, con folio: " + dte3map.folio)
                /************************************************************************

                CASO 1965340-3
                ==============
                DOCUMENTO	GUIA DE DESPACHO
                MOTIVO:		VENTA
                TRASLADO POR: 	CLIENTE

                ITEM		CANTIDAD	PRECIO UNITARIO
                ITEM 1		    189		   2151
                ITEM 2		    487		   6450

                *************************************************************************/


                tipoFactura = 52 as Integer
                if(formaPago != null)
                    frmPago = Integer.valueOf(formaPago)

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces3 = new HashMap&lt;String, String&gt;()
                namespaces3.put("", "http://www.sii.cl/SiiDte")
                namespaces3.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
                XmlOptions opts3 = new XmlOptions()
                opts3.setLoadSubstituteNamespaces(namespaces3)

                // Recuperaci√≥n de archivo CAF desde BD
                AutorizacionType caf3 = AUTORIZACIONDocument.Factory.parse(new ByteArrayInputStream(dte3map.cafData.getBytes()), opts3).getAUTORIZACION()

                // Construyo base a partir del template
                DTEDocument doc3 = DTEDocument.Factory.parse(ec.resource.getLocationStream(plantillaS), opts3)

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12")
                ks.load(new ByteArrayInputStream(certData.decodeBase64()), passCert.toCharArray())
                String alias = ks.aliases().nextElement()

                cert = (X509Certificate) ks.getCertificate(alias)
                key = (PrivateKey) ks.getKey(alias, passCert.toCharArray())

                // Se recorre lista de productos para armar documento (detailList)

                iddoc = doc3.getDTE().getDocumento().getEncabezado().addNewIdDoc()
                iddoc.setFolio(folio)
                iddoc.setTipoDespacho(1)
                iddoc.setIndTraslado(1)
                // Obtenci√≥n de ID distinto
                doc3.getDTE().getDocumento().setID("N" + System.nanoTime())

                // Tipo de DTE
                iddoc.setTipoDTE(BigInteger.valueOf(tipoFactura))
                iddoc.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))

                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd")
                dateFechaEmision = new Date()
                fechaEmision = formatterFechaEmision.format(dateFechaEmision)

                cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_MONTH, 45)
                iddoc.xsetFchCancel(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                // Medio y forma de pago
                if (medioPago != null ) {
                iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago))
                } else {
                iddoc.setMedioPago(MedioPagoType.Enum.forString("CH"))
                }
                iddoc.setFmaPago(BigInteger.valueOf(frmPago))

                // Si es gu√≠a de despacho se configura indicador de traslado

                // Receptor
                Receptor recp3 = doc3.getDTE().getDocumento().getEncabezado().addNewReceptor()

                // Usamos de receptor a Entel

                recp3.setRUTRecep("96992030-1")
                recp3.setRznSocRecep("Sociedad Concesionaria Vespucio Norte Express S.A.")
                recp3.setGiroRecep("CONSTRUCCION DE CARRETERAS Y LINEAS DE")
                recp3.setContacto("6005713000")
                recp3.setDirRecep("AMERICO VESPUCIO ORIENTE 1305")
                recp3.setCmnaRecep("PUDAHUEL")
                recp3.setCiudadRecep("SANTIAGO")

                Detalle[] det3 = new Detalle[2]

                // Agrego detalle 0
                det3[0] = Detalle.Factory.newInstance()
                det3[0].setNroLinDet(1)
                det3[0].setNmbItem("Pintura B&amp;W AFECTO")
                det3[0].setQtyItem(BigDecimal.valueOf(qtyItem1Caso3))
                det3[0].setPrcItem(BigDecimal.valueOf(prcItem1Caso3))
                det3[0].setMontoItem(Math.round(qtyItem1Caso3*prcItem1Caso3))
                totalItem1 = Math.round(qtyItem1Caso3*prcItem1Caso3)

                det3[1] = Detalle.Factory.newInstance()
                det3[1].setNroLinDet(2)
                det3[1].setNmbItem("ITEM 2 AFECTO")
                det3[1].setQtyItem(BigDecimal.valueOf(qtyItem2Caso3))
                det3[1].setPrcItem(BigDecimal.valueOf(prcItem2Caso3))
                det3[1].setMontoItem( Math.round(qtyItem2Caso3 * prcItem2Caso3))
                totalItem2 = Math.round(qtyItem2Caso3 * prcItem2Caso3)


                doc3.getDTE().getDocumento().setDetalleArray(det3)

                // Totales
                Totales tot3 = doc3.getDTE().getDocumento().getEncabezado().addNewTotales()
                totalNeto = totalItem1 + totalItem2
                tot3.setMntNeto(Math.round(totalNeto))
                //tot3.setMntExe(totalExento)
                tot3.setTasaIVA(BigDecimal.valueOf(19))
                // Valor de solo IVA
                totalIVA = Math.round(totalNeto * 0.19)
                tot3.setIVA(totalIVA)
                totalInvoice = totalNeto + totalIVA
                tot3.setMntTotal(Math.round(totalInvoice))
                amount = totalInvoice

                // Referencias
                Referencia[] ref3 = new Referencia[1]

                ref3[0] = Referencia.Factory.newInstance()
                ref3[0].setNroLinRef(1)
                ref3[0].setTpoDocRef('SET')
                ref3[0].setFolioRef(""+folio)
                ref3[0].xsetFchRef(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())))
                ref3[0].setRazonRef(refCaso3)

                doc3.getDTE().getDocumento().setReferenciaArray(ref3)

                // Timbro
                doc3.getDTE().timbrar(caf3.getCAF(), caf3.getPrivateKey(null))

                // antes de firmar le doy formato a los datos
                opts = new XmlOptions()
                opts.setSaveImplicitNamespaces(namespaces3)
                opts.setLoadSubstituteNamespaces(namespaces3)
                opts.setLoadAdditionalNamespaces(namespaces3)
                opts.setSavePrettyPrint()
                opts.setSavePrettyPrintIndent(4)

                // releo el doc para que se reflejen los cambios de formato
                doc3 = DTEDocument.Factory.parse(doc3.newInputStream(opts), opts)

                // Guardo
                opts = new XmlOptions()
                opts.setCharacterEncoding("ISO-8859-1")
                opts.setSaveImplicitNamespaces(namespaces3)

                uri = ""
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()))

                if (doc3.getDTE().isSetDocumento()) {
                uri = doc3.getDTE().getDocumento().getID()
                doc3.getDTE().getDocumento().xsetTmstFirma(now)
                } else if (doc3.getDTE().isSetLiquidacion()) {
                uri = doc3.getDTE().getLiquidacion().getID()
                doc3.getDTE().getLiquidacion().xsetTmstFirma(now)
                } else if (doc3.getDTE().isSetExportaciones()) {
                uri = doc3.getDTE().getExportaciones().getID()
                doc3.getDTE().getExportaciones().xsetTmstFirma(now)
                }

                uri = "#" + uri
                out = new ByteArrayOutputStream()
                doc3.save(out, opts)
                doc3.save(new File(resultS + "DTE" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts)
                Document doc23 = MoquiDTEUtils.parseDocument(out.toByteArray())
                byte[] salida3 = MoquiDTEUtils.sign(doc23, uri, key, cert, uri, "Documento")
                doc23 = MoquiDTEUtils.parseDocument(salida3)

                if (Signer.verify(doc23, "Documento")) {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + ".xml")
                Files.write(path, salida3)
                logger.warn("Factura "+path+" folio "+folio+" generada OK")
                } else {
                Path path = Paths.get(resultS + "DTE" + tipoFactura + "-" + folio + "-mala.xml")
                Files.write(path, salida3)
                logger.warn("Error al generar factura folio "+folio)
                }
            </script>

            <!-- Registro de DTE en base de datos y generaci√≥n de PDF -->
            <set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/>
            <set field="xml" value="${resultS}/DTE${tipoFactura}-${folio}.xml"/>
            <set field="pdf" value="${pathPdf}/DTE${tipoFactura}-${folio}.pdf"/>
            <set field="pdfCedible" value="${pathPdf}/DTE${tipoFactura}-${folio}-cedible.pdf"/>
            <service-call name="mchile.sii.dte.DteContentServices.generate#Pdf" in-map="[pdf:pdf, dte:xml, pdfCedible:pdfCedible, issuerPartyId:activeOrgId]" out-map="context"/>
            <set field="bArray2"/>

            <!-- Lectura y conversi√≥n a arreglo de bytes de PDF temporal -->
            <script>
                file = new File(pdf)
                fis = null
                bArray = new byte[(int) file.length()]
                try {
                fis = new FileInputStream(file)
                fis.read(bArray)
                fis.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
                logger.warn("pdf largo: " + file.length())
                bArray2 = bArray

                fileCedible = new File(pdfCedible)
                fisCedible = null
                bArrayCedible = new byte[(int) fileCedible.length()]
                try {
                fisCedible = new FileInputStream(fileCedible)
                fisCedible.read(bArrayCedible)
                fisCedible.close()
                } catch (IOException ioExp) {
                ioExp.printStackTrace()
                }
            </script>

            <!-- Creaci√≥n de registro en FiscalTaxDocument -->
            <entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="'Ftdt-52'"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
                <field-map field-name="issuerPartyId" from="activeOrgId"/>
            </entity-find-one>


            <!--set field="dteField.receiverPartyId" from="receiverPartyId"/-->
            <set field="dteField.receiverPartyId" from="receiverPartyId"/>
            <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            <set field="dteField.statusId" value="Ftd-Issued"/>
            <set field="dteField.sentAuthStatusId" value="Ftd-NotSentAuth"/>

            <set field="dteField.invoiceId" from="invoiceId"/>

            <script>
                date = new Date()
                ts = new Timestamp(date.getTime())
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>

            <!-- Creacion de registros en FiscalTaxDocumentContent -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts, contentData:salida3]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts, contentData:bArray2]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-PdfCedible', contentLocation:pdfCedible, contentDate:ts, contentData:bArrayCedible]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>
            <!-- Creaci√≥n de registro en FiscalTaxDocumentAttributes -->
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, amount:amount, fechaEmision:fechaEmision, anulaBoleta:anulaBoleta, folioAnulaBoleta:folioAnulaBoleta, montoNeto:montoNeto, tasaImpuesto:19, fechaEmision:fechaEmision,
                                         montoExento:montoExento, montoIVARecuperable:montoIVARecuperable]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentAttributes" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/>
            <script>
                <!-- Eliminacion de XML temporal -->
                XMLfile = new File(xml)
                XMLfile.delete()
                <!-- Eliminacion de PDF temporal -->
                file.delete()
                fileCedible.delete()
            </script>

        </actions>
    </service>


</services>