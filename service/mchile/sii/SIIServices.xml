<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="get" noun="RutEspeciales">
        <description>Reserved Ruts and with special meaning for SII / Ruts Reservados y con significado especial para el SII</description>
        <out-parameters>
            <parameter name="rutList" type="List"/>
            <parameter name="rutMap" type="Map"/>
        </out-parameters>
        <actions>
            <set field="rutMap" from="[
                                        '11111111-1': 'Utilizado en Ejemplos',
                                        '22222222-2': 'Utilizado en Ejemplos',
                                        '33333333-3': 'Agrupación de personas',
                                        '44444446-0': 'Extranjero sin domicilio ni residencia en Chile para Boletas de Honorarios',
                                        '55555555-5': 'Extranjero sin Rut',
                                        '66666666-6': 'Persona con rut desconocido',
                                        '77777777-7': 'Agrupación de transacciones con tarjetas de crédito bancarias'
                                        ]"/>
            <set field="rutList" from="rutMap.keySet()"/>
        </actions>
    </service>

    <service verb="get" noun="SituacionTributariaTerceros">
        <in-parameters>
            <parameter name="rut"/>
            <parameter name="dv"/>
        </in-parameters>
        <out-parameters>
            <parameter name="tieneInicioActividades"/>
            <parameter name="razonSocial"/>
            <parameter name="fechaInicioActividades"/>
            <parameter name="actividadesEconomicas"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.sii.SIIServices.get#Captcha" out-map="captcha"/>
            <script><![CDATA[import org.moqui.util.RestClient

            location = "https://zeus.sii.cl/cvc_cgi/stc/getstc"
            situacionTributariaRequestJson = groovy.json.JsonOutput.toJson([RUT: rut, DV: dv.toUpperCase(), PRG: 'STC', OPC: 'NOR', txt_code:captcha.code, txt_captcha: captcha.txtCaptcha])
            //ec.logger.warn("requestJson: ${situacionTributariaRequestJson}")
            situacionTributaria = ec.service.rest().uri(location).contentType('application/x-www-form-urlencoded').acceptContentType('application/json').method('POST').text("RUT=${rut}&DV=${dv.toUpperCase()}&PRG=STC&OPC=NOR&txt_code=${captcha.code}&txt_captcha=${captcha.txtCaptcha}").call()

            String situacionTributariaHtml = situacionTributaria.text()
            //ec.logger.warn("situacionTributariaHtml: ${situacionTributariaHtml}")

            patternList = [
                    [name:'tieneInicioActividades', pattern:'Contribuyente presenta Inicio de Actividades: ([SINO]{2})</span>'],
                    [name:'razonSocial', pattern:'<strong>Nombre o Raz&oacute;n Social&nbsp;:</strong></div><div [^>]*>(.*?)</div><br>'],
                    [name:'fechaInicioActividades', pattern:'Fecha de Inicio de Actividades: (\\d{2}-\\d{2}-\\d{4})'],
                    [name:'actividadesEconomicas', preselectPattern:'<strong>Actividades Econ&oacute;micas vigentes:</strong>.*?<table border="1".*?>(.*?)</table>', pattern:'<TR>\\s*<TD [^>]*>\\s*<font class[^>]*>([^<>]*)</font></TD>\\s*<TD [^>]*>\\s*<font class[^>]*>([^<>]*)</font></TD>\\s*<TD [^>]*>\\s*<font class[^>]*>([^<>]*)</font></TD>\\s*<TD [^>]*>\\s*<font class[^>]*>([^<>]*)</font></TD>\\s*<TD [^>]*>\\s*<font class[^>]*>([^<>]*)</font></TD>\\s*</TR>', fieldNames:['descripcion', 'codigo', 'categoria', 'afecta', 'fecha']]
            ]

            ec.context.putAll(cl.moit.scraping.FieldExtractor.extractFromPatternList(situacionTributariaHtml, patternList))

            ]]></script>
        </actions>
    </service>

    <service verb="consulta" noun="ContribuyentesAutorizadosDireccionRegional">
        <in-parameters>
            <parameter name="rut"/>
            <parameter name="dv"/>
            <parameter name="dtePartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="razonSocial"/>
            <parameter name="numeroResolucion"/>
            <parameter name="fechaResolucion"/>
            <parameter name="direccionRegional"/>
            <parameter name="autorizaciones" type="List"/>
        </out-parameters>
        <actions>
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:dtePartyId]" out-map="dteconfig"/>
            <script><![CDATA[
                import org.moqui.util.RestClient
                import cl.moit.net.ClientAuthRequestFactory

                ClientAuthRequestFactory requestFactory = new ClientAuthRequestFactory(dteconfig.certData, dteconfig.passCert)
                RestClient restClient = new RestClient().uri("https://palena.sii.cl/cvc_cgi/dte/ee_empresa_rut").method("POST").acceptContentType("text/html").contentType("application/x-www-form-urlencoded")
                        .withRequestFactory(requestFactory).encoding("iso-8859-1").addHeader("Referer", "https://palena.sii.cl/cvc/dte/ee_empresas_dte.html")
                        .text("RUT_EMP=${rut}&DV_EMP=${dv.toUpperCase()}&ACEPTAR=Consultar")
                response = restClient.call()
                responseText = new String(response.bytes(), "iso-8859-1")
                patternList = [
                        [name:'tieneAntecedentes', pattern:'<td[^>]*><font class="texto">\nLos antecedentes de la empresa son :<br></font></td>'],
                        [name:'razonSocial', pattern:'<td[^>]*><font class="texto">\\s*&nbsp;\\s*Raz&oacute;n Social/Nombres\\s*</font></td>\\s*<td width="400" align="left"><font class="texto">\\s*&nbsp;\\s*([^\n]*)\n'],
                        [name:'fechaResolucion', pattern:'<td[^>]*><font class="texto">\\s*&nbsp;\\s*Fecha Resoluci&oacute;n\\s*</font></td>\\s*<td width="400" align="left"><font class="texto">\\s*&nbsp;\\s*([^\n]*)\n'],
                        [name:'numeroResolucion', pattern:'<td[^>]*><font class="texto">\\s*&nbsp;\\s*N° Resoluci&oacute;n\\s*</font></td>\\s*<td width="400" align="left"><font class="texto">\\s*&nbsp;\\s*([^\n]*)\n'],
                        [name:'direccionRegional', pattern:'<td width="200" align="left"><font class="texto">\\s*&nbsp; Direcci&oacute;n Regional\\s*</font></td>\\s*<td width="400" align="left"><font class="texto">\\s*&nbsp;\\s*([^\n]*)\n'],
                        [name:'autorizaciones', preselectPattern:'El contribuyente tiene autorizada la emisi&oacute;n de los siguientes documentos tributarios electr&oacute;nicos:.*?</table><br>\n<table[^>]*>.*?<tr>.*?</tr>(.*?)</table>',
                         pattern:'<tr>\\s*<td[^>]*>.*?(\\d+).*?</td>\\s*<td[^>]*><font[^>]*>\\s*(.*?)\\s*</font></td>\\s*<td[^>]*>.*?(\\d+-\\d+-\\d+).*?</td>\\s*<td[^>]*>.*?((?:&nbsp;)|(?:\\d+-\\d+-\\d+)).*?</td>.*?</tr>',
                         fieldNames:['codigo', 'descripcion', 'autorizado', 'desautorizado']]
                ]
                fields = cl.moit.scraping.FieldExtractor.extractFromPatternList(responseText, patternList)
                fields.autorizaciones.each { autorizacion -> if (autorizacion.desautorizado == '&nbsp;') autorizacion.desautorizado = null}
                ec.context.putAll(fields)
                if (!tieneAntecedentes)
                    ec.message.addError("No se recibió respuesta con antecedentes")
                if (ec.message.hasError())
                    ec.message.addError("Resultado recibido: ${responseText}")
            ]]></script>
        </actions>
    </service>

    <service verb="consulta" noun="ContribuyentesAutorizadosContacto">
        <in-parameters>
            <parameter name="rut" required="true"/>
            <parameter name="dv" required="true"/>
            <parameter name="dtePartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="razonSocial"/>
            <parameter name="numeroResolucion"/>
            <parameter name="fechaResolucion"/>
            <parameter name="mailContacto"/>
            <parameter name="autorizaciones" type="List"/>
        </out-parameters>
        <actions>
            <!--
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:partyId]" out-map="context"/>
            -->
            <service-call name="mchile.sii.dte.DteInternalServices.load#DteConfig" in-map="[partyId:dtePartyId]" out-map="dteconfig"/>
            <script><![CDATA[
                import org.moqui.util.RestClient
                import cl.moit.net.ClientAuthRequestFactory

                ClientAuthRequestFactory requestFactory = new ClientAuthRequestFactory(dteconfig.certData, dteconfig.passCert)
                RestClient restClient = new RestClient().uri("https://palena.sii.cl/cvc_cgi/dte/ce_consulta_rut").method("GET").acceptContentType("text/html").contentType("application/x-www-form-urlencoded")
                        .withRequestFactory(requestFactory).encoding("iso-8859-1")
                response = restClient.call()
                responseText = new String(response.bytes(), "iso-8859-1")
                restClient.uri("https://palena.sii.cl/cvc_cgi/dte/ce_consulta_e").method("POST").acceptContentType("text/html").contentType("application/x-www-form-urlencoded")
                        .addHeader("Referer", "https://palena.sii.cl/cvc/dte/ee_empresas_dte.html")
                        .text("RUT_EMP=${rut}&DV_EMP=${dv.toUpperCase()}&ACEPTAR=Consultar")
                response = restClient.call()
                responseText = new String(response.bytes(), "iso-8859-1")

                patternList = [
                        [name:'tieneAntecedentes', pattern:'<td[^>]*><font class="texto">\nLos antecedentes del Contribuyente son :<br></font></td>'],
                        [name:'razonSocial', pattern:'<td[^>]*><font class="texto">\\s*&nbsp;\\s*Raz&oacute;n Social/Nombres\\s*</font></td>\\s*<td width="400" align="left"><font class="texto">\\s*&nbsp;\\s*([^\n]*)\n'],
                        [name:'fechaResolucion', pattern:'<td[^>]*><font class="texto">\\s*&nbsp;\\s*Fecha Resoluci&oacute;n\\s*</font></td>\\s*<td width="400" align="left"><font class="texto">\\s*&nbsp;\\s*([^\n]*)\n'],
                        [name:'numeroResolucion', pattern:'<td[^>]*><font class="texto">\\s*&nbsp;\\s*N° Resoluci&oacute;n\\s*</font></td>\\s*<td width="400" align="left"><font class="texto">\\s*&nbsp;\\s*([^\n]*)\n'],
                        [name:'mailContacto', pattern:'<td[^>]*><font class="texto">\\s*&nbsp;\\s*Mail de contacto\\s*</font></td>\\s*<td width="400" align="left"><font class="texto">\\s*&nbsp;\\s*([^\n]*)\n'],
                        [name:'autorizaciones', preselectPattern:'El contribuyente tiene autorizado la emisi&oacute;n de los siguientes documentos tributarios electr&oacute;nicos:.*?</table><br>\n<table[^>]*>.*?<tr>.*?</tr>(.*?)</table>',
                         pattern:'<tr>\\s*<td[^>]*>.*?(\\d+).*?</td>\\s*<td[^>]*><font[^>]*>\\s*(.*?)\\s*</font></td>\\s*<td[^>]*>.*?(\\d+-\\d+-\\d+).*?</td>\\s*<td[^>]*>.*?((?:&nbsp;)|(?:\\d+-\\d+-\\d+)).*?</td>.*?</tr>',
                         fieldNames:['codigo', 'descripcion', 'autorizado', 'desautorizado']]
                ]
                fields = cl.moit.scraping.FieldExtractor.extractFromPatternList(responseText, patternList)
                fields.autorizaciones.each { autorizacion -> if (autorizacion.desautorizado == '&nbsp;') autorizacion.desautorizado = null}
                ec.context.putAll(fields)
                if (!tieneAntecedentes)
                    ec.message.addError("No se recibió respuesta con antecedentes")
                if (ec.message.hasError())
                    ec.message.addError("Resultado recibido: ${responseText}")
            ]]></script>
        </actions>
    </service>

    <service verb="get" noun="Captcha">
        <!-- curl -X POST - -header 'Accept: application/json' -d "oper=0" https://zeus.sii.cl/cvc_cgi/stc/CViewCaptcha.cgi -->
        <in-parameters>
            <parameter name="oper" default-value="0"/>
        </in-parameters>
        <out-parameters>
            <parameter name="txtCaptcha"/>
            <parameter name="code"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                location = 'https://zeus.sii.cl/cvc_cgi/stc/CViewCaptcha.cgi'

                captchaResponse = ec.service.rest().uri(location).contentType('application/x-www-form-urlencoded').acceptContentType('application/json').method('POST').text('oper=0').call()
                jsonResponse = captchaResponse?.jsonObject()
                txtCaptcha = jsonResponse?.txtCaptcha
                code = new String(Base64.decoder.decode(txtCaptcha)).substring(36,40)
            ]]></script>
        </actions>
    </service>

</services>
