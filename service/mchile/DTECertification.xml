<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">



    <service verb="genera" noun="PDFPrueba">
        <description>
            Genera archivo PDF de Factura (envio).
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="passS" from="passCert"/>
            <set field="pathResults" from="pathResults"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="giro" from="giroEmisor"/>
            <set field="templateFactura" from="templateFactura"/>
            <set field="templatePdf" from="templatePdf"/>
            <set field="templatePdfCedible" from="templatePdfCedible"/>
            <set field="templatePdfBoleta" from="templatePdfBoleta"/>
            <set field="templateEnvio" from="templateEnvio"/>
            <set field="templateAceptaciones" from="templateAceptaciones"/>
            <set field="templateLibro" from="templateLibro"/>
            <set field="logo" from="logo"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>


            <if condition="boleta">
                <set field="template" from="templatePdfBoleta"/>
            </if>

            <script>
                import java.io.File;
                import java.io.FileInputStream;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.net.ConexionSii;
                import cl.nic.dte.util.Utilities;
                import cl.sii.siiDte.RECEPCIONDTEDocument;

                dte = "/home/cherrera/git/moqui-moit/moqui-framework/runtime/component/MoquiChile/DTE/DTE33-93.xml";
                pdf = "/home/cherrera/DTE33-93.pdf";
                pdfCedible = "/home/cherrera/DTE33-93-cedible.pdf"
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdf), new FileOutputStream(pdf));
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdfCedible), new FileOutputStream(pdfCedible));

                dte = "/home/cherrera/git/moqui-moit/moqui-framework/runtime/component/MoquiChile/DTE/DTE33-94.xml";
                pdf = "/home/cherrera/DTE33-94.pdf";
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdf), new FileOutputStream(pdf));
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdfCedible), new FileOutputStream(pdfCedible));

                dte = "/home/cherrera/git/moqui-moit/moqui-framework/runtime/component/MoquiChile/DTE/DTE33-95.xml";
                pdf = "/home/cherrera/DTE33-95.pdf";
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdf), new FileOutputStream(pdf));
                Utilities.generatePDF(new FileInputStream(dte), new FileInputStream(templatePdfCedible), new FileOutputStream(pdfCedible));

            </script>
        </actions>
    </service>

    <service verb="genera" noun="LibroVentas">
        <description>
            Generación de libro de Ventas
        </description>
        <in-parameters>
            <parameter name="tipo" default="'VENTA'"/><!-- Compra o venta -->
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateLibro"/>
            <set field="enviadorS" from="rutEnvia"/>
            <set field="emisorS" from="rutEmisor"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>



            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String" value="2"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Properties;
                import java.util.Iterator;
                import java.util.Map;
                import java.util.Map.Entry;
                import java.nio.file.Path;
                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;

                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;

                import cl.helpcom.recursos.Validador;
                import cl.helpcom.recursos.ComunicadorAppClienteTXT;
                import cl.helpcom.dte.util.FirmaLibro;
                import cl.helpcom.dte.util.AgregarCamposLibros;
                import cl.helpcom.recursos.LectorFichero;

                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenSegmento;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Caratula;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.IVANoRec;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.OtrosImp;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp;
                import cl.sii.siiDte.FechaType;

                LectorFichero lectorFichero = new LectorFichero();
                String resultadoSinFirma = "/tmp/LBR-temp.xml";

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm");
                idS  = "ID"+dateFormat.format(new Date());

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT();
                Validador val = new Validador();

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                // Lee y llena los campos  => Caratula se debe armar con parámetros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C");
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;());
                arrayLineasCaratulas.get(0).add(emisorS);
                arrayLineasCaratulas.get(0).add(enviadorS);
                arrayLineasCaratulas.get(0).add('2019-05');
                arrayLineasCaratulas.get(0).add(fchResol);
                arrayLineasCaratulas.get(0).add(nroResol);
                arrayLineasCaratulas.get(0).add(tipo);
                arrayLineasCaratulas.get(0).add(tipoLibro);
                arrayLineasCaratulas.get(0).add(tipoEnvio);

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para envío ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                /* XML FACTURA */
                LibroCompraVentaDocument libCV;

                /* LibroCV */
                libCV = LibroCompraVentaDocument.Factory.parse(new FileInputStream(plantillaS));

                // libCV = LibroCompraVentaDocument.Factory.newInstance();
                LibroCompraVenta libroCompraVenta = libCV.getLibroCompraVenta();
                libCV.getLibroCompraVenta().setVersion(new BigDecimal("1.0"));
                EnvioLibro envioLibro = libroCompraVenta.addNewEnvioLibro();

                // ID de libro se debería calcular
                libCV.getLibroCompraVenta().getEnvioLibro().setID(idS);
                //libCV.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                XmlCursor cursor = libCV.newCursor();
                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo();

                AgregarCamposLibros addCampos = new AgregarCamposLibros();
                // Agregar CARATULA
                addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas);

                // Factura Electronica (33)
                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(33);
                totalesPeriodo.setTotDoc(4);
                totalesPeriodo.setTotMntExe(48825);
                totalesPeriodo.setTotMntNeto(9288349);
                totalesPeriodo.setTotMntIVA(1764786);
                totalesPeriodo.setTotMntTotal(11101960);

                // Nota de Debito Electronica (56)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(56);
                totalesPeriodo.setTotDoc(1);
                totalesPeriodo.setTotMntExe(0);
                totalesPeriodo.setTotMntNeto(0);
                totalesPeriodo.setTotMntIVA(0);
                totalesPeriodo.setTotMntTotal(0);

                // Nota de Credito Electrónica (61)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(61);
                totalesPeriodo.setTotDoc(3);
                totalesPeriodo.setTotMntExe(35183);
                totalesPeriodo.setTotMntNeto(3655247);
                totalesPeriodo.setTotMntIVA(694497);
                totalesPeriodo.setTotMntTotal(4384927);

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3));
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml";

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                //opts = new XmlOptions();
                opts.setSavePrettyPrint();
                //opts.setSavePrettyPrintIndent(0);
                //opts.setCharacterEncoding("ISO-8859-1");
                libCV = LibroCompraVentaDocument.Factory.parse(libCV.newInputStream(opts), (opts));

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                //libCV.save(archivoEnvio, opts);

                libCV.save(new File(resultS + "LIBCV" + idS + "-sinfirma.xml"), opts);
                libCV.save(out, opts);

                FirmaLibro firmaLibro = new FirmaLibro();

                String mensaje=firmaLibro.firmarLibro(certS, passS, resultS + "LIBCV" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio);
                logger.warn("Mensaje: " + mensaje);

            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->
            <!--set field="periodo" from="arrayLineasCaratulas.get(0).get(2)"/>
            <set field="tipoLibro" from="arrayLineasCaratulas.get(0).get(5)"/-->
        </actions>
    </service>


    <service verb="genera" noun="LibroCompras">
        <description>
            Generación de libro de Compra/Venta
        </description>
        <in-parameters>
            <parameter name="tipo" default="'COMPRA'"/><!-- Compra o venta -->
            <parameter name="tipoLibro" default="'MENSUAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathAceptaciones"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateLibro"/>
            <set field="enviadorS" from="rutEnvia"/>
            <set field="emisorS" from="rutEmisor"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>

            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Properties;
                import java.util.Iterator;
                import java.util.Map;
                import java.util.Map.Entry;
                import java.nio.file.Path;
                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;

                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;

                import cl.helpcom.recursos.Validador;
                import cl.helpcom.recursos.ComunicadorAppClienteTXT;
                import cl.helpcom.dte.util.FirmaLibro;
                import cl.helpcom.dte.util.AgregarCamposLibros;
                import cl.helpcom.recursos.LectorFichero;

                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenSegmento;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Caratula;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.IVANoRec;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.OtrosImp;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec;
                import cl.sii.siiDte.libroCV.LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp;
                import cl.sii.siiDte.FechaType;

                LectorFichero lectorFichero = new LectorFichero();
                String resultadoSinFirma = "/tmp/LBR-temp.xml";

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm");
                idS  = "ID"+dateFormat.format(new Date());

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT();
                Validador val = new Validador();

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                // Lee y llena los campos  => Caratula se debe armar con parámetros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C");
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;());
                logger.warn("Emisor:" +emisorS);
                logger.warn("Enviador:" +enviadorS);
                arrayLineasCaratulas.get(0).add(emisorS);
                arrayLineasCaratulas.get(0).add(enviadorS);
                arrayLineasCaratulas.get(0).add('2019-05');
                arrayLineasCaratulas.get(0).add(fchResol);
                arrayLineasCaratulas.get(0).add(nroResol);
                arrayLineasCaratulas.get(0).add(tipo);
                arrayLineasCaratulas.get(0).add(tipoLibro);
                arrayLineasCaratulas.get(0).add(tipoEnvio);

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para envío ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                /* XML FACTURA */
                LibroCompraVentaDocument libCV;

                /* LibroCV */
                libCV = LibroCompraVentaDocument.Factory.parse(new FileInputStream(plantillaS));

                // libCV = LibroCompraVentaDocument.Factory.newInstance();
                LibroCompraVenta libroCompraVenta = libCV.getLibroCompraVenta();
                libCV.getLibroCompraVenta().setVersion(new BigDecimal("1.0"));
                EnvioLibro envioLibro = libroCompraVenta.addNewEnvioLibro();

                // ID de libro se debería calcular
                libCV.getLibroCompraVenta().getEnvioLibro().setID(idS);
                //libCV.xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));

                XmlCursor cursor = libCV.newCursor();
                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo();

                AgregarCamposLibros addCampos = new AgregarCamposLibros();
                // Agregar CARATULA
                addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas);

                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(30);
                totalesPeriodo.setTotDoc(2);
                totalesPeriodo.setTotMntExe(0);
                totalesPeriodo.setTotMntNeto(57995);
                totalesPeriodo.setTotMntIVA(5344);
                totalesPeriodo.setTotOpIVAUsoComun(1);
                totalesPeriodo.setTotIVAUsoComun(5675);
                totalesPeriodo.setFctProp(0.6);
                totalesPeriodo.setTotCredIVAUsoComun(3405);
                totalesPeriodo.setTotMntTotal(69014);


                // Factura Electronica (33)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(33);
                totalesPeriodo.setTotDoc(2);
                totalesPeriodo.setTotMntExe(9226);
                totalesPeriodo.setTotMntNeto(18061);
                totalesPeriodo.setTotMntIVA(1441);
                // IVA No Recuperable
                totIvaNoRec = new ArrayList&lt;TotIVANoRec&gt;();
                oit = TotIVANoRec.Factory.newInstance();
                oit.setCodIVANoRec(4);
                oit.setTotOpIVANoRec(1);
                oit.setTotMntIVANoRec(1991);
                totIvaNoRec.add(oit);
                arrayTot = new TotIVANoRec[totIvaNoRec.size()];
                totIvaNoRec.toArray(arrayTot);
                totalesPeriodo.setTotIVANoRecArray(arrayTot);
                totalesPeriodo.setTotMntTotal(30719);

                // Factura Exenta Electronica (34)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                //totalesPeriodo.setTpoDoc(34);
                //totalesPeriodo.setTotDoc(1);
                //totalesPeriodo.setTotMntExe(29744);
                //totalesPeriodo.setTotMntNeto(0);
                //totalesPeriodo.setTotMntIVA(0);
                //totalesPeriodo.setTotMntTotal(29744);

                // Factura Exenta (32)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                //totalesPeriodo.setTpoDoc(32);
                //totalesPeriodo.setTotDoc(1);
                //totalesPeriodo.setTotMntExe(29628);
                //totalesPeriodo.setTotMntNeto(0);
                //totalesPeriodo.setTotMntIVA(0);
                //totalesPeriodo.setTotMntTotal(29628);

                // Nota de Credito (60)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(60);
                totalesPeriodo.setTotDoc(2);
                totalesPeriodo.setTotMntExe(0);
                totalesPeriodo.setTotMntNeto(8209);
                totalesPeriodo.setTotMntIVA(1560);
                totalesPeriodo.setTotMntTotal(9769);

                // Nota de Credito Electronica (61)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                //totalesPeriodo.setTpoDoc(61);
                //totalesPeriodo.setTotDoc(1);
                //totalesPeriodo.setTotMntExe(8649);
                //totalesPeriodo.setTotMntNeto(5990);
                //totalesPeriodo.setTotMntIVA(0);
                // IVA No Recuperable
                //totIvaNoRec = new ArrayList&lt;TotIVANoRec&gt;();
                //oit = TotIVANoRec.Factory.newInstance();
                //oit.setCodIVANoRec(1);
                //oit.setTotOpIVANoRec(1);
                //oit.setTotMntIVANoRec(1138);
                //totIvaNoRec.add(oit);
                //arrayTot = new TotIVANoRec[totIvaNoRec.size()];
                //totIvaNoRec.toArray(arrayTot);
                //totalesPeriodo.setTotIVANoRecArray(arrayTot);
                //totalesPeriodo.setTotMntTotal(15777);

                // Nota de Debito Electronica (56)
                //totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                //totalesPeriodo.setTpoDoc(56);
                //totalesPeriodo.setTotDoc(1);
                //totalesPeriodo.setTotMntExe(3967);
                //totalesPeriodo.setTotMntNeto(0);
                //totalesPeriodo.setTotMntIVA(0);
                //totalesPeriodo.setTotMntTotal(3967);

                // Factura de Compra Electronica (46)
                totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(46);
                totalesPeriodo.setTotDoc(1);
                totalesPeriodo.setTotMntExe(0);
                totalesPeriodo.setTotMntNeto(9801);
                totalesPeriodo.setTotMntIVA(1862);
                ArrayList&lt;TotOtrosImp&gt; totOtrosImp = new ArrayList&lt;TotOtrosImp&gt;();
                toimp = TotOtrosImp.Factory.newInstance();
                toimp.setCodImp(15);
                toimp.setTotMntImp(1862);
                totOtrosImp.add(toimp);
                arrayTot = new TotOtrosImp[totOtrosImp.size()];
                totOtrosImp.toArray(arrayTot);
                totalesPeriodo.setTotOtrosImpArray(arrayTot);
                totalesPeriodo.setTotMntTotal(9801);

                // **************************************************
                // Factura 234
                // Detalles
                Detalle detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(30);
                detalle.setNroDoc(234);
                detalle.setTasaImp(19);
                //detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-21"))
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                detalle.setMntExe(0);
                detalle.setMntNeto(28127);
                detalle.setMntIVA(5344);
                detalle.setMntTotal(33471);

                // Factura Electrónica 32
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(33);
                detalle.setNroDoc(32);
                detalle.setTasaImp(19);
                //detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-10"))
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                detalle.setMntExe(9226)
                detalle.setMntNeto(7584);
                detalle.setMntIVA(1441);
                detalle.setMntTotal(18251);

                // Factura 781
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(30);
                detalle.setNroDoc(781);
                detalle.setTasaImp(19);
                detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-21"))
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                detalle.setMntExe(0);
                detalle.setMntNeto(29868);
                detalle.setIVAUsoComun(5675);
                detalle.setMntTotal(35543);


                // Nota de Crédito 451
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(60);
                detalle.setNroDoc(451);
                detalle.setTasaImp(19);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-29"))
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                detalle.setMntExe(0);
                detalle.setMntNeto(2763);
                detalle.setMntIVA(525);
                detalle.setMntTotal(3288);

                // Factura Electronica 67
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(33);
                detalle.setNroDoc(67);
                detalle.setTasaImp(19);
                detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-10"))
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                detalle.setMntExe(0)
                detalle.setMntNeto(10477);
                ivaNoRec = new ArrayList&lt;IVANoRec&gt;();
                oi = IVANoRec.Factory.newInstance();
                oi.setCodIVANoRec(new BigInteger(4));
                oi.setMntIVANoRec(1991);
                ivaNoRec.add(oi);
                array = new IVANoRec[ivaNoRec.size()];
                ivaNoRec.toArray(array);
                detalle.setIVANoRecArray(array);
                detalle.setMntTotal(12468);

                // Factura de Compra Electrónica 9
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(46);
                detalle.setNroDoc(9);
                detalle.setTasaImp(19);
                //detalle.setTpoImp(1);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-05-10"))
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                detalle.setMntExe(0)
                detalle.setMntNeto(9801);
                detalle.setMntIVA(1862);
                ArrayList&lt;OtrosImp&gt; otrosImp = new ArrayList&lt;OtrosImp&gt;();
                oimp = OtrosImp.Factory.newInstance();
                oimp.setCodImp(15);
                oimp.setTasaImp(19);
                oimp.setMntImp(1862);
                otrosImp.add(oimp);
                array = new OtrosImp[otrosImp.size()];
                otrosImp.toArray(array);
                detalle.setOtrosImpArray(array);
                detalle.setMntTotal(9801);

                // Nota de Crédito 211
                detalle = envioLibro.addNewDetalle(); // Prueba
                detalle.setTpoDoc(60);
                detalle.setNroDoc(211);
                detalle.setTasaImp(19);
                detalle.xsetFchDoc(LibroCompraVentaDocument.LibroCompraVenta.EnvioLibro.Detalle.FchDoc.Factory.newValue("2019-04-12"))
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                detalle.setMntExe(0);
                detalle.setMntNeto(5446);
                detalle.setMntIVA(1035);
                detalle.setMntTotal(6481);

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3));
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml";


                // Agregar DETALLES (SOLO LIBRO DE COMPRAS)
                if(tipo.equals("COMPRA")) {
                logger.warn("agregando detalles libro de compras");
                    addCampos.addDatosDetalle(envioLibro, arrayLineasDetalle,c.getCantidadDetallesTotales());
                    //addCampos.addDatosDetalle(envioLibro, arrayLineasDetalle,7);
                }
               // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                //opts = new XmlOptions();
                opts.setSavePrettyPrint();
                //opts.setSavePrettyPrintIndent(0);
                //opts.setCharacterEncoding("ISO-8859-1");
                libCV = LibroCompraVentaDocument.Factory.parse(libCV.newInputStream(opts), (opts));

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                //libCV.save(archivoEnvio, opts);

                libCV.save(new File(resultS + "LIBCV" + idS + "-sinfirma.xml"), opts);
                libCV.save(out, opts);

                FirmaLibro firmaLibro = new FirmaLibro();

                String mensaje=firmaLibro.firmarLibro(certS, passS, resultS + "LIBCV" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio);

            </script>
        </actions>
    </service>

    <service verb="genera" noun="LibroGuias">
        <description>
            Generación de libro de Compra/Venta - hardcoded!
        </description>
        <in-parameters>
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateLibroGuia"/>
            <set field="enviadorS" from="rutEnviador"/>
            <set field="emisorS" from="rutEmisor"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>

            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Properties;
                import java.util.Iterator;
                import java.util.Map;
                import java.util.Map.Entry;
                import java.nio.file.Path;
                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;

                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;

                import cl.helpcom.recursos.Validador;
                import cl.helpcom.recursos.ComunicadorAppClienteTXT;
                import cl.helpcom.dte.util.FirmaLibroGuia;
                import cl.helpcom.dte.util.AgregarCamposLibros;
                import cl.helpcom.recursos.LectorFichero;

                import cl.sii.siiDte.libroguia.LibroGuiaDocument;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Detalle;
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotalesPeriodo;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenSegmento;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Caratula;
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.Detalle.IVANoRec;
                import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotTraslado;
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotIVANoRec;
                //import cl.sii.siiDte.libroguia.LibroGuiaDocument.LibroGuia.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotOtrosImp;
                import cl.sii.siiDte.FechaType;
                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.libroguia.SignatureType;

                LectorFichero lectorFichero = new LectorFichero();
                String resultadoSinFirma = "/tmp/LBR-temp.xml";

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm");
                idS  = "ID"+dateFormat.format(new Date());

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT();
                Validador val = new Validador();

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                // Lee y llena los campos  => Caratula se debe armar con parámetros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C");
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;());
                arrayLineasCaratulas.get(0).add(emisorS);
                arrayLineasCaratulas.get(0).add(enviadorS);
                arrayLineasCaratulas.get(0).add('2019-05');
                arrayLineasCaratulas.get(0).add(fchResol);
                arrayLineasCaratulas.get(0).add(nroResol);
                arrayLineasCaratulas.get(0).add(tipo);
                arrayLineasCaratulas.get(0).add(tipoLibro);
                arrayLineasCaratulas.get(0).add(tipoEnvio);

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para envío ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                /* XML FACTURA */
                LibroGuiaDocument libGuia;

                /* LibroGuia */
                libGuia = LibroGuiaDocument.Factory.parse(new FileInputStream(plantillaS));

                LibroGuia libroGuia = libGuia.getLibroGuia();
                libGuia.getLibroGuia().setVersion(new BigDecimal("1.0"));
                //EnvioLibro envioLibro = libroGuia.addNewEnvioLibro();
                EnvioLibro envioLibro = libroGuia.getEnvioLibro();
                // ID de libro se debería calcular
                libGuia.getLibroGuia().getEnvioLibro().setID(idS);
                XmlCursor cursor = libGuia.newCursor();


                //AgregarCamposLibros addCampos = new AgregarCamposLibros();
                // Agregar CARATULA
                //addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas);


                //Caratula caratula = envioLibro.addNewCaratula();
                Caratula caratula = envioLibro.getCaratula();
                caratula.setRutEmisorLibro(emisorS);
                caratula.setRutEnvia("12857517-0");
                Calendar cal = Calendar.getInstance();
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('05'));
                caratula.setPeriodoTributario(cal);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2018'));
                cal.set(Calendar.MONTH, Integer.valueOf('09'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('24'));
                caratula.setFchResol(cal);
                caratula.setNroResol(Integer.valueOf(nroResol));
                caratula.setFolioNotificacion(1); // Solo para envío ESPECIAL
                logger.warn("Caratula: " + caratula.getTipoEnvio());

                //iddoc.setMedioPago(MedioPagoType.Enum.forString(medioPago));


                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo();
                resumenPeriodo.setTotFolAnulado(0);
                resumenPeriodo.setTotGuiaAnulada(1);
                resumenPeriodo.setTotGuiaVenta(1);
                resumenPeriodo.setTotMntGuiaVta(5137330);
                resumenPeriodo.setTotMntModificado(0);
                ArrayList&lt;TotTraslado&gt; totTraslado = new ArrayList&lt;TotTraslado&gt;();
                oimp = TotTraslado.Factory.newInstance();
                oimp.setTpoTraslado(5);
                oimp.setCantGuia(1);
                oimp.setMntGuia(0);
                totTraslado.add(oimp);
                //oimp = TotTraslado.Factory.newInstance();
                //oimp.setTpoTraslado(2);
                //oimp.setCantGuia(1);
                //oimp.setMntGuia(5137330);
                //totTraslado.add(oimp);
                array = new TotTraslado[totTraslado.size()];
                totTraslado.toArray(array);
                resumenPeriodo.setTotTrasladoArray(array);



                Detalle detalle = envioLibro.addNewDetalle(); // Caso 1
                detalle.setFolio(131);
                //detalle.setOperacion(1);
                detalle.setTpoOper(5);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('06'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('21'));
                detalle.setFchDoc(cal);
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                //detalle.setMntExe(0);
                detalle.setMntNeto(0);
                detalle.setTasaImp(0);
                detalle.setIVA(0);
                detalle.setMntTotal(0);

                detalle = envioLibro.addNewDetalle(); // Caso 2
                detalle.setFolio(132);
                detalle.setOperacion(2);
                detalle.setTpoOper(1);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('06'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('21'));
                detalle.setFchDoc(cal);
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                //detalle.setMntExe(0);
                detalle.setMntNeto(4317084);
                detalle.setTasaImp(19);
                detalle.setIVA(820246);
                detalle.setMntTotal(5137330);
                detalle.setTpoDocRef(33);
                detalle.setFolioDocRef(18);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('06'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('20'));
                detalle.setFchDocRef(cal);

                detalle = envioLibro.addNewDetalle(); // Caso 3
                detalle.setFolio(133);
                detalle.setAnulado(2);
                detalle.setOperacion(1);
                detalle.setTpoOper(1);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('06'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('21'));
                detalle.setFchDoc(cal);
                detalle.setRUTDoc("96800570-7");
                detalle.setRznSoc("ENEL DISTRIBUCION");
                //detalle.setMntExe(0);
                detalle.setMntNeto(3189018);
                detalle.setTasaImp(19);
                detalle.setIVA(605913);
                detalle.setMntTotal(3794931);

                //SignatureType signature = libroGuia.addNewSignature();

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3));
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml";


                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                //opts = new XmlOptions();
                opts.setSavePrettyPrint();
                libGuia = LibroGuiaDocument.Factory.parse(libGuia.newInputStream(opts), (opts));

                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());
                // firmo
                //libGuia.sign(key, cert);

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                ByteArrayOutputStream out = new ByteArrayOutputStream();

                libGuia.save(new File(resultS + "LIBGUIA" + idS + "-sinfirma.xml"), opts);
                libGuia.save(out, opts);

                FirmaLibroGuia firmaLibro = new FirmaLibroGuia();
                String mensaje=firmaLibro.firmarLibro(certS, passS, resultS + "LIBGUIA" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio);


            </script>
        </actions>
    </service>

    <service verb="genera" noun="LibroBoletas">
        <description>
            Generación de libro de boletas - hardcoded!
        </description>
        <in-parameters>
            <parameter name="tipoLibro" default="'ESPECIAL'"/><!-- MENSUAL-ESPECIAL-RECTIFICA-->
            <parameter name="tipoEnvio" default="'TOTAL'"/><!-- PARCIAL-FINAL-TOTAL-AJUSTE -->
            <parameter name="periodo" default="'2000-04'"/><!-- Si es nulo, se toma el mes anterior -->
            <parameter name="folio" default-value="1"/>
            <parameter name="activeOrgId" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateLibroBoletas"/>
            <set field="enviadorS" from="rutEnvia"/>
            <set field="emisorS" from="rutEmisor"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>


            <set field="resultadoFirmado" from="resultS"/>

            <set field="tipoFactura" from="tipoFacturaS"/>

            <set field="fechaEmision" value=""/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>
            <set field="idS" value=""/>

            <!-- TODO: Variables no implementadas -->
            <set field="nroSegmento" value=""/>
            <!--set field="folioNotificacion" value="1025728"/-->
            <!--set field="folioNotificacion" value="2"/-->
            <set field="folioNotificacion" type="String"/>
            <set field="codAutRec" value=""/>
            <script>
                import java.math.BigDecimal;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Properties;
                import java.util.Iterator;
                import java.util.Map;
                import java.util.Map.Entry;
                import java.nio.file.Path;
                import org.apache.xmlbeans.XmlCursor;
                import org.apache.xmlbeans.XmlOptions;
                import org.w3c.dom.Document;

                import cl.nic.dte.util.Signer;

                import java.security.KeyStore;
                import java.security.PrivateKey;
                import java.security.cert.X509Certificate;

                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;

                import cl.helpcom.recursos.Validador;
                import cl.helpcom.recursos.ComunicadorAppClienteTXT;
                import cl.helpcom.dte.util.FirmaLibroBoleta;
                import cl.helpcom.dte.util.AgregarCamposLibros;
                import cl.helpcom.recursos.LectorFichero;

                import cl.sii.siiDte.libroboletas.LibroBoletaDocument;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Detalle;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenSegmento;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenSegmento.TotalesSegmento;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Caratula;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Caratula.TipoLibro;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Caratula.TipoEnvio;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.Caratula.TipoLibro.Enum;
                import cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenSegmento.TotalesSegmento.TotalesServicio;
                import cl.sii.siiDte.FechaType;

                LectorFichero lectorFichero = new LectorFichero();
                String resultadoSinFirma = "/tmp/LBR-temp.xml";

                SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy_HHmm");
                idS  = "ID"+dateFormat.format(new Date());

                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                ComunicadorAppClienteTXT c = new ComunicadorAppClienteTXT();
                Validador val = new Validador();

                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasCaratulas2= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasTotal= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasDetalle= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                ArrayList&lt;ArrayList&lt;String&gt;&gt; arrayLineasSegmentos= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
                // Lee y llena los campos  => Caratula se debe armar con parámetros
                // CARATULA
                //arrayLineasCaratulas = c.formatoLibroCVLineas(rutaLibro,arrayLineasCaratulas, "C");
                arrayLineasCaratulas.add(new ArrayList&lt;String&gt;());
                arrayLineasCaratulas.get(0).add(emisorS);
                arrayLineasCaratulas.get(0).add(enviadorS);
                arrayLineasCaratulas.get(0).add('2018-04');
                arrayLineasCaratulas.get(0).add(fchResol);
                arrayLineasCaratulas.get(0).add(nroResol);
                arrayLineasCaratulas.get(0).add(tipo);
                arrayLineasCaratulas.get(0).add(tipoLibro);
                arrayLineasCaratulas.get(0).add(tipoEnvio);

                arrayLineasCaratulas.get(0).add(nroSegmento);         // Solo para tipo de envio PARCIAL
                arrayLineasCaratulas.get(0).add(folioNotificacion); // Solo para envío ESPECIAL
                arrayLineasCaratulas.get(0).add(codAutRec);         // Solo para reemplazo de libro

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                /* XML FACTURA */
                LibroBoletaDocument libCV;

                /* LibroCV */
                libCV = LibroBoletaDocument.Factory.parse(new FileInputStream(plantillaS));

                LibroBoleta libroBoleta = libCV.getLibroBoleta();
                libCV.getLibroBoleta().setVersion(new BigDecimal("1.0"));
                EnvioLibro envioLibro = libroBoleta.addNewEnvioLibro();

                // ID de libro se debería calcular
                libCV.getLibroBoleta().getEnvioLibro().setID(idS);



                //AgregarCamposLibros addCampos = new AgregarCamposLibros();
                // Agregar CARATULA
                //addCampos.addDatosCaratula(envioLibro, arrayLineasCaratulas);

                Caratula caratula = envioLibro.addNewCaratula();
                //Caratula caratula = envioLibro.getCaratula();
                caratula.setRutEmisorLibro(emisorS);
                caratula.setRutEnvia(enviadorS);
                Calendar cal = Calendar.getInstance();
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('04'));
                caratula.setPeriodoTributario(cal);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('04'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('28'));
                caratula.setFchResol(cal);
                caratula.setNroResol(Integer.valueOf(nroResol));
                //caratula.setTipoOperacion('BOLETA');

                //DscRcgGlobal dscGlobal = DscRcgGlobal.Factory.newInstance();
                //dscGlobal.setTpoMov(DscRcgGlobal.TpoMov.Enum.forString("D"));

                TipoLibro tpL = TipoLibro.Factory.newInstance();
                //tpL.setTipoLibro(TipoLibro.Enum.forString("ESPECIAL"));

                caratula.setTipoLibro(TipoLibro.Enum.forString("ESPECIAL"));
                caratula.setTipoEnvio(TipoEnvio.Enum.forString("TOTAL"));
                caratula.setNroSegmento(0);
                caratula.setFolioNotificacion(1); // Solo para envío ESPECIAL


                //XmlCursor cursor = libCV.newCursor();
                ResumenSegmento resumenSegmento = envioLibro.addNewResumenSegmento();

                // Boleta Electronica (39)
                TotalesSegmento totalesSegmento = resumenSegmento.addNewTotalesSegmento();

                totalesSegmento.setTpoDoc(BigInteger.valueOf(39));
                // Array de Totales Servicio
                ArrayList&lt;TotalesServicio&gt; totServicio = new ArrayList&lt;TotalesServicio&gt;();
                oimp = TotalesServicio.Factory.newInstance();
                oimp.setTpoServ(3);
                oimp.setTotDoc(5);
                oimp.setTotMntExe(2000);
                oimp.setTotMntTotal(54160);
                totServicio.add(oimp);
                array = new TotalesServicio[totServicio.size()];
                totServicio.toArray(array);
                totalesSegmento.setTotalesServicioArray(array);

                ResumenPeriodo resumenPeriodo = envioLibro.addNewResumenPeriodo();
                TotalesPeriodo totalesPeriodo = resumenPeriodo.addNewTotalesPeriodo();
                totalesPeriodo.setTpoDoc(BigInteger.valueOf(39));
                // Array de Totales Servicio
                ArrayList &lt;cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotalesServicio&gt;  totServicio2 = new ArrayList&lt;cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotalesServicio&gt;();

                oimp2 = cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotalesServicio.Factory.newInstance();

                // TODO: Usar casos de set de pruebas

                oimp2.setTpoServ(3);
                oimp2.setTotDoc(5);
                oimp2.setTotMntExe(2000);
                oimp2.setTotMntTotal(54160);
                totServicio2.add(oimp2);

                array2 = new cl.sii.siiDte.libroboletas.LibroBoletaDocument.LibroBoleta.EnvioLibro.ResumenPeriodo.TotalesPeriodo.TotalesServicio[totServicio2.size()];
                totServicio2.toArray(array2);
                totalesPeriodo.setTotalesServicioArray(array2);

                Detalle detalle = envioLibro.addNewDetalle(); // Caso 1

                detalle.setTpoDoc(39);
                detalle.setFolioDoc(Long.valueOf(1));
                detalle.setTpoServ(3);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('05'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('23'));
                detalle.setFchEmiDoc(cal);
                detalle.setRUTCliente("66666666-6");
                detalle.setMntTotal(29800);

                detalle = envioLibro.addNewDetalle(); // Caso 2

                detalle.setTpoDoc(39);
                detalle.setFolioDoc(Long.valueOf(2));
                detalle.setTpoServ(3);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('05'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('23'));
                detalle.setFchEmiDoc(cal);
                detalle.setRUTCliente("66666666-6");
                detalle.setMntTotal(2040);

                detalle = envioLibro.addNewDetalle(); // Caso 3

                detalle.setTpoDoc(39);
                detalle.setFolioDoc(Long.valueOf(3));
                detalle.setTpoServ(3);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('05'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('23'));
                detalle.setFchEmiDoc(cal);
                detalle.setRUTCliente("66666666-6");
                detalle.setMntTotal(4100);

                detalle = envioLibro.addNewDetalle(); // Caso 4

                detalle.setTpoDoc(39);
                detalle.setFolioDoc(Long.valueOf(4));
                detalle.setTpoServ(3);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('05'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('23'));
                detalle.setFchEmiDoc(cal);
                detalle.setRUTCliente("66666666-6");
                detalle.setMntExe(2000);
                detalle.setMntTotal(14720);

                detalle = envioLibro.addNewDetalle(); // Caso 5

                detalle.setTpoDoc(39);
                detalle.setFolioDoc(Long.valueOf(5));
                detalle.setTpoServ(3);
                cal.clear();
                cal.set(Calendar.YEAR, Integer.valueOf('2019'));
                cal.set(Calendar.MONTH, Integer.valueOf('05'));
                cal.set(Calendar.DAY_OF_MONTH, Integer.valueOf('23'));
                detalle.setFchEmiDoc(cal);
                detalle.setRUTCliente("66666666-6");
                detalle.setMntTotal(3500);

                outPDF=lectorFichero.crearFicheroMMDDFlex(resultadoFirmado, arrayLineasCaratulas.get(0).get(3));
                //outPDF=lectorFichero.crearFicheroMMDDFlex("LIBROBOLETAS-", arrayLineasCaratulas.get(0).get(3));
                outPDF+="/"+arrayLineasCaratulas.get(0).get(5)+"_"+arrayLineasCaratulas.get(0).get(6)+"_"+arrayLineasCaratulas.get(0).get(7)+"_"+idS+".xml";
                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                //opts = new XmlOptions();
                opts.setSavePrettyPrint();
                //opts.setSavePrettyPrintIndent(0);
                //opts.setCharacterEncoding("ISO-8859-1");
                libCV = LibroBoletaDocument.Factory.parse(libCV.newInputStream(opts), (opts));

                // CARPETA AUXILIAR DTE XML SIN TIMBRE
                //File archivoEnvio = new File(resultadoSinFirma);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                //libCV.save(archivoEnvio, opts);

                libCV.save(new File(resultS + "LIBBLT" + idS + "-sinfirma.xml"), opts);
                libCV.save(out, opts);

                LibroBoletaDocument libro = null;
                PrivateKey key = null;

                try {
                    libro = LibroBoletaDocument.Factory.parse(new FileInputStream(resultS + "LIBBLT" + idS + "-sinfirma.xml"));
                } catch (Exception e1) {

                e1.printStackTrace();
                return null;

                }

                logger.warn("Libro:" + libro);

                FirmaLibroBoleta firmaLibro = new FirmaLibroBoleta();

                String mensaje=firmaLibro.firmarLibro(certS, passS, resultS + "LIBBLT" + idS + "-sinfirma.xml",outPDF,10,"ENVIADO",arrayLineasCaratulas.get(0).get(5),arrayLineasCaratulas.get(0).get(2),"xmlasdas",tipoEnvio);

            </script>
        </actions>
    </service>


    <service verb="genera" noun="CasoPruebaBoletas">
        <description>
            Generación de Boletas para Caso de Prueba
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="rutReceptor" default="'66666666-6'"/>
            <parameter name="receiverPartyId"/>
            <parameter name="rznSocReceptor" default="'Venta a publico sin nombre receptor'"/>
            <parameter name="giroReceptor"/>
            <parameter name="contactoReceptor"/>
            <parameter name="dirReceptor"/>
            <parameter name="cmnaReceptor"/>
            <parameter name="ciudadReceptor" default-value="${cmnaReceptor}"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>
            <!-- TODO: Guardar boletas en FiscalTaxDocument y generar RCOF -->
            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateBoleta"/>
            <set field="enviadorS" from="rutEnviador"/>
            <set field="emisorS" from="rutEmisor"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="rutEnvia" from="rutEnvia"/>
            <set field="rznSocEmisor" from="rznSocEmisor"/>
            <!--set field="giroEmisor" from="giroEmisor"/-->
            <set field="cdgSIISucur" from="cdgSIISucur"/>
            <set field="dirOrigen" from="dirOrigen"/>
            <set field="cmnaOrigen" from="cmnaOrigen"/>
            <set field="ciudadOrigen" from="ciudadOrigen"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="templatePdfBoleta" from="templatePdfBoleta"/>
            <!-- Giro del emisor -->
            <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giroEmisor" from="giroOutMap.description"/>



            <set field="fechaEmision"/>


            <!-- Obtención de primer folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="context"/>

            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>

            <script>
                import java.text.SimpleDateFormat;
                import java.util.Date;

                Date dNow = new Date();
                SimpleDateFormat ft = new SimpleDateFormat("yyMMddhhmmssMs");
                String datetime = ft.format(dNow);
                idS = idS + datetime;

                import java.io.ByteArrayOutputStream;
                import java.io.IOException;
                import java.io.StringReader;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.sql.Connection;
                import java.sql.SQLException;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Calendar;
                import java.util.Collection;
                import java.util.Date;
                import java.util.HashMap;
                import java.nio.file.Path;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;
                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;

                import org.apache.log4j.Logger;
                import org.apache.xmlbeans.XmlDate;
                import org.apache.xmlbeans.XmlException;
                import org.apache.xmlbeans.XmlOptions;
                import javax.xml.namespace.QName;
                import org.apache.xmlbeans.XmlCursor;
                import java.security.cert.X509Certificate;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import org.w3c.dom.Document;

                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.boletas.BOLETADefType;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.SubTotInfo;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle.CdgItem;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoMov;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoValor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Emisor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula.SubTotDTE;
                import org.apache.commons.io.IOUtils;

                int folio;
                AutorizacionType caf;
                AutorizacionType caf2;
                AutorizacionType caf3;
                AutorizacionType caf4;
                AutorizacionType caf5;
                PrivateKey key;
                int tipoFactura;
                int frmPago = 1;
                int listSize = 0;

                // Boleta 1

                // Leo el folio
                folio = Integer.valueOf(folioS);
                //tipoFactura = Integer.valueOf(tipoFacturaS);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // Recuperación de archivo CAF desde BD
                caf = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts).getAUTORIZACION();

                BOLETADefType boleta; // boleta tiene cargada toda la información correspondiente

                // (emisor, receptor, detalle, totales, etc)
                boleta = BOLETADefType.Factory.newInstance();

                boleta.addNewDocumento();
                boleta.getDocumento().addNewEncabezado();
                // IdDoc
                boleta.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Se recorre lista de productos para armar documento (detailList)
                //doc.addNewDocumento();
                //doc.getDocumento().addNewEncabezado();

                //IdDoc iddoc = doc.getDocumento().getEncabezado().addNewIdDoc();
                boleta.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta.getDocumento().setID(idS);

                // Tipo de DTE
                boleta.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta: " + boleta);

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp = boleta.getDocumento().getEncabezado().addNewReceptor();
                recp.setRUTRecep(rutReceptor.trim());
                //recp.setRznSocRecep(rznSocReceptor);
                recp.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor = boleta.getDocumento().getEncabezado().addNewEmisor();
                emisor.setRUTEmisor(rutEmisor);
                emisor.setRznSocEmisor(rznSocEmisor);
                emisor.setGiroEmisor(giroEmisor);
                emisor.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor.setDirOrigen(dirOrigen);
                emisor.setCmnaOrigen(cmnaOrigen);
                emisor.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101071"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                    int i = 0
                    listSize = detailList.size()
                    Detalle[] det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                    <log message="******* Iterando invoice $detailEntry" level="warn"/>
                    <set field="nombreItem" from="detailEntry.description"/>
                    <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                    <!-- TODO: obtener precio de productId -->
                    <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                    <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                    <!-- TODO: Verificar si item es afecto o exento -->
                    <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                    <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                    <script>
                        // Agrego detalles
                        det[i] = Detalle.Factory.newInstance();
                        if(itemAfecto.equals("true")) {
                        //totalNeto = totalNeto + totalItem
                        } else {
                        //totalExento = totalExento + totalItem
                        det[i].setIndExe(1);
                        }
                        det[i].setNroLinDet(i+1);
                        det[i].setNmbItem(nombreItem);
                        det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                        det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                        det[i].setMontoItem( totalItem );
                        totalInvoice = totalInvoice + totalItem

                        i = i + 1
                    </script>
            </iterate>
            <script>

                boleta.getDocumento().setDetalleArray(det);
                // Totales
                Totales tot = boleta.getDocumento().getEncabezado().addNewTotales();

                //tot.setMntNeto(totalInvoice);
                montoNeto = totalInvoice;
                //tot.setTasaIVA(BigDecimal.valueOf(19));
                //tot.setTasaIVA(iva);
                // Valor de solo IVA
                //long totalIVA = totalInvoice * 0.19
                //montoIVARecuperable = totalIVA;
                //tot.setIVA(totalIVA)
                logger.warn("monto neto:" + montoNeto);
                //logger.warn("total IVA:" + totalIVA);
                // total neto + IVA
                //totalInvoice = totalInvoice + totalIVA
                logger.warn("Total: " + totalInvoice);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta.timbrar(caf.getCAF(), caf.getPrivateKey(null));

                logger.warn("Boleta 1: " + boleta);

            </script>
            <!-- Obtención de primer folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio leído: $folio"/>
            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                //cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 2
                // ***********************************************************************

                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(2);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces2 = new HashMap&lt;String, String&gt;();
                namespaces2.put("", "http://www.sii.cl/SiiDte");
                namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts2 = new XmlOptions();
                opts2.setLoadSubstituteNamespaces(namespaces2);

                // Recuperación de archivo CAF desde BD
                caf2 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts2).getAUTORIZACION();

                BOLETADefType boleta2; // boleta tiene cargada toda la información correspondiente

                // (emisor, receptor, detalle, totales, etc)
                boleta2 = BOLETADefType.Factory.newInstance();

                boleta2.addNewDocumento();
                boleta2.getDocumento().addNewEncabezado();
                // IdDoc
                boleta2.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta2.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks2 = KeyStore.getInstance("PKCS12");
                //ks2.load(new FileInputStream(certS), passS.toCharArray());
                ks2.load(certData.getBinaryStream(), passS.toCharArray());
                alias2 = ks2.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks2.getCertificate(alias);
                key = (PrivateKey) ks2.getKey(alias2, passS.toCharArray());


                boleta2.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta2.getDocumento().setID(idS);

                // Tipo de DTE
                boleta2.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta2.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta2.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 2: " + boleta2);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp2 = boleta2.getDocumento().getEncabezado().addNewReceptor();
                recp2.setRUTRecep(rutReceptor.trim());
                recp2.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor2 = boleta2.getDocumento().getEncabezado().addNewEmisor();
                emisor2.setRUTEmisor(rutEmisor);
                emisor2.setRznSocEmisor(rznSocEmisor);
                emisor2.setGiroEmisor(giroEmisor);
                emisor2.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor2.setDirOrigen(dirOrigen);
                emisor2.setCmnaOrigen(cmnaOrigen);
                emisor2.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101072"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta2.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta2.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta2.timbrar(caf2.getCAF(), caf2.getPrivateKey(null));

                logger.warn("Boleta 2: " + boleta2);



            </script>
            <!-- Obtención de primer folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio leído: $folio"/>
            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                //cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 3
                // ***********************************************************************


                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(3);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces3 = new HashMap&lt;String, String&gt;();
                namespaces3.put("", "http://www.sii.cl/SiiDte");
                namespaces3.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts3 = new XmlOptions();
                opts3.setLoadSubstituteNamespaces(namespaces3);

                //caf3 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts3).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf3 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts3).getAUTORIZACION();

                BOLETADefType boleta3;

                // (emisor, receptor, detalle, totales, etc)
                boleta3 = BOLETADefType.Factory.newInstance();

                boleta3.addNewDocumento();
                boleta3.getDocumento().addNewEncabezado();
                // IdDoc
                boleta3.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta3.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks3 = KeyStore.getInstance("PKCS12");
                //ks3.load(new FileInputStream(certS), passS.toCharArray());
                ks3.load(certData.getBinaryStream(), passS.toCharArray());
                alias3 = ks3.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks3.getCertificate(alias);
                key = (PrivateKey) ks3.getKey(alias2, passS.toCharArray());


                boleta3.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta3.getDocumento().setID(idS);

                // Tipo de DTE
                boleta3.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta3.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta3.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 3: " + boleta3);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp3 = boleta3.getDocumento().getEncabezado().addNewReceptor();
                recp3.setRUTRecep(rutReceptor.trim());
                recp3.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor3 = boleta3.getDocumento().getEncabezado().addNewEmisor();
                emisor3.setRUTEmisor(rutEmisor);
                emisor3.setRznSocEmisor(rznSocEmisor);
                emisor3.setGiroEmisor(giroEmisor);
                emisor3.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor3.setDirOrigen(dirOrigen);
                emisor3.setCmnaOrigen(cmnaOrigen);
                emisor3.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101075"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta3.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta3.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta3.timbrar(caf3.getCAF(), caf3.getPrivateKey(null));

                logger.warn("Boleta 3: " + boleta3);

                // *********************************************************************
                // Fin Boleta 3
                // *********************************************************************

                // ***********************************************************************
                // Boleta 4
                // ***********************************************************************


                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(4);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces4 = new HashMap&lt;String, String&gt;();
                namespaces4.put("", "http://www.sii.cl/SiiDte");
                namespaces4.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts4 = new XmlOptions();
                opts4.setLoadSubstituteNamespaces(namespaces4);

                //caf4 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts4).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf4 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts4).getAUTORIZACION();

                BOLETADefType boleta4;

                // (emisor, receptor, detalle, totales, etc)
                boleta4 = BOLETADefType.Factory.newInstance();

                boleta4.addNewDocumento();
                boleta4.getDocumento().addNewEncabezado();
                // IdDoc
                boleta4.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta4.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks4 = KeyStore.getInstance("PKCS12");
                //ks4.load(new FileInputStream(certS), passS.toCharArray());
                ks4.load(certData.getBinaryStream(), passS.toCharArray());
                alias4 = ks4.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks4.getCertificate(alias);
                key = (PrivateKey) ks4.getKey(alias2, passS.toCharArray());


                boleta4.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta4.getDocumento().setID(idS);

                // Tipo de DTE
                boleta4.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta4.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta4.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 4: " + boleta4);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp4 = boleta4.getDocumento().getEncabezado().addNewReceptor();
                recp4.setRUTRecep(rutReceptor.trim());
                recp4.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor4 = boleta4.getDocumento().getEncabezado().addNewEmisor();
                emisor4.setRUTEmisor(rutEmisor);
                emisor4.setRznSocEmisor(rznSocEmisor);
                emisor4.setGiroEmisor(giroEmisor);
                emisor4.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor4.setDirOrigen(dirOrigen);
                emisor4.setCmnaOrigen(cmnaOrigen);
                emisor4.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101076"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta4.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta4.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta4.timbrar(caf4.getCAF(), caf4.getPrivateKey(null));

                logger.warn("Boleta 4: " + boleta4);

                // *********************************************************************
                // Fin Boleta 4
                // ********************************************************************

                // ***********************************************************************
                // Boleta 5
                // ***********************************************************************


                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(5);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces5 = new HashMap&lt;String, String&gt;();
                namespaces5.put("", "http://www.sii.cl/SiiDte");
                namespaces5.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts5 = new XmlOptions();
                opts5.setLoadSubstituteNamespaces(namespaces5);

                //caf5 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts5).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf5 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts5).getAUTORIZACION();

                BOLETADefType boleta5;

                // (emisor, receptor, detalle, totales, etc)
                boleta5 = BOLETADefType.Factory.newInstance();

                boleta5.addNewDocumento();
                boleta5.getDocumento().addNewEncabezado();
                // IdDoc
                boleta5.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta5.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks5 = KeyStore.getInstance("PKCS12");
                //ks5.load(new FileInputStream(certS), passS.toCharArray());
                ks5.load(certData.getBinaryStream(), passS.toCharArray());
                alias5 = ks5.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks5.getCertificate(alias);
                key = (PrivateKey) ks5.getKey(alias5, passS.toCharArray());


                boleta5.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta5.getDocumento().setID(idS);

                // Tipo de DTE
                boleta5.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta5.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta5.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 5: " + boleta5);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp5 = boleta5.getDocumento().getEncabezado().addNewReceptor();
                recp5.setRUTRecep(rutReceptor.trim());
                recp5.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor5 = boleta5.getDocumento().getEncabezado().addNewEmisor();
                emisor5.setRUTEmisor(rutEmisor);
                emisor5.setRznSocEmisor(rznSocEmisor);
                emisor5.setGiroEmisor(giroEmisor);
                emisor5.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor5.setDirOrigen(dirOrigen);
                emisor5.setCmnaOrigen(cmnaOrigen);
                emisor5.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101479"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <set field="unmdItem"/>
                <if condition="detailEntry.quantityUomId">
                    <set field="unmdItem" from="detailEntry.quantityUomId"/>
                </if>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>

                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                        if(unmdItem.equals("WT_kg"))
                    det[i].setUnmdItem("Kg.");
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));

                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta5.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta5.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta5.timbrar(caf5.getCAF(), caf5.getPrivateKey(null));

                logger.warn("Boleta 5: " + boleta5);

                // *********************************************************************
                // Fin Boleta5
                // *********************************************************************

                // *********************************************************************
                // Preparación de Envio Boleta con 5 boletas
                // *********************************************************************

                logger.warn("Generando Envio Boleta\n");

                // ajustes para el formato (MAGIA) antes de firmar
                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr = new BOLETADefType[5];
                bolArr[0] = boleta;

                BOLETADefType boleta0 = boleta;

                bolArr[1] = boleta2;
                bolArr[2] = boleta3;
                bolArr[3] = boleta4;
                bolArr[4] = boleta5;
                sdte.setDTEArray(bolArr);
                sdte.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime());
                sdte.setID("ENVBO" + System.nanoTime());


                // Datos de carátula
                Caratula caratula = sdte.addNewCaratula();
                caratula.setRutEmisor(rutEmisor);
                caratula.setRutEnvia(rutEnvia);
                //caratula.setRutReceptor(rutReceptor);
                Date dateFchResol = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol)));

                caratula.setNroResol(Integer.valueOf(nroResol));
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes = new SubTotDTE[1];
                SubTotDTE subt = SubTotDTE.Factory.newInstance();
                subt.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt.setNroDTE(new BigInteger(5));
                subtDtes[0] = subt;
                caratula.setSubTotDTEArray(subtDtes);

                eb.setSetDTE(sdte);
                eb.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument.setEnvioBOLETA(eb);

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                    envioBoletaDocument = EnvioBOLETADocument.Factory.parse(envioBoletaDocument.newInputStream(opts), opts);
                } catch (Exception e) {
                    logger.warn("Error al parsear XML");
                    return
                }

                boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0);

                //boleta.sign(key, cert);

                logger.warn("Boleta: " + boleta);

                String uri = "";
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = boleta.getDocumento().getID();
                boleta.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                envioBoletaDocument.save(new File(resultS + "BOL" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts);
                envioBoletaDocument.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "Documento");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "Documento")) {
                    Path path = Paths.get(resultS + "BOL-Envio.xml");
                    Files.write(path, salida);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "BOL-Envio-mala.xml");
                    Files.write(path, salida);
                    logger.warn("Error al generar boleta folio "+folio);
                }

                // **************************************************************
                // Creación de PDF en base a EnvioBOLETA con boletaN
                // PDF Boleta 1
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument1 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb1 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte1 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr1 = new BOLETADefType[1];
                bolArr1[0] = boleta0;

                folio = "1";

                sdte1.setDTEArray(bolArr1);
                //sdte1.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime());
                sdte1.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula1 = sdte1.addNewCaratula();
                caratula1.setRutEmisor(rutEmisor);
                caratula1.setRutEnvia(rutEnvia);
                Date dateFchResol1 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula1.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol1)));

                caratula1.setNroResol(Integer.valueOf(nroResol));
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula1.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes1 = new SubTotDTE[1];
                SubTotDTE subt1 = SubTotDTE.Factory.newInstance();
                subt1.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt1.setNroDTE(new BigInteger(5));
                subtDtes1[0] = subt1;
                caratula1.setSubTotDTEArray(subtDtes1);

                eb1.setSetDTE(sdte1);
                eb1.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument1.setEnvioBOLETA(eb1);

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                    //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                    logger.warn("Error al parsear XML");
                    return
                }
                // No es necesario de nuevo
                //boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0);

                String uri1 = "";
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = boleta0.getDocumento().getID();
                boleta0.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out1 = new ByteArrayOutputStream();
                envioBoletaDocument1.save(new File(resultS + "BOLPDF" + tipoFactura + "-1-sinfirma.xml"), opts);
                envioBoletaDocument1.save(out1, opts);

                Document doc1 = XMLUtil.parseDocument(out1.toByteArray());

                byte[] salida1 = Signer.sign(doc1, uri, key, cert, uri, "Documento");
                doc1 = XMLUtil.parseDocument(salida1);

                if (Signer.verify(doc1, "Documento")) {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1.xml");
                    Files.write(path, salida1);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1-mala.xml");
                    Files.write(path, salida1);
                    logger.warn("Error al generar boleta folio "+folio);
                }
                // ******************************************************************

                // PDF Boleta 2
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument2 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb2 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte2 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr2 = new BOLETADefType[1];
                bolArr2[0] = boleta2;

                folio = "2";

                sdte2.setDTEArray(bolArr2);
                //sdte2.setID("envio-boleta");
                sdte2.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula2 = sdte2.addNewCaratula();
                caratula2.setRutEmisor(rutEmisor);
                caratula2.setRutEnvia(rutEnvia);
                Date dateFchResol2 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula2.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol2)));

                caratula2.setNroResol(Integer.valueOf(nroResol));
                //now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula2.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes2 = new SubTotDTE[1];
                SubTotDTE subt2 = SubTotDTE.Factory.newInstance();
                subt2.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt2.setNroDTE(new BigInteger(5));
                subtDtes2[0] = subt2;
                caratula2.setSubTotDTEArray(subtDtes2);

                eb2.setSetDTE(sdte2);
                eb2.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument2.setEnvioBOLETA(eb2);

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = boleta2.getDocumento().getID();
                boleta2.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out2 = new ByteArrayOutputStream();
                envioBoletaDocument2.save(new File(resultS + "BOLPDF" + tipoFactura + "-2-sinfirma.xml"), opts);
                envioBoletaDocument2.save(out2, opts);

                Document doc22 = XMLUtil.parseDocument(out2.toByteArray());

                byte[] salida2 = Signer.sign(doc22, uri, key, cert, uri, "Documento");
                doc22 = XMLUtil.parseDocument(salida2);

                if (Signer.verify(doc22, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2.xml");
                Files.write(path, salida2);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2-mala.xml");
                Files.write(path, salida2);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************


                // ******************************************************************

                // PDF Boleta 3
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument3 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb3 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte3 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr3 = new BOLETADefType[1];
                bolArr3[0] = boleta3;

                folio = "3";

                sdte3.setDTEArray(bolArr3);
                //sdte3.setID("envio-boleta");
                sdte3.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula3 = sdte3.addNewCaratula();
                caratula3.setRutEmisor(rutEmisor);
                caratula3.setRutEnvia(rutEnvia);
                Date dateFchResol3 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula3.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol3)));

                caratula3.setNroResol(Integer.valueOf(nroResol));
                caratula3.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes3 = new SubTotDTE[1];
                SubTotDTE subt3 = SubTotDTE.Factory.newInstance();
                subt3.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt3.setNroDTE(new BigInteger(5));
                subtDtes3[0] = subt3;
                caratula3.setSubTotDTEArray(subtDtes3);

                eb3.setSetDTE(sdte3);
                eb3.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument3.setEnvioBOLETA(eb3)

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                uri = boleta3.getDocumento().getID();
                boleta3.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out3 = new ByteArrayOutputStream();
                envioBoletaDocument3.save(new File(resultS + "BOLPDF" + tipoFactura + "-3-sinfirma.xml"), opts);
                envioBoletaDocument3.save(out3, opts);

                Document doc33 = XMLUtil.parseDocument(out3.toByteArray());

                byte[] salida3 = Signer.sign(doc33, uri, key, cert, uri, "Documento");
                doc33 = XMLUtil.parseDocument(salida3);

                if (Signer.verify(doc33, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3.xml");
                Files.write(path, salida3);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3-mala.xml");
                Files.write(path, salida3);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta 4
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument4 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb4 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte4 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr4 = new BOLETADefType[1];
                bolArr4[0] = boleta4;

                folio = "4";

                sdte4.setDTEArray(bolArr4);
                //sdte4.setID("envio-boleta");
                sdte4.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula4 = sdte4.addNewCaratula();
                caratula4.setRutEmisor(rutEmisor);
                caratula4.setRutEnvia(rutEnvia);
                Date dateFchResol4 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula4.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol4)));

                caratula4.setNroResol(Integer.valueOf(nroResol));
                caratula4.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes4 = new SubTotDTE[1];
                SubTotDTE subt4 = SubTotDTE.Factory.newInstance();
                subt4.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt4.setNroDTE(new BigInteger(5));
                subtDtes4[0] = subt4;
                caratula4.setSubTotDTEArray(subtDtes4);

                eb4.setSetDTE(sdte4);
                eb4.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument4.setEnvioBOLETA(eb4)

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                uri = boleta4.getDocumento().getID();
                boleta4.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out4 = new ByteArrayOutputStream();
                envioBoletaDocument4.save(new File(resultS + "BOLPDF" + tipoFactura + "-4-sinfirma.xml"), opts);
                envioBoletaDocument4.save(out4, opts);

                Document doc44 = XMLUtil.parseDocument(out4.toByteArray());

                byte[] salida4 = Signer.sign(doc44, uri, key, cert, uri, "Documento");
                doc44 = XMLUtil.parseDocument(salida4);

                if (Signer.verify(doc44, "Documento")) {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4.xml");
                    Files.write(path, salida4);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4-mala.xml");
                    Files.write(path, salida4);
                    logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta5
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument5 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb5 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte5 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr5 = new BOLETADefType[1];
                bolArr5[0] = boleta5;

                folio = "5";

                sdte5.setDTEArray(bolArr5);
                //sdte5.setID("envio-boleta");
                sdte5.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula5 = sdte5.addNewCaratula();
                caratula5.setRutEmisor(rutEmisor);
                caratula5.setRutEnvia(rutEnvia);
                Date dateFchResol5 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula5.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol5)));

                caratula5.setNroResol(Integer.valueOf(nroResol));
                caratula5.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes5 = new SubTotDTE[1];
                SubTotDTE subt5 = SubTotDTE.Factory.newInstance();
                subt5.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt5.setNroDTE(new BigInteger(5));
                subtDtes5[0] = subt5;
                caratula5.setSubTotDTEArray(subtDtes5);

                eb5.setSetDTE(sdte5);
                eb5.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument5.setEnvioBOLETA(eb5)

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                uri = boleta5.getDocumento().getID();
                boleta5.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out5 = new ByteArrayOutputStream();
                envioBoletaDocument5.save(new File(resultS + "BOLPDF" + tipoFactura + "-5-sinfirma.xml"), opts);
                envioBoletaDocument5.save(out5, opts);

                Document doc55 = XMLUtil.parseDocument(out5.toByteArray());

                byte[] salida5 = Signer.sign(doc55, uri, key, cert, uri, "Documento");
                doc55 = XMLUtil.parseDocument(salida5);

                if (Signer.verify(doc55, "Documento")) {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5.xml");
                    Files.write(path, salida5);
                    logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                    Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5-mala.xml");
                    Files.write(path, salida5);
                    logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************


            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->

            <!--set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/-->
            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-1.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-1.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-2.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-2.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-3.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-3.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-4.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-4.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-5.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-5.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <!-- Creación de registro en FiscalTaxDocument -->
            <!--entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
            </entity-find-one>

            <set field="dteField.issuerPartyId" from="activeOrgId"/>
            <if condition="rutReceptor != '66666666-6'"><then>
                <set field="dteField.receiverPartyId" from="receiverPartyId"/>
                <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            </then></if>
            <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>
            <set field="dteField.invoiceId" from="invoiceId"/-->

            <!--script>
                Date date = new Date();
                Timestamp ts = new Timestamp(date.getTime());
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/-->

        </actions>
    </service>

    <!-- Servicio verdadero para generar envio de caso de pruebas -->
    <service verb="genera" noun="CasoPruebaBoletas2">
        <description>
            Generación de Boletas para Caso de Prueba
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="rutReceptor" default="'66666666-6'"/>
            <parameter name="receiverPartyId"/>
            <parameter name="rznSocReceptor" default="'Venta a publico sin nombre receptor'"/>
            <parameter name="giroReceptor"/>
            <parameter name="contactoReceptor"/>
            <parameter name="dirReceptor"/>
            <parameter name="cmnaReceptor"/>
            <parameter name="ciudadReceptor" default-value="${cmnaReceptor}"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>

            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateBoleta"/>
            <set field="enviadorS" from="rutEnviador"/>
            <set field="emisorS" from="rutEmisor"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="rutEnvia" from="rutEnvia"/>
            <set field="rznSocEmisor" from="rznSocEmisor"/>
            <!--set field="giroEmisor" from="giroEmisor"/-->
            <set field="cdgSIISucur" from="cdgSIISucur"/>
            <set field="dirOrigen" from="dirOrigen"/>
            <set field="cmnaOrigen" from="cmnaOrigen"/>
            <set field="ciudadOrigen" from="ciudadOrigen"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="templatePdfBoleta" from="templatePdfBoleta"/>
            <!-- Giro del emisor -->
            <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giroEmisor" from="giroOutMap.description"/>



            <set field="fechaEmision"/>


            <!-- Obtención de primer folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="context"/>

            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>

            <script>
                import java.text.SimpleDateFormat;
                import java.util.Date;

                Date dNow = new Date();
                SimpleDateFormat ft = new SimpleDateFormat("yyMMddhhmmssMs");
                String datetime = ft.format(dNow);
                idS = idS + datetime;

                import java.io.ByteArrayOutputStream;
                import java.io.IOException;
                import java.io.StringReader;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.sql.Connection;
                import java.sql.SQLException;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Calendar;
                import java.util.Collection;
                import java.util.Date;
                import java.util.HashMap;
                import java.nio.file.Path;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;
                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;

                import org.apache.log4j.Logger;
                import org.apache.xmlbeans.XmlDate;
                import org.apache.xmlbeans.XmlException;
                import org.apache.xmlbeans.XmlOptions;
                import javax.xml.namespace.QName;
                import org.apache.xmlbeans.XmlCursor;
                import java.security.cert.X509Certificate;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import org.w3c.dom.Document;

                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.boletas.BOLETADefType;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.SubTotInfo;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle.CdgItem;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoMov;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoValor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Emisor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula.SubTotDTE;
                import org.apache.commons.io.IOUtils;

                int folio;
                AutorizacionType caf;
                AutorizacionType caf2;
                AutorizacionType caf3;
                AutorizacionType caf4;
                AutorizacionType caf5;
                PrivateKey key;
                int tipoFactura;
                int frmPago = 1;
                int listSize = 0;

                // Boleta 1

                // Leo el folio
                folio = Integer.valueOf(folioS);
                //tipoFactura = Integer.valueOf(tipoFacturaS);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // caf = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts).getAUTORIZACION();

                BOLETADefType boleta; // boleta tiene cargada toda la información correspondiente

                // (emisor, receptor, detalle, totales, etc)
                //cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.newInstance();
                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocumentTmp = EnvioBOLETADocument.Factory.parse(new File("/home/cherrera/git/moqui-nodocowork/moqui-framework/runtime/component/MoquiChile/DTE/BOLPDF39-5.xml"),opts);
                //EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance();
                //SetDTE sdte = SetDTE.Factory.newInstance();
                SetDTE sdteTmp =  envioBoletaDocumentTmp.envioBOLETA.getSetDTE();
                //boleta = BOLETADefType.Factory.parse(new File("/home/cherrera/git/moqui-nodocowork/moqui-framework/runtime/component/MoquiChile/DTE/BOLPDF39-5.xml"),opts).getSetDTE();
                //boleta = sdteTmp.getDTE();

                logger.warn("Leido: " + sdteTmp);
                logger.warn("Leido: " + boleta);
                return

                //boleta = BOLETADefType.Factory.newInstance();

                boleta.addNewDocumento();
                boleta.getDocumento().addNewEncabezado();
                // IdDoc
                boleta.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Se recorre lista de productos para armar documento (detailList)
                //doc.addNewDocumento();
                //doc.getDocumento().addNewEncabezado();

                //IdDoc iddoc = doc.getDocumento().getEncabezado().addNewIdDoc();
                boleta.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta.getDocumento().setID(idS);

                // Tipo de DTE
                boleta.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta: " + boleta);

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp = boleta.getDocumento().getEncabezado().addNewReceptor();
                recp.setRUTRecep(rutReceptor.trim());
                //recp.setRznSocRecep(rznSocReceptor);
                recp.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor = boleta.getDocumento().getEncabezado().addNewEmisor();
                emisor.setRUTEmisor(rutEmisor);
                emisor.setRznSocEmisor(rznSocEmisor);
                emisor.setGiroEmisor(giroEmisor);
                emisor.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor.setDirOrigen(dirOrigen);
                emisor.setCmnaOrigen(cmnaOrigen);
                emisor.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101071"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                int i = 0
                listSize = detailList.size()
                Detalle[] det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta.getDocumento().setDetalleArray(det);
                // Totales
                Totales tot = boleta.getDocumento().getEncabezado().addNewTotales();

                //tot.setMntNeto(totalInvoice);
                montoNeto = totalInvoice;
                //tot.setTasaIVA(BigDecimal.valueOf(19));
                //tot.setTasaIVA(iva);
                // Valor de solo IVA
                //long totalIVA = totalInvoice * 0.19
                //montoIVARecuperable = totalIVA;
                //tot.setIVA(totalIVA)
                logger.warn("monto neto:" + montoNeto);
                //logger.warn("total IVA:" + totalIVA);
                // total neto + IVA
                //totalInvoice = totalInvoice + totalIVA
                logger.warn("Total: " + totalInvoice);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta.timbrar(caf.getCAF(), caf.getPrivateKey(null));

                logger.warn("Boleta 1: " + boleta);

            </script>
            <!-- Obtención de primer folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio leído: $folio"/>
            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                //cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 2
                // ***********************************************************************

                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(2);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces2 = new HashMap&lt;String, String&gt;();
                namespaces2.put("", "http://www.sii.cl/SiiDte");
                namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts2 = new XmlOptions();
                opts2.setLoadSubstituteNamespaces(namespaces2);

                //caf2 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts2).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf2 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts2).getAUTORIZACION();

                BOLETADefType boleta2; // boleta tiene cargada toda la información correspondiente

                // (emisor, receptor, detalle, totales, etc)
                boleta2 = BOLETADefType.Factory.newInstance();

                boleta2.addNewDocumento();
                boleta2.getDocumento().addNewEncabezado();
                // IdDoc
                boleta2.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta2.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks2 = KeyStore.getInstance("PKCS12");
                //ks2.load(new FileInputStream(certS), passS.toCharArray());
                ks2.load(certData.getBinaryStream(), passS.toCharArray());
                alias2 = ks2.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks2.getCertificate(alias);
                key = (PrivateKey) ks2.getKey(alias2, passS.toCharArray());


                boleta2.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta2.getDocumento().setID(idS);

                // Tipo de DTE
                boleta2.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta2.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta2.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 2: " + boleta2);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp2 = boleta2.getDocumento().getEncabezado().addNewReceptor();
                recp2.setRUTRecep(rutReceptor.trim());
                recp2.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor2 = boleta2.getDocumento().getEncabezado().addNewEmisor();
                emisor2.setRUTEmisor(rutEmisor);
                emisor2.setRznSocEmisor(rznSocEmisor);
                emisor2.setGiroEmisor(giroEmisor);
                emisor2.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor2.setDirOrigen(dirOrigen);
                emisor2.setCmnaOrigen(cmnaOrigen);
                emisor2.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101072"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta2.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta2.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta2.timbrar(caf2.getCAF(), caf2.getPrivateKey(null));

                logger.warn("Boleta 2: " + boleta2);



            </script>
            <!-- Obtención de primer folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio leído: $folio"/>
            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                //cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 3
                // ***********************************************************************


                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(3);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces3 = new HashMap&lt;String, String&gt;();
                namespaces3.put("", "http://www.sii.cl/SiiDte");
                namespaces3.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts3 = new XmlOptions();
                opts3.setLoadSubstituteNamespaces(namespaces3);

                //caf3 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts3).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf3 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts3).getAUTORIZACION();

                BOLETADefType boleta3;

                // (emisor, receptor, detalle, totales, etc)
                boleta3 = BOLETADefType.Factory.newInstance();

                boleta3.addNewDocumento();
                boleta3.getDocumento().addNewEncabezado();
                // IdDoc
                boleta3.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta3.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks3 = KeyStore.getInstance("PKCS12");
                //ks3.load(new FileInputStream(certS), passS.toCharArray());
                ks3.load(certData.getBinaryStream(), passS.toCharArray());
                alias3 = ks3.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks3.getCertificate(alias);
                key = (PrivateKey) ks3.getKey(alias2, passS.toCharArray());


                boleta3.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta3.getDocumento().setID(idS);

                // Tipo de DTE
                boleta3.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta3.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta3.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 3: " + boleta3);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp3 = boleta3.getDocumento().getEncabezado().addNewReceptor();
                recp3.setRUTRecep(rutReceptor.trim());
                recp3.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor3 = boleta3.getDocumento().getEncabezado().addNewEmisor();
                emisor3.setRUTEmisor(rutEmisor);
                emisor3.setRznSocEmisor(rznSocEmisor);
                emisor3.setGiroEmisor(giroEmisor);
                emisor3.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor3.setDirOrigen(dirOrigen);
                emisor3.setCmnaOrigen(cmnaOrigen);
                emisor3.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101075"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta3.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta3.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta3.timbrar(caf3.getCAF(), caf3.getPrivateKey(null));

                logger.warn("Boleta 3: " + boleta3);

                // *********************************************************************
                // Fin Boleta 3
                // *********************************************************************

                // ***********************************************************************
                // Boleta 4
                // ***********************************************************************


                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(4);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces4 = new HashMap&lt;String, String&gt;();
                namespaces4.put("", "http://www.sii.cl/SiiDte");
                namespaces4.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts4 = new XmlOptions();
                opts4.setLoadSubstituteNamespaces(namespaces4);

                //caf4 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts4).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf4 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts4).getAUTORIZACION();

                BOLETADefType boleta4;

                // (emisor, receptor, detalle, totales, etc)
                boleta4 = BOLETADefType.Factory.newInstance();

                boleta4.addNewDocumento();
                boleta4.getDocumento().addNewEncabezado();
                // IdDoc
                boleta4.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta4.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks4 = KeyStore.getInstance("PKCS12");
                //ks4.load(new FileInputStream(certS), passS.toCharArray());
                ks4.load(certData.getBinaryStream(), passS.toCharArray());
                alias4 = ks4.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks4.getCertificate(alias);
                key = (PrivateKey) ks4.getKey(alias2, passS.toCharArray());


                boleta4.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta4.getDocumento().setID(idS);

                // Tipo de DTE
                boleta4.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta4.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta4.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 4: " + boleta4);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp4 = boleta4.getDocumento().getEncabezado().addNewReceptor();
                recp4.setRUTRecep(rutReceptor.trim());
                recp4.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor4 = boleta4.getDocumento().getEncabezado().addNewEmisor();
                emisor4.setRUTEmisor(rutEmisor);
                emisor4.setRznSocEmisor(rznSocEmisor);
                emisor4.setGiroEmisor(giroEmisor);
                emisor4.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor4.setDirOrigen(dirOrigen);
                emisor4.setCmnaOrigen(cmnaOrigen);
                emisor4.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101076"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta4.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta4.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta4.timbrar(caf4.getCAF(), caf4.getPrivateKey(null));

                logger.warn("Boleta 4: " + boleta4);

                // *********************************************************************
                // Fin Boleta 4
                // ********************************************************************

                // ***********************************************************************
                // Boleta 5
                // ***********************************************************************


                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(5);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces5 = new HashMap&lt;String, String&gt;();
                namespaces5.put("", "http://www.sii.cl/SiiDte");
                namespaces5.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts5 = new XmlOptions();
                opts5.setLoadSubstituteNamespaces(namespaces5);

                //caf5 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts5).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf5 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts5).getAUTORIZACION();

                BOLETADefType boleta5;

                // (emisor, receptor, detalle, totales, etc)
                boleta5 = BOLETADefType.Factory.newInstance();

                boleta5.addNewDocumento();
                boleta5.getDocumento().addNewEncabezado();
                // IdDoc
                boleta5.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta5.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks5 = KeyStore.getInstance("PKCS12");
                //ks5.load(new FileInputStream(certS), passS.toCharArray());
                ks5.load(certData.getBinaryStream(), passS.toCharArray());
                alias5 = ks5.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks5.getCertificate(alias);
                key = (PrivateKey) ks5.getKey(alias5, passS.toCharArray());


                boleta5.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta5.getDocumento().setID(idS);

                // Tipo de DTE
                boleta5.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta5.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta5.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 5: " + boleta5);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp5 = boleta5.getDocumento().getEncabezado().addNewReceptor();
                recp5.setRUTRecep(rutReceptor.trim());
                recp5.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor5 = boleta5.getDocumento().getEncabezado().addNewEmisor();
                emisor5.setRUTEmisor(rutEmisor);
                emisor5.setRznSocEmisor(rznSocEmisor);
                emisor5.setGiroEmisor(giroEmisor);
                emisor5.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor5.setDirOrigen(dirOrigen);
                emisor5.setCmnaOrigen(cmnaOrigen);
                emisor5.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101122"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>

                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    if(unmdItem.equals("WT_kg"))
                    det[i].setUnmdItem("Kg.");
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));

                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta5.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta5.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta5.timbrar(caf5.getCAF(), caf5.getPrivateKey(null));

                logger.warn("Boleta 5: " + boleta5);

                // *********************************************************************
                // Fin Boleta5
                // *********************************************************************

                // *********************************************************************
                // Preparación de Envio Boleta con 5 boletas
                // *********************************************************************

                logger.warn("Generando Envio Boleta\n");

                // ajustes para el formato (MAGIA) antes de firmar
                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr = new BOLETADefType[5];
                bolArr[0] = boleta;

                BOLETADefType boleta0 = boleta;

                bolArr[1] = boleta2;
                bolArr[2] = boleta3;
                bolArr[3] = boleta4;
                bolArr[4] = boleta5;
                sdte.setDTEArray(bolArr);
                //sdte.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime());
                sdte.setID("ENVBO" + System.nanoTime());


                // Datos de carátula
                Caratula caratula = sdte.addNewCaratula();
                caratula.setRutEmisor(rutEmisor);
                caratula.setRutEnvia(rutEnvia);
                //caratula.setRutReceptor(rutReceptor);
                Date dateFchResol = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol)));

                caratula.setNroResol(Integer.valueOf(nroResol));
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes = new SubTotDTE[1];
                SubTotDTE subt = SubTotDTE.Factory.newInstance();
                subt.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt.setNroDTE(new BigInteger(5));
                subtDtes[0] = subt;
                caratula.setSubTotDTEArray(subtDtes);

                eb.setSetDTE(sdte);
                eb.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument.setEnvioBOLETA(eb);

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                envioBoletaDocument = EnvioBOLETADocument.Factory.parse(envioBoletaDocument.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }

                boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0);

                //boleta.sign(key, cert);

                logger.warn("Boleta: " + boleta);

                String uri = "";
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = boleta.getDocumento().getID();
                boleta.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                envioBoletaDocument.save(new File(resultS + "BOL" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts);
                envioBoletaDocument.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "Documento");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "Documento")) {
                Path path = Paths.get(resultS + "BOL-Envio.xml");
                Files.write(path, salida);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOL-Envio-mala.xml");
                Files.write(path, salida);
                logger.warn("Error al generar boleta folio "+folio);
                }

                // **************************************************************
                // Creación de PDF en base a EnvioBOLETA con boletaN
                // PDF Boleta 1
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument1 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb1 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte1 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr1 = new BOLETADefType[1];
                bolArr1[0] = boleta0;

                folio = "1";

                sdte1.setDTEArray(bolArr1);
                //sdte1.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime());
                sdte1.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula1 = sdte1.addNewCaratula();
                caratula1.setRutEmisor(rutEmisor);
                caratula1.setRutEnvia(rutEnvia);
                Date dateFchResol1 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula1.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol1)));

                caratula1.setNroResol(Integer.valueOf(nroResol));
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula1.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes1 = new SubTotDTE[1];
                SubTotDTE subt1 = SubTotDTE.Factory.newInstance();
                subt1.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt1.setNroDTE(new BigInteger(5));
                subtDtes1[0] = subt1;
                caratula1.setSubTotDTEArray(subtDtes1);

                eb1.setSetDTE(sdte1);
                eb1.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument1.setEnvioBOLETA(eb1);

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                // No es necesario de nuevo
                //boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0);

                String uri1 = "";
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = boleta0.getDocumento().getID();
                boleta0.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out1 = new ByteArrayOutputStream();
                envioBoletaDocument1.save(new File(resultS + "BOLPDF" + tipoFactura + "-1-sinfirma.xml"), opts);
                envioBoletaDocument1.save(out1, opts);

                Document doc1 = XMLUtil.parseDocument(out1.toByteArray());

                byte[] salida1 = Signer.sign(doc1, uri, key, cert, uri, "Documento");
                doc1 = XMLUtil.parseDocument(salida1);

                if (Signer.verify(doc1, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1.xml");
                Files.write(path, salida1);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1-mala.xml");
                Files.write(path, salida1);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // ******************************************************************

                // PDF Boleta 2
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument2 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb2 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte2 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr2 = new BOLETADefType[1];
                bolArr2[0] = boleta2;

                folio = "2";

                sdte2.setDTEArray(bolArr2);
                //sdte2.setID("envio-boleta");
                sdte2.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula2 = sdte2.addNewCaratula();
                caratula2.setRutEmisor(rutEmisor);
                caratula2.setRutEnvia(rutEnvia);
                Date dateFchResol2 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula2.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol2)));

                caratula2.setNroResol(Integer.valueOf(nroResol));
                //now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula2.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes2 = new SubTotDTE[1];
                SubTotDTE subt2 = SubTotDTE.Factory.newInstance();
                subt2.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt2.setNroDTE(new BigInteger(5));
                subtDtes2[0] = subt2;
                caratula2.setSubTotDTEArray(subtDtes2);

                eb2.setSetDTE(sdte2);
                eb2.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument2.setEnvioBOLETA(eb2);

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = boleta2.getDocumento().getID();
                boleta2.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out2 = new ByteArrayOutputStream();
                envioBoletaDocument2.save(new File(resultS + "BOLPDF" + tipoFactura + "-2-sinfirma.xml"), opts);
                envioBoletaDocument2.save(out2, opts);

                Document doc22 = XMLUtil.parseDocument(out2.toByteArray());

                byte[] salida2 = Signer.sign(doc22, uri, key, cert, uri, "Documento");
                doc22 = XMLUtil.parseDocument(salida2);

                if (Signer.verify(doc22, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2.xml");
                Files.write(path, salida2);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2-mala.xml");
                Files.write(path, salida2);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************


                // ******************************************************************

                // PDF Boleta 3
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument3 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb3 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte3 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr3 = new BOLETADefType[1];
                bolArr3[0] = boleta3;

                folio = "3";

                sdte3.setDTEArray(bolArr3);
                //sdte3.setID("envio-boleta");
                sdte3.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula3 = sdte3.addNewCaratula();
                caratula3.setRutEmisor(rutEmisor);
                caratula3.setRutEnvia(rutEnvia);
                Date dateFchResol3 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula3.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol3)));

                caratula3.setNroResol(Integer.valueOf(nroResol));
                caratula3.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes3 = new SubTotDTE[1];
                SubTotDTE subt3 = SubTotDTE.Factory.newInstance();
                subt3.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt3.setNroDTE(new BigInteger(5));
                subtDtes3[0] = subt3;
                caratula3.setSubTotDTEArray(subtDtes3);

                eb3.setSetDTE(sdte3);
                eb3.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument3.setEnvioBOLETA(eb3)

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                uri = boleta3.getDocumento().getID();
                boleta3.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out3 = new ByteArrayOutputStream();
                envioBoletaDocument3.save(new File(resultS + "BOLPDF" + tipoFactura + "-3-sinfirma.xml"), opts);
                envioBoletaDocument3.save(out3, opts);

                Document doc33 = XMLUtil.parseDocument(out3.toByteArray());

                byte[] salida3 = Signer.sign(doc33, uri, key, cert, uri, "Documento");
                doc33 = XMLUtil.parseDocument(salida3);

                if (Signer.verify(doc33, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3.xml");
                Files.write(path, salida3);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3-mala.xml");
                Files.write(path, salida3);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta 4
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument4 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb4 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte4 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr4 = new BOLETADefType[1];
                bolArr4[0] = boleta4;

                folio = "4";

                sdte4.setDTEArray(bolArr4);
                //sdte4.setID("envio-boleta");
                sdte4.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula4 = sdte4.addNewCaratula();
                caratula4.setRutEmisor(rutEmisor);
                caratula4.setRutEnvia(rutEnvia);
                Date dateFchResol4 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula4.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol4)));

                caratula4.setNroResol(Integer.valueOf(nroResol));
                caratula4.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes4 = new SubTotDTE[1];
                SubTotDTE subt4 = SubTotDTE.Factory.newInstance();
                subt4.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt4.setNroDTE(new BigInteger(5));
                subtDtes4[0] = subt4;
                caratula4.setSubTotDTEArray(subtDtes4);

                eb4.setSetDTE(sdte4);
                eb4.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument4.setEnvioBOLETA(eb4)

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                uri = boleta4.getDocumento().getID();
                boleta4.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out4 = new ByteArrayOutputStream();
                envioBoletaDocument4.save(new File(resultS + "BOLPDF" + tipoFactura + "-4-sinfirma.xml"), opts);
                envioBoletaDocument4.save(out4, opts);

                Document doc44 = XMLUtil.parseDocument(out4.toByteArray());

                byte[] salida4 = Signer.sign(doc44, uri, key, cert, uri, "Documento");
                doc44 = XMLUtil.parseDocument(salida4);

                if (Signer.verify(doc44, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4.xml");
                Files.write(path, salida4);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4-mala.xml");
                Files.write(path, salida4);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta5
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument5 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb5 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte5 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr5 = new BOLETADefType[1];
                bolArr5[0] = boleta5;

                folio = "5";

                sdte5.setDTEArray(bolArr5);
                //sdte5.setID("envio-boleta");
                sdte5.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula5 = sdte5.addNewCaratula();
                caratula5.setRutEmisor(rutEmisor);
                caratula5.setRutEnvia(rutEnvia);
                Date dateFchResol5 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula5.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol5)));

                caratula5.setNroResol(Integer.valueOf(nroResol));
                caratula5.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes5 = new SubTotDTE[1];
                SubTotDTE subt5 = SubTotDTE.Factory.newInstance();
                subt5.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt5.setNroDTE(new BigInteger(5));
                subtDtes5[0] = subt5;
                caratula5.setSubTotDTEArray(subtDtes5);

                eb5.setSetDTE(sdte5);
                eb5.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument5.setEnvioBOLETA(eb5)

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                uri = boleta5.getDocumento().getID();
                boleta5.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out5 = new ByteArrayOutputStream();
                envioBoletaDocument5.save(new File(resultS + "BOLPDF" + tipoFactura + "-5-sinfirma.xml"), opts);
                envioBoletaDocument5.save(out5, opts);

                Document doc55 = XMLUtil.parseDocument(out5.toByteArray());

                byte[] salida5 = Signer.sign(doc55, uri, key, cert, uri, "Documento");
                doc55 = XMLUtil.parseDocument(salida5);

                if (Signer.verify(doc55, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5.xml");
                Files.write(path, salida5);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5-mala.xml");
                Files.write(path, salida5);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************


            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->

            <!--set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/-->
            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-1.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-1.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-2.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-2.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-3.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-3.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-4.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-4.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-5.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-5.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <!-- Creación de registro en FiscalTaxDocument -->
            <!--entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
            </entity-find-one>

            <set field="dteField.issuerPartyId" from="activeOrgId"/>
            <if condition="rutReceptor != '66666666-6'"><then>
                <set field="dteField.receiverPartyId" from="receiverPartyId"/>
                <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            </then></if>
            <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>
            <set field="dteField.invoiceId" from="invoiceId"/-->

            <!--script>
                Date date = new Date();
                Timestamp ts = new Timestamp(date.getTime());
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/-->

        </actions>
    </service>

    <service verb="genera" noun="CasoPruebaDTE">
        <description>
            Generación de DTE para Caso de Prueba (hard coded)
        </description>
        <in-parameters>
            <parameter name="activeOrgId" required="true"/>
            <parameter name="rutReceptor" default="'66666666-6'"/>
            <parameter name="receiverPartyId"/>
            <parameter name="rznSocReceptor" default="'Venta a publico sin nombre receptor'"/>
            <parameter name="giroReceptor"/>
            <parameter name="contactoReceptor"/>
            <parameter name="dirReceptor"/>
            <parameter name="cmnaReceptor"/>
            <parameter name="ciudadReceptor" default-value="${cmnaReceptor}"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fiscalTaxDocumentId"/>
        </out-parameters>
        <actions>

            <return error="true" message="Not implemented yet!"/>

            <entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList">
                <econdition field-name="partyId" from="activeOrgId"/></entity-find>

            <if condition="!partyIdentificationList.idValue[0]">
                <return error="true" message="Organización no tiene RUT definido"/>
            </if>
            <set field="emisorS" from="partyIdentificationList.idValue[0]"/>

            <!-- Validación rut -->
            <service-call name="mchile.GeneralServices.verify#Rut" in-map="[rut:rutReceptor]"/>

            <!-- Recuperacion de parametros de la organizacion -->
            <service-call name="mchile.DTEServices.load#DTEConfig" in-map="[partyId:activeOrgId]" out-map="context"/>
            <set field="certS" from="pathCert"/>
            <set field="certData" from="certData"/>
            <set field="passS" from="passCert"/>
            <set field="resultS" from="pathResults"/>
            <set field="pathTemp" from="pathTemp"/>
            <set field="pathPdf" from="pathPdf"/>
            <set field="cafS" from="pathCaf"/>
            <set field="plantillaS" from="templateBoleta"/>
            <set field="enviadorS" from="rutEnviador"/>
            <set field="emisorS" from="rutEmisor"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="rutEmisor" from="rutEmisor"/>
            <set field="rutEnvia" from="rutEnvia"/>
            <set field="rznSocEmisor" from="rznSocEmisor"/>
            <!--set field="giroEmisor" from="giroEmisor"/-->
            <set field="cdgSIISucur" from="cdgSIISucur"/>
            <set field="dirOrigen" from="dirOrigen"/>
            <set field="cmnaOrigen" from="cmnaOrigen"/>
            <set field="ciudadOrigen" from="ciudadOrigen"/>
            <set field="fchResol" from="fchResol"/>
            <set field="nroResol" from="nroResol"/>
            <set field="templatePdfBoleta" from="templatePdfBoleta"/>
            <!-- Giro del emisor -->
            <service-call name="mchile.DTEServices.get#GiroPrimario" in-map="[partyId:activeOrgId]" out-map="giroOutMap"/>
            <set field="giroEmisor" from="giroOutMap.description"/>



            <set field="fechaEmision"/>


            <!-- Obtención de primer folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="context"/>

            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>

            <script>
                import java.text.SimpleDateFormat;
                import java.util.Date;

                Date dNow = new Date();
                SimpleDateFormat ft = new SimpleDateFormat("yyMMddhhmmssMs");
                String datetime = ft.format(dNow);
                idS = idS + datetime;

                import java.io.ByteArrayOutputStream;
                import java.io.IOException;
                import java.io.StringReader;
                import java.math.BigDecimal;
                import java.math.BigInteger;
                import java.sql.Connection;
                import java.sql.SQLException;
                import java.text.SimpleDateFormat;
                import java.util.ArrayList;
                import java.util.Calendar;
                import java.util.Collection;
                import java.util.Date;
                import java.util.HashMap;
                import java.nio.file.Path;
                import cl.sii.siiDte.FechaHoraType;
                import cl.sii.siiDte.FechaType;
                import cl.sii.siiDte.MedioPagoType;
                import cl.nic.dte.util.Signer;
                import cl.nic.dte.util.Utilities;
                import cl.nic.dte.util.XMLUtil;
                import java.nio.file.Files;
                import java.nio.file.Path;
                import java.nio.file.Paths;

                import org.apache.log4j.Logger;
                import org.apache.xmlbeans.XmlDate;
                import org.apache.xmlbeans.XmlException;
                import org.apache.xmlbeans.XmlOptions;
                import javax.xml.namespace.QName;
                import org.apache.xmlbeans.XmlCursor;
                import java.security.cert.X509Certificate;
                import java.security.KeyStore;
                import java.security.PrivateKey;
                import org.w3c.dom.Document;

                import cl.nic.dte.VerifyResult;
                import cl.sii.siiDte.AUTORIZACIONDocument;
                import cl.sii.siiDte.AutorizacionType;
                import cl.sii.siiDte.boletas.BOLETADefType;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Referencia;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.SubTotInfo;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Detalle.CdgItem;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoMov;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.DscRcgGlobal.TpoValor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Emisor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.IdDoc;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Receptor;
                import cl.sii.siiDte.boletas.BOLETADefType.Documento.Encabezado.Totales;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula;
                import cl.sii.siiDte.boletas.EnvioBOLETADocument.EnvioBOLETA.SetDTE.Caratula.SubTotDTE;
                import org.apache.commons.io.IOUtils;

                int folio;
                AutorizacionType caf;
                AutorizacionType caf2;
                AutorizacionType caf3;
                AutorizacionType caf4;
                AutorizacionType caf5;
                PrivateKey key;
                int tipoFactura;
                int frmPago = 1;
                int listSize = 0;

                // Boleta 1

                // Leo el folio
                folio = Integer.valueOf(folioS);
                //tipoFactura = Integer.valueOf(tipoFacturaS);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces = new HashMap&lt;String, String&gt;();
                namespaces.put("", "http://www.sii.cl/SiiDte");
                namespaces.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts = new XmlOptions();
                opts.setLoadSubstituteNamespaces(namespaces);

                // caf = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts).getAUTORIZACION();

                BOLETADefType boleta; // boleta tiene cargada toda la información correspondiente

                // (emisor, receptor, detalle, totales, etc)
                //cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.newInstance();
                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocumentTmp = EnvioBOLETADocument.Factory.parse(new File("/home/cherrera/git/moqui-nodocowork/moqui-framework/runtime/component/MoquiChile/DTE/BOLPDF39-5.xml"),opts);
                //EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance();
                //SetDTE sdte = SetDTE.Factory.newInstance();
                SetDTE sdteTmp =  envioBoletaDocumentTmp.envioBOLETA.getSetDTE();
                //boleta = BOLETADefType.Factory.parse(new File("/home/cherrera/git/moqui-nodocowork/moqui-framework/runtime/component/MoquiChile/DTE/BOLPDF39-5.xml"),opts).getSetDTE();
                //boleta = sdteTmp.getDTE();

                logger.warn("Leido: " + sdteTmp);
                logger.warn("Leido: " + boleta);
                return

                //boleta = BOLETADefType.Factory.newInstance();

                boleta.addNewDocumento();
                boleta.getDocumento().addNewEncabezado();
                // IdDoc
                boleta.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks = KeyStore.getInstance("PKCS12");
                //ks.load(new FileInputStream(certS), passS.toCharArray());
                ks.load(certData.getBinaryStream(), passS.toCharArray());
                String alias = ks.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks.getCertificate(alias);
                key = (PrivateKey) ks.getKey(alias, passS.toCharArray());

                // Se recorre lista de productos para armar documento (detailList)
                //doc.addNewDocumento();
                //doc.getDocumento().addNewEncabezado();

                //IdDoc iddoc = doc.getDocumento().getEncabezado().addNewIdDoc();
                boleta.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta.getDocumento().setID(idS);

                // Tipo de DTE
                boleta.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                SimpleDateFormat formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                Date dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta: " + boleta);

                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp = boleta.getDocumento().getEncabezado().addNewReceptor();
                recp.setRUTRecep(rutReceptor.trim());
                //recp.setRznSocRecep(rznSocReceptor);
                recp.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor = boleta.getDocumento().getEncabezado().addNewEmisor();
                emisor.setRUTEmisor(rutEmisor);
                emisor.setRznSocEmisor(rznSocEmisor);
                emisor.setGiroEmisor(giroEmisor);
                emisor.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor.setDirOrigen(dirOrigen);
                emisor.setCmnaOrigen(cmnaOrigen);
                emisor.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101071"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                int i = 0
                listSize = detailList.size()
                Detalle[] det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta.getDocumento().setDetalleArray(det);
                // Totales
                Totales tot = boleta.getDocumento().getEncabezado().addNewTotales();

                //tot.setMntNeto(totalInvoice);
                montoNeto = totalInvoice;
                //tot.setTasaIVA(BigDecimal.valueOf(19));
                //tot.setTasaIVA(iva);
                // Valor de solo IVA
                //long totalIVA = totalInvoice * 0.19
                //montoIVARecuperable = totalIVA;
                //tot.setIVA(totalIVA)
                logger.warn("monto neto:" + montoNeto);
                //logger.warn("total IVA:" + totalIVA);
                // total neto + IVA
                //totalInvoice = totalInvoice + totalIVA
                logger.warn("Total: " + totalInvoice);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta.timbrar(caf.getCAF(), caf.getPrivateKey(null));

                logger.warn("Boleta 1: " + boleta);

            </script>
            <!-- Obtención de primer folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio leído: $folio"/>
            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                //cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 2
                // ***********************************************************************

                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(2);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces2 = new HashMap&lt;String, String&gt;();
                namespaces2.put("", "http://www.sii.cl/SiiDte");
                namespaces2.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts2 = new XmlOptions();
                opts2.setLoadSubstituteNamespaces(namespaces2);

                //caf2 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts2).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf2 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts2).getAUTORIZACION();

                BOLETADefType boleta2; // boleta tiene cargada toda la información correspondiente

                // (emisor, receptor, detalle, totales, etc)
                boleta2 = BOLETADefType.Factory.newInstance();

                boleta2.addNewDocumento();
                boleta2.getDocumento().addNewEncabezado();
                // IdDoc
                boleta2.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta2.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks2 = KeyStore.getInstance("PKCS12");
                //ks2.load(new FileInputStream(certS), passS.toCharArray());
                ks2.load(certData.getBinaryStream(), passS.toCharArray());
                alias2 = ks2.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks2.getCertificate(alias);
                key = (PrivateKey) ks2.getKey(alias2, passS.toCharArray());


                boleta2.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta2.getDocumento().setID(idS);

                // Tipo de DTE
                boleta2.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta2.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta2.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 2: " + boleta2);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp2 = boleta2.getDocumento().getEncabezado().addNewReceptor();
                recp2.setRUTRecep(rutReceptor.trim());
                recp2.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor2 = boleta2.getDocumento().getEncabezado().addNewEmisor();
                emisor2.setRUTEmisor(rutEmisor);
                emisor2.setRznSocEmisor(rznSocEmisor);
                emisor2.setGiroEmisor(giroEmisor);
                emisor2.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor2.setDirOrigen(dirOrigen);
                emisor2.setCmnaOrigen(cmnaOrigen);
                emisor2.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101072"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta2.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta2.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta2.timbrar(caf2.getCAF(), caf2.getPrivateKey(null));

                logger.warn("Boleta 2: " + boleta2);



            </script>
            <!-- Obtención de primer folio y path de CAF -->
            <service-call name="mchile.DTEServices.get#Folio" in-map="[fiscalTaxDocumentTypeEnumId:'Ftdt-39', activeOrgId:activeOrgId]" out-map="context"/>
            <log level="warn" message="Folio leído: $folio"/>
            <set field="folioS" from="folio" type="Integer"/>
            <set field="codRef" value="0" type="Integer"/>
            <script>
                //cafS = cafS + caf
            </script>

            <set field="idS" value="BO"/>
            <script>
                // ***********************************************************************
                // Boleta 3
                // ***********************************************************************


                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(3);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces3 = new HashMap&lt;String, String&gt;();
                namespaces3.put("", "http://www.sii.cl/SiiDte");
                namespaces3.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts3 = new XmlOptions();
                opts3.setLoadSubstituteNamespaces(namespaces3);

                //caf3 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts3).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf3 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts3).getAUTORIZACION();

                BOLETADefType boleta3;

                // (emisor, receptor, detalle, totales, etc)
                boleta3 = BOLETADefType.Factory.newInstance();

                boleta3.addNewDocumento();
                boleta3.getDocumento().addNewEncabezado();
                // IdDoc
                boleta3.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta3.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks3 = KeyStore.getInstance("PKCS12");
                //ks3.load(new FileInputStream(certS), passS.toCharArray());
                ks3.load(certData.getBinaryStream(), passS.toCharArray());
                alias3 = ks3.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks3.getCertificate(alias);
                key = (PrivateKey) ks3.getKey(alias2, passS.toCharArray());


                boleta3.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta3.getDocumento().setID(idS);

                // Tipo de DTE
                boleta3.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta3.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta3.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 3: " + boleta3);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp3 = boleta3.getDocumento().getEncabezado().addNewReceptor();
                recp3.setRUTRecep(rutReceptor.trim());
                recp3.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor3 = boleta3.getDocumento().getEncabezado().addNewEmisor();
                emisor3.setRUTEmisor(rutEmisor);
                emisor3.setRznSocEmisor(rznSocEmisor);
                emisor3.setGiroEmisor(giroEmisor);
                emisor3.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor3.setDirOrigen(dirOrigen);
                emisor3.setCmnaOrigen(cmnaOrigen);
                emisor3.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101075"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta3.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta3.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta3.timbrar(caf3.getCAF(), caf3.getPrivateKey(null));

                logger.warn("Boleta 3: " + boleta3);

                // *********************************************************************
                // Fin Boleta 3
                // *********************************************************************

                // ***********************************************************************
                // Boleta 4
                // ***********************************************************************


                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(4);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces4 = new HashMap&lt;String, String&gt;();
                namespaces4.put("", "http://www.sii.cl/SiiDte");
                namespaces4.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts4 = new XmlOptions();
                opts4.setLoadSubstituteNamespaces(namespaces4);

                //caf4 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts4).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf4 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts4).getAUTORIZACION();

                BOLETADefType boleta4;

                // (emisor, receptor, detalle, totales, etc)
                boleta4 = BOLETADefType.Factory.newInstance();

                boleta4.addNewDocumento();
                boleta4.getDocumento().addNewEncabezado();
                // IdDoc
                boleta4.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta4.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks4 = KeyStore.getInstance("PKCS12");
                //ks4.load(new FileInputStream(certS), passS.toCharArray());
                ks4.load(certData.getBinaryStream(), passS.toCharArray());
                alias4 = ks4.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks4.getCertificate(alias);
                key = (PrivateKey) ks4.getKey(alias2, passS.toCharArray());


                boleta4.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta4.getDocumento().setID(idS);

                // Tipo de DTE
                boleta4.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta4.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta4.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 4: " + boleta4);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp4 = boleta4.getDocumento().getEncabezado().addNewReceptor();
                recp4.setRUTRecep(rutReceptor.trim());
                recp4.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor4 = boleta4.getDocumento().getEncabezado().addNewEmisor();
                emisor4.setRUTEmisor(rutEmisor);
                emisor4.setRznSocEmisor(rznSocEmisor);
                emisor4.setGiroEmisor(giroEmisor);
                emisor4.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor4.setDirOrigen(dirOrigen);
                emisor4.setCmnaOrigen(cmnaOrigen);
                emisor4.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101076"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>
                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));
                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta4.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta4.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta4.timbrar(caf4.getCAF(), caf4.getPrivateKey(null));

                logger.warn("Boleta 4: " + boleta4);

                // *********************************************************************
                // Fin Boleta 4
                // ********************************************************************

                // ***********************************************************************
                // Boleta 5
                // ***********************************************************************


                dNow = new Date();
                ft = new SimpleDateFormat("yyMMddhhmmssMs");
                datetime = ft.format(dNow);
                idS = idS + datetime;

                //folio = Integer.valueOf(folioS);
                folio = Integer.valueOf(5);
                tipoFactura = Integer.valueOf(39);
                if(formaPago != null)
                frmPago = Integer.valueOf(formaPago);

                // Debo meter el namespace porque SII no lo genera
                HashMap&lt;String, String&gt; namespaces5 = new HashMap&lt;String, String&gt;();
                namespaces5.put("", "http://www.sii.cl/SiiDte");
                namespaces5.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                XmlOptions opts5 = new XmlOptions();
                opts5.setLoadSubstituteNamespaces(namespaces5);

                //caf5 = AUTORIZACIONDocument.Factory.parse(new File(cafS), opts5).getAUTORIZACION();

                // Recuperación de archivo CAF desde BD
                caf5 = AUTORIZACIONDocument.Factory.parse(cafData.getBinaryStream(), opts5).getAUTORIZACION();

                BOLETADefType boleta5;

                // (emisor, receptor, detalle, totales, etc)
                boleta5 = BOLETADefType.Factory.newInstance();

                boleta5.addNewDocumento();
                boleta5.getDocumento().addNewEncabezado();
                // IdDoc
                boleta5.getDocumento().getEncabezado().addNewIdDoc();
                // Detalles
                boleta5.getDocumento().addNewDetalle();


                // leo certificado y llave privada del archivo pkcs12
                KeyStore ks5 = KeyStore.getInstance("PKCS12");
                //ks5.load(new FileInputStream(certS), passS.toCharArray());
                ks5.load(certData.getBinaryStream(), passS.toCharArray());
                alias5 = ks5.aliases().nextElement();

                logger.warn("Usando certificado " + alias + " del archivo PKCS12: " + certS)

                cert = (X509Certificate) ks5.getCertificate(alias);
                key = (PrivateKey) ks5.getKey(alias5, passS.toCharArray());


                boleta5.getDocumento().getEncabezado().getIdDoc().setFolio(folio);
                boleta5.getDocumento().setID(idS);

                // Tipo de DTE
                boleta5.getDocumento().getEncabezado().getIdDoc().setTipoDTE(BigInteger.valueOf(tipoFactura));
                boleta5.getDocumento().getEncabezado().getIdDoc().xsetFchEmis(FechaType.Factory.newValue(Utilities.fechaFormat.format(new Date())));



                formatterFechaEmision = new SimpleDateFormat("yyyy-MM-dd");
                dateFechaEmision = new Date();
                fechaEmision = formatterFechaEmision.format(dateFechaEmision);

                // Indicador Servicio
                // 1 Boleta de servicios periódicos
                // 2 Boleta de servicios periódicos domiciliarios
                // 3 Boleta de Venta de Servicios
                boleta5.getDocumento().getEncabezado().getIdDoc().setIndServicio(BigInteger.valueOf(3));
                logger.warn("Boleta 5: " + boleta5);

                cal = Calendar.getInstance();
                cal.add(Calendar.DAY_OF_MONTH, 45);


                // Receptor
                Receptor recp5 = boleta5.getDocumento().getEncabezado().addNewReceptor();
                recp5.setRUTRecep(rutReceptor.trim());
                recp5.setRznSocRecep('Venta a publico sin nombre receptor');

                // Emisor
                Emisor emisor5 = boleta5.getDocumento().getEncabezado().addNewEmisor();
                emisor5.setRUTEmisor(rutEmisor);
                emisor5.setRznSocEmisor(rznSocEmisor);
                emisor5.setGiroEmisor(giroEmisor);
                emisor5.setCdgSIISucur(Integer.valueOf(cdgSIISucur));
                emisor5.setDirOrigen(dirOrigen);
                emisor5.setCmnaOrigen(cmnaOrigen);
                emisor5.setCiudadOrigen(ciudadOrigen);

            </script>

            <!-- Campos para elaboración de libro -->
            <set field="montoNeto" value="0" type="Long"/>
            <set field="montoExento" value="0" type="Long"/>
            <set field="montoIVARecuperable" value="0" type="Long"/>

            <!-- TODO: Se debe usar el invoiceId correspondiente a primera boleta -->
            <set field="invoiceId" value="101122"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="detailList">
                <econdition field-name="invoiceId" from="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>

            <script>
                i = 0
                listSize = detailList.size()
                //Detalle[] det = new Detalle[listSize]
                det = new Detalle[listSize]
            </script>
            <set field="totalInvoice" value="0" type="Integer"/>
            <iterate list="detailList" entry="detailEntry">
                <log message="******* Iterando invoice $detailEntry" level="warn"/>
                <set field="nombreItem" from="detailEntry.description"/>
                <set field="qtyItem" from="detailEntry.quantity" type="Integer"/>
                <!-- TODO: obtener precio de productId -->
                <set field="priceItem" from="detailEntry.amount" type="Integer"/>
                <set field="totalItem" from="qtyItem * priceItem" type="Integer"/>
                <!-- TODO: Verificar si item es afecto o exento  -->
                <service-call name="mchile.DTEServices.check#Afecto" in-map="[productId:detailEntry.productId]" out-map="afectoOutMap"/>
                <set field="itemAfecto" from="afectoOutMap.afecto" type="String"/>

                <script>
                    // Agrego detalles
                    det[i] = Detalle.Factory.newInstance();
                    if(itemAfecto.equals("true")) {
                    //totalNeto = totalNeto + totalItem
                    } else {
                    //totalExento = totalExento + totalItem
                    det[i].setIndExe(1);
                    }
                    det[i].setNroLinDet(i+1);
                    det[i].setNmbItem(nombreItem);
                    if(unmdItem.equals("WT_kg"))
                    det[i].setUnmdItem("Kg.");
                    det[i].setQtyItem(BigDecimal.valueOf(qtyItem));
                    det[i].setPrcItem(BigDecimal.valueOf(priceItem));

                    det[i].setMontoItem( totalItem );
                    totalInvoice = totalInvoice + totalItem

                    i = i + 1
                </script>
            </iterate>
            <script>

                boleta5.getDocumento().setDetalleArray(det);
                // Totales
                tot = boleta5.getDocumento().getEncabezado().addNewTotales();

                montoNeto = totalInvoice;
                logger.warn("monto neto:" + montoNeto);
                tot.setMntTotal(totalInvoice)

                // Timbro

                boleta5.timbrar(caf5.getCAF(), caf5.getPrivateKey(null));

                logger.warn("Boleta 5: " + boleta5);

                // *********************************************************************
                // Fin Boleta5
                // *********************************************************************

                // *********************************************************************
                // Preparación de Envio Boleta con 5 boletas
                // *********************************************************************

                logger.warn("Generando Envio Boleta\n");

                // ajustes para el formato (MAGIA) antes de firmar
                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr = new BOLETADefType[5];
                bolArr[0] = boleta;

                BOLETADefType boleta0 = boleta;

                bolArr[1] = boleta2;
                bolArr[2] = boleta3;
                bolArr[3] = boleta4;
                bolArr[4] = boleta5;
                sdte.setDTEArray(bolArr);
                //sdte.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime());
                sdte.setID("ENVBO" + System.nanoTime());


                // Datos de carátula
                Caratula caratula = sdte.addNewCaratula();
                caratula.setRutEmisor(rutEmisor);
                caratula.setRutEnvia(rutEnvia);
                //caratula.setRutReceptor(rutReceptor);
                Date dateFchResol = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol)));

                caratula.setNroResol(Integer.valueOf(nroResol));
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes = new SubTotDTE[1];
                SubTotDTE subt = SubTotDTE.Factory.newInstance();
                subt.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt.setNroDTE(new BigInteger(5));
                subtDtes[0] = subt;
                caratula.setSubTotDTEArray(subtDtes);

                eb.setSetDTE(sdte);
                eb.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument.setEnvioBOLETA(eb);

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                envioBoletaDocument = EnvioBOLETADocument.Factory.parse(envioBoletaDocument.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }

                boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0);

                //boleta.sign(key, cert);

                logger.warn("Boleta: " + boleta);

                String uri = "";
                FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = boleta.getDocumento().getID();
                boleta.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out = new ByteArrayOutputStream();
                envioBoletaDocument.save(new File(resultS + "BOL" + tipoFactura + "-" + folio + "-sinfirma.xml"), opts);
                envioBoletaDocument.save(out, opts);

                Document doc2 = XMLUtil.parseDocument(out.toByteArray());

                byte[] salida = Signer.sign(doc2, uri, key, cert, uri, "Documento");
                doc2 = XMLUtil.parseDocument(salida);

                if (Signer.verify(doc2, "Documento")) {
                Path path = Paths.get(resultS + "BOL-Envio.xml");
                Files.write(path, salida);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOL-Envio-mala.xml");
                Files.write(path, salida);
                logger.warn("Error al generar boleta folio "+folio);
                }

                // **************************************************************
                // Creación de PDF en base a EnvioBOLETA con boletaN
                // PDF Boleta 1
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument1 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb1 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte1 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr1 = new BOLETADefType[1];
                bolArr1[0] = boleta0;

                folio = "1";

                sdte1.setDTEArray(bolArr1);
                //sdte1.setID("envio-boleta");// doc.getDTE().getDocumento().setID("N" + System.nanoTime());
                sdte1.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula1 = sdte1.addNewCaratula();
                caratula1.setRutEmisor(rutEmisor);
                caratula1.setRutEnvia(rutEnvia);
                Date dateFchResol1 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula1.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol1)));

                caratula1.setNroResol(Integer.valueOf(nroResol));
                now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula1.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes1 = new SubTotDTE[1];
                SubTotDTE subt1 = SubTotDTE.Factory.newInstance();
                subt1.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt1.setNroDTE(new BigInteger(5));
                subtDtes1[0] = subt1;
                caratula1.setSubTotDTEArray(subtDtes1);

                eb1.setSetDTE(sdte1);
                eb1.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument1.setEnvioBOLETA(eb1);

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                // No es necesario de nuevo
                //boleta = envioBoletaDocument.getEnvioBOLETA().getSetDTE().getDTEArray(0);

                String uri1 = "";
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = boleta0.getDocumento().getID();
                boleta0.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out1 = new ByteArrayOutputStream();
                envioBoletaDocument1.save(new File(resultS + "BOLPDF" + tipoFactura + "-1-sinfirma.xml"), opts);
                envioBoletaDocument1.save(out1, opts);

                Document doc1 = XMLUtil.parseDocument(out1.toByteArray());

                byte[] salida1 = Signer.sign(doc1, uri, key, cert, uri, "Documento");
                doc1 = XMLUtil.parseDocument(salida1);

                if (Signer.verify(doc1, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1.xml");
                Files.write(path, salida1);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-1-mala.xml");
                Files.write(path, salida1);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // ******************************************************************

                // PDF Boleta 2
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument2 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb2 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte2 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr2 = new BOLETADefType[1];
                bolArr2[0] = boleta2;

                folio = "2";

                sdte2.setDTEArray(bolArr2);
                //sdte2.setID("envio-boleta");
                sdte2.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula2 = sdte2.addNewCaratula();
                caratula2.setRutEmisor(rutEmisor);
                caratula2.setRutEnvia(rutEnvia);
                Date dateFchResol2 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula2.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol2)));

                caratula2.setNroResol(Integer.valueOf(nroResol));
                //now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                caratula2.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes2 = new SubTotDTE[1];
                SubTotDTE subt2 = SubTotDTE.Factory.newInstance();
                subt2.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt2.setNroDTE(new BigInteger(5));
                subtDtes2[0] = subt2;
                caratula2.setSubTotDTEArray(subtDtes2);

                eb2.setSetDTE(sdte2);
                eb2.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument2.setEnvioBOLETA(eb2);

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                //FechaHoraType now = FechaHoraType.Factory.newValue(Utilities.fechaHoraFormat.format(new Date()));

                uri = boleta2.getDocumento().getID();
                boleta2.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out2 = new ByteArrayOutputStream();
                envioBoletaDocument2.save(new File(resultS + "BOLPDF" + tipoFactura + "-2-sinfirma.xml"), opts);
                envioBoletaDocument2.save(out2, opts);

                Document doc22 = XMLUtil.parseDocument(out2.toByteArray());

                byte[] salida2 = Signer.sign(doc22, uri, key, cert, uri, "Documento");
                doc22 = XMLUtil.parseDocument(salida2);

                if (Signer.verify(doc22, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2.xml");
                Files.write(path, salida2);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-2-mala.xml");
                Files.write(path, salida2);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************


                // ******************************************************************

                // PDF Boleta 3
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument3 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb3 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte3 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr3 = new BOLETADefType[1];
                bolArr3[0] = boleta3;

                folio = "3";

                sdte3.setDTEArray(bolArr3);
                //sdte3.setID("envio-boleta");
                sdte3.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula3 = sdte3.addNewCaratula();
                caratula3.setRutEmisor(rutEmisor);
                caratula3.setRutEnvia(rutEnvia);
                Date dateFchResol3 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula3.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol3)));

                caratula3.setNroResol(Integer.valueOf(nroResol));
                caratula3.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes3 = new SubTotDTE[1];
                SubTotDTE subt3 = SubTotDTE.Factory.newInstance();
                subt3.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt3.setNroDTE(new BigInteger(5));
                subtDtes3[0] = subt3;
                caratula3.setSubTotDTEArray(subtDtes3);

                eb3.setSetDTE(sdte3);
                eb3.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument3.setEnvioBOLETA(eb3)

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                uri = boleta3.getDocumento().getID();
                boleta3.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out3 = new ByteArrayOutputStream();
                envioBoletaDocument3.save(new File(resultS + "BOLPDF" + tipoFactura + "-3-sinfirma.xml"), opts);
                envioBoletaDocument3.save(out3, opts);

                Document doc33 = XMLUtil.parseDocument(out3.toByteArray());

                byte[] salida3 = Signer.sign(doc33, uri, key, cert, uri, "Documento");
                doc33 = XMLUtil.parseDocument(salida3);

                if (Signer.verify(doc33, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3.xml");
                Files.write(path, salida3);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-3-mala.xml");
                Files.write(path, salida3);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta 4
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument4 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb4 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte4 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr4 = new BOLETADefType[1];
                bolArr4[0] = boleta4;

                folio = "4";

                sdte4.setDTEArray(bolArr4);
                //sdte4.setID("envio-boleta");
                sdte4.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula4 = sdte4.addNewCaratula();
                caratula4.setRutEmisor(rutEmisor);
                caratula4.setRutEnvia(rutEnvia);
                Date dateFchResol4 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula4.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol4)));

                caratula4.setNroResol(Integer.valueOf(nroResol));
                caratula4.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes4 = new SubTotDTE[1];
                SubTotDTE subt4 = SubTotDTE.Factory.newInstance();
                subt4.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt4.setNroDTE(new BigInteger(5));
                subtDtes4[0] = subt4;
                caratula4.setSubTotDTEArray(subtDtes4);

                eb4.setSetDTE(sdte4);
                eb4.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument4.setEnvioBOLETA(eb4)

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                uri = boleta4.getDocumento().getID();
                boleta4.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out4 = new ByteArrayOutputStream();
                envioBoletaDocument4.save(new File(resultS + "BOLPDF" + tipoFactura + "-4-sinfirma.xml"), opts);
                envioBoletaDocument4.save(out4, opts);

                Document doc44 = XMLUtil.parseDocument(out4.toByteArray());

                byte[] salida4 = Signer.sign(doc44, uri, key, cert, uri, "Documento");
                doc44 = XMLUtil.parseDocument(salida4);

                if (Signer.verify(doc44, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4.xml");
                Files.write(path, salida4);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-4-mala.xml");
                Files.write(path, salida4);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************

                // ******************************************************************

                // PDF Boleta5
                // **************************************************************
                // ajustes para el formato (MAGIA) antes de firmar

                cl.sii.siiDte.boletas.EnvioBOLETADocument envioBoletaDocument5 = EnvioBOLETADocument.Factory.newInstance();
                EnvioBOLETA eb5 = EnvioBOLETA.Factory.newInstance();
                SetDTE sdte5 = SetDTE.Factory.newInstance();

                BOLETADefType[] bolArr5 = new BOLETADefType[1];
                bolArr5[0] = boleta5;

                folio = "5";

                sdte5.setDTEArray(bolArr5);
                //sdte5.setID("envio-boleta");
                sdte5.setID("ENVBO" + System.nanoTime());

                // Datos de carátula
                Caratula caratula5 = sdte5.addNewCaratula();
                caratula5.setRutEmisor(rutEmisor);
                caratula5.setRutEnvia(rutEnvia);
                Date dateFchResol5 = new SimpleDateFormat("yyyy-MM-dd").parse(fchResol);
                caratula5.xsetFchResol(FechaType.Factory.newValue(Utilities.fechaFormat.format(dateFchResol5)));

                caratula5.setNroResol(Integer.valueOf(nroResol));
                caratula5.xsetTmstFirmaEnv(now);

                // Subtotales
                SubTotDTE[] subtDtes5 = new SubTotDTE[1];
                SubTotDTE subt5 = SubTotDTE.Factory.newInstance();
                subt5.setTpoDTE(new BigInteger(tipoFactura.toString()));
                subt5.setNroDTE(new BigInteger(5));
                subtDtes5[0] = subt5;
                caratula5.setSubTotDTEArray(subtDtes5);

                eb5.setSetDTE(sdte5);
                eb5.setVersion(new BigDecimal("1.0"));
                envioBoletaDocument5.setEnvioBOLETA(eb5)

                opts = new XmlOptions();
                opts.setSaveImplicitNamespaces(namespaces);
                opts.setLoadSubstituteNamespaces(namespaces);
                opts.setSavePrettyPrint();
                opts.setSavePrettyPrintIndent(0);

                try {
                //envioBoletaDocument1 = EnvioBOLETADocument.Factory.parse(envioBoletaDocument1.newInputStream(opts), opts);
                } catch (Exception e) {
                logger.warn("Error al parsear XML");
                return
                }
                uri = boleta5.getDocumento().getID();
                boleta5.getDocumento().xsetTmstFirma(now);

                uri = "#" + uri;

                logger.warn("URI: " + uri)

                ByteArrayOutputStream out5 = new ByteArrayOutputStream();
                envioBoletaDocument5.save(new File(resultS + "BOLPDF" + tipoFactura + "-5-sinfirma.xml"), opts);
                envioBoletaDocument5.save(out5, opts);

                Document doc55 = XMLUtil.parseDocument(out5.toByteArray());

                byte[] salida5 = Signer.sign(doc55, uri, key, cert, uri, "Documento");
                doc55 = XMLUtil.parseDocument(salida5);

                if (Signer.verify(doc55, "Documento")) {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5.xml");
                Files.write(path, salida5);
                logger.warn("Factura "+path+" folio "+folio+" generada OK");
                } else {
                Path path = Paths.get(resultS + "BOLPDF" + tipoFactura + "-5-mala.xml");
                Files.write(path, salida5);
                logger.warn("Error al generar boleta folio "+folio);
                }
                // *****************************************************************


            </script>
            <!-- Registro de DTE en base de datos y generación de PDF -->

            <!--set field="fiscalTaxDocumentTypeEnumId" value="Ftdt-${tipoFacturaS}"/-->
            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-1.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-1.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-2.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-2.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-3.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-3.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-4.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-4.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <set field="xml1" value="${resultS}BOLPDF${tipoFactura}-5.xml"/>
            <set field="pdf1" value="${pathPdf}BOLPDF${tipoFactura}-5.pdf"/>
            <service-call name="mchile.DTEServices.genera#PDF" in-map="[pdf:pdf1, dte:xml1, activeOrgId:activeOrgId, boleta:true]" out-map="context"/>

            <!-- Creación de registro en FiscalTaxDocument -->
            <!--entity-find-one entity-name="mchile.dte.FiscalTaxDocument" value-field="dteField" for-update="true">
                <field-map field-name="fiscalTaxDocumentTypeEnumId" from="fiscalTaxDocumentTypeEnumId"/>
                <field-map field-name="fiscalTaxDocumentNumber" from="folio"/>
            </entity-find-one>

            <set field="dteField.issuerPartyId" from="activeOrgId"/>
            <if condition="rutReceptor != '66666666-6'"><then>
                <set field="dteField.receiverPartyId" from="receiverPartyId"/>
                <set field="dteField.receiverPartyIdTypeEnumId" value="PtidNationalTaxId"/>
            </then></if>
            <set field="dteField.fiscalTaxDocumentStatusEnumId" value="Ftdt-Issued"/>
            <set field="dteField.fiscalTaxDocumentSentStatusEnumId" value="Ftdt-NotSent"/>
            <set field="dteField.invoiceId" from="invoiceId"/-->

            <!--script>
                Date date = new Date();
                Timestamp ts = new Timestamp(date.getTime());
            </script>
            <set field="dteField.date" from="ts"/>

            <entity-update value-field="dteField"/>
            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Xml', contentLocation:xml, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="createMap" from="[fiscalTaxDocumentId:dteField.fiscalTaxDocumentId, fiscalTaxDocumentContentTypeEnumId:'Ftdct-Pdf', contentLocation:pdf, contentDate:ts]"/>
            <service-call name="create#mchile.dte.FiscalTaxDocumentContent" out-map="context" in-map="createMap"/>

            <set field="fiscalTaxDocumentId" from="dteField.fiscalTaxDocumentId"/-->

        </actions>
    </service>


    <service verb="load" noun="Xml">
        <description>
            Carga XML directo en la BD
        </description>
        <in-parameters>
            <parameter name="filename" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="fiscalTaxDocumentId" required="true"/>
            <parameter name="fiscalTaxDocumentContentTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <set field="archivo" from="filename.getName()"/>

            <entity-find entity-name="mchile.dte.FiscalTaxDocumentContent" list="ftdtList">
                <econdition field-name="fiscalTaxDocumentId" from="fiscalTaxDocumentId"/>
                <econdition field-name="fiscalTaxDocumentContentTypeEnumId" from="fiscalTaxDocumentContentTypeEnumId"/>
            </entity-find>

            <iterate list="ftdtList" entry="ftdtEntry">
                <set field="ftdtEntry.contentData" from="filename.get()"/>
                <entity-update value-field="ftdtEntry"/>
            </iterate>
        </actions>
    </service>

</services>