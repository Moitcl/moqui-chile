/*
 * This software is in the public domain under CC0 1.0 Universal plus a
 * Grant of Patent License.
 *
 * To the extent possible under law, the author(s) have dedicated all
 * copyright and related and neighboring rights to this software to the
 * public domain worldwide. This software is distributed without any
 * warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication
 * along with this software (see the LICENSE.md file). If not, see
 * <http://creativecommons.org/publicdomain/zero/1.0/>.
 */
apply plugin: 'groovy'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def componentNode = parseComponent(project)
version = componentNode.'@version'
def jarBaseName = componentNode.'@name'
def moquiDir = projectDir.parentFile.parentFile.parentFile
def frameworkDir = file(moquiDir.absolutePath + '/framework')

// to run use "gradle dependencyUpdates"
apply plugin: 'com.github.ben-manes.versions'
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies { classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0' }
}
dependencyUpdates.resolutionStrategy = { componentSelection { rules -> rules.all { ComponentSelection selection ->
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    if (rejected) selection.reject('Release candidate')
} } }

repositories {
    flatDir name: 'localLib', dirs: frameworkDir.absolutePath + '/lib'
    flatDir name: 'librepo', dirs: projectDir.absolutePath + '/librepo'
    mavenCentral()
    //maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    compile project(':framework')
    compile project(':moqui-util')
    testCompile project(':framework').configurations.testCompile.allDependencies

    // also required in moqui-fop
    compile ('org.apache.xmlgraphics:fop-core:2.6') {
        exclude group: 'xalan'
        exclude group: 'xml-apis' // can't exclude batik-ext but has some same classes as xml-apis so exclude that
        exclude group: 'org.apache.ant'
        exclude group: 'javax.servlet'
        exclude group: 'javax.media'
        exclude group: 'com.sun.media'
    }

    // Transbank
    //compile 'com.github.transbankdevelopers:transbank-sdk-java:1.5.1'

    // DTE (CÃ³digo PDF-417), also required in moqui-fop
    compile module('net.sf.barcode4j:barcode4j:2.1')
    compile module('net.sf.barcode4j:barcode4j-fop-ext:2.1')
    compile 'uk.org.okapibarcode:okapibarcode:0.3.0'

    // XML SOAP (RemoteXmlsoapServiceRunner)
    compile 'javax.xml.soap:javax.xml.soap-api:1.4.0'
    compile 'com.sun.xml.messaging.saaj:saaj-impl:1.4.0'

    // DTE TODO: test
    compile 'org.apache.james:apache-mime4j:0.6'
    compile 'avalon-framework:avalon-framework-api:4.2.0'
    compile 'commons-io:commons-io:1.4'
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'net.sf.offo:fop-hyph:2.0'
    compile 'org.apache.httpcomponents:httpclient:4.5.13'
    compile 'org.apache.httpcomponents:httpcore:4.4.14'
    compile 'org.apache.httpcomponents:httpmime:4.5.3'
    //compile 'org.apache.httpcomponents:httpclient5:5.1.2'
    //compile 'org.apache.httpcomponents:httpcore5:5.1.2'
    //compile 'com.itextpdf:itextpdf:5.3.5'
    //compile name: 'jargs'
    compile 'org.jdom:jdom:1.1.3'
    compile 'javax.xml.soap:javax.xml.soap-api:1.4.0'
    compile 'com.sun.xml.messaging.saaj:saaj-impl:1.4.0'
    //compile 'jaxb:jsr173_api:1.0'
    //compile ':not-yet-commons-ssl:0.3.11'
    ////compile 'not-yet-commons-ssl:not-yet-commons-ssl:0.3.13' (0.3.11 is not available at jcenter)
    //compile name: 'OpenLibsDte' // TODO: Genera error al compilar tests
    compile name: 'json-simple'
    //compile ':serializer:2.7.0'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'xalan:xalan:2.7.0'

}

task cleanLib(type: Delete) { delete fileTree(dir: projectDir.absolutePath+'/lib', include: '*') }
clean.dependsOn cleanLib

task copyDependencies { doLast {
    copy { from (configurations.runtime - project(':framework').configurations.runtime - project(':framework').jar.archivePath)
        into file(projectDir.absolutePath + '/lib') }
} }
copyDependencies.dependsOn cleanLib
jar.dependsOn copyDependencies

check.dependsOn.remove(test)

jar {
    destinationDir = file(projectDir.absolutePath + '/lib')
    baseName = jarBaseName
}

test {
    dependsOn cleanTest
    include '**/*Tests.class'
    include '**/*BasicFlow.class'

    systemProperty 'moqui.runtime', moquiDir.absolutePath + '/runtime'
    systemProperty 'moqui.conf', 'conf/MoquiDevConf.xml'
    systemProperty 'moqui.init.static', 'true'
    maxHeapSize = "512M"

    testLogging.showStandardStreams = true

    classpath += files(sourceSets.main.output.classesDirs)
    // filter out classpath entries that don't exist (gradle adds a bunch of these), or ElasticSearch JarHell will blow up
    classpath = classpath.filter { it.exists() }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
}
